import{_ as l,X as d,Y as r,Z as e,$ as a,a0 as n,a1 as i,D as c}from"./framework-dfc585d8.js";const o="/JavaPark/assets/nginx-download-a79be15f.png",t="/JavaPark/assets/tar-3d9fde20.png",p="/JavaPark/assets/nginx-config-4d00d16c.png",u="/JavaPark/assets/zlib-6b0de4dd.png",g="/JavaPark/assets/make-27dfcae9.png",v="/JavaPark/assets/make-install-0b76e754.png",b="/JavaPark/assets/start-bc3c7a67.png",h="/JavaPark/assets/nginx-pre-e7159e71.png",m="/JavaPark/assets/stop-899b2b02.png",x="/JavaPark/assets/systemctl-nginx-5c489813.png",k={},f=e("p",null,"作者：村雨遥",-1),_={href:"https://cunyu1943.github.io/JavaPark",target:"_blank",rel:"noopener noreferrer"},N=i('<blockquote><p>吾生也有涯，而知也无涯。</p></blockquote><hr><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><h3 id="什么是-nginx" tabindex="-1"><a class="header-anchor" href="#什么是-nginx" aria-hidden="true">#</a> 什么是 Nginx</h3><p><code>Nginx</code> 是一个跨平台、轻量级、高性能的 <code>HTTP</code> 和反向代理 <code>web</code> 服务器，而且同时也提供了 <code>IMAP/POP3/SMTP</code> 服务。<code>Nginx</code> 最高能够支持高到 50000 个并发连接数的相应，在最高并发连接的情况下，可以作为 <code>Apache</code> 服务的一个替代品。</p><p><code>Nginx</code> 作为负载均衡服务，既可以在内部直接支持 <code>Redis</code> 和 <code>PHP</code> 程序对外进行服务，也可以作为支持 <code>HTTP</code> 代理服务对外进行支持。<code>Nginx</code> 是基于 C 语言来进行开发的，所以无论是系统资源开销还是 CPU 使用率都较低，也因此 <code>Nginx</code> 性能较强。</p><h3 id="nginx-的版本" tabindex="-1"><a class="header-anchor" href="#nginx-的版本" aria-hidden="true">#</a> Nginx 的版本</h3><p>常用版本主要分为四大阵营：</p><ol><li><code>Nginx</code> 开源版</li><li><code>Nginx plus</code> 商业版</li><li><code>Openresty</code></li><li><code>Tengine</code></li></ol><h2 id="下载" tabindex="-1"><a class="header-anchor" href="#下载" aria-hidden="true">#</a> 下载</h2><p>上一节中我们讲了 <code>Nginx</code> 的一些简单知识，接下来就来看看，如何在我们的服务器中安装 <code>Nginx</code>。下文中，我们均以 <code>Nginx</code> 开源版做示范。</p><p>前往 <code>Nginx</code> 官方地址下载对应的版本，因为这里主要是在服务器中安装，所以是以 <code>Linux（Centos）</code> 版本来演示。</p>',12),P={href:"http://nginx.org/en/download.html",target:"_blank",rel:"noopener noreferrer"},y=i('<p><img src="'+o+`" alt="" style="zoom:50%;"></p><h2 id="编译安装与依赖检查" tabindex="-1"><a class="header-anchor" href="#编译安装与依赖检查" aria-hidden="true">#</a> 编译安装与依赖检查</h2><p>将下载后的 <code>Nginx</code> 压缩包进行解压，解压命令如下。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> <span class="token parameter variable">-zxf</span> 压缩包名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+t+`" alt=""> 进入解压缩后的 <code>Nginx</code> 所在文件夹，然后执行 <code>configure</code> 脚本，这时候就会检查安装 <code>Nginx</code> 所需的依赖，这里可能会因为你的服务器中没有事先安装所需依赖而导致报错。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> nginx-1.22.0
<span class="token function">sh</span> configure
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+p+`" alt=""></p><p>这里例举几个安装时可能会遇到的错误：</p><ol><li><strong>C 编译器缺失</strong></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>error: C compiler cc is not found.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要解决这个错误，只需要安装 <code>gcc</code> 编译器即可。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> gcc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li><strong>PCRE Library 缺失</strong></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>error: the HTTP rewrite module requires the PCRE library.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样，为了解决这个这个问题，需要安装 <code>pcre-devel</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> pcre pcre-devel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><strong>zlib Library 缺失</strong></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>error: the HTTP <span class="token function">gzip</span> module requires zlib library.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解决方法，安装 <code>zlib</code> 库。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> zlib zlib-devel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+u+`" alt=""></p><p>如果出现以上的提示信息，则说明可以进行下一步，此时直接执行编译安装命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">make</span>

<span class="token function">make</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+g+'" alt=""></p><p><img src="'+v+`" alt=""></p><h2 id="nginx-启停" tabindex="-1"><a class="header-anchor" href="#nginx-启停" aria-hidden="true">#</a> Nginx 启停</h2><p>如果顺利执行完 <code>configure</code> 脚本，则会在服务器终端打印出以上 <code>Nginx</code> 相关的配置。</p><p>进入 <code>Nginx</code> 安装后的目录 <code>/usr/local/nginx/sbin</code>，然后利用以下命令来进行 <code>Nginx</code> 的启动。</p><ol><li><strong>启动</strong></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+b+'" alt=""></p><p>然后在浏览器中访问服务器的 <code>IP</code> 地址，如果出现以下界面，则说明我们的 <code>Nginx</code> 安装并启动成功了！</p><p><img src="'+h+`" alt=""></p><ol start="2"><li><strong>快速停止</strong></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./nginx <span class="token parameter variable">-s</span> stop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>停止后，再到浏览器中去访问服务器地址，就会出现以下情况。</p><p><img src="`+m+`" alt=""></p><ol start="3"><li><strong>关闭前完成已接受的连接请求</strong></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./nginx <span class="token parameter variable">-s</span> quit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li><strong>重新加载配置</strong></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./nginx <span class="token parameter variable">-s</span> reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过这种方式，可以实现 <code>Nginx</code> 的无感重启。也就是说，当我们需要修改 <code>Nginx</code> 的配置时，不希望通过停止 <code>Nginx</code> 然后再启动的方式，此时就可以通过这个命令来实现。</p><h2 id="防火墙" tabindex="-1"><a class="header-anchor" href="#防火墙" aria-hidden="true">#</a> 防火墙</h2><h3 id="关闭防火墙" tabindex="-1"><a class="header-anchor" href="#关闭防火墙" aria-hidden="true">#</a> 关闭防火墙</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl stop firewall.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="禁止防火墙开机启动" tabindex="-1"><a class="header-anchor" href="#禁止防火墙开机启动" aria-hidden="true">#</a> 禁止防火墙开机启动</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl disable firewall.service
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="放行端口" tabindex="-1"><a class="header-anchor" href="#放行端口" aria-hidden="true">#</a> 放行端口</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">80</span>/tcp <span class="token parameter variable">--permanent</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="重启防火墙" tabindex="-1"><a class="header-anchor" href="#重启防火墙" aria-hidden="true">#</a> 重启防火墙</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>firewall-cmd reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="安装为系统服务" tabindex="-1"><a class="header-anchor" href="#安装为系统服务" aria-hidden="true">#</a> 安装为系统服务</h2><ol><li><strong>添加系统服务</strong></li></ol><p>在 <code>/usr/lib/systemd/system</code> 目录下新增一个文件，命名为 <code>nginx.service</code>，然后将以下内容添加到该文件中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>nginx - high performance web server
<span class="token assign-left variable">Documentation</span><span class="token operator">=</span>http://nginx.org/en/docs/
<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target remote-fs.target nss-lookup.target

<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">Type</span><span class="token operator">=</span>forking
<span class="token assign-left variable">PIDFile</span><span class="token operator">=</span>/usr/local/nginx/logs/nginx.pid
<span class="token assign-left variable">ExecStartPre</span><span class="token operator">=</span>/usr/local/nginx/sbin/nginx <span class="token parameter variable">-t</span> <span class="token parameter variable">-c</span> /usr/local/nginx/conf/nginx.conf
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/local/nginx/sbin/nginx <span class="token parameter variable">-c</span> /usr/local/nginx/conf/nginx.conf
<span class="token assign-left variable">ExecReload</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-s</span> HUP <span class="token variable">$MAINPID</span>
<span class="token assign-left variable">ExecStop</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-s</span> QUIT <span class="token variable">$MAINPID</span>
<span class="token assign-left variable">PrivateTmp</span><span class="token operator">=</span>true

<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>重载系统服务</strong></li></ol><p>接着执行以下命令重新加载系统服务。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl daemon-reload
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li><strong>启停 Nginx</strong></li></ol><p>接着就可以分别利用下面的命令来启动和关停 <code>Nginx</code> 服务了。</p><ul><li>启动</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl start nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>关停</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl stop nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>查看当前状态</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>systemctl status nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+x+'" alt=""></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>以上就是 <code>Nginx</code> 的简介和如何在 Linux 中安装 <code>Nginx</code> 的相关内容了，如果您觉得本文对您有所帮助，那就来个一键三连支持吧！</p>',69);function T(I,J){const s=c("ExternalLinkIcon");return d(),r("div",null,[f,e("p",null,[a("博客："),e("a",_,[a("JavaPark"),n(s)])]),N,e("blockquote",null,[e("p",null,[e("a",P,[a("http://nginx.org/en/download.html"),n(s)])])]),y])}const z=l(k,[["render",T],["__file","20220901-intro-install.html.vue"]]);export{z as default};
