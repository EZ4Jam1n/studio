import{_ as t,X as e,Y as p,Z as n,$ as a,a0 as o,a1 as c,D as l}from"./framework-dfc585d8.js";const u={},i=n("p",null,"作者：村雨遥",-1),r={href:"https://cunyu1943.github.io/JavaPark",target:"_blank",rel:"noopener noreferrer"},k=c(`<blockquote><p>吾生也有涯，而知也无涯。</p></blockquote><hr><h2 id="依赖注入的方式" tabindex="-1"><a class="header-anchor" href="#依赖注入的方式" aria-hidden="true">#</a> 依赖注入的方式</h2><p>如果要想一个类中传递数据，我们常用的可以通过构造方法来传递，而另一种就是常用的 <code>getter\\setter</code> 方法。</p><p>之前说过依赖注入描述了容器中 Bean 和 Bean 之间的依赖关系，但如果 Bean 在运行中书需要的不是对象，而是其他类型的数据比如数字或者字符串呢？</p><p>因此，依赖注入也提供了其他类型数据的注入方式，这里同样可以分为 <code>setter</code> 注入和构造器注入的方式。</p><h2 id="setter-注入" tabindex="-1"><a class="header-anchor" href="#setter-注入" aria-hidden="true">#</a> setter 注入</h2><p>首先是引用类型的注入。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeroServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">HeroService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">HeroDao</span> heroDao<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hero service attack&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeroDao</span><span class="token punctuation">(</span><span class="token class-name">HeroDao</span> heroDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>heroDao <span class="token operator">=</span> heroDao<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着在 Spring 配置文件 <code>applicationContext.xml</code> 中，使用 <code>property</code> 标签的 <code>ref</code> 属性注意引用类型的对象即可。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>heroDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.cunyu.dao.impl.HeroDaoImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>heroService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.cunyu.service.impl.HeroServiceImpl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>heroDao<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>heroDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function d(v,m){const s=l("ExternalLinkIcon");return e(),p("div",null,[i,n("p",null,[a("博客："),n("a",r,[a("JavaPark"),o(s)])]),k])}const b=t(u,[["render",d],["__file","20220203-di.html.vue"]]);export{b as default};
