import{_ as n,X as l,Y as s,Z as e,$ as a,a0 as o,a1 as t,D as i}from"./framework-dfc585d8.js";const d="/JavaPark/assets/database-overview-93920d01.png",c="/JavaPark/assets/db-dbms-00ce042d.png",p="/JavaPark/assets/db-treeding-e1ea704b.png",h="/JavaPark/assets/db-engine-rank-a15ce11c.png",g="/JavaPark/assets/rdbms-d56d812a.png",u={},b=e("p",null,"作者：村雨遥",-1),m={href:"https://cunyu1943.github.io/JavaPark",target:"_blank",rel:"noopener noreferrer"},_=t('<blockquote><p>吾生也有涯，而知也无涯。</p></blockquote><p>之前在 Java 基础部分的学习中，我们更多的是写一些和控制台进行交互的小程序，而这些小程序有个特点就是：一旦程序终止，那么程序中的数据就消失了。为了满足存储数据的需求，我们可以选择将程序中的数据保存到文本文件或者数据库中。而今天，我们就来看看数据库的简单知识，为后续基于数据库的开发打下基础。</p><h2 id="为什么使用数据库" tabindex="-1"><a class="header-anchor" href="#为什么使用数据库" aria-hidden="true">#</a> 为什么使用数据库</h2><ul><li><strong>持久化</strong></li></ul><p>数据保存后，掉电也可以在存储设备中进行使用，是一种将内存中数据保存到硬盘中加“固化”，这个过程大都通过各类数据库来完成。</p><ul><li><strong>持久化的作用</strong></li></ul><p>将内存中的数据存储在关系型据库中，也可以存到其他存储介质，如磁盘文件、XML 数据文件、Json 数据文件中。</p><p><img src="'+d+'" alt=""></p><ul><li><strong>实例</strong></li></ul><h2 id="数据库与数据库管理系统" tabindex="-1"><a class="header-anchor" href="#数据库与数据库管理系统" aria-hidden="true">#</a> 数据库与数据库管理系统</h2><h3 id="数据库相关概念" tabindex="-1"><a class="header-anchor" href="#数据库相关概念" aria-hidden="true">#</a> 数据库相关概念</h3><ul><li><strong>DB</strong></li></ul><p>即数据库（Database），用于存储数据的“仓库”，本质上是一个文件系统，用于保存一系列有组织的数据。</p><ul><li><strong>DBMS</strong></li></ul><p>即数据库管理系统（Database Management System），用于操纵和管理数据库的大型软件。主要用于数据库的创建、使用以及维护，通过统一的管理和控制，使得用户可以通过该系统来访问数据库中表内的数据。</p><ul><li><strong>SQL</strong></li></ul><p>即结构化查询语言（Structured Query Language），用来专门和数据库进行通信的编程语言，定义了一套操作关系型数据库统一标准。</p><h3 id="数据库与数据库管理系统的关系" tabindex="-1"><a class="header-anchor" href="#数据库与数据库管理系统的关系" aria-hidden="true">#</a> 数据库与数据库管理系统的关系</h3><p>一般而言，数据库管理系统可以管理多个数据库。我们一般会针对一个应用就创建一个对应的数据库，而为了保存应用中的数据，就会在数据库中创建多个表，用于保存对应实体用户的数据。</p><p>而数据库管理系统和数据库的关系就类似于视频播放器和视频的关系，其中数据库管理系统对应视频播放器，而数据库就类比于视频。通过数据库管理系统我们可以操作数据库，而通过视频播放器我们可以打开视频。</p><p><img src="'+c+'" alt=""></p><h3 id="常见数据库管理系统排名" tabindex="-1"><a class="header-anchor" href="#常见数据库管理系统排名" aria-hidden="true">#</a> 常见数据库管理系统排名</h3>',22),S={href:"https://db-engines.com/en/ranking#/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://db-engines.com/en/ranking_trend#/",target:"_blank",rel:"noopener noreferrer"},f=t('<p><img src="'+p+'" alt=""></p><p><img src="'+h+'" alt=""></p><p>以上两张图片是截止 2022 年 8 月份市场上各大数据库的市场占有率，可以看到 MySQL 无论是在现在，还是从历年的排名来看，排名都是较为靠前的。所以不缺乏使用 MySQL 的使用场景，也从侧面说明学好 MySQL 尤其重要。</p><h2 id="rdbms-和-非-rdbms" tabindex="-1"><a class="header-anchor" href="#rdbms-和-非-rdbms" aria-hidden="true">#</a> RDBMS 和 非 RDBMS</h2><p>RDBMS，即关系型数据库，是当前 DBMS 的主流，其中以 Oracle、MySQL 和 SQL Server 最为典型。</p><h3 id="关系型数据库-rdbms" tabindex="-1"><a class="header-anchor" href="#关系型数据库-rdbms" aria-hidden="true">#</a> 关系型数据库（RDBMS）</h3><ul><li><strong>实质</strong></li></ul><p>关系型数据库是最古老的数据库类型，其模型是将复杂的数据结构归结为简单的二元关系，即二维表格形式，如下图形式。</p><p><img src="'+g+'" alt=""></p><p>关系型数据库以行（<code>row</code>）和列（<code>column</code>）的形式存储，两者共同组成表（<code>table</code>），而一个数据库（<code>database</code>）则通常包含着一系列的表（<code>table</code>）。</p><ul><li><strong>特点</strong></li></ul><ol><li>使用表存储数据，格式统一，方便维护。</li><li>使用 SQL 语言操作，标准统一，方便使用。</li></ol><p>而表之间的数据记录存在着关系（<code>relationship</code>），对应着日常生活中各种实体之间的联系，这种联系也用<strong>关系模型</strong>来表示。而关系型数据库，就是建立在<strong>关系模型</strong>上的数据库。</p><ul><li><strong>优势</strong></li></ul><ol><li><strong>支持复杂查询</strong>：可以利用 SQL 语句方便地在一个表及多个表之间做非常复杂的数据查询工作。</li><li><strong>支持事务</strong>：使得对于安全性能较高的数据访问要求也得以实现。</li></ol><h3 id="非关系型数据库-非-rdbms" tabindex="-1"><a class="header-anchor" href="#非关系型数据库-非-rdbms" aria-hidden="true">#</a> 非关系型数据库（非 RDBMS）</h3><p>非关系型数据库，相对于传统的关系型数据库功能较少，基于键值对来进行数据的存储，无需经过 SQL 层的解析，而且减少关系型数据库中了不常用的功能，所以性能相比于关系型数据库更高。</p><p>相比于关系型数据库，常见的非关系型数据库有如下晋中类型：</p><ul><li><p>键值型数据库</p></li><li><p>文档型数据库</p></li><li><p>搜索引擎数据库</p></li><li><p>列式数据库</p></li><li><p>图形数据库</p></li></ul><ol><li><strong>键值型数据库</strong></li></ol><p>键值型数据库通过 <code>key-value</code> 的形式来存储数据，其中 <code>key</code> 和 <code>value</code> 既可以是简单的对象，也能是复杂的对象。其中 <code>key</code> 作为唯一的标识符，所以是不允许重复的，因此优点也很明显，查找速度极快，但缺点是无法像关系型数据库一样使用条件来进行数据过滤。如果你不知道要查找的数据的对应的 <code>key</code>，那就必须去遍历整个数据库所有的键，消耗大量计算。</p><p>当前，Redis 可以说是最流行的键值型数据库，最经典的使用场景就是作为<strong>内存缓存</strong>。</p><ol start="2"><li><strong>文档型数据库</strong></li></ol><p>文档型数据库可以用来获取文档，一般以 <code>XML</code>、<code>JSON</code> 等格式存放。在数据库中文档是最基本的处理信息单位，一个文档就相当于 MySQL 数据库中的一条记录，类似于键值型数据库中对应的 <code>value</code>。当前最流行的文档型数据库是 MongoDB，除此之外，还有 <code>CouchDB</code> 等。</p><ol start="3"><li><strong>搜索引擎数据库</strong></li></ol><p>关系型数据库中为了提升检索效率，通常会采用索引，但是针对全文索引的效率却比较低。搜索引擎数据库是搜索引擎领域采用的数据存储形式，其核心原理是“倒排索引”。搜索引擎通过爬取大量的数据，然后以特定的格式进行存储，从而保证了检索时性能最优化。当前主流的搜索引擎数据库主要有：Elasticsearch、Solr、Splunk 等。</p><ol start="4"><li><strong>列式数据库</strong></li></ol><p>之所以叫列式数据库，主要是针对行式存储的数据库而言。列式数据库通过将数据以列的形式存储到数据库中，从而大量降低了数据的 IO。基于该特点，列式数据库通常用在分布式文件系统中，功能也比较有限，当前最典型的列式数据库为 HBase 等。</p><ol start="5"><li><strong>图形数据库</strong></li></ol><p>图形数据库用图这种数据结构存储了对象之间的关系，数据模式以节点和边（关系）来实现，用于高效解决复杂的关系问题，应用最多的是社交网络中人与人之间的关系。最常用的图形数据库有 Neo4j、InfoGrid 等。</p><p>利用图这种数据结构，将对象之间的关系进行存储。关系型数据库中，存储的一般都是关系比较明确的数据，对于关系较为复杂的数据，此时关系型数据库就有些力不从心了，此时，我们就可以采用图形数据库来进行存储。</p><h2 id="关系型数据库设计原则" tabindex="-1"><a class="header-anchor" href="#关系型数据库设计原则" aria-hidden="true">#</a> 关系型数据库设计原则</h2><p>关系型数据库中，最典型的数据结构就是数据表，而这些表的组成都是格式化的。通过将数据到表中之后，再将多个表存放到库中。因此一个数据库里边通常包含了多个表，而每个表都有且仅有一个名字，用于标识自己。表中的多个特性则定义了数据如何存储在表中，就像 Java 中的类设计，一个表就类似于一个类，表中的每一列特征对应类中的各个属性，每一行则对应由类所生成的一个对象。</p><p>通常，一个数据库和编程语言 Java 中一个类的关系映射如下，也就是我们常说的 ORM（<code>Object Relational Mapping</code>） 思想的体现：</p><table><thead><tr><th>数据库</th><th>Java</th></tr></thead><tbody><tr><td>一个表</td><td>一个类</td></tr><tr><td>一条记录</td><td>类中的一个对象</td></tr><tr><td>一个列</td><td>类中的一个属性</td></tr></tbody></table><h3 id="表、字段、记录" tabindex="-1"><a class="header-anchor" href="#表、字段、记录" aria-hidden="true">#</a> 表、字段、记录</h3><p><code>E-R（Entity-Relationship）</code> 模型中，最核心的三个概念分别是：</p><ul><li><strong>实体集</strong></li><li><strong>属性</strong></li><li><strong>联系集</strong></li></ul><p>一个实体集（<code>class</code>）对应着数据库中的一个表（<code>table</code>），一个实体（<code>instance</code>）则对应与数据库中的一行（<code>row</code>），也叫做一条记录（<code>record</code>）。一个属性（<code>attribute</code>）则对应于数据库表中的一列（<code>column</code>），也叫做一个字段（<code>field</code>）。</p><h3 id="表之间的关联关系" tabindex="-1"><a class="header-anchor" href="#表之间的关联关系" aria-hidden="true">#</a> 表之间的关联关系</h3><p>既然一个表之间往往对应中 Java 中的一个类，那么不同表之间肯定也像类与类之间一样存在或多或少的联系，而最常见的则主要可以分为如下几种：</p><ul><li><p><strong>一对一关联</strong></p></li><li><p><strong>一对多关联</strong></p></li><li><p><strong>多对多关联</strong></p></li></ul><ol><li><strong>一对一（one-to-one）</strong></li></ol><p>这种关系非常简单，而且实际应用中并不多，因为我们可以将存在一对一关系的两个表合并成一个表，而不用创建多个表。</p><p>通常，针对存在一对一关系的表，建表时通常遵循以下原则：</p><ul><li><strong>外键唯一</strong>：主表的主键和从表的外键形成主外键关系，要保证外键唯一。</li><li><strong>外键是主键</strong>：主表的主键和从表的主键共同形成主外键关系。</li></ul><ol start="2"><li><strong>一对多（one-to-many）</strong></li></ol><p>一对多关系建表原则：在从表（多方）中创建一个字段，字段作为外键指向主表（一方）的主键。</p><p>一个最常见的例子：一个学生存在着多门课程的成绩，因此学生表和成绩表之间的关系就是一对多的关系，我们可以在成绩表中创建一个字段（学号）作为外键，然后指向学生表的主键（学号），从而形成一对多的关系。</p><ol start="3"><li><strong>多对多</strong></li></ol><p>除开上述两种关系之外，还有一种关系就是多对多关系，要表示多对多关系，此时两个表是满足不了的，必须创建第三个表，通常也称为<strong>联接表</strong>。通过将多对多关系划分为两个一对多关系，从而将这两个表的主键都插入到联接表中。</p><p>一个最常见的例子如下，学生和课程之间就存在多对多关系，一个学生可以选多门课，而一门课也可以被多个学生选择，因此必须创建一个联接表，也即选课表，来将两者的多对多的关系进行划分，然后将学生表中的主键（学号）和课程表中的主键（课程编号）插入到选课表中，用于表示学生和课程之间的多对多关系。</p><h2 id="mysql-简介" tabindex="-1"><a class="header-anchor" href="#mysql-简介" aria-hidden="true">#</a> MySQL 简介</h2><h3 id="mysql-版本" tabindex="-1"><a class="header-anchor" href="#mysql-版本" aria-hidden="true">#</a> MySQL 版本</h3><p>就像 IntelliJ IDEA 一样，MySQL 也主要提供了两个不同的版本，一个是社区版（<code>MySQL Community Server</code>），而另一个则是商业版（<code>MySQL Enterprise Edition</code>）。其中，社区版是免费的，大家都可以免费使用，但是 <code>MySQL</code> 官方是不提供任何技术支持的。商业版则是需要付费才能使用，和社区版的最大区别就在于官方会为它提供技术支持。同时，商业版还有免费的 30 天试用期，如果你只是想体验一把，那么大可在这个时间范围内去摸索对比下社区版和商业版在使用过程中的一些体验。</p><h3 id="为什么选用-mysql" tabindex="-1"><a class="header-anchor" href="#为什么选用-mysql" aria-hidden="true">#</a> 为什么选用 MySQL</h3><p>主要归结于 MySQL 的如下特点：</p><ul><li>基于 C 和 C++ 编写，使用多种编译器进行测试，保证了代码的可移植性。</li><li>支持多种操作系统，如 Windows、Linux、macOS。</li><li>为多种编程语言提供了 API，如 Java、Python、C++ 等。</li><li>支持多线程，充分利用 CPU 资源，支持多用户。</li><li>优化的 SQL 查询算法，有效提高查询速度。</li><li>……</li></ul><h3 id="如何选择-mysql-oracle" tabindex="-1"><a class="header-anchor" href="#如何选择-mysql-oracle" aria-hidden="true">#</a> 如何选择 MySQL &amp; Oracle</h3><p>如果对于费用不是太敏感，而且对于性能和安全性有着更高的要求，那么推荐优先使用 Oracle。而由于 MySQL 体积小、速度快、成本低、源码开放等特点，许多互联网公司和中小型网站更喜欢选用 MySQL 作为网站数据库。</p>',60);function M(L,k){const r=i("ExternalLinkIcon");return l(),s("div",null,[b,e("p",null,[a("博客："),e("a",m,[a("JavaPark"),o(r)])]),_,e("blockquote",null,[e("p",null,[e("a",S,[a("https://db-engines.com/en/ranking#/"),o(r)])]),e("p",null,[e("a",y,[a("https://db-engines.com/en/ranking_trend#/"),o(r)])])]),f])}const Q=n(u,[["render",M],["__file","20220301-overview.html.vue"]]);export{Q as default};
