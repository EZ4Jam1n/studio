import{_ as l,X as t,Y as d,Z as a,$ as e,a0 as i,a1 as s,D as c}from"./framework-dfc585d8.js";const o={},r=a("p",null,"作者：村雨遥",-1),u={href:"https://cunyu1943.github.io/JavaPark",target:"_blank",rel:"noopener noreferrer"},p=s('<blockquote><p>吾生也有涯，而知也无涯。</p></blockquote><h2 id="什么是-git" tabindex="-1"><a class="header-anchor" href="#什么是-git" aria-hidden="true">#</a> 什么是 Git</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p><code>Git</code> 是一个分布式版本控制工具，而对应的，还有一种集中式版本控制工具，其中最为典型并被大家所熟知的产品就是 <code>SVN</code>.</p><p>其中，集中式版本控制工具的的核心是服务器，所有开发者在开始更新代码前，都必须从服务器中获取代码，然后各自开发，最后则是解决冲突。</p><h3 id="版本控制" tabindex="-1"><a class="header-anchor" href="#版本控制" aria-hidden="true">#</a> 版本控制</h3><p>所谓版本控制，就是一种用来记录文件内容变化，方便未来查阅特定修订情况的系统。版本控制最重要的一点就是可以记录文件的历史修改记录，方便用户随时查看历史版本，实现版本之间的切换。</p><h2 id="下载安装" tabindex="-1"><a class="header-anchor" href="#下载安装" aria-hidden="true">#</a> 下载安装</h2>',8),m={href:"https://npm.taobao.org/mirrors/git-for-windows/",target:"_blank",rel:"noopener noreferrer"},v=a("li",null,[a("p",null,"安装")],-1),g=s(`<ul><li>Linux：<code>sudo apt-get install git</code></li><li>Windows、macOS 通过官网下载安装包后进行安装即可；</li></ul><ol start="3"><li>设置</li></ol><p>安装完成后，设置署名和邮箱：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;user name&quot;</span>
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;example@email.com&quot;</span>
<span class="token comment"># 可选，让Git命令行显示颜色</span>
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> color.ui <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="版本库创建及管理" tabindex="-1"><a class="header-anchor" href="#版本库创建及管理" aria-hidden="true">#</a> 版本库创建及管理</h2><ol><li>如何创建版本库</li></ol><ul><li>先创建一个空文件夹，Windows 下不再介绍，Linux 以及 macOS 下可通过<code>mkdir gitlearn</code>命令创建；</li><li>通过<code>git init</code>将刚才创建的目录变为可管理的仓库;</li></ul><ol start="2"><li>如何将文件添加到版本库</li></ol>`,9),h={href:"http://readme.md",target:"_blank",rel:"noopener noreferrer"},b=a("li",null,[a("p",null,[e("用"),a("code",null,"git add"),e("命令将文件添加到仓库；")])],-1),k=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 添加单一文件</span>
$ <span class="token function">git</span> <span class="token function">add</span> readme.md
<span class="token comment"># 添加所有文件</span>
$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>用<code>git commit</code>将文件提交到仓库；</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在刚才创建的空文件夹中，添加你自己的文件，以readme.md为例；</span>
$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;this is a readme.md file.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>用<code>git add</code>命令将文件添加到仓库；</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 添加单一文件</span>
$ <span class="token function">git</span> <span class="token function">add</span> readme.md
<span class="token comment"># 添加所有文件</span>
$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>用<code>git commit</code>将文件提交到仓库；</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;this is a readme.md file.&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>如何查看仓库修改的内容</li></ol><ul><li><p>用<code>git status</code>查看仓库当前状态；</p></li><li><p>用<code>git diff filename</code>查看文件具体修改的内容；</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> status
$ <span class="token function">git</span> <span class="token function">diff</span> readme.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>git log</code>查看最近到最远的提交日志</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>回退之前的版本，先用<code>git log</code>查看提交历史，以确定 commit_id，回退后，当想要重返未来版本时，用<code>git reflog</code>查看命令历史，从而确定重返版本 commit_id，<code>HEAD</code>指向当前版本，为了在版本的历史之间穿梭，使用命令<code>git resrt --hard commit_id</code></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>直接丢弃工作区的某文件修改内容时，使用命令<code>git checkout -- filename</code></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout -- readme.md
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>删除文件，先在工作区将文件删除后，然后使用命令<code>git rm</code>将版本库中文件删除，然后通过<code>git commit</code>提交</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> <span class="token function">rm</span> readme.md
$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;delete readme.md&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库" aria-hidden="true">#</a> 远程仓库</h2><ol><li>本地 Git 和远程 Github 相连接，可以进行如下操作：</li></ol><ul><li><p>确定<code>.ssh</code>目录下是否存在文件<code>id_rsa</code>和<code>id_rsa.pub</code>，有则复制<code>id_rsa.pub</code>中内容明将其添加到 Github 中的 SSH Key，建立两者联系，可以在本地管理，</p></li><li><p>不存在则通过如下命令生成；</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">&quot;example@email.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>如何添加远程仓库</li></ol><ul><li>在本地通过如下命令建立本地仓库与远程仓库进行管理，然后就可以将本地仓库内容推送到 Github 仓库；</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:cunyu1943/LeetCode.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>从远程仓库克隆岛本地：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> clone https://github.com/cunyu1943/LeetCode.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>将本地仓库内容推送到远程仓库；</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 第一次推送</span>
$ <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
<span class="token comment"># 之后的推送</span>
$ <span class="token function">git</span> push origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理" aria-hidden="true">#</a> 分支管理</h2><ol><li>创建并切换分支</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> switch <span class="token parameter variable">-c</span> dev
<span class="token comment"># 等价命令</span>
$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev
<span class="token comment"># 等价命令</span>
$ <span class="token function">git</span> branch dev
$ <span class="token function">git</span> checkout dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),f=a("ol",{start:"2"},[a("li",null,[e("查看当前分支，前边标有"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"∗")]),a("annotation",{encoding:"application/x-tex"},"*")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.4653em"}}),a("span",{class:"mord"},"∗")])])]),e("代表当前分支，切换回"),a("code",null,"master"),e("分支；")])],-1),x=s(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> branch
$ <span class="token function">git</span> checkout/switch master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>将<code>dev</code>分支合并到<code>master</code>分支；</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> merge dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>删除分支；</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> branch <span class="token parameter variable">-d</span> dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>强制删除未合并分支；</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> branch <span class="token parameter variable">-D</span> dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li>查看分支合并图</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> log <span class="token parameter variable">--graph</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="多人协作" tabindex="-1"><a class="header-anchor" href="#多人协作" aria-hidden="true">#</a> 多人协作</h2><ol><li><p>查看远程库信息：<code>git remote -v</code>；</p></li><li><p>本地新建分支若不推送到远程，则对其他人不可见；</p></li><li><p>本地推送到远程库，<code>git push origin branch-name</code>，若推送失败，则用<code>git pull</code>抓取远程新提交；</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> push origin master
<span class="token comment"># 若推送失败，则先执行如下命令</span>
$ <span class="token function">git</span> pull
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>本地创建和远程分支对应分支，<code>git checkout -b branch-name origin/branch-name</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> dev origin/dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>建立本地分支和远程分支的关联，<code>git branch --set-upstream branch-name origin/branch-name</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> branch --set-upstream dev origin/dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li>从远程抓取分支则使用<code>git pull</code>，若有冲突，则先解决处理后再处理；</li></ol><hr><h2 id="标签管理" tabindex="-1"><a class="header-anchor" href="#标签管理" aria-hidden="true">#</a> 标签管理</h2><ol><li><p>切换到需要打标签的分支<code>git switch branch-name</code>；</p></li><li><p>打标签并查看；</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 打一个名为&quot;v1.0&quot;的标签</span>
$ <span class="token function">git</span> tag v1.0
<span class="token comment"># 查看所有标签</span>
$ <span class="token function">git</span> tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>查看标签信息，<code>git show &lt;tagname&gt;</code>；</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> show v1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>创建带有说明的标签，用<code>-a</code>打标签名，<code>-m</code>指定说明文字；</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> tag <span class="token parameter variable">-a</span> v1.0 <span class="token parameter variable">-m</span> <span class="token string">&quot;version 1.0 released&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5"><li>删除标签，本地使用<code>git tag -d &lt;tagname&gt;</code>，远程则使用<code>git push origin :refs/tags/&lt;tagname&gt;</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除本地标签</span>
$ <span class="token function">git</span> tag <span class="token parameter variable">-d</span> v30.0
<span class="token comment"># 删除远程标签</span>
$ <span class="token function">git</span> push origin :refs/tags/v30.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>将标签推送到远程<code>git push origin &lt;tagname&gt;</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 推送某一标签</span>
$ <span class="token function">git</span> push origin v1.0
<span class="token comment"># 推送所有标签</span>
$ <span class="token function">git</span> push origin <span class="token parameter variable">--tags</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="建立-github-和-gitee-共同远程连接" tabindex="-1"><a class="header-anchor" href="#建立-github-和-gitee-共同远程连接" aria-hidden="true">#</a> 建立 Github 和 Gitee 共同远程连接</h2><ol><li>删除某一关联的远程库，<code>git remote rm &lt;basename&gt;</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> remote <span class="token function">rm</span> origin
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>关联 Gitee 远程库，<code>git remote add &lt;basename&gt; git@https://gitee.com/&lt;username&gt;/&lt;respName&gt;.git</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> remote <span class="token function">add</span> gitee https://gitee.com/cunyu1943/LeetCode.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>关联 Github 远程库，<code>git remote add &lt;basename&gt; https://github.com/&lt;username&gt;/&lt;respName&gt;.git</code></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> remote <span class="token function">add</span> github https://github.com/cunyu1943/LeetCode.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>推送到 Gitee 和 Github</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 推送到Gitee</span>
$ <span class="token function">git</span> push gitee master
<span class="token comment"># 推送到Github</span>
$ <span class="token function">git</span> push github master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="其他小技巧" tabindex="-1"><a class="header-anchor" href="#其他小技巧" aria-hidden="true">#</a> 其他小技巧</h2><ol><li>忽略特殊文件</li></ol><p>此时需要编写<code>.gitignore</code>文件，文件要放到版本库中，且可以对<code>.gitignore</code>进行版本管理；</p><ol start="2"><li>配置命令别名</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 举例</span>
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token builtin class-name">alias</span> status st
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token builtin class-name">alias</span> checkout co
$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token builtin class-name">alias</span> commit cm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46);function $(_,q){const n=c("ExternalLinkIcon");return t(),d("div",null,[r,a("p",null,[e("博客："),a("a",u,[e("JavaPark"),i(n)])]),p,a("ol",null,[a("li",null,[a("p",null,[e("下载："),a("a",m,[e("https://npm.taobao.org/mirrors/git-for-windows/"),i(n)])])]),v]),g,a("ul",null,[a("li",null,[a("p",null,[e("在刚才创建的空文件夹中，添加你自己的文件，以 "),a("a",h,[e("readme.md"),i(n)]),e(" 为例；")])]),b]),k,f,x])}const w=l(o,[["render",$],["__file","20220209-git-guide.html.vue"]]);export{w as default};
