import{_ as c,X as r,Y as i,Z as e,$ as t,a0 as a,a1 as s,D as n}from"./framework-dfc585d8.js";const d="/JavaPark/assets/git-path-7899fc45.png",p="/JavaPark/assets/git-version-5973aaa1.png",l="/JavaPark/assets/login-a0f00070.png",h="/JavaPark/assets/github-acc-3ef9c2a4.png",g="/JavaPark/assets/github-repo-3e336dec.png",m="/JavaPark/assets/clone-bb04f2e8.png",u="/JavaPark/assets/pro-open-f0751287.png",b="/JavaPark/assets/url-clone-fa2dcd11.png",_="/JavaPark/assets/acc-clone-fb8519b7.png",v="/JavaPark/assets/update-efe3cd37.png",G="/JavaPark/assets/merge-d619e37e.png",f="/JavaPark/assets/merge-commit-e125a387.png",k="/JavaPark/assets/rebase-11e18796.png",P="/JavaPark/assets/pull-15da1078.png",J="/JavaPark/assets/commit-change-dc78dcdd.png",x="/JavaPark/assets/toolbar-3736f93e.png",I="/JavaPark/assets/keyboard-2f22de3b.png",D="/JavaPark/assets/toolbar-push-51a6b797.png",E="/JavaPark/assets/key-push-c4b352b1.png",C="/JavaPark/assets/checkout-4136d495.png",A={},V=e("p",null,"作者：村雨遥",-1),R={href:"https://cunyu1943.github.io/JavaPark",target:"_blank",rel:"noopener noreferrer"},N=s('<blockquote><p>吾生也有涯，而知也无涯。</p></blockquote><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>一般在进行项目开发时，都离不开版本控制，当前主流的版本控制工具无非就是 Git 和 SVN，而且现在 Git 的使用率可以说是已经远远超过 SVN，本文就主要看看，如何使用 IDEA + Git 来控制代码版本，让团队开发更流畅！</p><h2 id="git-安装及配置" tabindex="-1"><a class="header-anchor" href="#git-安装及配置" aria-hidden="true">#</a> Git 安装及配置</h2><p>既然要使用 Git，那么首当其冲的当然是需要安装 Git 了，具体安装过程就不说了，就直接下一步下一步的事儿。</p><p>接下来就来说说，当我们安装好 Git 后的事。安装好 Git 之后，打开 IDEA 的设置界面，依次进入 <code>File -&gt; Settings -&gt; Version Control -&gt; Git</code>（也可以通过快捷键 <code>Ctrl + Alt + S</code> 进入设置），然后将 <code>Path to Git executable</code> 设置为你安装的 Git 所在路径即可，比如我的是 <code>D:\\Program Files\\Git\\bin\\git.exe</code>。</p><p><img src="'+d+'" alt=""></p><p>设置完成之后，点击右方的 <code>Test</code>，如果 Git 安装成功且路径正确，就会弹出如下的提示信息，说明我们的配置也就成功了。</p><p><img src="'+p+'" alt="">‘</p><h2 id="github-设置" tabindex="-1"><a class="header-anchor" href="#github-设置" aria-hidden="true">#</a> Github 设置</h2><p>同样的，我们可以发现 <code>Version Control</code> 中还有一个 Github 选项卡，这里我们可以使用自己的 Github 账号进行登录，即 <code>Log In via Github</code>，然后就可以直接将我们 Github 上的代码拉取下来了。</p><p><img src="'+l+'" alt=""></p><p>登陆成功后，则会出现我们 Github 账号的相关信息，如下图。</p><p><img src="'+h+'" alt=""></p><h2 id="拉取远程-git-仓库代码" tabindex="-1"><a class="header-anchor" href="#拉取远程-git-仓库代码" aria-hidden="true">#</a> 拉取远程 Git 仓库代码</h2><p>这里平时可能更多的是将公司的 Git 库中的代码拉取到本地进行协同开发，不过这里没法演示，所以就用 IDEA 从 Github 拉取代码为例，来演示如何从远程 Git 仓库拉取代码。</p><p>这里主要有两种方式，第一种是事先通过 Git 工具将代码拉取到本地，然后再通过 IDEA 进行打开；而另一种则是通过 IDEA 直接将代码拉取下来，下面分别演示下这两种操作。</p><h3 id="先拉取-再打开" tabindex="-1"><a class="header-anchor" href="#先拉取-再打开" aria-hidden="true">#</a> 先拉取，再打开</h3><p>首先找到我们要 Github 仓库，然后复制 Github 仓库路径。</p><p><img src="'+g+`" alt=""></p><p>然后打开终端，使用如下命令克隆到本地。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone Githu 仓库地址
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/cunyu1943/java-programming-instance.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+m+'" alt=""></p><p>拉取成功后，我们就可以通过 IDEA 打开该项目，依次进入 <code>File -&gt; Open</code>，然后找到上一步中克隆下来的代码所在路径，即可打开项目。</p><p><img src="'+u+'" alt=""></p><h3 id="直接拉取打开" tabindex="-1"><a class="header-anchor" href="#直接拉取打开" aria-hidden="true">#</a> 直接拉取打开</h3><p>除开上面的方式之外，我们也可以直接通过 IDEA 拉取代码，依次进入 <code>File -&gt; New -&gt; Project from Version Control</code>，然后这里也有两种方式拉取。</p><ol><li><strong>URL 拉取</strong></li></ol><p>这里我们将我们在上一部分中所复制的仓库库地址 url 填入 <code>URL</code>，然后 <code>Version control</code> 选择 <code>Git</code>，<code>Directory</code> 则是我们要存放该代码的本机路径，后面拉取下来的代码将放在该路径中。</p><p><img src="'+b+'" alt=""></p><ol start="2"><li><strong>账号拉取</strong></li></ol><p>Github 设置部分我们已经登陆了 Github 账号，此时也可以通过 Github 选项，然后找到我们要拉取代码的仓库，这里可以通过最上方的搜索框进行搜索快速定位，然后点击下方的 <code>Clone</code> 即可进行拉取，其中 <code>Directory</code> 同上一种拉取方式，也是我们拉取代码存放的路径。</p><p><img src="'+_+'" alt=""></p><p>此外，还有 <code>Githu Enterprise</code> 和 <code>Space</code> 两种方式拉取，不过这两种方式更偏向于公司或者组织，一般个人的话是不需要用到这部分的，这里知道就好，使用方法和上述两种方式大同小异。</p><h2 id="更新代码" tabindex="-1"><a class="header-anchor" href="#更新代码" aria-hidden="true">#</a> 更新代码</h2><p>一般在将本地代码提交到远程仓库时，最好先更新下远程仓库的代码到本地，从而避免不必要的冲突。</p><p>更新的方式也很简单，可以通过快捷键 <code>Ctrl + T</code> 进行拉取，也可以通过工具栏中的按钮来实现。</p><p><img src="'+v+'" alt=""></p><p><img src="'+G+'" alt=""></p><p>更新时有两种方式，一种是 <code>Merge incoming changes into the current brance</code>，而另一种则是 <code>Rebase the current branch on top of incoming changes</code>。</p><p>其中 <code>Merge</code> 的原理是找到两个分支的祖先 <code>commit</code>，然后将公共分支最新版合并到自己的分支，形成一个新的 <code>commit</code> 提交，用图表示如下。</p><p><img src="'+f+'" alt=""></p><p><code>Rebase</code> 则是重新基于一个分支进行 <code>commit</code>，即将当前分支从祖先的 <code>commit</code> 后所提交的 <code>commit</code> 均撤销，将他们放到一个缓存中，然后基于一个分支的后面，将缓存的 <code>commit</code> 按照顺序以一个个新增到该分支后面，用图表示如下，将 4 和 5 所提交的 <code>commit</code> 放到缓存中，然后按顺序将其新增到 6 的后面。</p><p><img src="'+k+'" alt=""></p><p>而使用 <code>Rebase</code> 和 <code>Merge</code> 的基本原则可以总结如下三条：</p><ol><li><strong>下游分支更新上游分支内容时使用 <code>Rebase</code></strong></li><li><strong>上游分支合并下游分支内容时使用 <code>Merge</code></strong></li><li><strong>更新当前分支内容时一定要使用 <code>--rebase</code> 参数</strong></li></ol><p>更多关于 <code>Rebase</code> 和 <code>Merge</code> 的区别，可以参考这篇文章：</p>',48),S={href:"https://zhuanlan.zhihu.com/p/34197548",target:"_blank",rel:"noopener noreferrer"},y=s('<p>除开快捷键和点击工具栏中按钮更新的方式之外，还可以在项目上点击鼠标右键，然后依次进入 <code>Git -&gt; Pull</code> 进行更新。</p><p><img src="'+P+'" alt=""></p><h2 id="提交代码" tabindex="-1"><a class="header-anchor" href="#提交代码" aria-hidden="true">#</a> 提交代码</h2><p>本地进行开发工作后，我们需要将我们的代码提交到远程仓库，此时也可以通过以下两种方式进行。</p><ol><li><strong>快捷键</strong></li></ol><p>通过快捷键 <code>Ctrl + K</code> 打开代码提交工作区，可以看到文件会被标识成不同的颜色，一般是红色、绿色、蓝色，三者的意义分别代表如下：</p><ul><li><strong>红色</strong>：表示该文件未加入到版本控制中，比如 Java 项目中的 <code>target</code> 文件夹，这里我们可以在 <code>.gitignore</code> 文件中进行配置。</li><li><strong>绿色</strong>：表示该文件是新加入版本控制中的文件，比如我们项目中新建的文件，但此时它还未被提交到远程代码仓库。</li><li><strong>蓝色</strong>：表示该文件是修改的文件，在我们远程的代码仓库中已经存在该仓库，只是我们对它进行了修改还没有提交而已。</li></ul><p>此外，还有一个 <code>Amend</code> 区域，这里主要用于填写我们的提交信息。</p><p>完成勾选我们需要提交的代码文件以及填写提交信息后，我们就可以点击 <code>commit</code> 按钮完成代码提交。</p><p><img src="'+J+'" alt=""></p><ol start="2"><li><strong>工具栏按钮</strong></li></ol><p>同样的，我们也可以通过工具栏中的按钮进行提交，点击该按钮后，出现的界面应该和通过快捷键提交方式的界面一致。</p><p><img src="'+x+'" alt=""></p><h2 id="推送代码" tabindex="-1"><a class="header-anchor" href="#推送代码" aria-hidden="true">#</a> 推送代码</h2><p>提交代码后，只是将代码提交到了本地缓冲区，要真正提交到远程代码仓库中，还需要我们进行推送，这里同样有多种方式进行推送。</p><ol><li><strong>快捷键</strong></li></ol><p>通过快捷键 <code>Ctrl + Shift + K</code>，我们可以打开如下界面，此时我们只要选中我们所要提交的记录，然后点击右下方的 <code>Push</code> 按钮即可。</p><p><img src="'+I+'" alt=""></p><ol start="2"><li><strong>工具栏按钮</strong></li></ol><p>通过工具栏按钮，我们同样进行推送工作，点击如下图中的按钮后，出现的界面应该和通过快捷键推送的界面一致。</p><p><img src="'+D+'" alt=""></p><ol start="3"><li><strong>鼠标右键</strong></li></ol><p>通过在项目上点击鼠标右键，然后选择 <code>Git -&gt; Push</code>，同样可以进行我们的推送工作。</p><p><img src="'+E+'" alt=""></p><ol start="4"><li><strong>提交的同时进行推送</strong></li></ol><p>可能在提交时，大家会发现左下角除了 <code>Commit</code> 按钮之外，还存在一个 <code>Commit and Push</code> 按钮。通过点击该按钮，我们就可以在提交的同时弹出推送解码，然后点击需要推送的记录，点击右下方的 <code>Push</code> 按钮即可。</p><h2 id="分支管理" tabindex="-1"><a class="header-anchor" href="#分支管理" aria-hidden="true">#</a> 分支管理</h2><p>一般来说，我们的项目肯定是有多个分支的，假设我们此时要在 IDEA 切换分支，该怎么办呢？</p><p>此时就需要关注下 IDEA 底部的状态栏了，在这里我们不仅可以切换不同分支，还能进行新建分支、Checkout 分支代码、Compare 分支代码、<code>Rebase</code>、<code>Merge</code>、<code>Pull</code> 等一系列操作。</p><p><img src="'+C+'" alt=""></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>好了，以上就是本文的所有内容了，主要从 Git 安装及配置、Github 设置、拉取远程代码、更新、提交、推送代码、分支管理等几方面给大家介绍了如何在 IntelliJ IDEA 中使用 Git，希望能对大家有所帮助。</p><p>同时，大家如果有任何的疑问，还可以在评论区畅所欲言，我将在看到的第一时间进行回复！</p>',33);function M(L,z){const o=n("ExternalLinkIcon");return r(),i("div",null,[V,e("p",null,[t("博客："),e("a",R,[t("JavaPark"),a(o)])]),N,e("blockquote",null,[e("p",null,[e("a",S,[t("https://zhuanlan.zhihu.com/p/34197548"),a(o)])])]),y])}const q=c(A,[["render",M],["__file","20220204-idea-integrate-with-git.html.vue"]]);export{q as default};
