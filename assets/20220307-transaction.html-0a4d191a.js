import{_ as t,X as n,Y as d,Z as a,$ as e,a0 as o,a1 as l,D as r}from"./framework-dfc585d8.js";const i={},c=a("p",null,"作者：村雨遥",-1),p={href:"https://cunyu1943.github.io/JavaPark",target:"_blank",rel:"noopener noreferrer"},u=l(`<blockquote><p>吾生也有涯，而知也无涯。</p></blockquote><h2 id="事务简介" tabindex="-1"><a class="header-anchor" href="#事务简介" aria-hidden="true">#</a> 事务简介</h2><p>事务是一组操作的集合，是一个不可分割的工作单位，它会将所有的操作当做一个整体一起向系统提交或者撤销操作请求，因此这些操作<strong>要么同时成功，那么同时失败</strong>，最常见的就是业务场景就是银行转账。</p><h2 id="事务操作" tabindex="-1"><a class="header-anchor" href="#事务操作" aria-hidden="true">#</a> 事务操作</h2><ol><li>查看/设置事务提交方式</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> @<span class="token variable">@autocommit</span><span class="token punctuation">;</span>
<span class="token keyword">SET</span> @<span class="token variable">@autocommit</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>提交方式</th><th>说明</th></tr></thead><tbody><tr><td><code>0</code></td><td>手动提交</td></tr><tr><td><code>1</code></td><td>自动提交</td></tr></tbody></table><ol start="2"><li>提交事务</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">COMMIT</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>回滚事务</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ROLLBACK</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>开启事务</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">START</span> <span class="token keyword">TRANSACTION</span> <span class="token operator">/</span> <span class="token keyword">BEGIN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="事务四大特性" tabindex="-1"><a class="header-anchor" href="#事务四大特性" aria-hidden="true">#</a> 事务四大特性</h2><ul><li><strong>原子性(Atomicity)</strong>：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li><strong>一致性(Consistency)</strong>：事务完成时，必须使所有数据都保持一直状态。</li><li><strong>隔离性(Isolation)</strong>：数据库系统提供的隔离机制，保证事务在不收外部并发操作影响的独立环境下运行。</li><li><strong>持久性(Durability)</strong>：事务一旦提交或回滚，那么它对数据库中数据的修改就是永久的。</li></ul><h2 id="并发事务问题" tabindex="-1"><a class="header-anchor" href="#并发事务问题" aria-hidden="true">#</a> 并发事务问题</h2><table><thead><tr><th>问题</th><th>说明</th></tr></thead><tbody><tr><td>脏读</td><td>一个事务读到另一个事务中还未提交的数据</td></tr><tr><td>不可重复读</td><td>一个事务先后读取同一条记录，但两次读取的数据不同</td></tr><tr><td>幻读</td><td>一个事务按照条件查询时，没有对应的数据行，但在插入数据时，又发现改行数据已存在，如同幻影一样</td></tr></tbody></table><h2 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别" aria-hidden="true">#</a> 事务隔离级别</h2><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td><code>Read Uncommitted</code></td><td>√</td><td>√</td><td>√</td></tr><tr><td><code>Read Committed</code></td><td>×</td><td>√</td><td>√</td></tr><tr><td><code>Repeatable Read</code>(默认)</td><td>×</td><td>×</td><td></td></tr><tr><td><code>Serializable</code></td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ol><li>查看事务隔离级别</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> @<span class="token variable">@TRANSACTION_ISOLATION</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>设置事务隔离级别</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token punctuation">[</span><span class="token keyword">SESSION</span><span class="token operator">|</span><span class="token keyword">GLOBAL</span><span class="token punctuation">]</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION</span> <span class="token keyword">LEVEL</span> {<span class="token keyword">READ</span> UNCOMMITED <span class="token operator">|</span> <span class="token keyword">READ</span> COMMITED <span class="token operator">|</span> <span class="token keyword">REPEATABLE</span> <span class="token keyword">READ</span> <span class="token operator">|</span> <span class="token keyword">SERIALIZABLE</span>}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,23);function h(k,b){const s=r("ExternalLinkIcon");return n(),d("div",null,[c,a("p",null,[e("博客："),a("a",p,[e("JavaPark"),o(s)])]),u])}const m=t(i,[["render",h],["__file","20220307-transaction.html.vue"]]);export{m as default};
