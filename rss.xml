<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://cunyu1943.site/JavaPark/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://cunyu1943.site/JavaPark/rss.xml" rel="self" type="application/rss+xml"/>
    <title>JavaPark</title>
    <link>https://cunyu1943.site/JavaPark/</link>
    <description>Java 自学指南</description>
    <language>zh-CN</language>
    <pubDate>Sun, 09 Apr 2023 11:34:00 GMT</pubDate>
    <lastBuildDate>Sun, 09 Apr 2023 11:34:00 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>开发工具</category>
    <category>面试宝典</category>
    <category>数据结构与算法</category>
    <category>MySQL 教程</category>
    <category>PostgreSQL 教程</category>
    <category>IDEA 教程</category>
    <category>软件设计师</category>
    <category>JavaScript 教程</category>
    <category>Maven 教程</category>
    <category>MyBatis 教程</category>
    <category>MyBatis Plus 教程</category>
    <category>Nginx 教程</category>
    <category>Java 基础教程</category>
    <category>Java 基础实战</category>
    <category>Spring 教程</category>
    <category>Spring Boot 基础教程</category>
    <category>Spring Boot 3 基础教程</category>
    <category>Spring MVC 指南</category>
    <category>Vue3 笔记</category>
    <category>HTML 教程</category>
    <item>
      <title>Git 使用手册</title>
      <link>https://cunyu1943.site/JavaPark/md/dev-tools/git/20220209-git-guide.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/dev-tools/git/20220209-git-guide.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">Git 使用手册</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 什么是 Git 概述 Git 是一个分布式版本控制工具，而对应的，还有一种集中式版本控制工具，其中最为典型并被大家所熟知的产品就是 SVN. 其中，集中式版本控制工具的的核心是服务器，所有开发者在开始更新代码前，都必须从服务器中获取代码，然后各自开发，最后则是解决冲突。</description>
      <category>开发工具</category>
      <pubDate>Wed, 09 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 什么是 Git</h2>
<h3> 概述</h3>
<p><code>Git</code> 是一个分布式版本控制工具，而对应的，还有一种集中式版本控制工具，其中最为典型并被大家所熟知的产品就是 <code>SVN</code>.</p>
<p>其中，集中式版本控制工具的的核心是服务器，所有开发者在开始更新代码前，都必须从服务器中获取代码，然后各自开发，最后则是解决冲突。</p>
<h3> 版本控制</h3>
<p>所谓版本控制，就是一种用来记录文件内容变化，方便未来查阅特定修订情况的系统。版本控制最重要的一点就是可以记录文件的历史修改记录，方便用户随时查看历史版本，实现版本之间的切换。</p>
<h2> 下载安装</h2>
<ol>
<li>
<p>下载：<a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener noreferrer">https://npm.taobao.org/mirrors/git-for-windows/</a></p>
</li>
<li>
<p>安装</p>
</li>
</ol>
<ul>
<li>Linux：<code>sudo apt-get install git</code></li>
<li>Windows、macOS 通过官网下载安装包后进行安装即可；</li>
</ul>
<ol start="3">
<li>设置</li>
</ol>
<p>安装完成后，设置署名和邮箱：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h2> 版本库创建及管理</h2>
<ol>
<li>如何创建版本库</li>
</ol>
<ul>
<li>先创建一个空文件夹，Windows 下不再介绍，Linux 以及 macOS 下可通过<code>mkdir gitlearn</code>命令创建；</li>
<li>通过<code>git init</code>将刚才创建的目录变为可管理的仓库;</li>
</ul>
<ol start="2">
<li>如何将文件添加到版本库</li>
</ol>
<ul>
<li>
<p>在刚才创建的空文件夹中，添加你自己的文件，以 <a href="http://readme.md" target="_blank" rel="noopener noreferrer">readme.md</a> 为例；</p>
</li>
<li>
<p>用<code>git add</code>命令将文件添加到仓库；</p>
</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>用<code>git commit</code>将文件提交到仓库；</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>用<code>git add</code>命令将文件添加到仓库；</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>用<code>git commit</code>将文件提交到仓库；</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li>如何查看仓库修改的内容</li>
</ol>
<ul>
<li>
<p>用<code>git status</code>查看仓库当前状态；</p>
</li>
<li>
<p>用<code>git diff filename</code>查看文件具体修改的内容；</p>
</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>git log</code>查看最近到最远的提交日志</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>回退之前的版本，先用<code>git log</code>查看提交历史，以确定 commit_id，回退后，当想要重返未来版本时，用<code>git reflog</code>查看命令历史，从而确定重返版本 commit_id，<code>HEAD</code>指向当前版本，为了在版本的历史之间穿梭，使用命令<code>git resrt --hard commit_id</code></li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>直接丢弃工作区的某文件修改内容时，使用命令<code>git checkout -- filename</code></li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>删除文件，先在工作区将文件删除后，然后使用命令<code>git rm</code>将版本库中文件删除，然后通过<code>git commit</code>提交</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h2> 远程仓库</h2>
<ol>
<li>本地 Git 和远程 Github 相连接，可以进行如下操作：</li>
</ol>
<ul>
<li>
<p>确定<code>.ssh</code>目录下是否存在文件<code>id_rsa</code>和<code>id_rsa.pub</code>，有则复制<code>id_rsa.pub</code>中内容明将其添加到 Github 中的 SSH Key，建立两者联系，可以在本地管理，</p>
</li>
<li>
<p>不存在则通过如下命令生成；</p>
</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>如何添加远程仓库</li>
</ol>
<ul>
<li>在本地通过如下命令建立本地仓库与远程仓库进行管理，然后就可以将本地仓库内容推送到 Github 仓库；</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>从远程仓库克隆岛本地：</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li>将本地仓库内容推送到远程仓库；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h2> 分支管理</h2>
<ol>
<li>创建并切换分支</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>查看当前分支，前边标有<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord">∗</span></span></span></span>代表当前分支，切换回<code>master</code>分支；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>将<code>dev</code>分支合并到<code>master</code>分支；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4">
<li>删除分支；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5">
<li>强制删除未合并分支；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6">
<li>查看分支合并图</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr>
<h2> 多人协作</h2>
<ol>
<li>
<p>查看远程库信息：<code>git remote -v</code>；</p>
</li>
<li>
<p>本地新建分支若不推送到远程，则对其他人不可见；</p>
</li>
<li>
<p>本地推送到远程库，<code>git push origin branch-name</code>，若推送失败，则用<code>git pull</code>抓取远程新提交；</p>
</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>本地创建和远程分支对应分支，<code>git checkout -b branch-name origin/branch-name</code></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5">
<li>建立本地分支和远程分支的关联，<code>git branch --set-upstream branch-name origin/branch-name</code></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6">
<li>从远程抓取分支则使用<code>git pull</code>，若有冲突，则先解决处理后再处理；</li>
</ol>
<hr>
<h2> 标签管理</h2>
<ol>
<li>
<p>切换到需要打标签的分支<code>git switch branch-name</code>；</p>
</li>
<li>
<p>打标签并查看；</p>
</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>查看标签信息，<code>git show &lt;tagname&gt;</code>；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4">
<li>创建带有说明的标签，用<code>-a</code>打标签名，<code>-m</code>指定说明文字；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="5">
<li>删除标签，本地使用<code>git tag -d &lt;tagname&gt;</code>，远程则使用<code>git push origin :refs/tags/&lt;tagname&gt;</code></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6">
<li>将标签推送到远程<code>git push origin &lt;tagname&gt;</code></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h2> 建立 Github 和 Gitee 共同远程连接</h2>
<ol>
<li>删除某一关联的远程库，<code>git remote rm &lt;basename&gt;</code></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>关联 Gitee 远程库，<code>git remote add &lt;basename&gt; git@https://gitee.com/&lt;username&gt;/&lt;respName&gt;.git</code></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li>关联 Github 远程库，<code>git remote add &lt;basename&gt; https://github.com/&lt;username&gt;/&lt;respName&gt;.git</code></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4">
<li>推送到 Gitee 和 Github</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>
<h2> 其他小技巧</h2>
<ol>
<li>忽略特殊文件</li>
</ol>
<p>此时需要编写<code>.gitignore</code>文件，文件要放到版本库中，且可以对<code>.gitignore</code>进行版本管理；</p>
<ol start="2">
<li>配置命令别名</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Java 基础面试总结</title>
      <link>https://cunyu1943.site/JavaPark/md/interview/20220801-java-basic.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/interview/20220801-java-basic.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">Java 基础面试总结</source>
      <description>作者：村雨遥 博客：JavaPark 一个 Java 文件中是否可以存在多个类（修饰类除外）？ 一个 Java 文件中是可以存在多个类的，但是一个 Java 文件中只能存在一个 public 所修饰的类，而且这个 Java 文件的文件名还必须和 public 所修饰类的类名保持一致，一个简单的实例如下。</description>
      <category>面试宝典</category>
      <pubDate>Mon, 01 Aug 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>作者：村雨遥</p>
</blockquote>
<blockquote>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
</blockquote>
<h2> 一个 Java 文件中是否可以存在多个类（修饰类除外）？</h2>
<p>一个 Java 文件中是可以存在多个类的，但是一个 Java 文件中只能存在一个 <code>public</code> 所修饰的类，而且这个 Java 文件的文件名还必须和 <code>public</code> 所修饰类的类名保持一致，一个简单的实例如下。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Java 有哪些特点？</h2>
<ol>
<li>面向对象，具有封装、继承、多态三大特性</li>
<li>平台独立，Java 通过 Java 虚拟机运行字节码，所以无论在哪个平台中，一旦进行编译后，都可以在其他平台运行。</li>
<li>安全可靠</li>
<li>支持多线程</li>
<li>解释和编译共存</li>
<li>安全性</li>
<li>健壮性（Java 语言的强类型机制、异常处理、垃圾的自动收集等）</li>
</ol>
<h2> Java 和 C++ 的区别</h2>
<ul>
<li><strong>相同点</strong>：两者均为 OOP（面向对象） 语言，均支持 OOP 的三大特性（封装、继承、多态）。</li>
<li><strong>不同点</strong>：
<ul>
<li>Java 不存在指针的概念，所以内存更加安全。</li>
<li>Java 类是单继承（但是接口可以多继承），C++ 的类是多继承。</li>
<li>Java 中有自动内存管理机制，但是 C++ 中需要开发者手动释放内存。</li>
<li>C/C++ 中，字符串和字符数组最后均有一个额外的 <code>\0</code> 标志来表示结束，但 Java 中不存在这一概念。</li>
</ul>
</li>
</ul>
<h2> JRE 和 JDK 有什么不同。</h2>
<ul>
<li>JRE：Java Runtime Environment，即 Java 运行时环境，是用来运行已经编译过的 Java 程序所需内容的集合（JVM、Java 类库、Java 命令等），不能用来开发新程序。</li>
<li>JDK：Java Development Kit，即 Java 开发工具包，是功能齐全的 Java SDK，包含 JRE 拥有的一切，还有编译器和其他工具，如果我们想要创建和编译新程序，就必须使用到它。</li>
</ul>
<p></p>
<h2> Java 程序编译过程</h2>
<p></p>
<p>我们编译的源代码（<code>xxx.java</code>）经 JDK 中的 <code>javac</code> 命令编译后，成为 JVM 能够理解的 Java 字节码（<code>xxx.class</code>），然后经由 JVM 加载，通过解释器 <strong>逐行解释执行</strong>，这就是为什么能经常听见说 <strong>Java 是一门编译和解释共存的语言</strong>。</p>
<p>其中 JVM 是解释 Java 字节码（<code>xxx.class</code>） 的虚拟机，针对不同系统均有特定实现，方便一次编译，多次运行，即 Java 语言的平台独立性；</p>
<h2> 说一下 Java 中的数据类型</h2>
<p>Java 中，数据类型主要包括 8 大基本数据类型和引用数据类型两大类。</p>
<h3> 基本数据类型</h3>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>bit</th>
<th>字节</th>
<th>封装类</th>
<th>数据范围</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>byte</code></td>
<td>8</td>
<td>1</td>
<td><code>Byte</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>short</code></td>
<td>16</td>
<td>2</td>
<td><code>Short</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>char</code></td>
<td>16</td>
<td>2</td>
<td><code>Character</code></td>
<td><code>\u0000</code> ~ <code>\uffff</code>（<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">65535</span></span></span></span>）</td>
<td><code>u0000</code></td>
</tr>
<tr>
<td><code>int</code></td>
<td>32</td>
<td>4</td>
<td><code>Integer</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>long</code></td>
<td>64</td>
<td>8</td>
<td><code>Long</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0L</code></td>
</tr>
<tr>
<td><code>float</code></td>
<td>32</td>
<td>4</td>
<td><code>Float</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1.4</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">45</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">3.4</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">38</span></span></span></span></span></span></span></span></span></span></span></span></td>
<td><code>0.0f</code></td>
</tr>
<tr>
<td><code>double</code></td>
<td>64</td>
<td>8</td>
<td><code>Double</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">4.9</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">324</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1.8</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">308</span></span></span></span></span></span></span></span></span></span></span></span></td>
<td><code>0.0D</code></td>
</tr>
<tr>
<td><code>boolean</code></td>
<td>不确定</td>
<td>不确定</td>
<td><code>Boolean</code></td>
<td><code>true</code> 或 <code>false</code></td>
<td><code>false</code></td>
</tr>
</tbody>
</table>
<p><strong>注意：</strong></p>
<ol>
<li><code>boolean</code> 一般用 1 <code>bit</code> 来存储，但是具体大小并未规定，JVM 在编译期将 <code>boolean</code> 类型转换为 <code>int</code>，此时 1 代表 <code>true</code>，<code>0</code> 代表 <code>false</code>。此外，JVM 还指出 <code>boolean</code> 数组，但底层是通过 <code>byte</code> 数组来实现;</li>
<li>使用 <code>long</code> 类型时，需要在后边加上 <code>L</code>，否则将其作为整型解析，可能会导致越界；</li>
<li>浮点数如果没有明确指定 <code>float</code> 还是 <code>double</code>，统一按 <code>double</code> 处理；</li>
<li><code>char</code> 是用 <strong>单引号 <code>‘’</code></strong> 将内容括起来，相当于一个整型值（ASCII 值），能够参加表达式运算；而 <code>String</code> 是用 <strong>双引号 <code>“”</code></strong> 将内容括起来，代表的是一个地址值；</li>
</ol>
<h3> 引用类型</h3>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>数组</td>
<td><code>null</code></td>
</tr>
<tr>
<td>类</td>
<td><code>null</code></td>
</tr>
<tr>
<td>接口</td>
<td><code>null</code></td>
</tr>
</tbody>
</table>
<h2> 封装类</h2>
<p>基本数据类型都有其对应的封装类，两者之间的赋值通过 <strong>自动装箱</strong> 和 <strong>自动拆箱</strong> 来完成；</p>
<ul>
<li><strong>自动装箱</strong>：将基本数据类型装箱为封装类；</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>自动拆箱</strong>：将封装类拆箱为基本数据类型；</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>基本类型与对应封装类的不同</strong>
<ol>
<li>基本类型只能按值传递，封装类按引用传递；</li>
<li><strong>基本类型</strong> 会在 <strong>栈</strong> 中创建，效率较高，但可能存在内存泄露问题；<strong>封装类对象会在堆中创建</strong>，其 <strong>引用在栈中创建；</strong></li>
</ol>
</li>
</ul>
<h2> 缓存池</h2>
<p>以 <code>new Integer(123)</code> 和 <code>Integer.valueOf(123)</code> 为例：</p>
<ul>
<li>通过 <code>new</code> 的方式每次都会创建一个新的对象；</li>
<li>通过 <code>valueOf()</code> 的方式则会优先判断该值是否位于缓存池，如果在的话就直接返回缓存池中的内容，多次调用指向同一个对象的引用；</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>数据类型</th>
<th>默认缓存池</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Byte</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
</tr>
<tr>
<td><code>Character</code></td>
<td><code>\u0000</code> ~ <code>\u007F</code></td>
</tr>
<tr>
<td><code>Short</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
</tr>
<tr>
<td><code>Integer</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
</tr>
<tr>
<td><code>Boolean</code></td>
<td><code>true</code> &amp; <code>false</code></td>
</tr>
</tbody>
</table>
<h2> 字符串 String</h2>
<h3> 定义</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码为 Java 8 中 String 的定义，其底层实际上使用的是字符（<code>char</code>）数组，而且由于被声明为 <code>final</code>，代表着它 <strong>不能被继承</strong>。而且一旦初始化之后就不能再去引用其他数组，这样就保证了 <code>String</code> 的不可变性，也因此 String 是线程安全的。</p>
<h3> 不可变性的优点</h3>
<ol>
<li><strong>用于缓存 <code>hash</code> 值</strong></li>
</ol>
<p>由于 <code>String</code> 的 <code>hash</code> 值被频繁使用，它的不可变性使得 <code>hash</code> 值也不可变，此时只需要进行一次计算；</p>
<ol start="2">
<li><strong>字符串常量池（String Pool）的需要</strong></li>
</ol>
<p>如果一个 <code>String</code> 对象已经被创建过，那么就会优先从字符串常量池中获取其引用，其不可变性确保了不同引用指向同一 <code>String</code> 对象；</p>
<ol start="3">
<li><strong>安全性</strong></li>
</ol>
<p>我们经常用 <code>String</code> 作为我们方法的参数，其不变性能够保证参数不可变；</p>
<ol start="4">
<li><strong>线程安全</strong></li>
</ol>
<p><code>String</code> 的不可变性让它天生 <strong>具备线程安全</strong>，能够在多个线程中方便使用而不用考虑线程安全问题。</p>
<h3> String vs StringBuffer vs StringBuffer</h3>
<p>主要从三个方面对三者进行对比：</p>
<table>
<thead>
<tr>
<th></th>
<th>可变性</th>
<th>线程安全</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>String</code></td>
<td>不可变</td>
<td>安全</td>
<td>操作少量的数据</td>
</tr>
<tr>
<td><code>StringBuffer</code></td>
<td>可变</td>
<td>安全，内部使用 <code>synchronized</code> 进行同步</td>
<td>多线程操作字符串缓冲区下操作大量数据</td>
</tr>
<tr>
<td><code>StringBuilder</code></td>
<td>可变</td>
<td>不安全</td>
<td>单线程操作字符串缓冲区下操作大量数据，性能高于 <code>StringBuffer</code></td>
</tr>
</tbody>
</table>
<h3> 字符串常量池（String Pool）</h3>
<p>String Pool 位于 <strong>方法区</strong>，通常保存着所有 <a href="https://baike.baidu.com/item/%E5%AD%97%E9%9D%A2%E9%87%8F" target="_blank" rel="noopener noreferrer">字符串字面量（literal strings）</a>，在编译期间就被确定。此外，还可以用 <code>String</code> 中的 <code>intern()</code> 方法在运行过程中添加到 String Pool 中。当一个字符串调用 <code>intern()</code> 时，如果 String Pool 中已经存在字面量相同的字符串，则会返回 String Pool 中的引用；如果不存在，则向 String Pool 中添加一个新的字符串，同时返回新字符串的引用；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在下面的代码中，内存分析如下图：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> new String(“xxx”)</h3>
<p>使用 <code>new</code> 的方式创建字符串对象，会有两种不同的情况：</p>
<ol>
<li><strong>String Pool 中不存在 “xxx”</strong></li>
</ol>
<p>此时会创建两个字符串对象，“xxx” 属于字符串字面量，因此在编译期会在 String Pool 中创建一个字符串对象，用于指向该字符串的字面量 “xxx”；然后 <code>new</code> 会在堆中创建一个字符串对象；</p>
<p></p>
<ol start="2">
<li><strong>String Pool 中存在 “xxx”</strong></li>
</ol>
<p>此时只需要创建一个字符串对象，由于 String Pool 中已经存在指向 “xxx” 的对象，所以直接在堆中创建一个字符串对象；</p>
<p></p>
<h2> 基础语法</h2>
<h3> 注释</h3>
<ul>
<li><strong>单行注释</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>多行注释</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>文档注释</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 常见关键字</h3>
<p></p>
<h3> 标识符和关键字</h3>
<ul>
<li><strong>标识符</strong>：用于给程序、类、对象、变量、方法、接口、自定义数据类型等命名；</li>
<li><strong>关键字</strong>：特殊的标识符，被 Java 赋予了特殊含义，只能有特定用途；</li>
<li><strong>标识符命名规则</strong>（可以参考《阿里巴巴开发手册》，关注公众号【<strong>村雨遥</strong>】回复【资源下载】下载 PDF）
<ol>
<li>标识符由英文字符大小写（a - z, A - Z）、数字（0 - 9）、下划线（<code>_</code>）和美元符号（<code>$</code>）组成；</li>
<li>不能以数字开头，不能是关键字；</li>
<li>严格区分大小写；</li>
<li>包名：多个单词组成是所有单词均小写；</li>
<li>类名和接口：大写驼峰命名法；</li>
<li>变量名和函数名：多个单词组成时，第一个单词全小写，其他单词采用大写驼峰命名法；</li>
<li>常量名：字母全部大写，单词之间用下划线（<code>_</code>）分割；</li>
</ol>
</li>
</ul>
<h2> 说一下 Java 中的访问控制</h2>
<p>Java 主要提供了 3 中访问修饰符 <code>public</code>、<code>protected</code>、<code>private</code>，但实际使用过程中，一共可以形成 4 种访问权限，分别是 <code>public</code>、<code>protected</code>、<code>private</code>、<code>default</code>，其中 <code>default</code> 是不加任何修饰符时的访问权限。关于 4 种访问权限的对比如下表，✅ 表示可以访问，❌ 表示不可访问。</p>
<table>
<thead>
<tr>
<th>作用域</th>
<th>当前类</th>
<th>同一 <code>package</code> 的类</th>
<th>子类</th>
<th>其他 <code>package</code> 的类</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public</code></td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td><code>protected</code></td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td><code>default</code></td>
<td>✅</td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td><code>private</code></td>
<td>✅</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
</tbody>
</table>
<h3> static、final、this、super</h3>
<ol>
<li><strong>static</strong></li>
</ol>
<p><code>static</code> 主要有如下 4 中使用场景：</p>
<ul>
<li><strong>修饰成员变量和成员方法</strong>：被 <code>static</code> 修饰的成员属于类，属于静态成员变量，存储在 Java 内存中的 <strong>方法区</strong>，不属于单个对象，被所有对象共享，而且最好通过 <code>类名.静态成员名/静态方法名()</code> 调用；</li>
<li><strong>静态代码块</strong>：定义在类中方法外，先于非静态代码块之前执行（<strong>静态代码块 -&gt; 非静态代码块 -&gt; 构造方法</strong>） ，而且不管执行多少次创建新对象的操作，静态代码只执行一次；</li>
<li><strong>静态内部类</strong>：<strong><code>static</code> 要修饰类时，只有修饰内部类这一种用法。</strong> 非静态内部类在编译后会隐含保存一个引用，用于指向创建它的外部类，但是静态内部类不存在。即 <strong>内部类的创建不用依赖外围类的创建，同时内部类也只能使用任意外部类的 <code>static</code> 成员变量和方法；</strong></li>
<li><strong>静态导包</strong>：用于导入静态资源，<code>import static</code> 用于指定导入某一类中的静态资源，然后我们就可以直接使用类中的静态成员变量和方法；</li>
<li><strong>注意：</strong>
<ul>
<li><code>abstract</code> 方法不能同时是 <code>static</code> 的，因为 <code>abstract</code> 方法需要被重写，但 <code>static</code> 方法不可以；</li>
<li>不能从 <code>static</code> 方法内部发出对非静态方法的调用，因为静态方法只能访问静态成员，而非静态方法的调用需要先创建对象；</li>
<li><code>static</code> 不能用于修饰局部变量；</li>
<li>内部类与静态内部类的区别：静态内部类相对外部类是独立存在的，在静态内部类中无法直接访问外部类中变量和方法。如果要进行访问，则必须 <code>new</code> 一个外部类对象，使用该对象来进行访问，但对于静态变量和静态方法，能够直接调用。而普通的内部类作为外部类的一个成员而存在，能够直接访问外部类属性，调用外部类方法。</li>
</ul>
</li>
</ul>
<ol start="2">
<li><strong>final</strong></li>
</ol>
<ul>
<li>修饰类时，<strong>被修饰的类不能被继承，而且类中所有成员方法均被隐式指定为 <code>final</code> 方法</strong>；</li>
<li>修饰方法时，<strong>表明该方法无法被重写</strong>；</li>
<li>修饰变量时，说明该 <strong>变量是一个常量</strong>。若变量为基本数据类型，则一旦初始化后不能再改变；若变量是引用类型，则初始化后不能指向其他对象；</li>
</ul>
<ol start="3">
<li><strong>this</strong></li>
</ol>
<p>用于引用类的当前实例，比如我们最常用的构造方法中，<strong>注意不能用在 <code>static</code> 方法中</strong>；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>this.age</code> 说明访问的是 <code>User</code> 类中的成员变量，而后面的 <code>age</code> 则代表传入的形参；</p>
<ol start="4">
<li><strong>super</strong></li>
</ol>
<p>用于从子类访问父类中的变量和方法，<strong>注意不能用在 <code>static</code> 方法中</strong>；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> continue、break 和 return</h3>
<table>
<thead>
<tr>
<th>关键字</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>continue</code></td>
<td>用于循环结构，指跳出当前循环，进入下一次循环</td>
</tr>
<tr>
<td><code>break</code></td>
<td>用于循环结构，指跳出整个循环体，继续执行循环下面的语句</td>
</tr>
<tr>
<td><code>return</code></td>
<td>1. <code>return ;</code> ：直接用 <code>return</code> 结束方法执行，用于没有返回值函数的方法；<br>2. <code>return value;</code> ：<code>return</code> 一个特定值，用于有返回值函数的方法</td>
</tr>
</tbody>
</table>
<h3> while 循环与 do 循环</h3>
<p><code>while</code> 循环结构在循环开始前会判断下一个迭代是否应该继续，可能一次循环体都不执行；</p>
<p><code>do……while</code> 会在循环的结果来判断是否继续下一轮迭代，<strong>至少会执行一次循环体</strong>；</p>
<h3> final、finally、finalize</h3>
<ol>
<li><strong>final</strong></li>
</ol>
<p><code>final</code> 既是一个修饰符，也是一个关键字，修饰不同对象时，表示的意义也不一样；</p>
<ul>
<li><strong>修饰类：</strong> 表示该类无法被继承；</li>
<li><strong>修饰变量</strong>：若变量是基本数据类型，则其数值一旦初始化后就不能再改变，若变量是引用类型，则在其初始化之后便不能再让其指向另一个对象，但其指向的对象的内容是可变的；</li>
<li><strong>修饰方法</strong>：表示方法无法被重写，但是允许重载，<code>private</code> 方法会隐式指定为 <code>final</code> 方法；</li>
</ul>
<ol start="2">
<li><strong>finally</strong></li>
</ol>
<ul>
<li><code>finally</code> 是一个关键字，在异常处理时提供 <code>finally</code> 块来执行任何清除操作，无论是否有异常被抛出或捕获，<code>finally</code> 块均会被执行，通常用于释放资源；</li>
<li><code>finally</code> 正常情况下一定会被执行，但是在如下两种情况下不会执行：
<ul>
<li>对应的 <code>try</code> 未执行，则该 <code>try</code> 块的 <code>finally</code> 块并不会被执行；</li>
<li>若 <code>try</code> 块中 JVM 关机，则 <code>finally</code> 块也不会执行；</li>
</ul>
</li>
<li><code>finally</code> 中如果有 <code>return</code> 语句，则会覆盖 <code>try</code> 或 <code>catch</code> 中的 <code>return</code> 语句，导致两者无法 <code>return</code>，所以建议 <code>finally</code> 中不要存在 <code>return</code> 关键字；</li>
</ul>
<ol start="3">
<li><strong>finallize</strong></li>
</ol>
<p><code>finallize()</code> 是 <code>Object</code> 类的 <code>protected</code> 方法，子类能够覆盖该方法以实现资源清理工作；</p>
<p>GC 在回收前均会调用该方法，但是 <code>finalize()</code> 方法存在如下问题：</p>
<ul>
<li>Java 语言规范不保证 <code>finalize()</code> 方法会被及时执行，也不保证他们一定被执行；</li>
<li><code>finalize()</code> 方法会带来性能问题，因为 JVM 通常在单独的低优先线程中完成 <code>finalize</code> 的执行；</li>
<li><code>finalize()</code> 方法中，可将待回收对象赋值给 <code>GC Roots</code> 可达的对象引用，从而达到对象再生的目的；</li>
<li><code>finalize()</code> 方法最多由 GC 执行一次（但是可以手动调用对象的 <code>finalize</code> 方法）；</li>
</ul>
<h2> 运算符</h2>
<h3> 算术运算</h3>
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>+</code></td>
<td style="text-align:left">加法 - 相加运算符两侧的值</td>
<td style="text-align:left">A + B 等于 30</td>
</tr>
<tr>
<td style="text-align:left"><code>-</code></td>
<td style="text-align:left">减法 - 左操作数减去右操作数</td>
<td style="text-align:left">A – B 等于 -10</td>
</tr>
<tr>
<td style="text-align:left"><code>*</code></td>
<td style="text-align:left">乘法 - 相乘操作符两侧的值</td>
<td style="text-align:left">A * B 等于 200</td>
</tr>
<tr>
<td style="text-align:left"><code>/</code></td>
<td style="text-align:left">除法 - 左操作数除以右操作数</td>
<td style="text-align:left">B / A 等于 2</td>
</tr>
<tr>
<td style="text-align:left"><code>％</code></td>
<td style="text-align:left">取余 - 左操作数除以右操作数的余数</td>
<td style="text-align:left">B%A 等于 0</td>
</tr>
<tr>
<td style="text-align:left"><code>++</code></td>
<td style="text-align:left">自增: 操作数的值增加 1</td>
<td style="text-align:left">B++ 或 ++B 等于 21</td>
</tr>
<tr>
<td style="text-align:left"><code>--</code></td>
<td style="text-align:left">自减: 操作数的值减少 1</td>
<td style="text-align:left">B-- 或 --B 等于 19</td>
</tr>
</tbody>
</table>
<p><strong>注意</strong>：<code>++</code> 和 <code>--</code> 可以放在操作数之前，也可以放在操作数之后；<strong>位于操作数之前时，先自增/减，再赋值；位于操作数之后，先赋值，再自增/减</strong>；总结起来就是 <strong>符号在前就先加/减，符号在后就后加/减</strong>。</p>
<h3> 关系运算符</h3>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>==</code></td>
<td style="text-align:left">检查如果两个操作数的值是否相等，如果相等则条件为真。</td>
<td style="text-align:left">（A == B）为假。</td>
</tr>
<tr>
<td style="text-align:left"><code>!=</code></td>
<td style="text-align:left">检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>
<td style="text-align:left">(A != B) 为真。</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;</code></td>
<td style="text-align:left">检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>
<td style="text-align:left">（A&gt; B）为假。</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;</code></td>
<td style="text-align:left">检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>
<td style="text-align:left">（A &lt;B）为真。</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;=</code></td>
<td style="text-align:left">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>
<td style="text-align:left">（A&gt; = B）为假。</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;=</code></td>
<td style="text-align:left">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>
<td style="text-align:left">（A &lt;= B）为真。</td>
</tr>
</tbody>
</table>
<h3> 位运算符</h3>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>＆</code></td>
<td>如果相对应位都是 1，则结果为 1，否则为 0</td>
<td>（A＆B），得到 12，即 0000 1100</td>
</tr>
<tr>
<td>`</td>
<td>`</td>
<td>如果相对应位都是 0，则结果为 0，否则为 1</td>
</tr>
<tr>
<td><code>^</code></td>
<td>如果相对应位值相同，则结果为 0，否则为 1</td>
<td>（A ^ B）得到 49，即 0011 0001</td>
</tr>
<tr>
<td><code>〜</code></td>
<td>按位取反运算符翻转操作数的每一位，即 0 变成 1，1 变成 0。</td>
<td>（〜A）得到-61，即 1100 0011</td>
</tr>
<tr>
<td><code>&lt;&lt;</code></td>
<td>按位左移运算符。左操作数按位左移右操作数指定的位数。</td>
<td>A &lt;&lt; 2 得到 240，即 1111 0000</td>
</tr>
<tr>
<td><code>&gt;&gt;</code></td>
<td>按位右移运算符。左操作数按位右移右操作数指定的位数。</td>
<td>A &gt;&gt; 2 得到 15 即 1111</td>
</tr>
<tr>
<td><code>&gt;&gt;&gt;</code></td>
<td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>
<td>A&gt;&gt;&gt;2 得到 15 即 0000 1111</td>
</tr>
</tbody>
</table>
<h3> 逻辑运算符</h3>
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>&amp;&amp;</code></td>
<td style="text-align:left">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td>
<td style="text-align:left"><code>（A &amp;&amp; B）</code>为假。</td>
</tr>
<tr>
<td style="text-align:left">`</td>
<td style="text-align:left"></td>
<td style="text-align:left">`</td>
</tr>
<tr>
<td style="text-align:left"><code>!</code></td>
<td style="text-align:left">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为 true，则逻辑非运算符将得到 false。</td>
<td style="text-align:left"><code>!(A &amp;&amp; B)</code>为真。</td>
</tr>
</tbody>
</table>
<h3> 赋值运算符</h3>
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>=</code></td>
<td style="text-align:left">简单的赋值运算符，将右操作数的值赋给左侧操作数</td>
<td style="text-align:left">C = A + B 将把 A + B 得到的值赋给 C</td>
</tr>
<tr>
<td style="text-align:left"><code>+=</code></td>
<td style="text-align:left">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>
<td style="text-align:left">C + = A 等价于 C = C + A</td>
</tr>
<tr>
<td style="text-align:left"><code>-=</code></td>
<td style="text-align:left">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>
<td style="text-align:left">C - = A 等价于 C = C - A</td>
</tr>
<tr>
<td style="text-align:left"><code>*=</code></td>
<td style="text-align:left">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>
<td style="text-align:left">C _ = A 等价于 C = C _ A</td>
</tr>
<tr>
<td style="text-align:left"><code>/=</code></td>
<td style="text-align:left">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>
<td style="text-align:left">C / = A，C 与 A 同类型时等价于 C = C / A</td>
</tr>
<tr>
<td style="text-align:left"><code>％=</code></td>
<td style="text-align:left">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>
<td style="text-align:left">C％= A 等价于 C = C％A</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;&lt; =</code></td>
<td style="text-align:left">左移位赋值运算符</td>
<td style="text-align:left">C &lt;&lt; = 2 等价于 C = C &lt;&lt; 2</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;&gt;=</code></td>
<td style="text-align:left">右移位赋值运算符</td>
<td style="text-align:left">C &gt;&gt; = 2 等价于 C = C &gt;&gt; 2</td>
</tr>
<tr>
<td style="text-align:left"><code>＆=</code></td>
<td style="text-align:left">按位与赋值运算符</td>
<td style="text-align:left">C＆= 2 等价于 C = C＆2</td>
</tr>
<tr>
<td style="text-align:left"><code>^=</code></td>
<td style="text-align:left">按位异或赋值操作符</td>
<td style="text-align:left">C ^ = 2 等价于 C = C ^ 2</td>
</tr>
<tr>
<td style="text-align:left">`</td>
<td style="text-align:left">=`</td>
<td style="text-align:left">按位或赋值操作符</td>
</tr>
</tbody>
</table>
<h3> 条件运算符（? :）</h3>
<p>也叫作三元运算符，共有 3 个操作数，且需要判断布尔表达式的值；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> instanceof</h3>
<p>用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> equals() 和 ==</h3>
<ul>
<li><code>==</code></li>
</ul>
<p>基本数据类型用 <code>==</code> 比较的是值，用于引用数据类型时判断两个对象的内存地址是否相等，即两对象是否是同一个对象；</p>
<blockquote>
<p>本质来讲，由于 Java 中只有值传递，所以不管是基本数据类型还是引用数据类型，比较的其实都是值，只不过引用类型变量存的值是对象的地址；</p>
</blockquote>
<ul>
<li><code>equals()</code></li>
</ul>
<p>作用也是判断两个对象是否相等，但是 <strong>不能用于基本数据类型变量的比较</strong>。存在于 <code>Object()</code> 类中，所以所有类都具有 <code>equals()</code> 方法存在两种使用情况：</p>
<ol>
<li><strong>类未覆盖 <code>equals()</code> 方法</strong>：此时通过 <code>equals()</code> 比较该类的两个对象时，等价于 <code>==</code> 比较这两个对象，默认使用 <code>Object</code> 类中的 <code>equals()</code> 方法；</li>
<li><strong>类覆盖了 <code>equals()</code> 方法</strong>：一旦覆盖了该方法，则用来比较两个对象的内容是否相等，如我们常用的 <code>String、BitSet、Data、File</code> 就覆盖了 <code>equals()</code> 方法；</li>
</ol>
<h2> 方法</h2>
<h3> 方法的类型</h3>
<ol>
<li>无参无返回值；</li>
<li>无参有返回值；</li>
<li>有参无返回值；</li>
<li>有参有返回值；</li>
</ol>
<h3> 重载和重写</h3>
<ol>
<li><strong>重载（Overload）</strong></li>
</ol>
<p>重载就是同样方法能够根据输入的不同，做出不同的处理。重载发生在 <strong>编译期</strong>，而且在同一个类中，<strong>方法名必须相同，参数类型、参数个数、参数顺序不同，返回值和访问修饰符可以不同。</strong> 总的而言：<strong>重载就是同一类中多个同名方法根据不同传参来执行不同的逻辑处理。</strong></p>
<ol start="2">
<li><strong>重写（Override）</strong></li>
</ol>
<p>重写是当子类继承自父类的相同方法，输入数据一样，但最终响应不同于父类。重写发生在 <strong>运行期</strong>，是子类对父类允许访问的方法的实现逻辑进行改写。重写方法的方法名、参数列表以及返回值必须相同，抛出的异常范围不超出父类，访问修饰符的范围也不能小于父类。此外，若父类方法别 <code>private/final/static</code> 修饰，则子类无法重写父类方法，但 <code>static</code> 修饰的方法能被再次声明。<strong>构造方法是个特例，不能被重写</strong>。总结起来就是：<strong>重写即子类对父类方法的改造，外部样子不能改变，但能够改变内部逻辑</strong>。</p>
<ol start="3">
<li><strong>重载 vs 重写</strong></li>
</ol>
<table>
<thead>
<tr>
<th>不同点</th>
<th>重载</th>
<th>重写</th>
</tr>
</thead>
<tbody>
<tr>
<td>参数列表</td>
<td>必须不同</td>
<td>必须相同</td>
</tr>
<tr>
<td>返回类型</td>
<td>可不同</td>
<td>必须相同</td>
</tr>
<tr>
<td>访问修饰符</td>
<td>可不同</td>
<td>不能比父类更严格</td>
</tr>
<tr>
<td>发生范围</td>
<td>同一类中</td>
<td>父子类</td>
</tr>
<tr>
<td>异常范围</td>
<td>可修改</td>
<td>可以减少或删除，不能抛新异常或范围更广的异常</td>
</tr>
<tr>
<td>发生阶段</td>
<td>编译期</td>
<td>运行期</td>
</tr>
</tbody>
</table>
<h3> 深/浅拷贝</h3>
<ol>
<li><strong>浅拷贝</strong></li>
</ol>
<p>浅拷贝是 <strong>按位拷贝对象，会创建一个新对象，该对象具有原始对象属性值的精确拷贝。</strong> 若属性是基本类型，则拷贝的是基本类型的值；若属性是引用类型（内存地址），则拷贝的是内存地址。因此，一旦其中任一对象改变了该引用类型属性，均会影响到对方；</p>
<p></p>
<ol start="2">
<li><strong>深拷贝</strong></li>
</ol>
<p>深拷贝会 <strong>拷贝所有属性，同时拷贝属性指向的动态分配的内存</strong>。当对象和它引用的对象一起拷贝是即发生深拷贝，<strong>相比于浅拷贝，深拷贝速度较慢同时花销更大</strong>。</p>
<p></p>
<ol start="3">
<li><strong>总结</strong></li>
</ol>
<p>浅拷贝后，改变其中任一份值都会引起另一份值的改变；而深拷贝后，改变其中任何一份值，均不会对另一份值造成影响；</p>
<h3> 值传递</h3>
<p>推荐阅读：<a href="https://juejin.im/post/5bce68226fb9a05ce46a0476" target="_blank" rel="noopener noreferrer">https://juejin.im/post/5bce68226fb9a05ce46a0476</a></p>
<h4> 形参和实参</h4>
<ol>
<li><strong>形参</strong>：方法被调用时需要传递进来的参数，如 <code>func(String name)</code> 中的 <code>name</code> 就是一个形参，只有在 <code>func</code> 被调用时 <code>name</code> 才被分配内存空间，当方法执行完后，<code>name</code> 将自动销毁释放空间；</li>
<li><strong>实参</strong>：方法调用时传入的实际值，在方法调用前就已经被初始化且在方法调用时被传入；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 值传递和引用传递</h4>
<ol>
<li><strong>值传递</strong></li>
</ol>
<p>方法被调用时，实参通过形参将其内容副本传入方法内部，此时形参接收的内容实际上是实参的一个拷贝，因此在方法内对形参的任何操作均只针对于实参的拷贝，不会影响到实参原始值的内容。即 <strong>值传递的是实参的一个副本，对副本的操作不会影响实参原始值，也即无论形参如何变化，都不会影响到实参的内容。</strong></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>引用传递</strong></li>
</ol>
<p>引用即指向真实内容的地址值，在方法调用时，<strong>实参的地址被传递给相应形参，在方法体内，形参和实参指向同一个地址内存，因此此时操作形参也会影响到实参的真实内容。</strong></p>
<p>但 Java 中并 <strong>不存在引用传递</strong>，因为 <strong>无论是基本类型还是引用类型，在实参传入形参时，均为值传递，即传递的都是一个副本，而非实参内容本身</strong>。</p>
<ol start="3">
<li><strong>总结</strong></li>
</ol>
<p><strong>如果是对基本数据类型的数据进行操作，由于实参原始内容和副本都是存储实际值，并且处于不同栈区，因此对形参的操作，实参原始内容不受影响。</strong></p>
<p><strong>如果是对引用类型的数据进行操作，分两种情况，</strong></p>
<ul>
<li><strong>一种是形参和实参保持指向同一个对象地址，则形参的操作，会影响实参指向的对象的内容。</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>另一种是形参被改动指向新的对象地址（如重新赋值引用），则形参的操作，不会影响实参指向的对象的内容。</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 面向对象</h2>
<h3> 面向对象 vs 面向过程</h3>
<p>推荐阅读：<a href="https://www.zhihu.com/question/27468564/answer/757537214" target="_blank" rel="noopener noreferrer">https://www.zhihu.com/question/27468564/answer/757537214</a></p>
<ul>
<li><strong>面向对象（Object Oriented）</strong></li>
</ul>
<p>面向过程是一种 <strong>对现实世界理解和抽象的方法</strong>，<strong>更容易维护、复用、扩展</strong>。最主要的特点就是 <strong>继承、封装、多态</strong>，所以 设计出的系统耦合性较低，但比起面向过程性能要低。</p>
<ul>
<li><strong>面向过程（Procedure Oriented）</strong></li>
</ul>
<p>面向过程是一种 <strong>以过程为中心</strong> 的编程思想，以正在发生为主要目标进行编程，不同于面向的的是谁受影响。最主要的不同就在于 <strong>封装、继承、多态</strong>，其性能比面向对象更高。</p>
<ul>
<li><strong>总结</strong></li>
</ul>
<p>面向对象的方式使得每个类都各司其职，最后整合到一起来共同完成一个项目，而面向过程则是让一个类中的功能越来越多，就像一个全栈工程师能够一个人搞定所有事。</p>
<h3> 封装、继承、多态</h3>
<ol>
<li><strong>封装</strong></li>
</ol>
<p>将客观事物封装为抽象的类，同时类能把自己的数据和方法只让可信的类或对象进行操作，对不可信的类进行信息隐藏。即把属于同一类事物的共性（属性与方法）归到一个类，从而方便使用。</p>
<p>通过 封装，实现了 <strong>专业分工</strong>，将能实现特定功能的代码封装为独立实体，供我们在需要时调用。此外，封装还 <strong>隐藏了信息以及实现细节</strong>，使得我们通过访问权限权限符就能将想要隐藏的信息隐藏起来。</p>
<ol start="2">
<li><strong>继承</strong></li>
</ol>
<p>可以使用现有类的所有功能，且无需重写现有类来进行功能扩展，即个性对共性的属性与方法的接受，并加入特性所特有的属性与方法。通过继承的新类叫做 <strong>子类/派生类</strong>，被继承的类叫做 <strong>父类/基类/超类</strong>，具有如下特点：</p>
<ul>
<li><strong>子类拥有父类对象所有属性和方法，但父类中的私有属性和方法，子类是无法访问的</strong>；</li>
<li>子类可以对父类进行扩展；</li>
<li>子类可以用自己的方式来实现父类的方法；</li>
</ul>
<ol start="3">
<li><strong>多态</strong></li>
</ol>
<p>多态是允许 <strong>将父对象设置为和一个或多个其子对象相等的技术</strong>，赋值后，父对象能够根据指向的子类对象的特性以不同方式运作，即 <strong>父类引用指向子类对象实例</strong>，有 <strong>重载和重写</strong> 两种实现方式。具有如下特点：</p>
<ul>
<li>对象类型不可变，但引用类型可变；</li>
<li>对象类型和引用类型之间有继承（类）/实现（接口）的关系；</li>
<li>方法具有多态性，但属性不具有；</li>
<li>若子类重写了父类方法，则真正执行的是子类覆盖的方法，若子类未覆盖父类方法，则调用父类的方法。</li>
</ul>
<h3> 成员变量 vs 局部变量 vs 静态变量</h3>
<table>
<thead>
<tr>
<th>不同</th>
<th>语法</th>
<th>存储位置</th>
<th>生命周期</th>
<th>初始化值</th>
<th>调用方式</th>
<th>别名</th>
</tr>
</thead>
<tbody>
<tr>
<td>成员变量</td>
<td>1、 属于类<br>2、能被访问控制符、<code>static、final</code> 等修饰</td>
<td>堆</td>
<td>与对象共存亡</td>
<td>有，基本数据类型为对应默认值，而对象统一为 <code>null</code></td>
<td>对象调用</td>
<td>实例变量</td>
</tr>
<tr>
<td>局部变量</td>
<td>1、属于方法（方法中的变量或参数）<br>2、不能被访问控制符及 <code>static</code> 修饰，但可以被 <code>final</code> 修饰</td>
<td>栈</td>
<td>与方法共存亡</td>
<td>无，必须定义赋值后使用</td>
<td></td>
<td></td>
</tr>
<tr>
<td>静态变量</td>
<td>1、属于类<br>2、被 <code>static</code> 修饰，被所有类对象共用</td>
<td>方法区</td>
<td>与类共存亡</td>
<td>同成员变量初始化值</td>
<td>类名调用（推荐）、对象调用</td>
<td>类变量</td>
</tr>
</tbody>
</table>
<h3> 构造方法的特点</h3>
<ol>
<li>方法名与类名同名；</li>
<li>无返回值，但不能用 <code>void</code> 关键字声明；</li>
<li>生成类对象时自动执行，无需显式调用；</li>
</ol>
<h3> 抽象类 &amp; 接口</h3>
<ol>
<li><strong>接口</strong></li>
</ol>
<ul>
<li>
<p>接口中所有方法默认是 <code>public</code>，而且不能有实现（Java 8 之前，Java 8 开始可以有默认实现）；</p>
</li>
<li>
<p>接口中所有变量均为 <code>static、final</code>，不能有其他变量；</p>
</li>
<li>
<p>一个类可以实现多个接口（通过 <code>implements</code> 关键字），而且接口自身可以通过 <code>extends</code> 来扩展多个接口；</p>
</li>
<li>
<p>接口是对行为的抽象，属于行为规范；</p>
</li>
</ul>
<ol start="2">
<li><strong>抽象类</strong></li>
</ol>
<ul>
<li>抽象类中既可以有抽象方法，也可以有非抽象的方法；</li>
<li>一个类只能实现一个抽象类；</li>
<li>抽象方法可以被 <code>public、protected、default</code> 修饰，但不能用 <code>private</code>，否则不能被重写；</li>
<li>抽象是对类的抽象，是一种模板设计；</li>
</ul>
<h3> Object 类中常见方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public final native Class&lt;?&gt; getClass()</code></td>
<td>用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写</td>
</tr>
<tr>
<td><code>public native int hashCode()</code></td>
<td>用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的 HashMap</td>
</tr>
<tr>
<td><code>public boolean equals(Object obj)</code></td>
<td>用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写用户比较字符串的值是否相等</td>
</tr>
<tr>
<td><code>protected native Object clone() throws CloneNotSupportedException</code></td>
<td>用于创建并返回当前对象的一份浅拷贝。一般情况下，对于任何对象 x，表达式 x.clone() != x 为 true，x.clone().getClass() == x.getClass() 为 true。Object 本身没有实现 Cloneable 接口，所以不重写 clone 方法并且进行调用的话会发生 CloneNotSupportedException 异常</td>
</tr>
<tr>
<td><code>public String toString()</code></td>
<td>返回类的名字@实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法</td>
</tr>
<tr>
<td><code>public final native void notify()</code></td>
<td>不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个</td>
</tr>
<tr>
<td><code>public final native void notifyAll()</code></td>
<td>不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程</td>
</tr>
<tr>
<td><code>public final native void wait(long timeout) throws InterruptedException</code></td>
<td>不能重写。暂停线程的执行注意：sleep 方法没有释放锁，而 wait 方法释放了锁 。timeout 是等待时间，调用该方法后当前线程进入睡眠状态，知道如下时间发生：<br>1. 其他线程调用该对象的 <code>notify()/notifyAll()</code> 方法；<br>2. 时间间隔到了；<br>3. 其他线程调用了 <code>interrupt()</code> 中断该线程；</td>
</tr>
<tr>
<td><code>public final void wait(long timeout, int nanos) throws InterruptedException</code></td>
<td>多了 nanos 参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 毫秒</td>
</tr>
<tr>
<td><code>public final void wait() throws InterruptedException</code></td>
<td>跟之前的 2 个 wait 方法一样，只不过该方法一直等待，没有超时时间这个概念</td>
</tr>
<tr>
<td><code>protected void finalize() throws Throwable { }</code></td>
<td>实例被垃圾回收器回收的时候触发的操作</td>
</tr>
</tbody>
</table>
<h3> hashCode &amp; equals</h3>
<p>推荐阅读：<a href="https://juejin.im/post/5a4379d4f265da432003874c" target="_blank" rel="noopener noreferrer">https://juejin.im/post/5a4379d4f265da432003874c</a></p>
<h4> equals</h4>
<ol>
<li>重写 <code>equals()</code> 方法的准则：</li>
</ol>
<table>
<thead>
<tr>
<th>准则</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>自反性</strong></td>
<td>对任意非空引用值 <code>x</code>，<code>x.equals(x)</code> 应该返回 <code>true</code></td>
</tr>
<tr>
<td><strong>对称性</strong></td>
<td>对于任何非空引用值 <code>x</code>和 <code>y</code>，当 <code>y.equals(x)</code> 返回 <code>true</code>时，<code>x.equals(y)</code> 也应返回 <code>true</code></td>
</tr>
<tr>
<td><strong>传递性</strong></td>
<td>对于任何非空引用值<code>x、y</code> 和 <code>z</code>，如果 <code>x.equals(y)</code> 返回 <code>true</code>， 并且 <code>y.equals(z)</code> 返回 <code>true</code>，那么 <code>x.equals(z)</code> 也应返回 <code>true</code></td>
</tr>
<tr>
<td><strong>一致性</strong></td>
<td>对于任何非空引用值 <code>x</code> 和 <code>y</code>，多次调用 <code>x.equals(y)</code> 始终返回 <code>true</code> 或始终返回 <code>false</code>， 前提是对象上 <code>equals</code>比较中所用的信息没有被修改</td>
</tr>
<tr>
<td><strong>非空性</strong></td>
<td>对于任何非空引用值 <code>x</code>，<code>x.equals(null)</code> 都应返回 <code>false</code></td>
</tr>
</tbody>
</table>
<h4> hashCode</h4>
<p><code>hashCode</code> 用于返回对象 <code>hash</code> 值，主要是为了加快查找的快捷性，因为 <code>hashCode()</code> 是 <code>Object</code> 类中的方法，所以所有 Java 类均有 <code>hashCode()</code>，在 <code>HashTable</code> 和 <code>HashMap</code> 这类的散列结构中，均是通过 <code>hashCode()</code> 来查找在散列表中位置，通过 <code>hashCode</code> 能够较快的茶道小内存块。</p>
<h4> 为什么重写 <code>equals()</code> 必须重写 <code>hashCode()</code></h4>
<ol>
<li>若两个对象相等，则 <code>hashCode()</code> 一定也相同，因为 <code>equals()</code> 是绝对可靠的；</li>
<li>两个对象相等，则两个对象分别调用 <code>equals()</code> 方法也返回 <code>true</code>；</li>
<li>两个对象有相同的 <code>hashCode()</code>，他们不一定相等，因为 <code>hashCode()</code> 不是绝对可靠的；</li>
<li>如果重写了 <code>equals()</code>，但保留 <code>hashCode()</code> 的实现不变，则可能出现两者相等，但 <code>hashCode</code> 却不一样；</li>
<li>因此，一旦重写了 <code>equals()</code> 方法，则必须重写 <code>hashCode()</code>，<code>hashCode()</code> 的默认行为是对堆上的对象产生独特值。如果没有重写 <code>hashCode()</code>，则该 <code>class</code> 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）。</li>
</ol>
<h3> 序列化与反序列化</h3>
<h4> 定义</h4>
<ul>
<li><strong>序列化</strong>：指将对象转换为字节序列的过程；</li>
<li><strong>反序列化</strong>：指将字节序列转换为目标对象的过程；</li>
</ul>
<h4> 需要序列化的场景</h4>
<p>当 Java 对象需要在网络上传输或者持久化存储到文件中时，我们就需要对象进行序列化；</p>
<h4> 如何实现序列化</h4>
<p>要实现序列化，只需要让类实现 <code>Serializable</code> 接口即可，此时就标注该类对象能够被序列化；</p>
<p>针对类中某些数据不想序列化时，可以使用 <code>transient</code> 关键字来实现，例如：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Java 容器面试总结</title>
      <link>https://cunyu1943.site/JavaPark/md/interview/20220802-collection.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/interview/20220802-collection.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">Java 容器面试总结</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 Java 集合类简介 集合概览 Java 集合类主要都是从 Collection 和 Map 两个接口派生而成，其中 Collection 又包含 List、Set 和 Queue，如下图。Java 集合就像容器，能够将多个同类型的对象装进该容器中，所以又叫容器。其中各集合含义如下：</description>
      <category>面试宝典</category>
      <pubDate>Tue, 02 Aug 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> Java 集合类简介</h2>
<h3> 集合概览</h3>
<p>Java 集合类主要都是从 <code>Collection</code> 和 <code>Map</code> 两个接口派生而成，其中 <code>Collection</code> 又包含 <code>List、Set 和 Queue</code>，如下图。Java 集合就像容器，能够将多个同类型的对象装进该容器中，所以又叫容器。其中各集合含义如下：</p>
<ul>
<li><strong>Map</strong>：代表具有映射关系的集合，通过 <code>key-value</code> 存储，其中 <code>key</code> 是不可重复的，用于标识集合中的每项数据，每个 <code>key</code> 最多只能映射一个 <code>value</code>；</li>
<li><strong>List</strong>：代表有序、可重复的集合；</li>
<li><strong>Set</strong>：代表无序、不可重复的集合；</li>
<li><strong>Queue</strong>：队列集合实现；</li>
</ul>
<p></p>
<h3> 集合选用技巧</h3>
<p>主要根据集合的特点来进行选择：</p>
<ol>
<li>
<p><strong>如果需要存放元素值</strong>：</p>
<ul>
<li>要保证元素唯一，选用实现 <code>Set</code> 接口的集合 <code>HashSet</code> 或 <code>TreeSet</code>；</li>
<li>不用保证元素唯一，选择实现 <code>List</code> 接口的集合 <code>ArrayList</code> 或 <code>LinkedList</code>；</li>
</ul>
</li>
<li>
<p><strong>如果需要存放键值对</strong>：</p>
<ul>
<li>需要排序：选用 <code>Map</code> 接口下的 <code>TreeMap</code>；</li>
<li>无需排序：选用 <code>Map</code> 接口下的 <code>HashMap</code>；</li>
<li>保证线程安全：选用 <code>Map</code> 接口下的 <code>ConcurrentHashMap</code>；</li>
</ul>
</li>
</ol>
<h3> 集合特点</h3>
<ul>
<li>对象封装数据，对象多了也需要存储，集合用于存储对象；</li>
<li>对象个数确定能够使用数组，但是个数不确定时可以用集合，因为集合是可变长度的；</li>
</ul>
<h3> List、Set、Map 之间的区别</h3>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th>元素有序</th>
<th>允许元素重复</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>List</code></td>
<td></td>
<td>是</td>
<td>是</td>
</tr>
<tr>
<td></td>
<td><code>AbstractSet</code></td>
<td>否</td>
<td>否</td>
</tr>
<tr>
<td><code>Set</code></td>
<td><code>HashSet</code></td>
<td>否</td>
<td>否</td>
</tr>
<tr>
<td></td>
<td><code>TreeSet</code></td>
<td>是（二叉树排序）</td>
<td>否</td>
</tr>
<tr>
<td></td>
<td><code>AbstractMap</code></td>
<td>否</td>
<td><code>key</code> 唯一，<code>value</code> 可重复</td>
</tr>
<tr>
<td><code>Map</code></td>
<td><code>HashMap</code></td>
<td>否</td>
<td><code>key</code> 唯一，<code>value</code> 可重复</td>
</tr>
<tr>
<td></td>
<td><code>TreeMap</code></td>
<td>是（二叉树排序）</td>
<td><code>key</code> 唯一，<code>value</code> 可重复</td>
</tr>
</tbody>
</table>
<h2> 集合 vs 数组</h2>
<p>集合和数组都是 Java 中重要的数据结构，两者之间的区别主要有如下两点：</p>
<table>
<thead>
<tr>
<th>不同点</th>
<th>数组</th>
<th>集合</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>容量</strong></td>
<td>初始化时指定，只能存储定长数据</td>
<td>保存不定长的数据</td>
</tr>
<tr>
<td><strong>存储的数据类型</strong></td>
<td>基本数据类型，对象均可</td>
<td>只能是对象（基本数据类型要转换为封装类），而且可以保存 <code>key-value</code> 数据</td>
</tr>
<tr>
<td><strong>存储元素类型</strong></td>
<td>元素必须是同一数据类型</td>
<td>存储的对象可以是不同数据类型</td>
</tr>
</tbody>
</table>
<h2> Collection</h2>
<h3> Collection 声明</h3>
<p></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Collection 常用方法</h3>
<p><code>Collection</code> 是 <code>Set、List、Queue</code> 的父接口，主要提供了如下方法供子类实现，从而实现数据操作。</p>
<p></p>
<p>其中 <code>iterator()</code> 方法的返回值 <code>Iterator</code> 接口类叫做 <strong>迭代器</strong>，主要用于遍历集合元素，定义了如下两个方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>boolean hasNext()</code></td>
<td>若仍有元素可以迭代，则返回 <code>true</code></td>
</tr>
<tr>
<td><code>E next()</code></td>
<td>返回迭代的下一元素</td>
</tr>
<tr>
<td><code>void remove()</code></td>
<td>删除指定元素</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Collection 和 Collections</h3>
<ul>
<li><code>Collection</code>：是一个集合接口，提供了对集合对象进行基本操作的通用接口方法，是所有集合的父类；</li>
<li><code>Collections</code>：是一个包装好的工具类，包含许多静态方法，无法被实例化，比如我们最常用的排序方法 <code>Collections.sort(list)</code>；</li>
</ul>
<h2> Collection 之 Set</h2>
<p><code>Set</code> 集合继承于 <code>Collection</code>，拥有 <code>Collection</code> 有的所有方法，未提供额外方法。<code>Set</code> 不允许包含重复元素，如果试图将两个相同元素加入同一 <code>Set</code> 中，将导致失败。对象的相等性本质是通过对象的 HashCode 来进行判断，<strong>若想要让两个不同的对象视为相等的，就必须覆盖 <code>Object</code> 的 <code>hashCode()</code> 和 <code>equals()</code> 方法</strong>。主要可分为如下几类以及他们的底层数据结构为：</p>
<ul>
<li><strong>HashSet：无序唯一，基于 HashMap，底层采用 HashMap 保存元素</strong></li>
<li><strong>LinkedHashSet：继承于 HashSet，内部通过 LinkedHashMap 实现</strong></li>
<li><strong>TreeSet：有序唯一，基于红黑树实现</strong></li>
</ul>
<h3> HashSet 类</h3>
<ol>
<li><strong>HashSet 的特点</strong></li>
</ol>
<ul>
<li>无法保证元素的排列顺序；</li>
<li><code>HashSet</code> 不是同步的（非线程安全），若多个线程同时访问一个 <code>HashSet</code>，则必须通过代码来保证其同步；</li>
<li>集合元素值可以是 <code>null</code>；</li>
</ul>
<ol start="2">
<li><strong>LinkedHashSet</strong></li>
</ol>
<p><code>LinkedHashSet</code> 是 <code>HashSet</code> 的子类，同样是根据元素的 <code>hashCode</code> 来决定元素的存储位置，同时用链表维护元素顺序，从而保证元素以插入的顺序来保存。</p>
<ol start="3">
<li><strong>HashSet 中判断集合元素相等</strong></li>
</ol>
<p>不同的对象进行比较，可以有如下四种情况：</p>
<ul>
<li>若两元素通过 <code>equal()</code> 方法比较返回 <code>false</code>，但两者的 <code>hashCode()</code> 返回不相等，则将其存储在不同位置；</li>
<li>若两元素通过 <code>equal()</code> 方法比较返回 <code>true</code>，但两者的 <code>hashCode()</code> 返回不相等，则将其存储在不同位置；</li>
<li>若两元素通过 <code>equal()</code> 方法比较返回 <code>false</code>，但两者的 <code>hashCode()</code> 返回相等，则将其存储在相同位置，在这个位置以链表式结构来保存多个对象。因为向 <code>HashSet</code> 集合中存入一个元素时，<code>HashSet</code> 将调用对象的 <code>hashCode()</code> 获取其 <code>hash</code> 值，然后根据 <code>hash</code> 值来决定对象在 <code>HashSet</code> 中的存储位置；</li>
<li>若两元素通过 <code>equal()</code> 方法比较返回 <code>true</code>，且两者的 <code>hashCode()</code> 返回相等，则不添加到 <code>HashSet</code>；</li>
</ul>
<ol start="4">
<li><strong>HashSet 实现原理</strong></li>
</ol>
<p>基于 <code>HashMap</code> 实现，<code>HashSet</code> 的值存放在 <code>HashMap</code> 的 <code>key</code> 上，其 <code>value</code> 统一为 <code>PRESENT</code>。因此其实现基本都是直接调用底层 <code>HashMap</code> 的相关方法来实现。</p>
<ol start="5">
<li><strong>HashMap vs HashSet</strong></li>
</ol>
<table>
<thead>
<tr>
<th>对比项</th>
<th>HashMap</th>
<th>HashSet</th>
</tr>
</thead>
<tbody>
<tr>
<td>实现的接口</td>
<td><code>Map</code></td>
<td><code>Set</code></td>
</tr>
<tr>
<td>存储的元素</td>
<td>键值对</td>
<td>对象</td>
</tr>
<tr>
<td>添加元素的方法</td>
<td><code>put(key, value)</code></td>
<td><code>add()</code></td>
</tr>
<tr>
<td>HashCode 计算方式</td>
<td>利用键 <code>key</code> 计算</td>
<td>用成员对象进行计算 <code>HashCode</code> 值</td>
</tr>
<tr>
<td>效率</td>
<td>相对较快</td>
<td>相对较慢</td>
</tr>
</tbody>
</table>
<h3> TreeSet 类</h3>
<ul>
<li>使用二叉树的原理对新 <code>add()</code> 的对象按指定顺序排序，每增加一个对象就会进行排序，将对象插入二叉树指定位置。一组有序的集合，若未指定排序规则 <code>Comparator</code>，则按照自然排序；</li>
<li><code>Integer</code> 和 <code>String</code> 对象会按照默认的顺序进行排序，但是自定义的对象是不可以的，<strong>自定义的类必须实现 <code>Comparable</code> 接口，且覆写相应的 <code>ComparaTo()</code> 方法，才能正常使用</strong>；</li>
<li>比较一个对象与指定对象的顺序时，若该对象 <strong>小于、等于或大于</strong> 指定对象，则分别返回 <strong>负整数、零或正整数</strong>；</li>
</ul>
<h3> HashSet vs LinkedHashSet vs TreeSet</h3>
<table>
<thead>
<tr>
<th>Set 类型</th>
<th>使用场景</th>
<th>底层数据结构</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>HashSet</code></td>
<td>无序无重合，快速查找，元素必须定义 <code>hashCode()</code>，线程不安全，能够存储 <code>null</code> 值</td>
<td>链表</td>
</tr>
<tr>
<td><code>LinkedHashSet</code></td>
<td>维护次序的 <code>HashSet</code>，元素必须定义 <code>hashCode()</code>，能按照添加的顺序遍历</td>
<td>链表</td>
</tr>
<tr>
<td><code>TreeSet</code></td>
<td>保持元素大小次序，元素必须实现 <code>Comparable</code> 接口，有自然排序和定制排序</td>
<td>红黑树</td>
</tr>
</tbody>
</table>
<h2> Collection 之 List</h2>
<p><code>List</code> 下主要可以分为如下三种，以及他们的底层数据结构分别是：</p>
<ul>
<li><strong>ArrayList：Object 数组</strong></li>
<li><strong>LinkedList：双向循环链表</strong></li>
<li><strong>Vector：Object 数组</strong></li>
</ul>
<h3> List 常用方法</h3>
<p><code>List</code> 是一个元素有序、可重复的集合，其中的每个元素均有对应的顺序索引，允许使用重复元素，通过索引来访问指定位置的集合元素，继承自 <code>Collection</code>，拥有其所有方法，此外还有其他一些根据索引来操作元素的方法，如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void add(int index, Object element)</code></td>
<td>在列表的指定位置插入指定元素</td>
</tr>
<tr>
<td><code>boolean addAll(int index, Collection&lt;? extends E&gt; c)</code></td>
<td>将集合 <code>c</code> 中的所有元素都插入到列表中的指定位置 <code>index</code>处</td>
</tr>
<tr>
<td><code>Object get(index)</code></td>
<td>返回列表中指定位置的元素</td>
</tr>
<tr>
<td><code>int indexOf(Object o)</code></td>
<td>返回此列表中第一次出现的指定元素的索引；如果此列表不包含该元素，则返回 <code>-1</code></td>
</tr>
<tr>
<td><code>int lastIndexOf(Object o)</code></td>
<td>返回此列表中最后出现的指定元素的索引；如果列表不包含此元素，则返回 <code>-1</code></td>
</tr>
<tr>
<td><code>Object remove(int index)</code></td>
<td>移除列表中指定位置的元素</td>
</tr>
<tr>
<td><code>Object set(int index, Object element)</code></td>
<td>用指定元素替换列表中指定位置的元素</td>
</tr>
<tr>
<td><code>List subList(int fromIndex, int toIndex)</code></td>
<td>返回列表中指定的 <code>fromIndex</code>（包括 ）和 <code>toIndex</code>（不包括）之间的所有集合元素组成的子集</td>
</tr>
<tr>
<td><code>Object[] toArray()</code></td>
<td>返回按适当顺序包含列表中的所有元素的数组（从第一个元素到最后一个元素）</td>
</tr>
<tr>
<td><code>void replaceAll(UnaryOperator operator)</code></td>
<td>根据 <code>operator</code>指定的计算规则重新设置 <code>List</code>集合的所有元素</td>
</tr>
<tr>
<td><code>void sort(Comparator c)</code></td>
<td>根据 <code>Comparator</code>参数对 <code>List</code>集合的元素排序</td>
</tr>
</tbody>
</table>
<h3> ArrayList（数组）</h3>
<ol>
<li><strong>ArrayList 特点</strong>
<ul>
<li>实现了 <code>List</code> 接口的可变数组；</li>
<li>可以插入 <code>null</code>；</li>
<li>非 <code>synchronized</code>；</li>
<li>其 <code>size(),isEmpty(),get(),set(),iterator(),add()</code> 等方法的时间复杂度均为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>；</li>
</ul>
</li>
<li><strong>ArrayList</strong> 优点
<ul>
<li>底层以数组实现，是一种随机访问模式，实现了 <code>RandomAccess</code> 接口，查找时非常快；</li>
<li><code>ArrayList</code> 在顺序添加一个元素时非常方便；</li>
</ul>
</li>
<li><strong>ArrayList 的缺点</strong>
<ul>
<li>删除元素时，需要做一次元素复制操作，若复制的元素较多，则性能较慢；</li>
<li>插入元素时，也需要做一次元素复制操作，一旦复制元素较多，则会导致性能低下；</li>
</ul>
</li>
<li><strong>数组和 List 的相互转换</strong>
<ul>
<li><strong>数组 -&gt; List：</strong> <code>Arrays.asList(array)</code> 进行转换；</li>
<li><strong>List -&gt; 数组：</strong> 利用 <code>List</code> 的 <code>toArray()</code> 进行转换；</li>
</ul>
</li>
</ol>
<h3> Vector（数组 + 线程同步）</h3>
<p>同 <code>ArrayList</code> 一样，底层是通过数组来实现，但是它 <strong>支持线程同步，即某一时刻只有一个线程能够读写 <code>Vector</code></strong>，从而避免了多线程同时写而引起的不一致性，但实现同步所消耗的代价较高，所以其访问效率比 <code>ArrayList</code> 低；</p>
<h3> LinkedList（链表）</h3>
<p><code>LinkedList</code> 是一个链表维护的序列容器，和 <code>ArrayList</code> 最大的区别在于其底层实现，前者使用链表，后者使用数组，所以选用时可以根据数组和链表的特性来进行选择，主要不同有如下几点：</p>
<ul>
<li>数组查找效率高，能够通过索引直接查找出对应元素，但链表却需要每次都从头开始；</li>
<li>链表插入和删除元素比较高效，只需要在插入或删除位置断链后重组链即可，但数组需要重新复制一份将所有数据后移或前移；</li>
<li>动态申请内存时，链表只需要动态创建，但数组达到初始申请长度后，需要重新申请一个更大的数组，并将原来数组的数据迁移过去；</li>
</ul>
<h3> ArrayList vs LinkedList</h3>
<table>
<thead>
<tr>
<th>对比项目</th>
<th>ArrayList</th>
<th>LinkedList</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>数据结构实现</strong></td>
<td>数组</td>
<td>双向链表</td>
</tr>
<tr>
<td><strong>随机访问效率</strong></td>
<td>高</td>
<td>移动指针从前往后依次查找，效率低</td>
</tr>
<tr>
<td><strong>增删效率</strong></td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td><strong>内存空间占用</strong></td>
<td>低，但是需要连续空间</td>
<td>高，除开数据，还有两个引用</td>
</tr>
<tr>
<td><strong>线程安全</strong></td>
<td>不安全</td>
<td>不安全</td>
</tr>
</tbody>
</table>
<h3> ArrayList 和 Vector</h3>
<ul>
<li><strong>相同点</strong>
<ol>
<li>均基于索引，内部由一个数组支持；</li>
<li>两者维护插入的顺序，可以根据插入顺序来获取元素；</li>
<li><code>ArrayList</code> 和 <code>Vector</code> 的迭代器实现都是 <code>fail-fast</code>；</li>
<li><code>ArrayList</code> 和 <code>Vector</code> 均允许 <code>null</code> 值，也可以使用索引值对元素进行随机访问；</li>
</ol>
</li>
<li><strong>不同点</strong>
<ol>
<li><code>Vector</code> 是同步的，而 <code>ArrayList</code> 不是；</li>
<li><code>ArrayList</code> 比 <code>Vector</code> 快，因为有同步，不会过载；</li>
<li><code>ArrayList</code> 更加通用，能使用 <code>Collections</code> 工具类实现轻松操作列表；</li>
</ol>
</li>
</ul>
<h3> List vs Set</h3>
<ol>
<li><strong>各自特点</strong>
<ul>
<li><strong>Set 特点</strong>：一个无序容器，不能存储重复元素，只允许存入一个 <code>null</code>，必须保证元素唯一性，该接口的常用实现类为 <code>HashSet、TreeSet、LinkedHashSet</code>；</li>
<li><strong>List 特点：</strong> 一个有序容器，元素可以重复，允许存入多个 <code>null</code>，元素均有索引，常用实现类为 <code>ArrayList、LinkedList、Vector</code>；</li>
</ul>
</li>
<li><strong>两者对比</strong>
<ul>
<li><strong>Set：</strong> 检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置变化；</li>
<li><strong>List：</strong> 类似于数组，能够动态扩展，查找元素效率高，插入和删除元素效率低，因为会导致其他元素位置改变；</li>
</ul>
</li>
</ol>
<h2> Collection 之 Queue</h2>
<h3> Queue 常用方法</h3>
<p><code>Queue</code> 用于模拟队列这种数据结构，是一种 <strong>先进先出（FIFO，<code>first-in-first-out</code>）</strong> 的容器。队列头部是队列中存放时间最长的元素，尾部元素是队列中存放时间最短的元素。新的元素插入（<code>offer()</code>）到队列尾部，访问元素（<code>poll</code>）操作将返回队列头部元素，通常接口中提供了如下方法 ：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>boolean add(E e)</code></td>
<td>将指定元素插入队尾，成功返回 <code>true</code>，空间不足时抛出 <code>IllegalStateException</code></td>
</tr>
<tr>
<td><code>E element()</code></td>
<td>获取队首元素但不移除</td>
</tr>
<tr>
<td><code>boolean offer(E e)</code></td>
<td>将指定元素插入队尾，适用于有容量限制的队列（优于 <code>add(E e)</code>）</td>
</tr>
<tr>
<td><code>E peek()</code></td>
<td>获取队首元素但不移除，队列为空返回 <code>null</code></td>
</tr>
<tr>
<td><code>E poll()</code></td>
<td>获取并移除队首元素，队列为空返回 <code>null</code></td>
</tr>
<tr>
<td><code>E remove()</code></td>
<td>获取并移除队首元素</td>
</tr>
</tbody>
</table>
<h3> BlockingQueue</h3>
<p><code>java.util.concurrent.BlcokingQueue</code> 是一个队列，在进行检索或移除一个元素时，都会等待队列变为非空。挡在添加一个元素时，会等待队列中的可用空间。属于 Java 集合框架中的一部分，主要用于实现 <strong>生产者-消费者模式</strong>。无需担心等待生产者有可用空间或消费者有可用对象。因为在 <code>BlockingQueue</code> 的实现类中都已经进行了处理。主要提供了 <code>ArrayBlockingQueue、LinkedBlockingQueue、PriorityBlockingQueue、SynchronousQueue</code> 等几种实现方式。</p>
<h3> poll() vs remove()</h3>
<ul>
<li><strong>相同点</strong>：均返回队列第一个元素，并在队列中删除返回的对象；</li>
<li><strong>不同的</strong>：<code>Queue</code> 中没有元素时 <code>poll()</code> 将返回 <code>null</code>，而 <code>remove()</code> 将直接抛出 <code>NoSuchElementException</code> 异常；</li>
</ul>
<h2> Map</h2>
<p></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Map</code> 可分为如下如下几种，以及他们的底层实现分别是：</p>
<ul>
<li><strong>HashMap：JDK 1.8 前由 数组 + 链表组成，其中数组是主体，链表则是为了解决哈希冲突而存在；JDK 1.8 后，当链表长度大于阈值（默认为 8）后，链表将转换为红黑树，从而减少搜索时间；</strong></li>
<li><strong>LinkedHashMap：继承于 HashMap，底层同 HashMap，在它的基础上增加了一条双向链表；</strong></li>
<li><strong>HashTable：数组 + 链表，数组是 HashMap 的主体，链表则是为了解决哈希冲突而存在；</strong></li>
<li><strong>TreeMap：红黑树</strong>；</li>
</ul>
<h3> Map 常用方法</h3>
<p><code>Map</code> 用于保存具有映射关系的数据，所以通常保存着两组数，一组保存 <code>key</code>，一组保存 <code>value</code> 。两者都可以是任意引用类型的数据，但是 <code>key</code> 不允许重复。接口中通常提供了如下方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void clear()</code></td>
<td>从映射中移除所有映射关系</td>
</tr>
<tr>
<td><code>boolean containsKey(Object key)</code></td>
<td>若映射中包含指定 <code>key</code> 的映射关系，返回 <code>true</code></td>
</tr>
<tr>
<td><code>boolean containsValue(Object value)</code></td>
<td>若映射将一个或多个 <code>key</code> 映射到指定值，返回 <code>true</code></td>
</tr>
<tr>
<td><code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code></td>
<td>返回映射中包含的映射关系的 <code>Set</code> 视图</td>
</tr>
<tr>
<td><code>boolean equals(Object o)</code></td>
<td>比较指定的对象与此映射是否相等</td>
</tr>
<tr>
<td><code>V get(Objcet key)</code></td>
<td>返回指定建所映射的值；若该映射不含该键的映射关系，则返回 <code>null</code></td>
</tr>
<tr>
<td><code>int hashCode()</code></td>
<td>返回映射的 <code>hash</code> 值</td>
</tr>
<tr>
<td><code>boolean isEmpty()</code></td>
<td>若映射为包含 <code>key-value</code> 映射关系，则返回 <code>true</code></td>
</tr>
<tr>
<td><code>Set&lt;K&gt; keySet()</code></td>
<td>返回映射中包含的键的 <code>Set</code> 视图</td>
</tr>
<tr>
<td><code>V put(K key, V value)</code></td>
<td>将指定的值与此映射中的指定键关联</td>
</tr>
<tr>
<td><code>void putAll(Map&lt;? extends K, ? extends V&gt; m)</code></td>
<td>从指定映射中将所有映射关系复制到此映射中</td>
</tr>
<tr>
<td><code>V remove(Object key)</code></td>
<td>若存在一个键的映射关系，则将其从映射中移除</td>
</tr>
<tr>
<td><code>int size()</code></td>
<td>返回映射中的 <code>key-value</code> 关系数</td>
</tr>
<tr>
<td><code>Collection&lt;V&gt; values()</code></td>
<td>返回映射中包含的值的 <code>Collection</code> 视图</td>
</tr>
</tbody>
</table>
<h3> HashMap</h3>
<p>最基础常用的一种 <code>Map</code>，无序且以散列表的方式进行存储。<code>HashSet</code> 其实就是基于 <code>HashMap</code>，将其 <code>key</code> 作为单个元素进行存储。关于 <code>HashMap</code> 的更多知识，可以参看 <a href="/JavaPark/md/interview/20220803-hashmap.html" target="blank">HashMap 知多少</a>。</p>
<h3> LinkedHashMap</h3>
<p><code>HashMap</code> 的一个子类，和 <code>HashMap</code> 最大的区别在于 <code>LinkedHashMap</code> 遍历时是有序的，可以保存插入时的顺序，使用 <code>Iterator</code> 遍历时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序，同时还可以设置根据最近访问的元素放在最前面（即 <code>LRU</code>）；</p>
<h3> TreeMap（可排序）</h3>
<p><code>TreeMap</code>基于<strong>红黑树（Red-Black tree）实现</strong>。该映射根据<strong>其键的自然顺序进行排序</strong>，或者根据<strong>创建映射时提供的 <code>Comparator</code>进行排序</strong>，具体取决于使用的构造方法。
<code>TreeMap</code> 的基本操作 <code>containsKey</code>、<code>get</code>、<code>put</code>和 <code>remove</code> 的时间复杂度是 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 。
另外，<code>TreeMap</code>是<strong>非同步</strong>的。 它的 <code>iterator</code>方法返回的<strong>迭代器是 fail-fast</strong> 的。</p>
<h3> WeakHashMap</h3>
<p>除了自身有对 <code>key</code> 的引用之外，若 <code>key</code> 没有其他引用指向它，此时就会自动丢弃该值。</p>
<h3> HashMap 和 HashTable 的区别</h3>
<ol>
<li><code>HashMap</code> 允许 <code>key</code> 和 <code>value</code> 为 <code>null</code>，但 <code>HashTable</code> 不可以；</li>
<li><code>HashTable</code> 是同步的，但 <code>HashMap</code> 不是，所以 <code>HashMap</code> 适合单线程，<code>HashTable</code> 适合多线程；</li>
<li>JDK 1.4 中引入 <code>LinkedHashMap</code>，是 <code>HashMap</code> 的子类，要顺序遍历时能轻易从 <code>HashMap</code> 转向 <code>LinkedHashMap</code>，但 <code>HashTable</code> 中的顺序是不可知的；</li>
<li><code>HashMap</code> 提供对 <code>key</code> 的 <code>Set</code> 进行遍历，因此它是 <code>fail-fast</code> 的，但 <code>HashTable</code> 提供对 <code>key</code> 的 <code>Enumeration</code> 进行遍历，不支持 <code>fail-fast</code>；</li>
</ol>
<h3> 各 Map 类型对比</h3>
<table>
<thead>
<tr>
<th style="text-align:center">Map 类型</th>
<th style="text-align:center">使用场景</th>
<th style="text-align:center">底层实现</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>HashMap</code></td>
<td style="text-align:center">快速查询</td>
<td style="text-align:center">散列表</td>
</tr>
<tr>
<td style="text-align:center"><code>LinkedHashMap</code></td>
<td style="text-align:center">迭代遍历具有顺序(插入顺序 <code>or</code>最近最少使用)</td>
<td style="text-align:center">链表</td>
</tr>
<tr>
<td style="text-align:center"><code>TreeMap</code></td>
<td style="text-align:center">具有排序，唯一可以返回子树的 <code>Map(subMap())</code></td>
<td style="text-align:center">红-黑树</td>
</tr>
<tr>
<td style="text-align:center"><code>WeakHashMap</code></td>
<td style="text-align:center">弱键映射，映射之外无引用的键，可以被垃圾回收</td>
<td style="text-align:center">散列表</td>
</tr>
<tr>
<td style="text-align:center"><code>ConcurrentHashMap</code></td>
<td style="text-align:center">线程安全的 <code>Map</code></td>
<td style="text-align:center">链表</td>
</tr>
<tr>
<td style="text-align:center"><code>IdentityHashMap</code></td>
<td style="text-align:center">用 <code>==</code> 代替 <code>equals()</code> 对键进行排序，专位解决特殊问题</td>
<td style="text-align:center">链表</td>
</tr>
</tbody>
</table>
<h2> 其他</h2>
<h3> 线程安全的集合类</h3>
<ol>
<li>**Vector：**比 ArrayList 多了个同步化机制，但是效率较低，现在不太建议使用；</li>
<li><strong>Stack：</strong> 堆栈类，先进后出；</li>
<li><strong>HashTable：</strong> 相当于 HashMap 多了个线程安全；</li>
<li><strong>Enumeration:</strong> 枚举，相当于迭代器；</li>
</ol>
<h3> 迭代器 Iterator</h3>
<p><code>Iterator</code> 接口提供了遍历任何 <code>Collection</code> 的接口，我们能够从一个 <code>Collection</code> 中使用迭代器方法来获取迭代器实例，它取代了 Java 集合框架中的 <code>Enumeration</code>，允许我们在迭代过程中移除元素；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>HashMap 面试解惑</title>
      <link>https://cunyu1943.site/JavaPark/md/interview/20220803-hashmap.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/interview/20220803-hashmap.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">HashMap 面试解惑</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 HashMap 简介 推荐阅读：https://zhuanlan.zhihu.com/p/31610616</description>
      <category>面试宝典</category>
      <pubDate>Wed, 03 Aug 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> HashMap 简介</h2>
<p>推荐阅读：<a href="https://zhuanlan.zhihu.com/p/31610616" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/31610616</a></p>
<p>HashMap 是一个散列表，基于用于存储键值对（<code>key-value</code>） 的集合，每一个键值对也叫 <code>Entry</code>，分散存储在一个数组中，其中的每个元素的初始值均为 <code>null</code>。</p>
<p>HashMap 继承自 <code>AbstractMap</code>，实现了 <code>Map、Cloneable、java.io.Serializable</code> 接口。其实现不是同步的，意味着它不是线程安全的，其 <code>key、value</code> 均可为 <code>null</code>。另外，由于是键值对存储，所以其中的映射也是无序的。其定义如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>HashMap</code> 基于 <code>Hash</code> 算法实现，通过 <code>put(key, value)</code> 存储，<code>get(key)</code> 获取。当传入 <code>key</code> 时，<code>HashMap</code> 会根据 <code>key.hashCode()</code> 计算 <code>hash</code> 值，然后根据 <code>hash</code> 值将 <code>value</code> 保存到数组。当 <code>hash</code> 值相同时，称为 <code>hash</code> 冲突，此时 <code>HashMap</code> 用链表和红黑树存储相同 <code>hash</code> 值的 <code>value</code>。当 <code>hash</code> 冲突个数较少时，使用链表，否则使用红黑树；</p>
<h2> 数据结构</h2>
<h3> Jdk 1.7</h3>
<p>JDK 1.8 之前，HashMap 底层是 <strong>数组（主） + 链表（副）</strong> 结合在一起使用，即 <strong>链表散列</strong>。通过 <code>key</code> 的 <code>hashCode</code> 经过 HashMap 的 <code>hash()</code> 方法（减少碰撞）后得到对应 <code>hash</code> 值，然后通过 <code>(n - 1) &amp; hash</code> 判断当前元素存放位置（<code>n</code> 指数组大小），若当前位置存在元素，就判断该元素与要存入元素的 <code>hash</code> 值以及 <code>key</code> 是否相同，相同则直接覆盖，不同则通过 <strong>拉链法</strong> 解决冲突。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HashMap 中是一个数组，然后数组中的每个元素是一个单向链表。其中的每个实体是嵌套类 <code>Entry</code> 的实例，主要包括如下四个属性：</p>
<ol>
<li><strong>capacity</strong>：当前数组容量，始终保持为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span>，可以扩容，扩容后数组大小为当前的 2 倍；</li>
<li><strong>loadFactor</strong>：负载因子，<strong>默认为 0.75</strong>；</li>
<li><strong>threshold</strong>：扩容的阈值，等于 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">c</span><span class="mord mathnormal">a</span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">i</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">a</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord mathnormal">a</span><span class="mord mathnormal">c</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">or</span></span></span></span>；</li>
</ol>
<ul>
<li><strong>拉链法</strong></li>
</ul>
<p>将数组和链表互相结合，即创建一个链表数组，数组中的每个元素实际上是一个链表头结点，一旦遇到哈希冲突，就将冲突的值加到链表中；</p>
<p></p>
<p>其中，<strong>数组大小即为 HashMap 的容量，其中的每个元素是一个键值对（即链表的头节点）</strong>。每个链表代表着哈希表的桶（bucket），链表长度即为桶的大小，其中的节点值对应一个键值对。所以一个 <strong>HashMap 中的键值对数量 = 数组的键值对数量 + 所有单链表的键值对</strong> ；</p>
<h3> Jdk 1.8</h3>
<p>Jdk 1.8 之后，在解决哈希冲突时进行了改变，<strong>当链表长度大于阈值（默认为 8）时，链表将转化为红黑树</strong>。从而减少搜索的时间。<strong>解决了发生哈希碰撞后，链表过长而导致的索引效率低的问题，提高了 <code>HashMap </code>的性能</strong>。（红黑树增删改查较快，时间复杂度从 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 降到 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>）。</p>
<ul>
<li>红黑树作为存储结构，要解决 Hash 冲突的方案如下：</li>
</ul>
<ol>
<li>无冲突时，存放在数组中；</li>
<li>有冲突且链表长度 &lt; 8 时：存放在单链表；</li>
<li>有冲突且链表长度 &gt; 8 时：存放在红黑树；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ul>
<li><strong>类的属性</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>哈希桶数组的初始长度 <code>length</code> 为 16，负载因子 <code>loadFactor</code> 默认值为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.75</span></span></span></span>，临界值 <code>threshold</code> 是 <code>HashMap</code> 所能容纳的最大数据量的 <code>Node</code> （键值对）的个数，<code>threshold = length * loadFactor</code>。也就是说，数组定义好长度后，负载因子越大，所能容纳的键值对个数越多。</p>
<h2> 存储过程</h2>
<h3> Jdk 1.7</h3>
<p>Jdk 1.7 中，存储流程如下图所示，HashMap 中的数组元素和链表节点通过 <code>Entry</code> 类实现。即 HashMap 的本质其实是一个存储 <code>Entry</code> 类对象的数组和多个单链表组成。一个 <code>Entry</code> 对象就是一个键值对。</p>
<p></p>
<h3> Jdk 1.8</h3>
<p>Jdk 1.8 中，数据存储过程如下图所示。此时 HashMap 中的数组元素和链表节点采用 <code>Node</code> 类实现。</p>
<p></p>
<h3> JDK 1.7 vs JDK 1.8</h3>
<p>JDK 1.8 主要解决和优化的问题：</p>
<ol>
<li><code>resize</code> 扩容优化；</li>
<li>引入红黑树，目的是避免单条链表过长而影响查询效率；</li>
<li>解决多线程死循环问题，但仍非线程安全，多线程时可能会导致数据丢失；</li>
</ol>
<table>
<thead>
<tr>
<th>不同的</th>
<th>JDK 1.7</th>
<th>JDK 1.8</th>
</tr>
</thead>
<tbody>
<tr>
<td>存储结构</td>
<td>数组 + 链表</td>
<td>数组 + 链表 + 红黑树</td>
</tr>
<tr>
<td>初始化方式</td>
<td><code>inflateTable()</code></td>
<td><code>resize()</code></td>
</tr>
<tr>
<td><code>hash</code> 值计算方式</td>
<td>扰动处理 = 9 次扰动 = 4 次位运算 + 5 次异或运算</td>
<td>扰动处理 = 2 次扰动 = 1 次位运算 + 1 次异或运算</td>
</tr>
<tr>
<td>存放数据的规则</td>
<td>1、无冲突时存数组；<br>2、发生冲突时放链表</td>
<td>1、无冲突时存数组；<br>2、冲突 &amp; 链表长度 &lt; 8：存放单链表<br>3、冲突 &amp; 链表长度 &gt; 8：树华并存放红黑树</td>
</tr>
<tr>
<td>扩容后存储位置的计算方式</td>
<td><code>hashCode</code> -&gt; 扰动函数 -&gt; (h &amp; length - 1)</td>
<td>扩容后位置 = 原位置 or 原位置 + 旧容量</td>
</tr>
</tbody>
</table>
<h2> 源码分析</h2>
<h3> 构造方法</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> get 方法</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> put 方法</h3>
<ol>
<li>Jdk 1.7</li>
</ol>
<p>Jdk 1.7 中，如果 <code>hash</code> 对应数组位置没有元素，就直接插入。如果对应位置有元素，则遍历该元素为头节点的链表，然后依次和插入的 <code>key</code> 进行比较，如果 <code>key</code> 相同就直接覆盖，不同则采用头插法插入元素。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>Jdk 1.8</li>
</ol>
<p>HashMap  仅提供了 <code>put</code> 用于添加元素， 实际上调用的是 <code>putVal</code> 方法，但是 <code>putVal</code> 并不直接提供给用户。如果 <code>hash</code> 对应数组位置无元素，则直接插入。如果对应位置有元素，则将该元素和即将插入的 <code>key</code> 进行比较，若 <code>key</code> 相同则直接覆盖，不同就判断是否是一个树节点，是就调用 <code>e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value)</code> 将元素添加到红黑树；如果不是树节点，就遍历链表插入链表尾部。</p>
<p></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> resize 方法</h3>
<p>主要用于扩容，伴随着异常重新分配 <code>hash</code>，而且会遍历 <code>hash</code> 表中素有元素，比较耗时。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 常用方法</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6">
<li>
<p>HashMap 操作注意事项及优化</p>
</li>
<li>
<p>扩容消耗性能较大，所以在使用 <code>HashMap</code> 时，最好估定一个大致的初始化值，避免频繁扩容；</p>
</li>
<li>
<p>负载因子是可以修改的，默认为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.75</span></span></span></span>；</p>
</li>
<li>
<p><code>HashMap</code> 是线程不安全的，所以不要在并发环境中同时操作 <code>HashMap</code>，并发环境下推荐使用 <code>ConcurrentHashMap</code>；</p>
</li>
</ol>
<h2> 参考资料</h2>
<ol>
<li>
<p><a href="https://blog.csdn.net/carson_ho/article/details/79373026" target="_blank" rel="noopener noreferrer">Java：手把手带你源码分析 HashMap 1.7</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/carson_ho/article/details/79373134" target="_blank" rel="noopener noreferrer">Java源码分析：关于 HashMap 1.8 的重大更新</a></p>
</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>Java 异常面试总结</title>
      <link>https://cunyu1943.site/JavaPark/md/interview/20220804-exception.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/interview/20220804-exception.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">Java 异常面试总结</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 异常简介 异常类层次结构 从结构图可以看出，所有异常均继承自 Throwable 类，它有两个重要的子类：Exception 和 Error ，各自又包含大量子类。</description>
      <category>面试宝典</category>
      <pubDate>Thu, 04 Aug 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 异常简介</h2>
<h3> 异常类层次结构</h3>
<p></p>
<p>从结构图可以看出，所有异常均继承自 <code>Throwable</code> 类，它有两个重要的子类：<code>Exception</code> 和 <code>Error</code> ，各自又包含大量子类。</p>
<ol>
<li><strong>Exception</strong></li>
</ol>
<p><strong>程序本身可以处理的异常</strong>，又可以分为 <strong>受检异常</strong> 和 <strong>非受检异常</strong> ，<strong>受检异常</strong> 可以用 <code>try...catch...</code> 语句进行捕获处理，而且能从异常中恢复。但 <strong>非受检异常</strong> 是程序运行时错误，会导致程序崩溃而无法恢复。</p>
<ul>
<li><strong>受检异常</strong></li>
</ul>
<p>编译器要求必须处理的异常，正确的程序在运行时，经常会出现、预期范围内的情况。一旦发生该类异常，就必须使用某种方式进行处理。<strong>包括除开 <code>RuntimeException</code> 及其子类之外的 <code>Exception</code> 异常</strong>。编译器会检查此类异常，所以我们必须使用 <code>throws</code> 进行抛出或者 <code>try...catch</code> 进行捕获，否则将导致编译失败。</p>
<ul>
<li><strong>非受检异常</strong></li>
</ul>
<p>编译器不会检查而且也不要求我们进行处理，即就算在程序中出现了此类异常，即便我们没有用 <code>try...catch</code> 进行捕获或者用 <code>throws</code> 进行抛出，编译都会成功。包括 <strong><code>RuntimeException</code> 及其子类和错误 <code>Error</code></strong>.</p>
<p>同时也可以分为：<strong>运行时异常和编译时异常</strong>。</p>
<ul>
<li><strong>运行时异常</strong></li>
</ul>
<p><code>RuntimeException</code> 类及其子类，表示 JVM 在运行期间可能出现的异常，Java 编译器不会检查它。没有通过 <code>throws</code> 抛出或 <code>try...catch</code> 捕获，仍然可以编译通过，常见的有 <code>NullPointerException、ArrayIndexOutBoundException、ClassCastException、ArithmeticException、NumberFormatException、IllegalArgumentException</code>；</p>
<ul>
<li><strong>编译时异常</strong></li>
</ul>
<p><code>Exception</code> 中除开运行时异常之外的异常，Java 编译器会检查它，一旦出现，必须使用 <code>throws</code> 进行声明抛出，或者使用 <code>try...catch</code> 进行捕获异常，否则不能通过编译。常见的有 <code>ClassNotFoundException、IOException</code>。在程序中，通常不会自定义该类异常，而是直接用系统提供的异常类，<strong>该异常必须手动在代码中添加捕获语句来处理。</strong></p>
<ol start="2">
<li><strong>Error</strong></li>
</ol>
<p><strong>程序无法处理的错误</strong>，表示程序运行过程中教严重的问题，大多与 coder 所做操作无关，而是代码运行时 JVM 出现的问题。此时说明故障发生于虚拟机本身、或者发生在虚拟机试图执行应用时。</p>
<h3> Throwable 常用方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public String getMessage()</code></td>
<td>返回异常发生时的简要描述</td>
</tr>
<tr>
<td><code>public String toString()</code></td>
<td>返回异常发生时的详细信息</td>
</tr>
<tr>
<td><code>public String getLocalizeMessage()</code></td>
<td>返回异常对象的本地化信息，若子类重写该方法，可以生成本地化信息，若未重写，则返回信息同 <code>getMessage()</code> 方法</td>
</tr>
<tr>
<td><code>public void printStackTrace()</code></td>
<td>在控制台中打印异常对象封装的异常信息</td>
</tr>
</tbody>
</table>
<h3> try-catch-finally 和 try-with-resources</h3>
<ol>
<li><strong>try-catch-finally</strong>
<ul>
<li><strong>try</strong> ：用于捕获异常，后接零个或多个 <code>catch</code>，没有 <code>catch</code> 则必须加上 <code>finally</code>；</li>
<li><strong>catch</strong>：用于处理 <code>try</code> 捕获到的异常；</li>
<li><strong>finally</strong>：无论是否捕获/处理异常，<code>finally</code> 块中内容均会执行，就算 <code>try</code> 或 <code>catch</code> 中有 <code>return</code> 语句，<code>finally</code> 中代码也将在方法返回之前执行；</li>
</ul>
</li>
<li><strong>try-with-resources</strong></li>
</ol>
<p>当我们有必须要关闭的资源时，建议优先使用 <code>try-with-resources</code>，这样写出的代码更加简短清晰。</p>
<ol start="3">
<li><strong>两者对比</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 异常处理</h2>
<p>Java 中，异常处理机制分为 <strong>声明异常、抛出异常和捕获异常</strong>，根据异常的情况，可以对异常进行不同处理：</p>
<p></p>
<h3> 声明异常</h3>
<p>对于知道如何进行处理的异常，一般要进行捕获，但此时不知道如何将处理的异常继续传递下去，可以通过在方法签名中使用 <code>throws</code> 来声明可能抛出的异常，有如下两点需要注意：</p>
<ol>
<li><strong>非受检异常（Error、RuntimeException 及其子类）</strong> 不能使用 <code>throws</code> 关键字来声明要抛出的异常；</li>
<li><strong>一个方法出现编译时异常，就需要 <code>try...catch/throws</code> 进行处理，否则会导致编译失败</strong> ；</li>
</ol>
<h3> 抛出异常</h3>
<p>一旦觉得某些异常无法处理，但同时又不用我们进行处理，那我们就可以将其抛出。一般是使用 <code>throw</code> 在方法内部抛出一个 <code>Throwable</code> 类型的异常。</p>
<h3> 捕获异常</h3>
<p>程序在运行前一般不会报错，但是运行后可能出现某些未知错误，如果不想直接抛出给上一级处理，那我们就需要通过 <code>try...catch...</code> 的形式对异常进行捕获，然后根据不同的情况来进行相应处理。</p>
<h2> 异常常见面试题</h2>
<h3> Error 和 Exception 的区别？</h3>
<p><code>Exception</code> 类的异常能够在程序中进行捕获并处理，遇到该类异常，应该进行处理，从而使程序能够继续正常运行；</p>
<p><code>Error</code> 类的错误一般是虚拟机相关错误，如系统崩溃、内存不足、堆栈溢出等，编译器不会检测这类错误。我们也不会对这类错误进行捕获，一旦发生，一般都会导致程序崩溃无法恢复；</p>
<h3> 运行时异常和受检异常的区别？</h3>
<p>运行时异常包括 <code>RuntimeException</code> 及其子类，表示 JVM 运行期间可能出现的异常，不会被 Java 编译器检查。</p>
<p>而受检异常是除开 <code>RuntimeException</code> 及其子类之外的其他 <code>Exception</code>，会被 Java 编译器检查。</p>
<p>两者的 <strong>区别</strong> 在于：是否需要调用者必须处理该异常，<strong>如果必须处理，则一般使用受检异常，否则一般选择非受检异常（RuntimeException）</strong>；</p>
<h3> throw 和 throws 的区别？</h3>
<ul>
<li><strong>throw：用于在方法内部抛出异常对象</strong>
<ol>
<li><code>throw</code> 用在方法体内，表示抛出异常，由方法体内的语句处理；</li>
<li><code>throw</code> 是具体向外抛出异常的动作，所以抛出的是一个异常实例，执行 <code>throw</code> 一定是抛出了某种异常；</li>
</ol>
</li>
<li><strong>throws：用于在方法签名上声明该方法所要抛出的异常</strong>
<ol>
<li><code>throws</code> 语句使用在方法声明后，表示若抛出异常，则由该方法的调用者来进行异常的处理；</li>
<li><code>throws</code> 主要是声明这个方法会抛出某种类型的异常，让它的使用者要知道需要捕获的异常的类型；</li>
<li><code>throws</code> 表示出现异常的一种可能性，并非一定发生该种异常；</li>
</ol>
</li>
</ul>
<h3> final、finally、finallize 的区别？</h3>
<p><code>final</code> 用于修饰类、方法、变量，修饰类时表示类不能被继承；修饰方法时表示方法不能别重写，但是能够被重载；修饰变量时表示该变量是一个常量无法被重写赋值；</p>
<p><code>finally</code> 一般作用于 <code>try...catch</code> 代码块，处理异常时，通常将必须要执行的代码放在 <code>finally</code> 代码块中，表示无论是否出现异常，此代码块均执行，一般用来存放一些关闭资源的代码；</p>
<p><code>finallize</code> 是一个方法，属于 <code>Object</code> 类，Java 允许用 <code>finallize()</code> 方法在垃圾回收器将对象从内存中清除前做一些必要的清理工作；</p>
<h3> 常见的 RuntimeException 异常？</h3>
<ul>
<li><code>ClassCastException</code></li>
<li><code>IndexOutOfBoundsException</code></li>
<li><code>NullPointerException</code></li>
<li><code>ArrayStoreException</code></li>
<li><code>BufferOverFlowException</code></li>
</ul>
<h3> JVM 如何处理异常？</h3>
<p>一旦某方法发生异常，该方法就会创建一个异常对象，并将其转交给 JVM，该异常对象一般包含 <strong>异常名称、异常描述以及异常发生时应用程序的状态</strong>。这个 <strong>创建异常对象并转交给 JVM 的过程叫做抛出异常</strong>。可能有一系列的方法调用，最终才能进入抛出异常的方法，这一系列方法调用的有序列表叫做调用栈。</p>
<p>JVM 沿着调用栈去查找是否有需要处理异常的代码，一旦发现则调用异常处理代码。当 JVM 发现可以处理异常的代码时，会将发生的异常传递给它。如果 JVM 未找到能够处理该异常的代码块，就会将其转交给默认的异常处理器（JVM 的一部分），由异常处理器打印出异常信息并终止应用程序；</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java 并发面试总结</title>
      <link>https://cunyu1943.site/JavaPark/md/interview/20220805-concurrence.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/interview/20220805-concurrence.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">Java 并发面试总结</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 进程和线程 进程 进程是系统中正在运行的一个程序，是 资源分配的基本单位，每个进程都有独立的地址空间。 进程控制块（Process Control Block，PCB）描述了进程的基本信息和运行状态，所谓的创建和撤销进程，都是指对于 PCB 的操作；</description>
      <category>面试宝典</category>
      <pubDate>Fri, 05 Aug 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 进程和线程</h2>
<h3> 进程</h3>
<p>进程是系统中正在运行的一个程序，是 <strong>资源分配的基本单位，每个进程都有独立的地址空间</strong>。</p>
<p>进程控制块（Process Control Block，PCB）描述了进程的基本信息和运行状态，所谓的创建和撤销进程，都是指对于 PCB 的操作；</p>
<h3> 线程</h3>
<p>线程是 <strong>独立调度的基本单位，被包含在进程中，是进程中的实际运作单位。一个进程中可以有多个线程，所有线程共享该进程的资源</strong>。</p>
<h3> 进程和线程的区别？</h3>
<ol>
<li>进程和线程均为并发单元，根本区别在于：<strong>进程不共享公共内存，但线程共享进程资源</strong>；</li>
<li>从系统的角度来看，进程相当于一个独立软件，在其自己的虚拟内存空间中运行。系统通过将内存中的进程分开，这样一旦某一进程失败也不会干扰公共内存来拖累其他进程。因此一般 <strong>进程是隔离的，通过进程间通信进行协作，进程间通信由操作系统定义为一种中间 API</strong>。</li>
<li>而线程是应用程序的一部分，和同一程序的其他线程共享公共内存，通过公共内存从而减少内存开销，能够更快的交换数据和进行线程间协作；</li>
</ol>
<h3> 线程分类</h3>
<p>Java 线程由两种，一种是 <strong>用户线程</strong>，一种是 <strong>守护线程</strong>；</p>
<h4> 守护线程</h4>
<ol>
<li><strong>守护线程的特点</strong></li>
</ol>
<p>守护线程是一个较特殊的线程，主要被用作程序中后台调度以及支持性工作。当 Java 虚拟机中不存在非守护线程时，守护线程才会随着 JVM 一起结束工作；</p>
<ol start="2">
<li><strong>Java 中的典型守护线程</strong></li>
</ol>
<p>GC（垃圾回收器）</p>
<ol start="3">
<li>如何设置守护线程</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：</strong> <code>Daemon</code> 属性需要再启动线程前设置，不能再启动后设置；</p>
<h2> 如何创建线程实例并运行</h2>
<p><code>Thread</code> 类本质上是实现 <code>Runnable</code> 接口的一个实例，代表一个线程的实例。创建线程实例一般有两种方法：</p>
<h3> 创建 Thread 的子类并重写 <code>run()</code></h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>run()</code> 方法会在调用 <code>start()</code> 方法后被执行，而且一旦线程启动后 <code>start()</code> 方法后就会立即返回，而不是等到 <code>run()</code> 方法执行完毕后再返回。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 实现 Runnable 接口</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在新建类时实现 <code>Runnable</code> 接口，然后在 <code>Thread</code> 类的构造函数中传入 <code>MyRunnable</code> 的实例对象，最后执行 <code>start()</code> 方法即可；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> Runnable vs Callable</h2>
<h3> Runnable</h3>
<p>该接口表示必须在单独的线程中运行的计算单位，只有 <code>run()</code> 方法，而且不允许该方法返回值或抛出未经检查的异常；</p>
<h3> Callable</h3>
<p>该接口表示具有返回值的任务，只有一个 <code>call()</code> 方法，该方法可以返回一个值（也可以是 <code>void</code>），同时也支持抛出异常。<code>Callable</code> 通常在 <code>ExecutorService</code> 事例中用于启动异步任务，然后调用返回的实例从而获取其值；</p>
<h2> 并发 vs 并行</h2>
<h3> 并发</h3>
<p>同一时间段，多个任务均在执行（单位时间内不一定同时执行）；</p>
<h3> 并行</h3>
<p>单位时间内，多个任务同时执行；</p>
<h2> 4 种线程池</h2>
<p>Java 中线程池的顶级接口是 <code>Executor</code>，但严格来讲它并不是一个线程池，而只是一个执行线程的工具，真正的线程池接口应该是 <code>ExecutorService</code>，一般可以有如下 4 种线程池：</p>
<h3> newCachedThreadPool</h3>
<p><strong>创建一个根据需要来创建新线程的线程池</strong>，但在以前构造的线程可用时将重用它们。对于执行许多短期异步任务的程序而言，这些线程池通常能够提高程序性能。<strong>调用 <code>execute</code> 将重用以前构造的线程（若线程可用），若线程无可用的，则创建一个新线程并添加到线程池中。对于那些已经有 60s 未使用的线程，则从缓存中将其移除。</strong> 因此长时间保持空闲的线程池不会使用任何资源。</p>
<h3> newFixedThreadPool</h3>
<p><strong>创建一个可重用固定线程数的线程池，以共享的无界队列方式来运行这些线程。</strong> 在任意时间点，大多数 <code>nThreads</code> 线程将会处理任务的活动状态。如果在所有线程处于活动状态时提交附加任务，则在有可用线程前，附加任务将在队列中进行等待。如果在关闭前的执行期间由于失败而导致任何线程终止，则一个新的线程将代替它执行后续任务。在某个线程被显式关闭前，池中线程都将一直存在。</p>
<h3> newScheduledThreadPool</h3>
<p><strong>创建一个线程池，能够安排在给定延迟后运行命令或定期执行。</strong></p>
<h3> newSingleThreadExecutor</h3>
<p><code>Executors.newSingleThreadExecutor()</code> 返回一个线程池（该线程池只有线程），<strong>该线程池可以在线程死后（或发生异常时）重新启动一个线程来替代原来的线程继续执行下去</strong>；</p>
<h2> 线程生命周期及状态</h2>
<h3> 线程状态</h3>
<table>
<thead>
<tr>
<th>状态</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>NEW</code></td>
<td>初始状态，创建线程，但还未调用 <code>start()</code> 方法</td>
</tr>
<tr>
<td><code>RUNNABLE</code></td>
<td>可执行状态，“就绪” 和 “运行” 两种状态统称 “运行中”</td>
</tr>
<tr>
<td><code>BLOCKED</code></td>
<td>阻塞状态，表示线程阻塞于锁</td>
</tr>
<tr>
<td><code>WAITING</code></td>
<td>等待状态，线程进行登台状态，进入该状态表示当前线程需要等待其他线程做出通知或中断</td>
</tr>
<tr>
<td><code>TIME_WAITING</code></td>
<td>超时等待状态，不同于 <code>WAITING</code> ，经过指定时间后可以自行返回</td>
</tr>
<tr>
<td><code>TERMINATED</code></td>
<td>终止状态，表示线程执行完毕</td>
</tr>
</tbody>
</table>
<p></p>
<p>上图源自《Java 并发编程艺术》，可以看出一个线程的状态变迁过程：</p>
<p>线程创建后处于 <code>NEW</code> 状态，然后调用 <code>start()</code> 方法后开始运行，此时处于 <code>READY</code> 状态，接着一旦可运行状态的线程获得了 CPU 时间片之后，就处于 <code>RUNNING</code> 状态。如果线程执行了 <code>wait()</code> 方法，则进入 <code>WAITING</code> 状态。进入 <code>WAITING</code> 状态的线程池需要依靠其他线程的通知后才能返回 <code>RUNNING</code> 状态。而 <code>TIME_WAITING</code> 状态相当于在 <code>WAITING</code> 状态的基础上增加了超时限制，当超时后线程将自动返回 <code>RUNNABLE</code> 状态。当线程调用同步方法后，如果没有获取到锁，线程将进入 <code>BLOCKED</code> 状态。同时，如果线程执行了 <code>RUNNABLE</code> 的 <code>run()</code> 方法，线程将进入 <code>TERMINATED</code> 状态。</p>
<h3> 线程阻塞的三种情况</h3>
<p>当线程因为某种原因放弃 CPU 使用权后，即让出了 CPU 时间片，暂时就会停止运行，知道线程进入可运行状态（<code>Runnable</code>），才有机会再次获得 CPU 时间片转入 <code>RUNNING</code> 状态。一般来讲，阻塞的情况可以分为如下三种：</p>
<ol>
<li><strong>等待阻塞（Object.wait -&gt; 等待队列）</strong></li>
</ol>
<p><code>RUNNING</code> 状态的线程执行 <code>Object.wait()</code> 方法后，JVM 会将线程放入等待序列（waitting queue）；</p>
<ol start="2">
<li><strong>同步阻塞（lock -&gt; 锁池）</strong></li>
</ol>
<p><code>RUNNING</code> 状态的线程在获取对象的同步锁时，若该 <strong>同步锁被其他线程占用，则 JVM 将该线程放入锁池（lock pool）中</strong>；</p>
<ol start="3">
<li><strong>其他阻塞（sleep/join）</strong></li>
</ol>
<p><code>RUNNING</code> 状态的线程执行 <code>Thread.sleep(long ms)</code> 或 <code>Thread.join()</code> 方法，或发出 I/O 请求时，JVM 会将该线程置为阻塞状态。当 <code>sleep()</code> 状态超时，<code>join()</code> 等待线程终止或超时、或者 I/O 处理完毕时，线程重新转入可运行状态（<code>RUNNABLE</code>）；</p>
<h3> 线程死亡的三种方式</h3>
<ol>
<li><strong>正常结束</strong></li>
</ol>
<p><code>run()</code> 或者 <code>call()</code> 方法执行完成后，线程正常结束；</p>
<ol start="2">
<li><strong>异常结束</strong></li>
</ol>
<p>线程抛出一个未捕获的 <code>Exception</code> 或 <code>Error</code>，导致线程异常结束；</p>
<ol start="3">
<li><strong>调用 stop()</strong></li>
</ol>
<p>直接调用线程的 <code>stop()</code> 方法来结束该线程，但是一般不推荐使用该种方式，<strong>因为该方法通常容易导致死锁</strong>；</p>
<h3> 终止线程的 4 种方式</h3>
<ol>
<li><strong>正常运行结束</strong></li>
</ol>
<p>程序运行结束，线程自动结束。</p>
<ol start="2">
<li><strong>使用退出标志退出线程</strong></li>
</ol>
<p>一般 <code>run()</code> 方法执行完毕后，线程就会正常结束，但是有的线程是伺服线程，<strong>需要长时间的运行，直到满足某些外部条件满足时，才能关闭</strong>，一般通过使用关键字 <code>volatile</code> 来使退出标志进行同步（<code>volatile</code> 修饰时，同一时刻只能有一个线程来修改退出标志的值）；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><strong>Interrupt 方法结束线程</strong></li>
</ol>
<p>利用 <code>interrput()</code> 方法来终止线程有两种情况：</p>
<ul>
<li><strong>线程处于阻塞状态</strong></li>
</ul>
<p>若使用了 <code>sleep</code>，同步锁的 <code>wait</code>，socket 中的 <code>receive、accept</code> 等方法时，线程会处于阻塞状态。当调用线程的 <code>interrupt()</code> 方法时，将抛出 <code>InterrputException</code> 异常，阻塞中的线程哪个方法抛出该异常，就通过代码来进行捕获，然后 <code>break</code> 跳出循环状态，从而让我们有机会结束该线程的执行。<strong>并非调用了 <code>interrput()</code> 方法后线程就会结束，而是需要我们先捕获 <code>InterruptException</code> 异常后通过 <code>break</code> 来跳出循环，才能正常结束 <code>run()</code> 方法</strong>；</p>
<ul>
<li><strong>线程未处于阻塞状态</strong></li>
</ul>
<p>使用<code>isInterrupted()</code> 判断线程的中断标志来退出循环，当使用 <code>interrupt()</code> 时，中断标志会置为 <code>true</code>，和使用自定义的退出标志来控制循环原理一致；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li><strong>stop 方法终止进程（线程不安全）</strong></li>
</ol>
<p>可以使用 <code>Thread.stop()</code> 来强行终止线程，但 <strong>调用 <code>stop()</code> 后，创建子线程就会抛出 <code>ThreadDeathError</code> 的错误，且会释放子线程所持有的所有锁。一般任何进行加锁的代码块都是为了保护数据一致性，若在调用 <code>Thread.stop()</code> 方法后导致该线程所持有的的所有锁的突然释放（不受控制），则被保护数据就有可能呈现不一致性，其他线程在使用这些被破坏的数据时，就可能会导致一些奇怪的应用程序错误。</strong></p>
<h2> 上下文切换</h2>
<h3> 上下文切换活动</h3>
<p>多线程编程时一般线程数量均比 CPU 核心数多，但一个 CPU 在任一时刻只能被一个线程占用，针对这一问题，CPU 通过 <strong>给每个线程分配时间片并转轮</strong>。当一个线程的时间片消耗完时，该线程进入就绪状态，而 CPU 此时就让给其他线程占用，这样的一个过程就是 <strong>一次上下文切换</strong>。</p>
<p>总结来说：当前线程在执行完 CPU 时间片之后切换到另一个线程前，会先保存自己的状态，从而方便下次切换回这个线程时，能够快速加载该线程的状态。<strong>线程从保存到再加载的过程就是一次上下文切换</strong>。</p>
<p></p>
<p>如上图，上下文切换的步骤可以总结为如下三步：</p>
<ol>
<li>首先挂起一个进程，然后将这个进程在 CPU 中的状态（上下文）存储在内存中某处；</li>
<li>然后在内存中检索下一个进程的上下文并将其在 CPU 的寄存器中恢复；</li>
<li>跳转到程序计数器指向的位置（即跳转到进程被中断时的代码行），然后恢复该进程；</li>
</ol>
<h3> 上下文切换的原因</h3>
<p>引起上下文切换的原因通常有如下几种：</p>
<ol>
<li>当前执行任务的时间片用完之后，系统 CPU 正常调度下一个任务；</li>
<li>当前执行任务碰到 IO 阻塞，调度器将此任务挂起，继续下一任务；</li>
<li>多个任务抢占锁资源，当前任务未抢到锁资源，被调度器挂起，继续下一个任务；</li>
<li>用户代码挂起当前业务，让出 CPU 时间；</li>
<li>硬件中断；</li>
</ol>
<h2> 锁</h2>
<h3> 锁的分类</h3>
<p>Java 中的锁有很多种，通常可以分为如下类型：</p>
<h4> 乐观锁</h4>
<p>乐观锁是一种乐观思想，认为 <strong>读多写少，遇到并发写的可能性低，每次去拿数据时都认为别人不会修改，所以不会上锁。</strong> 但是 <strong>在更新时会判断一下在此期间别人有没有去更新这个数据，采取在写时先读出当前版本号，然后加锁操作（比较跟上一次的版本号，如果一样则更新），</strong> 若失败则要重复读-比较-写操作。</p>
<p>Java 中的乐观锁基本都是通过 <strong>CAS</strong> 操作来实现，CAS 是一种更新的原子操作，<strong>用于比较当前值与传入值是否一样，一样则更新，否则则失败</strong>。</p>
<h4> 悲观锁</h4>
<p>悲观锁是一种悲观思想，认为 <strong>写多读少，遇到并发写的可能性高。每次去拿数据时都认为别人会修改，所以每次在读写数据时均上锁，这样别人想读写该数据时就会阻塞直接拿到锁。</strong></p>
<p>Java 中的悲观锁就是 <strong>Synchronized</strong>，AQS 框架下的锁会先去尝试 CAS 乐观锁去获取锁，如果获取不到就转换为悲观锁。</p>
<h4> 自旋锁</h4>
<ol>
<li><strong>自旋锁原理</strong></li>
</ol>
<p><strong>若持有锁的线程能在较短时间内释放锁资源，则那些等待竞争锁的线程就不需要做内核态和用户态之间的切换就会进入阻塞挂起状态，他们只需要等上一段时间（自旋），等待持有锁的线程释放锁之后就可以立刻释放锁，从而避免用户线程和内核的切换的消耗。</strong></p>
<ol start="2">
<li><strong>自旋锁优缺点</strong></li>
</ol>
<p>自旋锁能尽可能的减少线程的阻塞，对于锁的竞争不激烈，而且占用锁时间非常短的代码块而言性能会有大幅度的提升。因为自旋的消耗会小于线程阻塞挂起再唤醒的操作的消耗，这些操作将导致线程发生两次上下文切换。</p>
<p>但是如果锁的竞争比较激烈，或者持有锁的线程需要长时间的占用锁来执行同步块，此时就不适合使用自旋锁，因为自旋锁在获取锁之前一直都占用 CPU 做无用功。同时大量线程竞争一个锁，将导致获取锁的时间变长，线程自旋的消耗远远大于线程阻塞挂起操作的消耗，其他需要 CPU 的线程又获取不到 CPU，从而造成 CPU 的浪费，此时我们就应该关闭自旋锁。</p>
<h4> Synchronized 同步锁</h4>
<p><code>synchronized</code> 能把任意一个非 <code>NULL</code> 的对象当作锁，<strong>属于独占式的悲观锁，同时又属于可重入锁。</strong></p>
<ul>
<li><strong>Synchronized 作用范围</strong>
<ol>
<li>作用于方法时，锁住的是对象实例（<code>this</code>）；</li>
<li>作用于静态方法时，锁住 <code>Class</code> 实例，而 <code>Class</code> 的相关数据存储在永久代（PermGen），属于全局共享区域，因此静态方法锁相当于类的一个全局锁，将锁住所有调用该方法的线程；</li>
<li><code>synchronized</code> 作用于一个对象实例时，锁住的是所有以该对象为锁的代码块。有多个队列，当多个线程一起访问某个对象监视器时，对象监视器会将这些线程存储在不同的容器中；</li>
</ol>
</li>
<li><strong>Synchronized 核心组件</strong></li>
</ul>
<table>
<thead>
<tr>
<th>组件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Wait Set</code></td>
<td>调用 <code>wait()</code> 方法被阻塞的线程存放处</td>
</tr>
<tr>
<td><code>Contention List</code></td>
<td><strong>竞争队列</strong>，所有 请求锁的线程首先被存放在该竞争队列</td>
</tr>
<tr>
<td><code>Entry List</code></td>
<td><strong>竞争队列中有资格成为候选资源的线程被移动到 <code>Entry List</code> 中</strong></td>
</tr>
<tr>
<td><code>OnDeck</code></td>
<td>任意时间，<strong>最多只有一个线程正在竞争锁资源，该线程被叫做 <code>OnDeck</code></strong></td>
</tr>
<tr>
<td><code>Owner</code></td>
<td>当前已经获取到锁资源的线程</td>
</tr>
<tr>
<td><code>!Owner</code></td>
<td>当前释放锁的线程</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>Synchronized 实现</strong></li>
</ul>
<p></p>
<ol>
<li>JVM 每次从等待队列尾部取出一个数据用于锁竞争候选者（<code>OnDeck</code>） ，但在并发情况下，<code>Contention List</code> 会被大量的并发线程进行 CAS 访问，此时，为了降低对队列尾部元素的竞争，JVM 将一部分线程移动到 <code>Entry List</code> 中作为候选竞争线程；</li>
<li><code>Owner</code> 线程在 <code>unclock</code> 时，将 <code>Contention List</code> 中的部分线程迁移到 <code>Entry List</code>，并指定其中的某一线程为 <code>OnDeck</code> 线程（一般是最先进去的线程）；</li>
<li><code>Owner</code> 线程并不直接把锁传递给 <code>OnDeck</code> 线程，而是把锁竞争的权利交给 <code>OnDeck</code>，它需要重新竞争锁。虽然在一定程度上牺牲了公平性，但是能够极大地提高系统吞吐量，在 JVM 中这种选择行为叫做 “竞争切换”；</li>
<li><code>OnDeck</code> 线程获取到锁资源后就会变成 <code>Owner</code> 线程，未获取到锁资源的则仍然停留在 <code>Entry List</code> 中。如果 <code>Owner</code> 线程被 <code>wait()</code> 方法阻塞，则转移到 <code>Wait Set</code> 队列，直到某一时刻通过 <code>notify()/notifyAll()</code> 唤醒，则重新进入 <code>Entry List</code>；</li>
<li>处于 <code>Contention List、Entry List、Wait Set</code> 中的线程均处于阻塞状态，该阻塞由操作系统来完成；</li>
<li><code>Synchronized</code> <strong>是非公平锁</strong>。<code>Synchronized</code> 在线程进入 <code>Contention List</code> 时，<strong>等待的线程先尝试自旋获取锁，如果获取不到则进入 <code>Contention List</code></strong>；</li>
</ol>
<h3> 锁的优化</h3>
<ol>
<li><strong>减少锁持有时间</strong></li>
</ol>
<p>只用在有线程安全要求的程序上加锁；</p>
<ol start="2">
<li><strong>减小锁粒度</strong></li>
</ol>
<p>将大对象（被多个线程访问）拆分为小对象，大大增加并行度，降低锁竞争。通过降低锁的竞争，偏向锁，轻量级锁的成功率才会提高，其中典型案例为 <code>ConcurrentHashMap</code>；</p>
<ol start="3">
<li><strong>锁分离</strong></li>
</ol>
<p><strong>最常见的锁分离就是读写锁 <code>ReadWriteLock</code></strong>，根据功能进行分离为读锁和写锁，这样一来读读不互斥，读写互斥，写写互斥，既能保证线程安全，又提高了性能；</p>
<ol start="4">
<li><strong>锁粗化</strong></li>
</ol>
<p>为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁。<strong>但如果对同一个锁不停地进行请求、同步和释放，其本身所消耗的系统资源也不利用性能优化</strong>。</p>
<ol start="5">
<li><strong>锁消除</strong></li>
</ol>
<p>在即时编译器时，若发现不可能被共享的对象，则可以消除这些对象的锁操作；</p>
<h3> 线程死锁</h3>
<ol>
<li><strong>定义</strong></li>
</ol>
<p>所谓线程死锁，指的是 <strong>多个线程同时被阻塞，其中的一个或全部均在等待某一资源被释放。</strong> 由于线程被无限期阻塞，因此程序也不能正常终止。</p>
<ol start="2">
<li><strong>产生死锁必备条件</strong></li>
</ol>
<ul>
<li><strong>互斥条件</strong>：资源在任意一个时刻只被一个线程占用；</li>
<li><strong>请求与保持条件</strong>：一个进程因请求资源而堵塞时，对已经获得的资源保持不放；</li>
<li><strong>不可抢占条件</strong>：线程已获得的资源在未使用完前不能被其他线程强行哦度哦，只能在即使用完毕后才释放资源；</li>
<li><strong>循环等待条件</strong>：若干线程间形成头尾相接的循环等待资源关系；</li>
</ul>
<h3> 如何避免死锁</h3>
<p>要产生死锁，必须满足上面说的 4 个条件，因此为了避免死锁，我们只要对上述 4 个条件中的一个即可；</p>
<ol>
<li><strong>破坏互斥条件</strong></li>
</ol>
<p>通过人为破坏互斥条件是不可行的，因为锁的用途就是让其产生互斥。</p>
<ol start="2">
<li><strong>破坏请求与保持条件</strong></li>
</ol>
<p>我们直接一次性申请所有资源即可；</p>
<ol start="3">
<li><strong>破坏不可抢占条件</strong></li>
</ol>
<p>占用部分资源的线程进一步申请其他资源时如果申请不到，可以主动释放它所占有的资源；</p>
<ol start="4">
<li><strong>破坏循环等待条件</strong></li>
</ol>
<p>通过按序申请资源来预防，按某一顺序申请资源，释放资源则反序释放，从而破坏循环等待条件；</p>
<h2> 线程常用方法</h2>
<h3> 基本方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>wait()</code></td>
<td>调用后进入 <code>WAITING</code> 状态，只有等待另外线程的通知或被中断才会返回，而且调用后 <strong>会释放对象占有的锁</strong>，一般用于同步方法或同步代码块</td>
</tr>
<tr>
<td><code>sleep()</code></td>
<td>调用后进入 <code>TIMED-WAITING</code> 状态，调用后 <strong>不会释放对象占有的锁</strong></td>
</tr>
<tr>
<td><code>yield()</code></td>
<td>使当前线程 <strong>让出 CPU 执行时间片</strong>，与其他线程一起重新竞争 CPU 时间片。一般情况下优先级越高，竞争到 CPU 时间片的可能性更大</td>
</tr>
<tr>
<td><code>interrupt()</code></td>
<td>中断线程，本意是 <strong>给线程一个通知信号，会影响该线程内部的一个中断标识位，该进程本身并不会因此改变状态</strong></td>
</tr>
<tr>
<td><code>join()</code></td>
<td><strong>等待其他线程终止</strong>，当前线程中调用一个线程的 <code>join()</code> 方法，则当前线程转为阻塞状态，回到另一个线程结束，当前线程再由阻塞状态变为就绪状态，等待 CPU 资源</td>
</tr>
<tr>
<td><code>notify()</code></td>
<td><strong>唤醒在此对象监视器上等待的单个线程，</strong> 若所有线程均在此对象上等待，则会选择唤醒其中一个线程，选择是任意的，并在对实现做出决定时发生</td>
</tr>
<tr>
<td><code>idDaemon()</code></td>
<td>判断一个线程是否为守护线程</td>
</tr>
<tr>
<td><code>isAlive()</code></td>
<td>判断一个线程是否存活</td>
</tr>
</tbody>
</table>
<h3> sleep() 和 wait() 的区别</h3>
<ol>
<li><code>sleep()</code> 属于 <code>Thread</code> 类，<code>wait()</code> 属于 <code>Object</code> 类；</li>
<li><code>sleep()</code> 导致程序暂停执行指定时间，让出 CPU 给其他线程，但 <strong>其监控状态依旧保持</strong>，指定时间一过就会自动恢复运行状态；</li>
<li>调用 <code>sleep()</code> 方法，<strong>线程不会释放对象锁</strong>；但调用 <code>wait()</code> 方法时，<strong>线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用 <code>notify()</code> 方法后本现场才进入对象锁定池准备获取对象锁进入运行状态</strong>；</li>
</ol>
<h3> start() 和 run() 的区别</h3>
<ol>
<li><code>start()</code> 方法用于启动线程，真正实现了多线程运行，无需等待 <code>run()</code> 方法体执行完毕就能直接继续执行下面的代码；</li>
<li>通过调用 <code>Thread</code> 类的 <code>start()</code> 方法来启动一个线程，此时线程处于 <strong>就绪状态</strong>，并没有运行；</li>
<li>方法 <code>run()</code> 称为线程体，主要包含要执行的线程的内容，线程就进入了 <strong>运行状态，开始运行 <code>run()</code> 方法中的代码</strong>，<code>run()</code> 方法运行结束，则线程终止，然后 CPU 再调度其他线程；</li>
</ol>
<h3> ThreadLocal（线程本地存储）</h3>
<p><code>ThreadLocal</code>，也叫作 <strong>线程本地变量，其作用是提供线程内的局部变量，这种变量在线程生命周期内其作用，减少同一个线程内多个方法或组件间一些公共变量的传递的复杂度</strong>；</p>
<h3> volatile 和 synchronized 的区别</h3>
<p><code>volatile</code> 解决的是内存可见性问题，会使得所有对 <code>volatile</code> 变量的读写都直接写入主存，即 <strong>保证了变量的可见性</strong>。</p>
<p><code>synchronized</code> 解决的事执行控制的问题，它会阻止其他线程获取当前对象的监控锁，这样一来就让当前对象中被 <code>synchronized</code> 关键字保护的代码块无法被其他线程访问，也就是无法并发执行。而且，<code>synchronized</code> 还会创建一个 <strong>内存屏障</strong>，内存屏障指令保证了所有 CPU 操作结果都会直接刷到主存中，从而 <strong>保证操作的内存可见性</strong>，同时也使得这个锁的线程的所有操作都 <code>happens-before</code> 于随后获得这个锁的线程的操作。</p>
<p>两者的区别主要有如下：</p>
<ol>
<li>volatile 本质是在告诉 JVM 当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取； synchronized 则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。</li>
<li>volatile <strong>仅能使用在变量级别</strong>；synchronized 则可以使用在 <strong>变量、方法、和类级别的</strong></li>
<li>volatile 仅能实现变量的修改可见性，<strong>不能保证原子性</strong>；而 synchronized 则可以 <strong>保证变量的修改可见性和原子性</strong></li>
<li>volatile <strong>不会造成线程的阻塞</strong>；synchronized <strong>可能会造成线程的阻塞</strong>。</li>
<li>volatile 标记的变量不会被编译器优化；synchronized 标记的变量可以被编译器优化</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>JVM 面试总结</title>
      <link>https://cunyu1943.site/JavaPark/md/interview/20220806-jvm.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/interview/20220806-jvm.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">JVM 面试总结</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 JVM 内存区域？ JVM 定义及组成 JVM 是一种用于计算设备的规范，是一个虚构出来的计算机，通过在实体机上仿真模拟各种计算机功能来实现。JVM 运行在操作系统之上，与硬件之间并没有进行直接交互，这也就为什么 Java 语言只需要编译一次，就能够在不同平台上运行，通常有如下组成部分：</description>
      <category>面试宝典</category>
      <pubDate>Sat, 06 Aug 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> JVM 内存区域？</h2>
<h3> JVM 定义及组成</h3>
<p>JVM 是一种用于计算设备的规范，是一个虚构出来的计算机，通过在实体机上仿真模拟各种计算机功能来实现。JVM 运行在操作系统之上，与硬件之间并没有进行直接交互，这也就为什么 Java 语言只需要编译一次，就能够在不同平台上运行，通常有如下组成部分：</p>
<ul>
<li><strong>一组字节码指令集</strong></li>
<li><strong>一组寄存器</strong></li>
<li><strong>一个栈</strong></li>
<li><strong>一个垃圾回收堆</strong></li>
<li><strong>一个存储方法域</strong></li>
</ul>
<h3> JVM 功能</h3>
<p>JVM 主要功能分为三块：</p>
<ol>
<li><strong>执行 Java 代码</strong></li>
<li><strong>内存管理</strong></li>
<li><strong>线程资源同步和交互机制</strong></li>
</ol>
<p></p>
<h3> 线程</h3>
<p>指程序执行过程中的一个线程实体，JVM 允许一个应用并发执行多个线程。Hotspot JVM 中的 JVM 线程和操作系统中的线程有着直接的映射关系。</p>
<p>当线程本地存储、缓冲区分配、同步对象、栈、程序计数器等资源准备好之后，就会创建一个操作系统原生线程。一旦 Java 的线程结束，操作系统原生线程也随之被回收。操作系统作为调度中心，负责调度并分配线程到任何可用的 CPU 上。一旦操作系统原生线程初始化完毕，就会调用 Java 线程的 <code>run()</code> 方法。当线程结束时，就会释放操作系统原生线程和 Java 线程的所有资源。</p>
<h3> Hotspot JVM 后台系统线程</h3>
<ol>
<li><strong>虚拟机线程</strong>：等待 JVM 到达安全点操作时出现。操作必须在独立的线程里执行，因为当堆修改无法进行时，线程都需要 JVM 位于安全点。<strong>安全点操作的类型有：stop-the-world 垃圾回收、线程栈 dump、线程暂停、线程偏向锁（biased locking）解除</strong>；</li>
<li><strong>周期性任务线程</strong>：负责定时器事件（即中断），用于调度周期性操作的执行；</li>
<li><strong>GC 线程</strong>：支持 JVM 中的垃圾回收活动；</li>
<li><strong>编译期线程</strong>：将字节码（<code>.class</code>）动态编译为本地平台相关的机器码；</li>
<li><strong>信号分发线程</strong>：接收发送到 JVM 的信号并调用对应的方法进行处理；</li>
</ol>
<h3> 深拷贝 vs 浅拷贝</h3>
<p>浅拷贝（ShallowCopy）只是增加一个指针指向已存在的内存地址，仅仅是指向被复制的内存地址，一旦原地址发生改变，则浅拷贝出来的对象也会随之变化。所以改变其中任何一个都会导致另一个对象的变化，<code>clone()</code> 方法是浅拷贝；</p>
<p>深拷贝（DeepCopy）是增加一个指针且申请一个新的内存，使这个增加的指针指向新的内存，相当于开辟了一块 <strong>新的内存地址</strong> 用于存放复制的对象。原对象和被拷贝出来的对象互不影响，其中任何一个改变都不会引起另一个改变。</p>
<h3> 堆和栈的区别</h3>
<table>
<thead>
<tr>
<th>不同点</th>
<th>堆</th>
<th>栈</th>
</tr>
</thead>
<tbody>
<tr>
<td>物理地址</td>
<td>不连续，性能较慢</td>
<td>连续，性能较快</td>
</tr>
<tr>
<td>内存</td>
<td>不连续，因此分配内存在 <strong>运行期动态分配</strong>，<strong>大小不固定</strong></td>
<td>连续，内存大小在 <strong>编译期</strong> 确认，<strong>大小固定</strong></td>
</tr>
<tr>
<td>存放</td>
<td><strong>对象实例、数组、静态对象</strong></td>
<td><strong>局部变量、操作数栈、指向运行时常量池的引用、方法返回地址、附加信息</strong></td>
</tr>
<tr>
<td>可见度</td>
<td>对整个应用程序共享、可见</td>
<td>只对线程可见，生命周期同线程</td>
</tr>
</tbody>
</table>
<h2> 运行时数据区</h2>
<h3> 内存划分</h3>
<p>根据 JVM 规范，JVM 运行时数据区可以分为如下区域：</p>
<ul>
<li><strong>方法区（Method Area）</strong></li>
<li><strong>堆区（Heap）</strong></li>
<li><strong>虚拟机栈（VM Stack）</strong></li>
<li><strong>本地方法栈（Native Method Stack）</strong></li>
<li><strong>程序计数器（Program Counter Register）</strong></li>
</ul>
<p></p>
<p>所有线程私有的数据区域生命周期都与线程同步，随着用户线程的创建而创建，线程的结束而销毁。而线程共享的数据区域则是随着虚拟机的启动而创建，随着虚拟机的关闭而销毁。</p>
<h3> 各内存区域功能</h3>
<ol>
<li><strong>方法区</strong></li>
</ol>
<p>方法区存放要 <strong>加载的类信息（类名、修饰符等）、静态变量、构造函数、<code>final</code> 常量、类中字段和方法等信息</strong>。该内存区域是全局共享的，在一定条件下也会出发 GC 机制。一旦超出其内存允许大小，就会抛出 OOM。</p>
<p>在 Hotspot JVM 中，方法区对应 <strong>持久代</strong>。<strong>运行时常量池（Runtime Constant Pool）</strong> 是方法区中的一部分，用于存储 <strong>编译器生成的常量和引用</strong>。</p>
<ol start="2">
<li><strong>堆区</strong></li>
</ol>
<p>虚拟机中内存最大的一块，GC 发生最频繁的区域，<strong>被所有线程共享</strong>，在虚拟机启启动时创建，主要用于 <strong>存放对象实例以及数组，所有 <code>new</code> 出来的对象都存放在该区</strong>。现代的 JVM 采用 <strong>分代收集算法</strong>，所以又可以细分为：<strong>新生代（Eden、From Survivor、To Survivor）和老年代</strong>。</p>
<ol start="3">
<li><strong>虚拟机栈</strong></li>
</ol>
<p>占用操作系统内存，每个线程对应一个虚拟机栈，属于线程私有，生命周期同线程一样，每个方法执行时均产生一个栈帧（Stack Frame），用于 <strong>存储局部变量表、动态链接、操作数栈、方法出口和异常分派等信息。当方法被调用时，栈帧入栈，当方法调用结束时，栈帧出栈。</strong></p>
<p><strong>局部变量表</strong> 中存放了方法相关的局部变量，包括各种基本数据类型及对象的引用地址等，因此其 <strong>内存空间在编译期就可以确定，运行时不再改变。</strong></p>
<p>此外，虚拟机栈中定义了两种异常：<strong>StackOverFlowError 和 OOM</strong>。</p>
<ol start="4">
<li><strong>本地方法栈</strong></li>
</ol>
<p>本地方法栈用于调用 <code>native</code> 方法的执行，存储了每个 <code>native</code> 方法的执行状态。本地方法栈和虚拟机栈的区别在于：<strong>虚拟机栈中执行 Java 方法，而本地方法栈中执行 <code>native</code> 方法</strong>。</p>
<ol start="5">
<li><strong>程序计数器</strong></li>
</ol>
<p>程序计数器是一块很小的内存区域，不在 RAM 中，而是直接划分在 CPU 上，<strong>是当前线程所执行的字节码的行号指示器</strong>。<strong>其作用是：JVM 在解释字节码文件时，存储当前线程执行的字节码行号（每个程序计数器只能记录一个线程的行号），字节码解析器的工作就是通过改变该计数器的值，来选取下一条需要执行的字节码指令。分支、循环、跳转、异常处理以及线程恢复等基础功能均依赖于该计数器完成，各个 JVM 所采用的方式不一样，是 JVM 中唯一一个没有规定任何 OutOfMemoryError 的区域</strong>。</p>
<h3> Java 7 和 Java 8 在内存模型上的区别</h3>
<p>Java 8 中取消了永久代，用元空间（<code>Metaspace</code>）代替，元空间是存在本地内存（<code>Native memory</code>）中的；</p>
<h3> 什么情况下会出现堆内存溢出？</h3>
<p>堆内存中存储对象实例，所以只要不断创建对象，并保证 <code>GC roots</code> 到对象之间有可达路径来避免 GC 机制清除这些对象。就会在对象数量达到最大堆容量限制后，产生内存溢出异常；</p>
<h2> GC 机制</h2>
<p>推荐阅读：</p>
<blockquote>
<p><a href="https://juejin.im/post/6844903513248497677" target="_blank" rel="noopener noreferrer">深入理解 JVM 的内存结构及 GC 机制</a></p>
<p><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/jvm/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6?id=_3-%e5%9e%83%e5%9c%be%e6%94%b6%e9%9b%86%e7%ae%97%e6%b3%95" target="_blank" rel="noopener noreferrer">JVM 垃圾回收</a></p>
<p><a href="https://www.jianshu.com/p/5261a62e4d29" target="_blank" rel="noopener noreferrer">浅析 JAVA 的垃圾回收机制（GC）</a></p>
</blockquote>
<h3> 什么是 GC？</h3>
<p>GC（Garbage Collection，垃圾回收）机制是 JVM 垃圾回收器提供的 <strong>一种用于在空闲时间不定时回收无任何引用对象引用的对象所占据的内存空间的一种机制</strong>。回收的只是对象所占据的内存空间而非对象本身，即只负责释放对象所占有的内存。</p>
<p>GC 机制是区别 Java 和 C++ 等语言的一个重要特性。C++ 中，当我们不再需要某些内存时，需要手动实现垃圾回收，但是 Java 中不用我们手动去实现垃圾回收，JVM 已经自带垃圾回收机制，我们只需要专注于业务开发就可以了。</p>
<h3> Java 中的对象引用</h3>
<p>JDK1.2 之后，Java 引用主要分为如下几种（从上到下引用强度逐渐减弱），日常程序设计中，使用最多的就是 <strong>强引用和弱引用</strong>：</p>
<ul>
<li><strong>强引用</strong></li>
<li><strong>软引用</strong></li>
<li><strong>弱引用</strong></li>
<li><strong>虚引用</strong></li>
</ul>
<ol>
<li><strong>强引用</strong></li>
</ol>
<p>使用最普遍的引用，也是我们日常使用的大多数引用，如 <code>String str = "村雨遥"</code>。若一个对象具有强引用，就 <strong>相当于生活中必备的物品</strong>，垃圾回收器绝对不会回收它，当内存空间不足时，JVM 宁愿抛出 OOM 错误，也不会随意回收具有强引用的对象来解决内存不足问题，因此强引用是造成 Java <strong>内存泄露</strong> 的主要原因之一。</p>
<ol start="2">
<li><strong>软引用</strong></li>
</ol>
<p>若一个对象只具有软引用，则 <strong>相当于生活中可有可无的物品</strong>。若内存空间充足，则垃圾回收器不会回收它，一旦内存空间不足，则会回收这些对象的内存。只要垃圾回收器未回收这个对象的内存，则该对象能够被程序使用，<strong>通过使用软引用可以实现内存敏感的高速缓存，加速 JVM 对垃圾内存的回收速度，同时维护系统的运行安全，防止 OOM 等问题的产生</strong>。</p>
<ol start="3">
<li><strong>弱引用</strong></li>
</ol>
<p>一若个对象只具有弱引用，则 <strong>相当于生活中可有可无的物品。</strong> <strong>软引用和弱引用的区别在于：只拥有弱引用的对象具有更短暂的生命周期，在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现具有弱引用的对象，则无论当前内存空间是否充足，都会回收它的内存。</strong> 但一般垃圾回收器的线程优先级很低，因此不会很快就回收具有弱引用的对象。</p>
<p>此外 <strong>软引用和弱引用都可以和一个引用队列联合使用，一旦他们所引用的对象被垃圾回收，JVM 就会将这个引用加入到相关的引用队列中。</strong></p>
<ol start="4">
<li><strong>虚引用</strong></li>
</ol>
<p>形同虚设的一个引用，不会决定对象的声明周期，一个对象仅持有虚引用，则任何时候都可能被垃圾回收器回收，<strong>主要用来跟踪对象被垃圾回收的活动</strong>。</p>
<p><strong>虚引用与软引用和弱引用的区别</strong>：<strong>虚引用必须和引用队列联合使用</strong>。当垃圾回收器准备回收一个对象时，若发现该对象具有虚引用，则会在回收该对象的内存前，将该虚引用加入到与之关联的引用队列中。程序能够通过判断引用队列中是否已经加入虚引用，来了解被引用的对象是否将要被垃圾回收器回收。</p>
<ol start="5">
<li><strong>总结</strong></li>
</ol>
<table>
<thead>
<tr>
<th>引用类型</th>
<th>回收阶段</th>
</tr>
</thead>
<tbody>
<tr>
<td>强引用</td>
<td>发生 GC 时不被回收</td>
</tr>
<tr>
<td>软引用</td>
<td>有用但非必须的对象，发生内存溢出前被回收</td>
</tr>
<tr>
<td>弱引用</td>
<td>有用但非必须的引用，下一次 GC 时被回收</td>
</tr>
<tr>
<td>虚引用</td>
<td>无法通过虚引用获取对象，用 <code>PhantomReference</code> 实现虚引用，其用途是在 GC 时返回一个通知</td>
</tr>
</tbody>
</table>
<h3> 判断对象是否为垃圾</h3>
<p></p>
<p>如上图所示，要判断一个对象是否为垃圾，通常有如下两种方法：</p>
<ul>
<li><strong>引用计数算法</strong></li>
</ul>
<p>为每个对象创建一个引用计数，有对象引用时计数器 +1，引用被释放时计数 -1，当计数器为 0 时就可以被回收，但是存在 <strong>不能解决循环引用</strong> 的问题。</p>
<ul>
<li><strong>可达性分析算法</strong></li>
</ul>
<p>从 GC Roots 开始向下搜索，搜索所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连时，则说明该对象能够被回收。若在 GC Roots 和一个对象间没有可达路径，则称该对象是不可达的。</p>
<h3> 需要 GC 的内存区域</h3>
<p>对于 JVM 内存布局而言，线程独享的区域为：<strong>程序计数器、JVM 栈、本地方法栈</strong>，三者都跟线程 “共生死”，所以不需要 GC。但是由线程共享的：<strong>堆区、方法区</strong> 则是 GC 的重点关注对象。</p>
<p></p>
<h3> 回收垃圾对象内存的算法</h3>
<ul>
<li><strong>标记 - 清除算法</strong></li>
<li><strong>复制算法</strong></li>
<li><strong>标记 - 整理算法</strong></li>
<li><strong>分代收集算法</strong></li>
</ul>
<ol>
<li><strong>标记 - 清除算法</strong></li>
</ol>
<p>分为 <strong>标记</strong> 和 <strong>清除</strong> 阶段：首先标记出所有需要回收的对象，然后统一回收被标记的对象所占用的空间；</p>
<ul>
<li><strong>优点：</strong> 实现简单，不用对象进行移动；</li>
<li><strong>缺点：</strong> 标记、清除过程效率低；清除后产生了 <strong>大量不连续的内存碎片</strong>，提高了垃圾回收的频率；</li>
</ul>
<p></p>
<ol start="2">
<li><strong>复制算法</strong></li>
</ol>
<p>针对效率问题而提出的算法，<strong>通过将内存划分为带下相同的两块，每次使用其中的一块，当其中一块的内存被占满后，就将其中还存活着的对象复制到另一块中，最后将使用过的空间一次性清理，这样就保证了每次的内存回收都是对内存区间的一半进行回收</strong>。</p>
<ul>
<li>
<p><strong>优点：按顺序分配内存即可，实现简单、运行高效、不用考虑内存碎片；</strong></p>
</li>
<li>
<p><strong>缺点：可用内存大小缩小为原来的一半，对象存活率高时将频繁进行复制，效率变低；</strong></p>
</li>
</ul>
<p></p>
<ol start="3">
<li><strong>标记 - 整理算法</strong></li>
</ol>
<p>结合标记 - 清除算法和复制算法，标记过程同 <strong>标记 - 清除算法</strong>，但和后续过程中不是直接回收可回收对象，而是 <strong>让所有存活的对象向一端移动，然后直接清理端边界之外的内存</strong>。</p>
<ul>
<li><strong>优点</strong>：解决了 <strong>标记-清理</strong> 算法存在的内存碎片问题；</li>
<li><strong>缺点</strong>：仍需要进行局部对象移动，一定程度上降低了效率；</li>
</ul>
<p></p>
<ol start="4">
<li><strong>分代收集算法</strong></li>
</ol>
<p>现在的虚拟机的垃圾回收器基本都采用分代收集算法，它会根据对象存活周期的不同将内存划分为不同的块，一般将 Java <strong>堆划分为新生代和老年代</strong>，然后根据各年代的特点选择合适的垃圾回收算法。</p>
<ul>
<li><strong>新生代中，每次收集都会收集大量对象，所以可以选择复制算法，只要付出少量复制成本就能完成垃圾收集；</strong></li>
<li><strong>老年代的对象存活几率很高，而且没有额外空间对其进行分配担保，所以只能选择 “标记 - 整理算法” 或 ”标记 - 清除算法“ 来进行垃圾回收，而我们一般都是选择 “标记 - 整理算法”</strong>。</li>
</ul>
<h3> 垃圾回收器</h3>
<p><strong>垃圾回收算法是方法论，具体实现就是垃圾收集器</strong> 进行垃圾收集时，必须暂停其他所有工作线程，这一过程也叫 <code>Stop The World</code>。常见的垃圾回收器有如下几种：</p>
<ul>
<li><strong>Serial 收集器</strong></li>
<li><strong>ParNew 收集器</strong></li>
<li><strong>Parallel Scavenge 收集器</strong></li>
<li><strong>Serial Old 收集器</strong></li>
<li><strong>Parallel Old 收集器</strong></li>
<li><strong>CMS 收集器</strong></li>
<li><strong>G1 收集器</strong></li>
</ul>
<p></p>
<ol>
<li><strong>Serial 收集器（单线程 + 复制算法）</strong></li>
</ol>
<p><strong>Serial （串行）收集器</strong> 是最基本，使用时间最久的垃圾收集器，<strong>使用复制算法</strong>。它是一个 <strong>单线程</strong> 的收集器，但并非意味着它只会用一条垃圾回收线程去完成垃圾回收，而是说它在进行垃圾回收工作的同时 <strong>必须暂停其他所有的工作线程，直到垃圾回收完成，是运行在客户端模式下的虚拟机的首选，能够与 CMS 收集器协同工作</strong>。<strong>新生代单线程收集器，标记和清理均为单线程，优点是简单高效。</strong></p>
<ol start="2">
<li><strong>ParNew 收集器（多线程 + Serial）</strong></li>
</ol>
<p><strong>Serial 收集器</strong> 的多线程版本，除开是使用多线程进行垃圾回收，其他机制（如控制参数、回收算法、回收策略等）都和 Serial 收集器保持一致，<strong>是运行在服务器模式下的虚拟机的首选，除开 Serial 收集器外，只有它能够与 CMS 收集器配合使用</strong>。<strong>新生代并行收集器。</strong></p>
<ol start="3">
<li><strong>Parallel Scavenge 收集器（多线程 + 复制算法）</strong></li>
</ol>
<p>Parallel Scavenge 收集器也是 <strong>使用复制算法的多线程收集器</strong>，<strong>但 Parallel Scavenge 重点关注吞吐量（CPU 用于运行用户代码的时间与 CPU 总消耗时间的比值），以便能够最高效率的利用 CPU，适合于在后台运算而无需太多交互的任务。而 CMS 收集器更多关注的是用户线程的停顿时间（最大化提高用户体验）</strong>。</p>
<ol start="4">
<li><strong>Serial Old 收集器（单线程 + 标记-整理算法）</strong></li>
</ol>
<p>Serial 收集器用于老年代的版本，是一个 <strong>单线程标记-整理算法</strong> 的收集器，主要是 <strong>运行在 Client 下的 Java 虚拟机默认的老年代垃圾收集器</strong> 主要有两大用途：</p>
<ul>
<li>在 JDK 1.5 及之前的版本中与 Parallel Scavenge 收集器共同使用；</li>
<li>作为 CMS 收集器的后备方案；</li>
</ul>
<ol start="5">
<li><strong>Parallel Old 收集器（多线程 + 标记-整理算法）</strong></li>
</ol>
<p>Parallel Old 是 Parallel Scavenge 的老年代版本，使用 <strong>多线程</strong> 的 <strong>“标记 - 整理算法”</strong>，在注重吞吐量和 CPU 资源的场景下，可以优先考虑 Parallel Old 收集器和 Parallel Scavenge 收集器。</p>
<ol start="6">
<li><strong>CMS 收集器（多线程 + 标记-清除算法）</strong></li>
</ol>
<p>CMS（Current Mark Sweep）收集器是一种 <strong>以获取最短垃圾回收停顿时间为目标的收集器，重点关注用户体验。是 HotSpot 虚拟机中第一个真正意义上的并发收集器，第一次实现了垃圾回收线程和用户线程同时工作</strong>。</p>
<p>CMS 收集器是基于 “<strong>标记- 清除算法</strong>” 实现，相比其他垃圾回收器更加复杂，通常可以将整个回收过程总结为如下四步：</p>
<ul>
<li><strong>初始标记（stop the world）</strong>：暂停所有其他线程，同时记录下与根节点 <code>root</code> 直接关联的对象，速度快；</li>
<li><strong>并发标记</strong>：同时开始 GC 和用户线程，用一个 <strong>闭包结构</strong> 去记录可达对象。但由于用户线程可能会不断更新引用域，所以标记过程结束后并不能保证所有可达对象都包含进来，GC 线程无法保证可达性分析的实时性，不用暂停工作线程。</li>
<li><strong>重新标记（stop the world）</strong>：为了修正并发标记过程中用户线程更新而产生的未被包含进闭包的可达对象，该阶段的停顿时间会比初始标记阶段的时间更长，但是远远比并发标记阶段所用时间短，仍然需要暂停所有工作线程。</li>
<li><strong>并发清除</strong>：开启用户线程，同时 GC 线程对未标记的区域做清扫，不需要暂停工作线程。</li>
</ul>
<p>虽然 CMS 作为垃圾收集器有着 <strong>并发收集、低停顿</strong> 等优点，但是也存在三个比较明显的缺点：</p>
<ul>
<li><strong>对于 CPU 的资源十分敏感</strong>；</li>
<li><strong>无法处理浮动垃圾</strong>；</li>
<li>由于使用的是 <strong>标记 - 清除算法</strong>，所以会 <strong>导致收集结束后产生大量空间碎片</strong>；</li>
</ul>
<ol start="7">
<li><strong>G1 收集器</strong></li>
</ol>
<p>G1（Garbage-First）收集器是 <strong>面向服务器的垃圾回收器，主要针对配备多个处理器和大内存的机器，以极高频率满足 GC 停顿时间的同时还具有高吞吐量</strong>，总结下来有如下特点：</p>
<ul>
<li><strong>并行与并发</strong>：充分利用多核和大内存的优势，用多个 CPU 来缩短暂停其他所有的工作线程的停顿时间。有的垃圾回收器需要通过暂停 Java 线程来执行 GC 动作，但 G1 收集器能够通过并发的方法来让 Java 线程继续执行；</li>
<li><strong>分代收集</strong>：G1 收集器可以独立管理整个 GC 过程，但是仍然保留了分代的概念；</li>
<li><strong>空间整合</strong>：不同于 CMS 的 ”标记 - 清除算法“，G1 从整体来看是基于 ”<strong>标记 - 整理算法</strong>“ 实现，但是实际上局部是基于 ”<strong>复制算法</strong>“ 实现；</li>
<li><strong>可预测的停顿</strong>：相对于 CMS 的另一个优势，G1 和 CMS 都关注于用户交互体验（降低停顿时间），但 G1 除开低停顿外，还能够建立可预测的停顿时间模型，将用户指定在 M ms 的时间段内；</li>
</ul>
<p>G1 收集器的运行过程大概可以分为如下 4 个步骤：</p>
<ul>
<li><strong>初始标记</strong></li>
<li><strong>并发标记</strong></li>
<li><strong>最终标记</strong></li>
<li><strong>筛选回收</strong></li>
</ul>
<p><strong>G1 收集器在后台维护了一个优先列表，每次根据允许的收集时间，优先选择回收价值最大的 Region</strong>。这种使用 Region 划分内存空间以及有优先级的区域回收方式，保证了 G1 收集器在有限时间内可以尽可能高的收集效率（把内存化整为零）。</p>
<h2> Java 类加载机制</h2>
<blockquote>
<p>JVM 把描述类的数据从 <code>Class</code>文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型，这就是虚拟机的类加载机制。</p>
</blockquote>
<h3> 类的生命周期</h3>
<p>类从被加载到虚拟机内存中开始，然后到卸载出内存为止。其生命周期包括如下 5 个阶段：</p>
<ul>
<li><strong>加载</strong></li>
<li><strong>连接</strong>（又可进一步划分为 <strong>验证、准备和解析</strong> 过程）</li>
<li><strong>初始化</strong></li>
<li><strong>使用</strong></li>
<li><strong>卸载</strong></li>
</ul>
<p></p>
<h3> JVM 加载类文件的原理</h3>
<p>Java 中的类都需要经过类加载器加载到 JVM 中后才能运行，而类加载器本身就是一个类，它的工作是将 <code>.class</code> 文件从硬盘读取到内存。类装载一般有两种方式：</p>
<ol>
<li><strong>隐式装载</strong></li>
</ol>
<p>程序在运行过程中碰到通过 <code>new</code> 等方式生成对象时，隐式调用类装载器加载对应的类到 JVM 中；</p>
<ol start="2">
<li><strong>显式装载</strong></li>
</ol>
<p>通过 <code>class.forname()</code> 等方法，显式加载所需的类；</p>
<p>一般来讲，Java 类的加载是动态的，它不会一次性将所有类全部加载后再运行，而是先将保证程序运行的基础类完全加载到 JVM 中，而其他类则是在需要的时候再进行加载。</p>
<h3> 类加载过程</h3>
<p>类文件需要加载到虚拟机中才能够正常使用和运行，通常虚拟机加载类文件的步骤主要有如下 3 阶段：</p>
<blockquote>
<p><strong>加载 -&gt; 连接 -&gt; 初始化</strong></p>
</blockquote>
<p>其中连接又可进一步细分为：<strong>验证 -&gt; 准备 -&gt; 解析</strong>。在这个过程中各个阶段都是 <strong>按照顺序开始，而不是按照顺序进行或完成</strong>，这些阶段通常都是交叉混合进行，在一个阶段执行过程中调用或激活另一个阶段，然后接下来具体介绍下类加载过程中每个阶段所做的工作。</p>
<h3> 类加载过程中的具体分工</h3>
<ol>
<li><strong>加载</strong></li>
</ol>
<p>加载处于类加载过程中的第一个阶段，<strong>该阶段会在内存中生成一个代表该类的 <code>java.lang.Class</code> 对象，作为方法区该类的各种数据的入口</strong>，总结下来主要完成如下 3 件事情：</p>
<ul>
<li>
<p><strong>通过全类名获取定义该类的二进制字节流</strong></p>
</li>
<li>
<p><strong>将字节流所代表的静态存储结构转换为方法区的运行时数据结构</strong></p>
</li>
<li>
<p><strong>在堆中生成一个代表该类的 Class 对象，作为方法区中这些数据的访问入口</strong></p>
</li>
</ul>
<p><strong>注意</strong>：第一件事中的二进制字节流不仅仅可以从 Class 文件中获取，还能够从各种 jar、war 包、网络（Applet）或者由其他文件生成（JSP 应用）等。一个非数组类的加载可控性较强，允许我们自定义类加载器来控制字节流的获取方式（即重写一个类加载器的 <code>loadClass()</code> 方法）；<strong>而数组类型则不需要通过类加载器创建，而是由 JVM 直接创建。</strong> 所有的类均有类加载器加载，其作用就是将 <code>.class</code> 文件加载到内存中。</p>
<ol start="2">
<li><strong>验证</strong></li>
</ol>
<p>进行验证的目的在于 <strong>确保 Class 文件中的字节流包含的信息符合当前虚拟机的要求，而不会威胁到虚拟机自身安全</strong>。不同虚拟机可能有不同的验证实现，但是基本都会有如下 4 个阶段的验证：</p>
<blockquote>
<p><strong>文件格式的验证、元数据的验证、字节码验证、符号引用验证</strong></p>
</blockquote>
<p></p>
<ol start="3">
<li><strong>准备</strong></li>
</ol>
<p><strong>准备阶段是正式为类变量分配内存同时设置类变量初始值的阶段，这些内存都将在方法区中分配，此时需要注意如下几点：</strong></p>
<ul>
<li>此时进行内存分配的 <strong>仅包括类变量（static），不包括实例变量，实例变量随对象实例化时一块分配在 Java 堆</strong>；</li>
<li>设置的初始值通常情况下是数据类型的默认零值，而不是在 Java 代码中被显式赋予的值，但如果变量被 <code>final</code> 修饰，那么该变量在准备阶段就被赋值成了指定的值，而不是为其赋予默认零值；</li>
</ul>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>默认零值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>byte</code></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>short</code></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>char</code></td>
<td><code>\u0000</code></td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>long</code></td>
<td><code>0L</code></td>
</tr>
<tr>
<td><code>float</code></td>
<td><code>0.0f</code></td>
</tr>
<tr>
<td><code>double</code></td>
<td><code>0.0D</code></td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>reference</code></td>
<td><code>null</code></td>
</tr>
</tbody>
</table>
<ol start="4">
<li><strong>解析</strong></li>
</ol>
<p>解析是 <strong>虚拟机将常量池中的符号引用转化为直接引用的过程，主要针对的是类、接口、字段、类方法、接口方法、方法类型、方法句柄以及调用限定符等 7 类符号</strong>。</p>
<p>所谓符号引用，就是用一组符号来描述目标，可以是任何字面量。<strong>直接引用</strong> 就是 <strong>直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄</strong>。在程序实际运行时，只有符号引用是不够的，举个例子：在程序执行方法时，系统需要明确知道这个方法所在的位置。Java 虚拟机为每个类都准备了一张方法表来存放类中所有的方法。当需要调用一个类的方法的时候，只要知道这个方法在方法表中的偏移量就可以直接调用该方法。通过解析操作符号引用就可以直接转变为目标方法在类中方法表的位置，从而使得方法可以被调用。</p>
<p>解析主要针对 <strong>类或接口、字段、类方法、接口方法</strong> 四类符号进行引用，分别对应于常量池中的 <code>CONSTANT_Class_info</code>、<code>CONSTANT_Field_info</code>、<code>CONSTANT_Method_info</code>、<code>CONSTANT_InterfaceMethod_info</code>。</p>
<ul>
<li><strong>类或接口的解析</strong>：判断所要转换为的直接引用时对数组类型，还是普通对象类型的引用，从而进行不同的解析；</li>
<li><strong>字段解析</strong>：对字段进行解析时，现在本类中查找是否包含有简单名称和字段描述符都与目标相匹配的字段，如果没有就按照继承关系从上往下递归搜索该类所实现的各个接口和它们的父接口。还没有找到就继续按继承关系从上往下递归搜索父类，直到找到 x 相匹配的字段。</li>
</ul>
<ol start="5">
<li><strong>初始化</strong></li>
</ol>
<p>类加载过程中的最后一步，也是 <strong>真正执行类中定义的 Java 代码（字节码）。</strong> 准备阶段中，类变量已经被赋予了一次初始值，但在初始化阶段，会根据我们制定的主观计划去初始化类变量和其他资源，从另一个角度来讲就是： <strong>初始化阶段就是执行类构造器 <code>&lt;clinit&gt;()</code> 方法的过程</strong>。</p>
<p><code>&lt;clinit&gt;()</code> 方法是带锁线程安全，所以在多线程环境下进行类初始化可能导致死锁。对于初始化阶段，一般只有如下几种情况，必须对类进行初始化（只有主动使用类才会初始化类）：</p>
<ul>
<li>遇到 <code>new、getstatic、putstatic、invokestatic</code> 其中之一时：
<ul>
<li>当 JVM 执行 <code>new</code>指令时会初始化类，即当程序创建一个类的实例对象；</li>
<li>当 JVM 执行 <code>getstatic</code> 指令时会初始化类，即程序访问类的静态变量(不是静态常量，常量会被加载到运行时常量池)；</li>
<li>当 JVM 执行 <code>putstatic</code>指令时会初始化类，即程序给类的静态变量赋值；</li>
<li>当 JVM 执行 <code>invokestatic</code>指令时会初始化类，即程序调用类的静态方法；</li>
</ul>
</li>
<li>使用 <code>java.lang.reflect</code> 包中的方法对类进行反射调用时 ，如果类未初始化，就需要触发其初始化；</li>
<li>初始化一个类，如果其父类还未初始化，则优先触发其父类的初始化；</li>
<li>当虚拟机启动时，需要定义一个要执行的主类 ，虚拟机会首先先初始化这个类；</li>
<li><code>MethodHandle</code> 和 <code>VarHandle</code> 都可以看作是轻量级的反射调用机制，如果要使用这两个调用， 就必须先使用 <code>findStaticVarHandle</code> 来初始化要调用的类；</li>
</ul>
<h3> 总结</h3>
<p>纵观整个类的加载过程，除了在 <strong>加载阶段用户可以自定义类加载器参与，其余所有动作都完全由虚拟机来主导。</strong> 而到了初始化阶段，才是真正执行 Java 程序代码，但仅限于 <code>&lt;clinit&gt;()</code> 方法。总结起来就是 <strong>类加载过程中主要是将 Class 文件（准确地讲，应该是类的二进制字节流）加载到虚拟机内存中，真正执行字节码的操作，在加载完成后才真正开始。</strong></p>
<h3> 类加载器</h3>
<p>在类加载过程中，加载阶段需要用到类加载器。所谓类加载器，就是 <strong>实现通过类的权限定名获取该类的二进制字节流的代码块</strong>。接下来总结一下类加载器的相关知识。</p>
<p>推荐阅读：</p>
<blockquote>
<p><a href="https://juejin.im/post/6844903633574690824#heading-5" target="_blank" rel="noopener noreferrer">https://juejin.im/post/6844903633574690824#heading-5</a></p>
</blockquote>
<h4> 类加载器的分类</h4>
<p>JVM 中内置了 3 个重要的类加载器，具体如下，除开 <code>BootstrapClassLoader</code> 之外，其他加载器均继承自 <code>java.lang.ClassLoader</code>，而且都是由 Java 实现；</p>
<ol>
<li><code>BootstrapClassLoader(启动类加载器)</code>：最顶层的加载器，由 C++ 实现，虚拟机自身的一部分，负责加载 <code>%JAVA_HOME%/lib</code> 目录下的 jar 包和类或者通过 <code>-Xbootclasspath</code> 参数所指定的路径中的所有类；</li>
<li><code>ExtensionClassLoader(扩展类加载器)</code>：主要负责加载 ``%JAVA_HOME%/lib/ext<code>目录下的 jar 包和类，或者系统变量</code>java.ext.dirs` 所指定的路径下的 jar 包；</li>
<li><code>ApplicationClassLoader(应用程序类加载器)</code>：面向用户的加载器，负责加载当前应用 <code>classpath</code> 下的所有 jar 包和类；</li>
<li>其他类加载器，一般是自己自定义的一些类加载器，通过继承 <code>java.lang.ClassLoader</code> 实现自定义的类加载器；</li>
</ol>
<h4> 双亲委派模型</h4>
<p></p>
<p>如上图中的双亲委派模型：<strong>当一个类收到了类加载的请求时，它不会立即去加载这个类，而是把这个请求委派给父类加载器去完成</strong>，每一层的类加载器都是如此。这样一来所有的类加载请求最终都会被传送到顶层的启动类加载器中，<strong>只有当父加载无法完成加载请求（它的加载路径下未找到所需的类）时，子加载器才会尝试去加载类。</strong></p>
<p>即 <strong>每次类加载时，先判断当前类是否已经被加载过，如果已经被加载过，则直接返回，否则才会去尝试加载。</strong></p>
<h4> 双亲委派模型的优点</h4>
<p>通过双亲委派模型，保证了 Java 程序的稳定运行，能够避免类的重复加载（JVM 区别不同类的方式是仅根据类名来判断，相同的类文件如果被不同的类加载器加载，就会产生不同的类），同时也保证了 Java 核心 API 不受篡改。不管最终是哪个加载器来加载类，最终都是委托给顶层的启动类加载器进行加载，从而保证了 <strong>使用不同的类加载器最终得到的都是同样一个 <code>Object</code> 对象</strong>。</p>
<h4> 如何实现与破坏双亲委派模型</h4>
<ul>
<li><strong>实现</strong></li>
</ul>
<p>要实现双亲委派模型，需要每次通过先委派父类加载器加载，然后再自己加载；</p>
<ul>
<li><strong>破坏</strong></li>
</ul>
<p>双亲委派模型并非强制性约束，只是更为推荐的一种类加载器的实现方式，如果我们想要自己完成某些操作，那么就可以自定义实现，从而 “破坏” 该模型。通常可以通过如下 3 种 方式来进行：</p>
<ol>
<li><strong>重写 loadClass() 方法</strong> ；</li>
<li><strong>利用线程上下文加载器（Thread Context ClassLoader），这个类加载器可以通过 java.lang.Thread 类的 <code>setContextClassLoaser()</code> 方法进行设置，如果创建线程时还未设置，它将会从父线程中继承 一个，如果在应用程序的全局范围内均未设置过，那这个类加载器默认就是应用程序类加载器</strong>；</li>
<li><strong>为了实现热插拔，热部署，模块化，意思是添加一个功能或减去一个功能不用重启，只需要把这模块连同类加载器一起换掉就可以实现代码的热替换</strong>；</li>
</ol>
<h3> 动态模型系统（OSGI）</h3>
<h4> 定义</h4>
<p>OSGI（Open Service Gateway Initiative）是面向 Java 的动态模型系统，是 Java 动态模块化系统的一系列规范，提供在多种网络设备上无需重启的的动态改变构造的功能。为了最小化耦合度和促使这些耦合度可管理，OSGI 提供了一种面向服务的架构，使得这些组件动态地发现对方。总结而言，<strong>OSGI 的主要职责就是让开发者能创建动态化、模块化的 Java 系统</strong>。</p>
<h4> OSGI 框架</h4>
<p>从概念上而言，主要可以分为三层：</p>
<ul>
<li><strong>Module Layer</strong>：模块层主要涉及包及共享的代码；</li>
<li><strong>Lifecycle Layer</strong>：生命周期层主要涉及 Bundle 的运行时生命周期管理；</li>
<li><strong>Service Layer</strong>：服务层主要涉及模块间的交互与通信；</li>
</ul>
<p></p>
<h2> 内存分配策略</h2>
<h3> Minor GC vs Major GC</h3>
<ol>
<li><strong>Minor GC</strong></li>
</ol>
<p>指发生在新生代的 GC，因为 Java 对象更新比较快，所以 Minor GC 十分频繁，一般回收速度也比较快。采用 <strong>复制算法，其过程包括：复制 -&gt; 清空 -&gt; 互换</strong>。</p>
<blockquote>
<p><strong>复制</strong>： Eden、SurvivorFrom 复制到 SurvivorTo，同时年龄 +1，一旦年龄达到老年标准，则赋值到老年代区；</p>
<p><strong>清空</strong>：复制之后，接着清空 Eden、SurvivorFrom 区中的对象；</p>
<p><strong>互换</strong>：清空后，将 SurvivorTo 和 SurvivorFrom 互换，原来的 SurvivorTo 成为下一次 GC 时的 SurvivorFrom 区；</p>
</blockquote>
<ol start="2">
<li><strong>Major GC</strong></li>
</ol>
<p>指发生在老年代的 GC，出现 Major GC 一般至少伴随一次 Minor GC，Major GC 的速度通常比 Minor GC 慢上 10 倍 以上。采用 <strong>标记-清除算法</strong>，MajorGC 会产生内存碎片，当内存不足时，就将抛出 OOM 异常；</p>
<h3> 堆内存分配原则</h3>
<p></p>
<p>对象的内存分配通常是在 Java 堆上进行分配，对象主要分配在新生代的 Eden 区，若启动本地线程缓存，则按照线程优先在 TLAB 上分配。少数情况下也会直接在老年代上进行分配。总的而言分配规则不固定，取决于哪种垃圾回收器组合以及虚拟机相关参数，但虚拟机对于内存的分配一般都会遵循如下原则：</p>
<ol>
<li><strong>对象优先分配在 Eden 区</strong></li>
</ol>
<p>大多情况下，对象均在新生代 Eden 区分配，当 Eden 区空间不足以分配时，虚拟机就将进行一次 Minor GC。若经过 GC 后还是没有足够空间，则将启用分配担保机制在老年代中分配内存。</p>
<ol start="2">
<li><strong>大对象直接进入老年代</strong></li>
</ol>
<p>所谓大对象一般指的是需要大量连续内存空间的对象，如数组，大对象不能频繁出现，否则将导致内存充足时提前触发 GC，以便获取充足的连续空间来存放大对象；</p>
<ol start="3">
<li><strong>长期存活对象进入老年代</strong></li>
</ol>
<p>虚拟机采用分代收集的思想来管理内存，则内存回收是就必须判断对象应该存放的内存带。因此虚拟机会给每个对象定义一个对象年龄的计数器，若对象位于 Eden 区出生，且能够被 Survivor 容纳，则该对象将被移动到 Survivor 空间，此时设置对象年龄为 1.对象在 Survivor 中每经过一次 Minor GC 且未被回收，年龄就 +1，当年龄到达一定程度时（默认为 15）就进入老年代；</p>
<h3> 新生代</h3>
<p>用于存放新生对象，一般占据堆的 1/3。由于我们要频繁创建对象，所以在该区域会频繁出发 MinorGC。又可以分为：</p>
<ul>
<li>Eden 区</li>
<li>SuivivorFrom 区</li>
<li>SurvivorTo 区</li>
</ul>
<ol>
<li><strong>Eden 区</strong></li>
</ol>
<p>新建对象的存放地（若对象占用内存过大，则直接分配到老年代），当 Eden 内存不足时出发 MinorGC，新生代发生一次垃圾回收；</p>
<ol start="2">
<li><strong>SurvivorFrom</strong></li>
</ol>
<p>上一次 GC 的幸存者，作为这一次 GC 的被扫描者；</p>
<ol start="3">
<li><strong>SuivivorTo</strong></li>
</ol>
<p>保留一次 MinorGC 过程中的幸存者；</p>
<h3> 老年代</h3>
<p>存放生命周期较长的内存对象。老年代中对象一般都比较稳定，因此 MajorGC 不会频繁执行，在执行 MajorGC 前一般都进行了一次 MinorGC，使得新生代对象晋身老年代，导致空间不足才触发。当无法找到足够大的连续空间分配给新创建的较大对象时也会提前触发一次 MajorGC 进行垃圾回收来腾出空间。</p>
<h3> 永久代</h3>
<p>内存中的永久保存区域，主要存放 <strong>类和 Meta（元数据）的信息</strong>，类在被加载时被放入永久代，不同于存放实例的区域，<strong>GC 不会在主程序运行期对永久代进行清理，因此会导致永久代会随着加载的类的增多而不断缩小，直到抛出 OOM 异常</strong>。</p>
<p>Java 8 以后，<strong>永久代被元数据区取代</strong>，其本质类似于永久代。两者最大的区别在于：<strong>元空间不在虚拟机中，而是使用本地内存，因此其大小只受本地内存限制</strong>。<strong>类的元数据放入 Native Memory，字符串池和类的静态变量放入 Java 堆</strong>。</p>
<h2> JVM 调优</h2>
<h3> JVM 调优常用参数</h3>
<ul>
<li><code>-Xms2g</code>：初始化堆大小为 2g</li>
<li><code>-Xmx2g</code>：堆最大内存为 2g</li>
<li><code>-XX:NewRatio=4</code>：设置年轻和老年代的内存比例为 1:4</li>
<li><code>-XX:SurvivorRatio=8</code>：设置新生代 Eden 和 Survivor 比例为 8:2</li>
<li><code>-XX:+UseParNewGC</code>：指定使用 ParNew + Serial Old 垃圾回收器组合</li>
<li><code>-XX:+UseParallelOldGC</code>：指定使用 ParNew + ParNew Old 垃圾回收器组合</li>
<li><code>-XX:+UseConcMarkSweepGC</code>：指定使用 CMS + Serial Old 垃圾回收器组合</li>
<li><code>-XX:+PrintGC</code>：开启打印 GC 信息</li>
<li><code>-XX:+PrintGCDetail</code>：打印 GC 详细信息</li>
</ul>
<h3> JVM 调优步骤</h3>
<ol>
<li>分析 GC 日志及 dump 文件，判断是否需要优化，确定瓶颈问题点；</li>
<li>确定 JVM 调优量化目标；</li>
<li>确定 JVM 调优参数；</li>
<li>调优一台服务器，对比观察调优前后的差异；</li>
<li>不断分析和调整，直到找到合适的 JVM 参数配置；</li>
<li>找到最合适的参数，讲这些参数应用到所有服务器，并进行后序跟踪；</li>
</ol>
]]></content:encoded>
    </item>
    <item>
      <title>MySQL 面试总结</title>
      <link>https://cunyu1943.site/JavaPark/md/interview/20220807-mysql.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/interview/20220807-mysql.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">MySQL 面试总结</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 数据库基础 使用数据库的优点 最开始，我们是将数据保存在 内存 中，这能够保证我们十分 快速存取，但是一旦断电，数据就丢失了，无法永久保存。 于是我们将数据存放在 文件 中，这样一来我们就 能够将数据永久保存，但每次都要进行频繁的 IO 操作，相对于内存来讲速度就慢了许多，而且进行查询操作也不方便。 于是，我们转移到了 数据库 存储，通过这种方式不但 能将永久保存数据，而且查询管理也更加高效方便。</description>
      <category>面试宝典</category>
      <pubDate>Sun, 07 Aug 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 数据库基础</h2>
<h3> 使用数据库的优点</h3>
<p>最开始，我们是将数据保存在 <strong>内存</strong> 中，这能够保证我们十分 <strong>快速存取，但是一旦断电，数据就丢失了，无法永久保存。</strong> 于是我们将数据存放在 <strong>文件</strong> 中，这样一来我们就 <strong>能够将数据永久保存，但每次都要进行频繁的 IO 操作，相对于内存来讲速度就慢了许多，而且进行查询操作也不方便。</strong> 于是，我们转移到了 <strong>数据库</strong> 存储，通过这种方式不但 <strong>能将永久保存数据，而且查询管理也更加高效方便</strong>。</p>
<h3> 什么是 MySQL</h3>
<p>MySQL 是一个关系型数据库管理系统，开源免费，且易扩展，是当前最流行的关系型数据库管理系统之一，在 Java Web 应用方面的应用十分广泛。其默认端口为 <strong>3306</strong>。</p>
<h3> 数据库三大范式</h3>
<ol>
<li><strong>第一范式：属性原子性</strong></li>
</ol>
<p>最基本的范式，若数据库表中 <strong>所有字段值均为不可分解的原子值</strong>，则满足第一范式；</p>
<ol start="2">
<li><strong>第二范式：记录唯一性，确保表中每列均与主键相关</strong></li>
</ol>
<p>在第一范式的基础上更进一步，需要确保数据库表中的每列均与主键相关，而不能只与主键的某一部分相关（主要针对联合主键）。即 <strong>在一个数据库表中，一个表中只能保存一种数据，不能将多种数据保存在同一张数据库表中</strong>；</p>
<ol start="3">
<li><strong>第三范式：字段冗余性，确保每列均与主键列直接相关，不存在传递依赖</strong></li>
</ol>
<p>在第二范式的基础上，确保数据表中的 <strong>每列数据和主键直接相关，而不依赖于其他非主键，即任何字段不能由其他字段派生</strong>；</p>
<h3> MySQL 中自带的权限表</h3>
<p>MySQL 通过权限表来控制用户对数据库的访问，一般是存放在 <code>mysql</code> 表中，由 <code>mysql_install_db</code> 脚本进行初始化，分别包括：</p>
<ul>
<li><strong>user</strong>：记录允许连接服务器的用户账号信息，权限是全局性的；</li>
<li><strong>db</strong>：记录各个账号在不同数据库上的操作权限；</li>
<li><strong>table_priv</strong>：记录数据表级别的操作权限；</li>
<li><strong>columns_priv</strong>：记录数据列级别的操作权限；</li>
<li><strong>host</strong>：配合 <strong>db</strong> 表对给定主机上数据库级别的操作权限进行更进一步的控制，权限不受 <strong>GRANT</strong> 和 <strong>REVOKE</strong> 的影响；</li>
</ul>
<h2> 数据类型</h2>
<p>主要可以分为 5 大类型，而大类型下又具体划分了不同的子类型：</p>
<p></p>
<table>
<thead>
<tr>
<th><strong>分类</strong></th>
<th><strong>类型名称</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>整数类型</strong></td>
<td><code>tinyInt</code></td>
<td>很小的整数(8 位二进制)</td>
</tr>
<tr>
<td></td>
<td><code>smallint</code></td>
<td>小的整数(16 位二进制)</td>
</tr>
<tr>
<td></td>
<td><code>mediumint</code></td>
<td>中等大小的整数(24 位二进制)</td>
</tr>
<tr>
<td></td>
<td><code>int(integer)</code></td>
<td>普通大小的整数(32 位二进制)</td>
</tr>
<tr>
<td><strong>实数类型</strong></td>
<td><code>float</code></td>
<td>单精度浮点数</td>
</tr>
<tr>
<td></td>
<td><code>double</code></td>
<td>双精度浮点数</td>
</tr>
<tr>
<td></td>
<td><code>decimal(m,d)</code></td>
<td>压缩严格的定点数</td>
</tr>
<tr>
<td><strong>枚举类型</strong></td>
<td><code>enum</code></td>
<td></td>
</tr>
<tr>
<td><strong>日期和时间类型</strong></td>
<td><code>year</code></td>
<td>YYYY 1901~2155</td>
</tr>
<tr>
<td></td>
<td><code>time</code></td>
<td>HH:MM:SS -838:59:59~838:59:59</td>
</tr>
<tr>
<td></td>
<td><code>date</code></td>
<td>YYYY-MM-DD 1000-01-01~9999-12-3</td>
</tr>
<tr>
<td></td>
<td><code>datetime</code></td>
<td>YYYY-MM-DD HH:MM:SS 1000-01-01 00:00:00~ 9999-12-31 23:59:59</td>
</tr>
<tr>
<td></td>
<td><code>timestamp</code></td>
<td>YYYY-MM-DD HH:MM:SS 19700101 00:00:01 UTC~2038-01-19 03:14:07UTC</td>
</tr>
<tr>
<td><strong>字符串类型</strong></td>
<td><code>CHAR(M)</code></td>
<td>M 为 0~255 之间的整数</td>
</tr>
<tr>
<td></td>
<td><code>VARCHAR(M)</code></td>
<td>M 为 0~65535 之间的整数</td>
</tr>
<tr>
<td></td>
<td><code>TINYBLOB</code></td>
<td>允许长度 0~255 字节</td>
</tr>
<tr>
<td></td>
<td><code>BLOB</code></td>
<td>允许长度 0~65535 字节</td>
</tr>
<tr>
<td></td>
<td><code>MEDIUMBLOB</code></td>
<td>允许长度 0~167772150 字节</td>
</tr>
<tr>
<td></td>
<td><code>LONGBLOB</code></td>
<td>允许长度 0~4294967295 字节</td>
</tr>
<tr>
<td></td>
<td><code>TINYTEXT</code></td>
<td>允许长度 0~255 字节</td>
</tr>
<tr>
<td></td>
<td><code>TEXT</code></td>
<td>允许长度 0~65535 字节</td>
</tr>
<tr>
<td></td>
<td><code>MEDIUMTEXT</code></td>
<td>允许长度 0~167772150 字节</td>
</tr>
<tr>
<td></td>
<td><code>LONGTEXT</code></td>
<td>允许长度 0~4294967295 字节</td>
</tr>
<tr>
<td></td>
<td><code>VARBINARY(M)</code></td>
<td>允许长度 0~M 个字节的变长字节字符串</td>
</tr>
<tr>
<td></td>
<td><code>BINARY(M)</code></td>
<td>允许长度 0~M 个字节的定长字节字符串</td>
</tr>
</tbody>
</table>
<h2> 存储引擎</h2>
<p>要查看 MySQL 中所提供的引擎，可以通过如下命令：</p>
<blockquote>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></blockquote>
<p></p>
<h3> 常用存储引擎</h3>
<table>
<thead>
<tr>
<th>引擎</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>InnoDB</code></td>
<td><strong>提供对数据库 ACID 事务的支持，同时提供了行级锁和外键的约束</strong>，其设计目标是处理大数据</td>
</tr>
<tr>
<td><code>MyIASM</code></td>
<td><strong>默认引擎</strong>，<strong>不提供事务的支持，也不支持行级锁和外键</strong></td>
</tr>
<tr>
<td><code>MEMORY</code></td>
<td>所有数据均存于内存，存取速度快，但是安全性低</td>
</tr>
</tbody>
</table>
<h3> InnoDB vs MyISAM</h3>
<ul>
<li>InnoDB 的 4 大特性</li>
</ul>
<ol>
<li><strong>插入缓冲（Insert Buffer）</strong></li>
<li><strong>二次写（Double Write）</strong></li>
<li><strong>自适应哈希索引（Ahi）</strong></li>
<li><strong>预读（Read Ahead）</strong></li>
</ol>
<ul>
<li>两者区别</li>
</ul>
<table>
<thead>
<tr>
<th>对比项</th>
<th>MyISAM</th>
<th>Innodb</th>
</tr>
</thead>
<tbody>
<tr>
<td>存储结构</td>
<td>每张表被存放在三个文件：<br>1. <code>.frm</code>-表格定义<br>2. <code>.MYD</code>(MYData)-数据文件<br>3. <code>.MYI</code>(MYIndex)-索引文件</td>
<td>所有的表都保存在同一个数据文件中（也可能是多个文件，或者是独立的表空间文件），大小只受限于操作系统文件的大小，一般为 2GB</td>
</tr>
<tr>
<td>存储空间</td>
<td>可被压缩，存储空间较小</td>
<td>需要更多的内存和存储，会在主内存中建立其专用的缓冲池用于高速缓冲数据和索引</td>
</tr>
<tr>
<td>可移植性、备份及恢复</td>
<td>数据以文件形式存储，在跨平台的数据转移中会很方便，在备份和恢复时可单独针对某个表进行操作</td>
<td>免费的方案可以是拷贝数据文件、备份 binlog，或者用 mysqldump，在数据达到一定量（几十 G）的时候就相对痛苦了</td>
</tr>
<tr>
<td>文件格式</td>
<td>数据和索引是分别存储的，数据<code>.MYD</code>，索引<code>.MYI</code></td>
<td>数据和索引是集中存储的，<code>.ibd</code></td>
</tr>
<tr>
<td>记录存储顺序</td>
<td>按记录插入顺序保存</td>
<td>按主键大小有序插入</td>
</tr>
<tr>
<td><strong>外键</strong></td>
<td><strong>不支持</strong></td>
<td><strong>支持</strong></td>
</tr>
<tr>
<td><strong>事务</strong></td>
<td><strong>不支持</strong></td>
<td><strong>支持（默认 REPEATABLE-READ）</strong></td>
</tr>
<tr>
<td><strong>锁支持</strong></td>
<td><strong>表级锁定</strong></td>
<td><strong>行级锁定、表级锁定，锁定力度小并发能力高</strong></td>
</tr>
<tr>
<td><strong>MVVC 支持</strong></td>
<td><strong>不支持</strong></td>
<td><strong>支持</strong></td>
</tr>
<tr>
<td><strong>崩溃修复</strong></td>
<td><strong>不支持</strong></td>
<td><strong>支持</strong></td>
</tr>
<tr>
<td><strong>哈希索引</strong></td>
<td><strong>不支持</strong></td>
<td><strong>支持</strong></td>
</tr>
<tr>
<td><strong>全文索引</strong></td>
<td><strong>支持</strong></td>
<td><strong>不支持</strong></td>
</tr>
<tr>
<td>查询性能</td>
<td>更佳</td>
<td></td>
</tr>
<tr>
<td>增删改性能</td>
<td></td>
<td>更佳</td>
</tr>
<tr>
<td>统计数据量</td>
<td>更快，内部维护了一个计数器，可以直接调取。</td>
<td></td>
</tr>
<tr>
<td>索引的实现方式</td>
<td>B+ 树索引，myisam 是堆表</td>
<td>B+ 树索引，Innodb 是索引组织表</td>
</tr>
</tbody>
</table>
<p>两者主要区别如下：</p>
<ol>
<li>InnoDB 索引是聚簇索引，而 MyISAM 是非聚簇索引；</li>
<li>InnoDB 的主键索引的叶子节点存储着行数据，因此主键索引效率高；MyISAM 索引的叶子节点存储的是行数据地址，需要多进行一次寻址操作才能够得到数据；</li>
<li>InnoDB 非主键索引的叶子节点存储的是主键和其他带索引的列数据，因此查询时做到覆盖索引更加高效；</li>
</ol>
<h3> 如何选择存储引擎</h3>
<ul>
<li><strong>MyISAM</strong>：默认的 MySQL 插件式存储引擎，适合 <strong>以读写插入为主</strong>，是 Web、数据仓库和其他应用环境下最常使用的引擎之一；</li>
<li><strong>InnoDB</strong>：用于事务处理应用程序，如果 <strong>更新删除等操作频率也高</strong>，或者要 <strong>保证数据完整性</strong>，支持 <strong>高并发、外键和事务等</strong>；</li>
<li><strong>Memory</strong>：将所有数据保存在 <code>RAM</code> 中，在需要快速查找引用和其他类似数据情况下，能提供较快的访问；</li>
<li><strong>Merge</strong>：允许 MySQL DBA 或开发人员将一系列等同的 MyISAM 表以逻辑方式组合在一起并作为一个对象引用，适合于数据仓库等 VLDB 环境；</li>
</ul>
<h2> 存储过程</h2>
<h3> 定义</h3>
<p>存储过程是一个可编程的函数，在数据库中创建并保存，由 SQL 语句和一些特殊的控制结构组成。优点是 <strong>允许模块化设计，即一次创建，多次调用。</strong> 是一个预编译的 SQL 语句，当需要多次执行 SQL 语句时，使用存储过程比单纯 SQL 语句效率更高。</p>
<h3> 优缺点</h3>
<ul>
<li><strong>优点</strong></li>
</ul>
<ol>
<li>由于是预编译，所以执行效率高；</li>
<li>存储过程的代码直接在数据库中，通过存储过程名直接调用，能够减少网络通讯；</li>
<li>安全性高，执行存储过程需要有一定权限的用户；</li>
<li>能够重复使用，提高开发效率；</li>
</ol>
<ul>
<li><strong>缺点</strong></li>
</ul>
<ol>
<li>调试困难</li>
<li>移植困难</li>
<li>重新编译问题，由于存储过程是运行前编译，因此如果带有引用关系的对象发生改变时，受到影响的存储过程、包需要重新编译</li>
<li>若在一个程序中大量使用存储过程，到交付使用时就会随着用户需求的改变而导致数据结构变化，此时系统维护成本较高</li>
</ol>
<h2> 事务</h2>
<h3> 事务定义</h3>
<p>事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行结果必须使数据库从一种一致性状态切换到另一中一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。事务能够在数据库提交工作时确保要么所有修改都保存，要么所有修改都不保存。<strong>即事务是逻辑上的一组操作，要么都执行，要么都不执行</strong>。</p>
<h3> 事务的 4 大特性</h3>
<p>关系型数据库都需要遵循 ACID 规则：</p>
<ol>
<li><strong>原子性（Atomicity）</strong></li>
</ol>
<p>原子性是整个数据库事务中不可分割的工作单位，只有事务中的所有的数据库操作都执行成功，才代表整个事务成功，如果其中任一环节执行失败，那么就算已经执行成功的 SQL 语句也必须撤销，回滚到事务执行前的状态。即原子性能够保证 <strong>动作要么全部完成，要么完全不起作用。</strong> <strong>即事务是最小的执行单位，不允许分割</strong>。</p>
<ol start="2">
<li><strong>一致性（Consistency）</strong></li>
</ol>
<p>指事务将数据库从一种一致性状态变为另一种一致性状态。在事务开始前后，数据库的完整性约束未被破坏。<strong>在事务执行前后，数据能够保持一致，多个事务对统一数据读取的结果相同</strong>。</p>
<ol start="3">
<li><strong>隔离性（Isolation）</strong></li>
</ol>
<p>并发访问数据库时，隔离性要求每个读写事务对其他事务的操作对象能够相互分离，即一个用户的事务不被其他事务所干扰，各并发事务间数据库是独立的；</p>
<ol start="4">
<li><strong>持久性（Durability）</strong></li>
</ol>
<p>表示事务一旦被提交，其结果就是永久性的，它对数据库中数据的改变是持久的，即便数据库发生故障也不应该对其产生影响；</p>
<h3> 事务隔离级别</h3>
<h4> 脏读、幻读 &amp; 不可重复读</h4>
<p>了解事务隔离级别之前，先来看看这几个读的概念：</p>
<ol>
<li><strong>脏读（Dirty Read）</strong></li>
</ol>
<p>表示某一事务已经更新了一份数据，另一个事务在此时读取了同一份数据。当前一个事务撤销操作后，就会导致后一个事务所读取的数据不正确。</p>
<ol start="2">
<li><strong>幻读（Phantom Read）</strong></li>
</ol>
<p>在一个事务的两次查询中数据量不一致，假如有一个事务查询了几列数据，同时另一个事务中在此时查询了新的数据，则查询事务在后续查询中，就会发现数据比最开始的查询数据更丰富。</p>
<ol start="3">
<li><strong>不可重复读（Non-repeatable Read）</strong></li>
</ol>
<p>一个事务中两次查询数据不一致，有可能是因为两次查询过程中插入了一个更新原有数据的事务。</p>
<p><strong>注意：不可重复读和幻读的区别在于：</strong></p>
<blockquote>
<p><strong>不可重复读的重点在于修改，</strong> 比如多次读取一条记录发现其中某些列的值被修改，而 <strong>幻读的重点在于新增或删除</strong>，比如多次读取一条记录发现记录增多或减少了。</p>
</blockquote>
<h4> 隔离级别</h4>
<p>SQL 标准定义了 4 个隔离级别，隔离级别从低到高分别是：</p>
<ol>
<li><strong>READ-UNCOMMITTED（读取未提交）</strong></li>
</ol>
<p>最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能导致脏读、幻读或不可重复读</strong>。</p>
<ol start="2">
<li><strong>READ-COMMITTED（读取已提交）</strong></li>
</ol>
<p>允许读取并发事务已经提交的数据，<strong>能够阻止脏读，但可能导致幻读或不可重复读</strong>。</p>
<ol start="3">
<li><strong>REPEATABLE-READ（可重复读）</strong></li>
</ol>
<p>对同一字段的多次读取结果时一致的，除非数据是被本身事务自己所修改，<strong>能够阻止脏读和不可重复读，但可能导致幻读</strong>。</p>
<ol start="4">
<li><strong>SERIALIZABLE（可串行化）</strong></li>
</ol>
<p>最高的隔离级别，完全服从 ACID 的隔离级别，所有事务依次逐个执行，这样事务之间就完全不可能产生干扰，<strong>能够防止脏读、幻读以及不可重复读</strong>、</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>READ-UNCOMMITTED</code></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>READ-COMMITTED</code></td>
<td>❌</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>REPEATABLE-READ</code></td>
<td>❌</td>
<td>❌</td>
<td>✔</td>
</tr>
<tr>
<td><code>SERIALIZABLE</code></td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
</tbody>
</table>
<h2> 锁</h2>
<h3> 定义</h3>
<p>当数据库中存在并发事务时，可能会导致数据库中的数据不一致，此时为了保证访问次序，我们就需要用到锁机制。</p>
<p>锁是为了支持对共享资源进行并发访问，提供数据的完整性和一致性，从而保证在高并发的情况下，访问数据库时不会出现问题；</p>
<h3> 事务隔离级别与锁的关系</h3>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>锁</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>READ-UNCOMMITTED</code></td>
<td>读取无需加共享锁</td>
</tr>
<tr>
<td><code>READ-COMMITTED</code></td>
<td>读操作需要加共享锁，语句执行完后释放</td>
</tr>
<tr>
<td><code>REPEATABLE-READ</code></td>
<td>读操作需要加共享锁，事务执行完毕后释放</td>
</tr>
<tr>
<td><code>SERIALIZABLE</code></td>
<td><strong>锁定整个范围的键</strong>，并一直持有锁，直到事务完成</td>
</tr>
</tbody>
</table>
<h3> 数据库中死锁的定义及解决方法</h3>
<ul>
<li><strong>定义</strong></li>
</ul>
<p>所谓死锁，<strong>指的是两个或多个以上进程在同一资源上相互占用，并请求锁定对方的资源，从而导致恶性循环的现象</strong>。</p>
<ul>
<li><strong>解决方法</strong></li>
</ul>
<ol>
<li><strong>若不同程序间并发存取多个表，则尽量约定以相同的顺序来访问表，从而大大降低死锁发生的概率；</strong></li>
<li><strong>同一事务中，尽量一次性锁定所需的所有资源，降低死锁发生的概率；</strong></li>
<li><strong>对于易发生死锁的业务部分，尝试使用升级锁定颗粒度；</strong></li>
</ol>
<h3> 乐观锁 &amp; 悲观锁</h3>
<ul>
<li><strong>定义</strong></li>
</ul>
<p>并发控制能够确保多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性，以及数据库的统一性，而并发控制主要可分为乐观锁（乐观并发控制）和悲观锁（悲观并发控制）。</p>
<ol>
<li><strong>乐观锁</strong></li>
</ol>
<p>假定不会发生并发冲突，只在提交事务时检查时候违反数据完整性。修改数据时将事务加锁，通过 <code>version</code> 的方式来进行锁定，<strong>一般使用版本号机制或 CAS 算法来实现</strong> ；</p>
<ol start="2">
<li><strong>悲观锁</strong></li>
</ol>
<p>假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。查询完数据时将事务加锁，直到提交事务，<strong>一般使用数据库中的锁机制来实现</strong>；</p>
<ul>
<li><strong>使用场景</strong></li>
</ul>
<p><strong>乐观锁</strong> 适合于 <strong>读操作频繁，但写操作较少</strong> 的情况，即冲突很少发生的场景，这样能够省去锁的开销，同时加大系统的吞吐量；</p>
<p><strong>悲观锁</strong> 适合于 <strong>写操作频繁，但读操作较少</strong> 的情况，即冲突频发的场景；</p>
<h2> 索引</h2>
<h3> 定义</h3>
<p>所谓索引，就是一种特殊的文件，<strong>包含数据表中所有记录的引用指针</strong>。它是一种数据结构，数据库索引是数据库管理系统中一个排序的数据结构，能够协助快速查询、更新数据库表中数据，同时使用 B 树及其变种 B+ 树来实现。用通俗的话来讲就是相当于我们日常字典中的目录，能够帮助我们快速找到想要的字或词。</p>
<h3> 基本原理</h3>
<p>使用索引的最终目录是快速查找具有特定值的记录，如果没有索引，当我们需要查找某一个值时，只能遍历整张表来查找，这样做查找效率就会大打折扣。</p>
<p>索引的原理也很简单，即 <strong>将无序数据变为有序的查询</strong>，根据索引查询数据的步骤如下：</p>
<ol>
<li><strong>将创建了索引的列的内容进行排序</strong></li>
<li><strong>对排序结果生成倒排表</strong></li>
<li><strong>在倒排内容上拼上数据地址链</strong></li>
<li><strong>在查询时，先拿到倒排表内容，然后取出数据地址链，从而取出具体数据</strong></li>
</ol>
<h3> 索引优缺点</h3>
<ul>
<li><strong>优点</strong></li>
</ul>
<ol>
<li>第一点毫无疑问是 <strong>加快数据的检索速度</strong>；</li>
<li>第二点则是 <strong>通过使用索引，能够在查询过程中使用优化隐藏器，提高性能</strong>。</li>
</ol>
<ul>
<li><strong>缺点</strong></li>
</ul>
<ol>
<li><strong>时间方面</strong>：虽然能够加快检索速度，但是创建和维护索引也需要时间，而且随着数据的增多，索引也需要动态维护，这样将会降低增/删/改的执行效率；</li>
<li><strong>空间方面</strong>：索引也是需要占据独立空间的，所以会随着数据的增多而占用更多的物理空间；</li>
</ol>
<h3> 索引类型</h3>
<h4> 逻辑角度</h4>
<p>索引从逻辑角度主要可分为 4 种索引，分别是：</p>
<ol>
<li><strong>主键索引</strong></li>
</ol>
<p>数据列不允许重复，不允许为 <code>NULL</code>，一个表中只能有一个主键；</p>
<ol start="2">
<li><strong>唯一索引</strong></li>
</ol>
<p>数据列不允许重复，允许为 <code>NULL</code> 值，一个表中允许多个列创建唯一索引，可以通过如下两种方式进行创建唯一索引：</p>
<ul>
<li><strong>创建唯一索引</strong>：<code>ALTER TABLE table_name ADD UNIQUE(column)</code></li>
<li><strong>创建唯一组合索引</strong>：<code>ALTER TABLE table_name ADD UNIQUE(column1, column2)</code>；</li>
</ul>
<ol start="3">
<li><strong>普通索引</strong></li>
</ol>
<p>最基本的索引类型，没有唯一性的限制，允许为 <code>NULL</code> 值，通过如下两种方式来创建唯一索引：</p>
<ul>
<li><strong>创建普通索引</strong>：<code>ALTER TABLE table_name ADD INDEX index_name (column)</code>；</li>
<li><strong>创建普通索引组合</strong>：<code>ALTER TABLE table_name ADD INDEX index_name (column1, column2)</code>；</li>
</ul>
<ol start="4">
<li><strong>全文索引</strong></li>
</ol>
<p>搜索引擎中也在使用的一种技术，通过 <code>ALTER TABLE table_name ADD FULLTEXT (column)</code> 来创建全文索引；</p>
<ol start="5">
<li><strong>组合索引</strong></li>
</ol>
<p>多列值组成一个索引，专门用于组合搜索，其效率大于索引合并；</p>
<h4> 物理存储角度</h4>
<ol>
<li><strong>聚集索引（clustered index）</strong></li>
<li><strong>非聚集索引（non-clustered index）</strong></li>
</ol>
<h4> 数据结构角度</h4>
<ol>
<li><strong>BTREE</strong></li>
<li><strong>HASH</strong></li>
<li><strong>FULLTEXT</strong></li>
<li><strong>R-Tree</strong></li>
</ol>
<h3> 索引算法</h3>
<p>常用的索引算法有 <strong>Hash 算法 和 B 树算法</strong>，分别多两个算法进行简单介绍：</p>
<ol>
<li><strong>B+ 树算法</strong></li>
</ol>
<p>最常用的 MySQL 算法，也是 MySQL 默认算法，既能够用于比较操作符（<code>=、&gt;、&lt;、between</code> 等），也能够用于 <code>like</code> 操作符，只要其查询条件是一个 <strong>不以通配符开头的常量</strong>。底层实现的是 <strong>多路平衡查找树</strong>，每次查询都要从根节点出发，查找到叶子节点方可获得所查询的键值，然后根据查询判断是否需要回表查询数据。</p>
<ol start="2">
<li><strong>Hash 算法</strong></li>
</ol>
<p>Hash 算法索引只能用于对等比较（<code>=、&gt;=、&lt;=</code>），而且不像 B 树索引需要从根节点到枝节点，最后才能范文到页节点进行多次读写操作，它只需要一次定位数据，所以检索效率远高于 B 树索引。其底层是 Hash 表，进行查找时，调用一次 <code>Hash</code> 函数就能获取相应键值，然后进行回表查询获得实际数据。</p>
<ol start="3">
<li><strong>两者对比</strong></li>
</ol>
<ul>
<li>Hash 索引进行等值查询更快，但是不能进行范围查询；</li>
<li>Hash 索引不支持使用索引进行排序；</li>
<li>Hash 索引不支持模糊查询以及多列索引的最左前缀匹配，因为 Hash 函数的结果不可预测；</li>
<li>Hash 索引无法避免回表查询数据，但 B+ 树在一定条件下（聚簇索引、覆盖索引等）只需要通过索引完成查询；</li>
<li>Hash 索引在等值查询时较快，但不稳定，性能不可预测；但 B+ 树的查询效率较稳定，对所有查询均是从根节点到叶子节点，且树的高度较低；</li>
</ul>
<h3> 设计和创建索引的原则</h3>
<h4> 设计原则</h4>
<ol>
<li><strong>选择唯一性索引</strong></li>
</ol>
<p>唯一性索引的值唯一，能够更加快速地通过该索引来确定某条记录；</p>
<ol start="2">
<li><strong>为经常需要排序、分组和联合操作的字段建立索引</strong></li>
</ol>
<p>对于经常需要 <code>ORDER BY、GROUP BY、DISTINCT、UNION</code> 等操作的字段，排序时会浪费许多时间，因此我们可以为其建立索引，避免排序操作；</p>
<ol start="3">
<li><strong>为经常作为查询条件的字段建立索引</strong></li>
</ol>
<p>若某个字段经常作为查询条件，则该字段的查询速度将影响整个表的查询速度，此时可以给该字段建立索引，从而提高整个表的查询速度；</p>
<ol start="4">
<li><strong>限制索引数目</strong></li>
</ol>
<p>索引并非越多越好，每个索引都需要占用物理空间，索引越多占用的物理空间越大，修改表时对索引的重构和更新将十分麻烦；</p>
<ol start="5">
<li><strong>尽量使用数据量少的索引</strong></li>
</ol>
<p>如果索引值较长，查询速度也会受到影响；</p>
<ol start="6">
<li><strong>使用短索引，尽量使用前缀来索引</strong></li>
</ol>
<p>如果某索引字段值较长，最好使用值的前缀来进行索引；</p>
<ol start="7">
<li><strong>删除不再使用或很少使用的索引</strong></li>
</ol>
<p>表中数据被大量更新，或者数据使用方式被改变落后，原有的一些索引可能不再需要，此时需要对这些索引进行删除，减少索引对更新操作的影响；</p>
<h4> 创建原则</h4>
<p>使用索引能够在一定程度上提高检索效率，但也不能无限制的使用，创建索引时，最好能够满足如下原则：</p>
<ol>
<li><strong>最左前缀匹配原则</strong></li>
<li><strong>频繁查询的字段才创建索引</strong></li>
<li><strong>更新频繁的字段不适合创建索引</strong></li>
<li><strong>区分度不高的字段不适合做索引</strong></li>
<li><strong>尽量扩展索引，而不用去创建新的索引</strong></li>
<li><strong>定义有外键的数据列一定要建立索引</strong></li>
<li><strong>对于查询中很少涉及，而且重复值较多的字段无需建立索引</strong></li>
<li><strong>对于 <code>text、image、bit</code> 类型的字段不要建立索引</strong></li>
</ol>
<h3> B+ 树索引 和 Hash 索引底层实现</h3>
<ol>
<li><strong>Hash 索引</strong></li>
</ol>
<p>Hash 索引底层其实就是 Hash 表，进行查找时，调用一次 Hash 函数就能获取到响应的键值，然后进行回表查询获取数据库中的数据；</p>
<ol start="2">
<li><strong>B+ 树索引</strong></li>
</ol>
<p>B+ 树底层实现是多路平衡查找树，对每次的查询均从根节点出发，查找到叶子节点就获得所要查询的键值，然后根据查询判断是否需要回表查询数据；</p>
<ol start="3">
<li><strong>Hash 索引与 B+ 树的不同</strong></li>
</ol>
<ul>
<li>Hash 索引进行等值查询更快，但无法进行范围查询。因为 <code>Hash</code> 索引中经过 <code>hash()</code> 函数建立索引后，索引顺序与与原顺序无法保持一致，不能支持范围查询；而 B+ 树的所有节点皆遵循（左节点小于父节点，父节点小于右节点），天然支持范围查询；</li>
<li>Hash 索引不支持使用索引进行排序；</li>
<li>Hash 索引不支持模糊查询以及多列索引的最左前缀匹配，原理也是因为 <code>hash()</code> 函数的不可预测；</li>
<li>Hash 索引任何时候都必须进行回表查询，但 B+ 树在符合某些条件时可以只通过索引完成查询；</li>
<li>Hash 索引虽然等值查询较快，但是极其不稳定，性能不可预测，但某一键值存在大量重复时，会发生 Hash 碰撞，此时效率可能十分低下；而 B+ 树的查询效率比较稳定，对于所有的查询均是从根节点到叶子节点，且树的高度较低；</li>
</ul>
<p>鉴于以上不同点，因此在大多数情况下，直接选用 B+ 树索引能够获得稳定且较好的查询速度，而不需要使用 Hash 索引；</p>
<h2> 视图</h2>
<h3> 视图定义</h3>
<p>为了提高复杂 SQL 语句的复用性和表操作的安全性，MySQL 数据库管理系统提供了视图。</p>
<p>视图的本质是 <strong>一种虚拟表，在物理上不存在，其内容与真实的表相似，包含一系列带有名称的列和行数据。</strong> 但视图并不在数据库中以存储的数据值形式存在，行和列数据来自定义视图的查询所引用基本表，且在具体引用视图时动态生成；</p>
<p>视图的操作一般包括如下四部分：</p>
<ul>
<li><strong>创建视图</strong></li>
<li><strong>查看视图</strong></li>
<li><strong>删除视图</strong></li>
<li><strong>修改视图</strong></li>
</ul>
<h3> 视图特点</h3>
<ol>
<li>视图的列可以来自不同的表，是表的抽象在逻辑意义上建立的新关系；</li>
<li>视图是有基本表（实表）产生的表（虚表）；</li>
<li>视图的建立和删除不会对基本表造成影响；</li>
<li>对视图内容的更新（添加、删除和修改）会直接影响到基本表；</li>
<li>当视图来自多个基本表时，不允许添加和删除数据；</li>
</ol>
<h3> 视图优缺点</h3>
<h4> 优点</h4>
<ol>
<li><strong>查询简单化</strong>，视图能够简化用户操作，数据所见即所得；</li>
<li><strong>数据安全性</strong>，视图使用户能从多个角度看待同一数据，用户只能查询或修改他们所能见到得到的数据，能够对机密数据提供安全保护；</li>
<li><strong>逻辑数据独立性</strong>，视图对重构数据库提供了一定程度的逻辑独立性，屏蔽真实表结构变化所带来的影响；</li>
</ol>
<h4> 缺点</h4>
<ol>
<li><strong>性能相对较差</strong>，简单的查询也会变得很复杂；</li>
<li><strong>修改限制</strong>，尝试修改视图时，必须将其转化为对比本表的某些行的修改。对于复杂的聚合视图，基本无法改变；</li>
</ol>
<h2> 优化</h2>
<h3> 大表优化</h3>
<p>当 MySQL 单表记录数过大时，数据库的 CURD 性能会明显下降，此时可以采取如下的优化措施：</p>
<ol>
<li><strong>限定数据范围</strong></li>
</ol>
<p>务必禁止不带任何限制数据范围条件的查询语句，此时会查询整个数据库，效率极低；</p>
<ol start="2">
<li><strong>读/写分离</strong></li>
</ol>
<p>最经典的数据库拆分方案，主库负责写，从库负责读；</p>
<ol start="3">
<li><strong>垂直分区</strong></li>
</ol>
<p>即根据数据库中数据表的相关性进行拆分，简单来讲就是指数据表的拆分，将一张列较多的表分为多张表。这样操作使得 <strong>列数据变小，在查询时减少了读取的 Block 数，减少了 I/O 次数。同时，垂直分区也能够简化表的结构，易于维护</strong>。但是，垂直拆分也存在一定缺点。首先拆分将 <strong>导致主键出现冗余，此时就需要管理冗余列，同时会引起 Join 操作，可以通过在应用层进行 Join 来解决。此外，拆分还会让事务变得更加复杂。</strong></p>
<ol start="4">
<li><strong>水平分区</strong></li>
</ol>
<p><strong>保持数据表结构不变，通过某一策略存储数据分片。这样一来每一片数据分散到不同表或库中，从而达到分布式的目的，而且通过水平切分能够支撑非常大的数据量。</strong></p>
<p>水平拆分是将数据表的行进行拆分，它能够 <strong>支撑非常大的数据量存储</strong>，应用端改造也少，但是 <strong>分片事务难以解决，跨节点 Join 性能较差，逻辑复杂。</strong></p>
<p>一般来讲数据库分片操作的两种常见方案如下：</p>
<ul>
<li><strong>客户端代理：分片逻辑在应用端，封装在 jar 包中，通过修改或封装 JDBC 层来实现。</strong></li>
<li><strong>中间件代理：在应用和数据间加一个代理层，分片逻辑统一维护在中间件服务中。</strong></li>
</ul>
<h2> 其他</h2>
<h3> sql 注入</h3>
<p>用户传入的参数中符合 sql 的语法，从而破坏原有 sql 结构语义，从而达到攻击效果；</p>
<h3> NULL 和空串</h3>
<p><code>NULL</code> 是没有值的，不是空串，如果只指定 ‘’ （两个单引号，中间无任何字符），对于 <code>NOT NULL</code> 列是允许的，空串也是一个有效的值；</p>
<p>要对 <code>NULL</code> 进行判断，则需要使用 <code>IS NULL</code> 或者 <code>IS NOT NULL</code>；</p>
<h3> 如何创建用户并授权</h3>
<ol>
<li><strong>创建用户</strong></li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li><strong>授权</strong></li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 如何删除表</h3>
<table>
<thead>
<tr>
<th>方式</th>
<th>说明</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>delete</code></td>
<td>仅删除表数据，支持条件过滤，支持回滚，记录日志，因此较慢</td>
<td><code>delete from table_name</code></td>
</tr>
<tr>
<td><code>truncate</code></td>
<td>仅删除所有数据，不支持条件过滤，不支持回滚，不记录日志，效率高于 <code>delete</code></td>
<td><code>truncate table table_name</code></td>
</tr>
<tr>
<td><code>drop</code></td>
<td>删除表数据同时删除表结构，将表所占空间均释放，删除效率最高</td>
<td><code>drop table table_name</code></td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>Spring 面试总结</title>
      <link>https://cunyu1943.site/JavaPark/md/interview/20220808-spring.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/interview/20220808-spring.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">Spring 面试总结</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 Spring 特点 Spring 主要有如下特点： 轻量级：Spring 是非侵入式，其中的对象不依赖 Spring 的特定类； 控制反转（IoC）：通过 IoC，促进了低耦合，一个对象依赖的其他对象通过被动的方式传递进来，而不用该对象主动创建或查找； 面向切面（AOP）：支持面向切面编程，将应用业务逻辑层和系统服务层分开； 容器：包含并管理应用对象的配置以及生命周期，此时 Spring 就相当于一个容器； 框架集合：能将简单的组件进行配置，组合成为更为复杂的应用；在 Spring 中，应用对象被声明式地组合在一个 XML 文件中；此外，Spring 也提供了事务管理、 持久化框架集成等基础功能，将应用逻辑的开发留给开发者；</description>
      <category>面试宝典</category>
      <pubDate>Mon, 08 Aug 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> Spring 特点</h2>
<p>Spring 主要有如下特点：</p>
<ol>
<li><strong>轻量级</strong>：Spring 是非侵入式，其中的对象不依赖 Spring 的特定类；</li>
<li><strong>控制反转（IoC）</strong>：通过 IoC，促进了低耦合，一个对象依赖的其他对象通过被动的方式传递进来，而不用该对象主动创建或查找；</li>
<li><strong>面向切面（AOP）</strong>：支持面向切面编程，将应用业务逻辑层和系统服务层分开；</li>
<li><strong>容器</strong>：包含并管理应用对象的配置以及生命周期，此时 Spring 就相当于一个容器；</li>
<li><strong>框架集合</strong>：能将简单的组件进行配置，组合成为更为复杂的应用；在 Spring 中，应用对象被声明式地组合在一个 XML 文件中；此外，Spring 也提供了事务管理、 持久化框架集成等基础功能，将应用逻辑的开发留给开发者；</li>
</ol>
<h2> Spring 核心组件</h2>
<p></p>
<p>Spring 是一个分层架构，主要由如下 7 大模块所构成。Spring 模块位于核心容器，定义了创建、配置和管理 Bean 的方式。</p>
<ol>
<li><strong>Spring Core</strong>：提供 Spring 框架基本功能，主要组件是 BeanFactory，是工厂模式的实现，通过 IOC 机制将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li>
<li><strong>Spring Context</strong>：一个配置文件，给 Spring 框架提供上下文信息，上下文包括 JNDI、EJB、电子邮件、国际化、校验和调度等企业服务。</li>
<li><strong>Spring AOP</strong> ：通过配置管理特性，Spring AOP 直接将 AOP（面向切面）功能集成到 Spring 框架。从而我们能够十分方便的使用 Spring 框架来管理任何支持 AOP 的对象。模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用该组件，可以不依赖其他组件九江声明性事务管理集成到应用程序中。</li>
<li><strong>Spring DAO</strong>：JDBC DAO 抽象层提供了有意义的异常层次结构，可以用来管理异常处理和不同数据库供应商抛出的错误信息。异常层次结构简化了错误处理，而且极大降低了需要编写的异常代码数量。Spring DAO 面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</li>
<li><strong>Spring ORM</strong>：Spring 框架中插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map，这些都遵从 Spring 的通用事务和 DAO 异常层次结构；</li>
<li><strong>Spring Web</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文，所以 Spring 框架支持与 Jakarta Structs 的集成。同时该模块还简化了处理多部分请求以及请求参数绑定到域对象的工作。</li>
<li><strong>Spring MVC</strong>：MVC 是一个全功能的构建 Web 应用的 MVC 实现，可以通过策略接口对 MVC 框架实现高度可配置。而且 MVC 还容纳了 JSP、Velocity、Tiles 等视图技术。</li>
</ol>
<h2> Spring 常用注解</h2>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@Controller</code></td>
<td>1. 用于标注控制层组件<br>2. 用于标记一个类，表示它是一个 SpringMVC Controller 对象<br>3. 分发处理器将扫描使用了该注解的类的方法，同时检测方法是否使用 <code>@RequestMapping</code><br>4. 能够将 <code>Request</code> 请求 <code>header</code> 部分的值绑定到方法的参数上</td>
</tr>
<tr>
<td><code>@RestController</code></td>
<td>相当于 <code>@Component</code> 与 <code>@ResponseBody</code> 的组合</td>
</tr>
<tr>
<td><code>@Component</code></td>
<td>泛指组件，当组件不好归类时进行注解</td>
</tr>
<tr>
<td><code>@Repository</code></td>
<td>用于注解 <code>DAO</code> 层，在 <code>DaoImpl</code> 类中注解</td>
</tr>
<tr>
<td><code>@Service</code></td>
<td>用于注解业务层组件</td>
</tr>
<tr>
<td><code>@ResponseBody</code></td>
<td>1. 异步请求<br>2. 用于将 <code>Controller</code> 的方法返回的对象，通过适当的 <code>HttpMessageConverter</code> 转换为指定格式后，写入到 <code>Response</code> 对象的 <code>body</code> 数据区<br>3. 返回的数据并非 <code>html</code> 的页面，而是其他某种格式的数据（json、xml）时使用</td>
</tr>
<tr>
<td><code>@RequestMapping</code></td>
<td>用于处理请求地址映射的注解，用于类或方法，用于类时，表示类中所有响应请求的方法都以该地址作为父路径</td>
</tr>
<tr>
<td><code>@Autowired</code></td>
<td>对类成员变量、方法以及构造函数进行标注，从而完成自动装配，通过 <code>@Autowired</code> 的使用来消除 <code>get、set</code> 方法</td>
</tr>
<tr>
<td><code>@PathVariable</code></td>
<td>用于将请求 URL 中的模板变量映射到功能处理方法的参数上，即取出 URL 模板中的变量作为参数</td>
</tr>
<tr>
<td><code>@RequestParam</code></td>
<td>用于在 Spring MVC 后台控制层获取参数，类似 <code>request.getParameter("name")</code></td>
</tr>
<tr>
<td><code>@RequestHeader</code></td>
<td>将 <code>Request</code> 请求 <code>header</code> 部分的值绑定到方法的参数上</td>
</tr>
<tr>
<td><code>@ModelAttribute</code></td>
<td>在该 <code>Controller</code> 所有方法在调用前，先执行该注解，可用于注解和方法参数中</td>
</tr>
<tr>
<td><code>@SessionAttributes</code></td>
<td>将值放到 <code>session</code> 作用域，写在 <code>Class</code> 上面</td>
</tr>
<tr>
<td><code>@Valid</code></td>
<td>实体数据校验，结合 Hibernate Validator 一起使用</td>
</tr>
<tr>
<td><code>@CookieValue</code></td>
<td>获取 <code>cookie</code> 中的值</td>
</tr>
</tbody>
</table>
<h2> IoC 原理</h2>
<h3> 定义</h3>
<p>Spring 通过一个配置文件来描述 <code>Bean</code> 之间的相互依赖关系，利用 Java 的反射功能来实例化 <code>Bean</code> 并建立 <code>Bean</code> 之间的依赖关系。Spring 的 IoC 容器在完成这些底层工作的基础上，还提供 <code>Bean</code> 实例缓存、生命周期管理、<code>Bean</code> 实例代理、事件发布、资源装载等高级服务；</p>
<p>总结而言：<strong>IOC 负责创建对象、管理对象（通过依赖注入）、整合对象、配置对象以及管理对象的生命周期</strong>；</p>
<h3> Spring 容器高层视图</h3>
<p></p>
<ol>
<li>Spring 启动时先读取 <code>Bean</code> 配置信息，并在 Spring 容器中生成一份对应的 <code>Bean</code> 配置注册表；</li>
<li>根据上一步中生成的 <code>Bean</code> 配置注册表来实例化 <code>Bean</code>，并装配好 <code>Bean</code> 之间的依赖关系；</li>
<li>将实例化后的 <code>Bean</code> 装载到 Spring 容器中的 <code>Bean</code> 缓存池中，供上层的应用程序使用；</li>
</ol>
<h3> Spring Bean 的作用域及生命周期</h3>
<h4> 作用域</h4>
<p>Spring 中，用来组成应用程序的主体以及由 Spring IoC 容器所管理的对象叫做 Bean。简而言之，Bean 就是由 IoC 容器来进行初始化、装配和管理的对象。</p>
<p>Bean 的作用域主要有如下几种：</p>
<ol>
<li><strong>Singleton（单例）</strong></li>
</ol>
<p>作用域为 <code>Singleton</code>，<strong>该模式在多线程下不安全</strong>，表明 IoC 容器中只会存在一个共享 Bean 实例，而且所有对 Bean 的请求，主要 <code>id</code> 和该 Bean 定义相匹配，那么就会返回 Bean 的同一实例。<code>Singleton</code> 是单例模型，即在从创建容器的同时就会自动创建一个 Bean 的对象，无论是否使用，而且 <strong>每次获取到的对象都是同一对象</strong>。</p>
<ol start="2">
<li><strong>Prototype（原型）：每次创建时使用</strong></li>
</ol>
<p>作用域为 <code>Prototype</code>，表明一个 Bean 定义对应多个实例，该作用域中的 Bean 会导致在 <strong>每次对该 Bean 请求时均创建一个新的 Bean 实例</strong>。<code>Prototype</code> 是一个原型类型，在我们创建容器时并未实例化，而是当我们获取 Bean 时才去创建一个对象，而且每次获取到的对象都不一样。</p>
<ol start="3">
<li><strong>Request：一次 request 一个实例</strong></li>
</ol>
<p>作用域为 <code>Request</code>，<strong>表明在一次 <code>HTTP</code> 请求中，容器返回该 Bean 的同一个实例</strong>，即每个 <code>HTTP</code> 请求均有各自的 Bean 实例，依据某个 Bean 定义创建而成，只在基于 Web 的 Spring ApplicationContext 情形下有效。当一次 <code>HTTP</code> 请求处理结束时，该作用域中的 Bean 实例均被销毁。</p>
<ol start="4">
<li><strong>Session</strong></li>
</ol>
<p>作用域为 <code>Session</code> ，表明 <strong>在一个 <code>HTTP Session</code> 中，容器返回该 Bean 的同一个实例，对不同的 <code>Session</code> 请求则创建新的实例，该 <code>Bean</code> 实例仅在当前 <code>Session</code> 内有效</strong>，只在基于 Web 的 Spring ApplicationContext 情形下有效。当一个 <code>HTTP Session</code> 被废弃时，在该作用域内的 Bean 也将失效。</p>
<table>
<thead>
<tr>
<th>作用域类别</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Singleton</code></td>
<td>Spring IoC 容器中仅存在一个 Bean 实例，以单例方式存在，是 Spring 中的默认值</td>
</tr>
<tr>
<td><code>Prototype</code></td>
<td>每次从容器中调用 Bean 时，均返回一个新的实例，即每次调用 <code>getBean()</code> 方法，相当于 <code>new</code> 一个新的对象</td>
</tr>
<tr>
<td><code>Request</code></td>
<td>每次 HTTP 请求均创建一个新的 Bean，仅适用于 WebApplicationContext 环境</td>
</tr>
<tr>
<td><code>Session</code></td>
<td>每次 HTTP Session 共享一个 Bean，不同 Session 使用不同的 Bean，仅适用于 WebApplicationContext 环境</td>
</tr>
</tbody>
</table>
<h4> 生命周期</h4>
<ol>
<li>Spring 对 Bean 进行实例化；</li>
<li>Spring 将值和 Bean 的引用注入到 Bean 对应属性中；</li>
<li>若 Bean 实现了 BeanNameAware 接口，则 Spring 将 Bean 的 ID 传递给 setBeanName() 方法；</li>
<li>若 Bean 实现了 BeanFactoryAware 接口，Spring 将调用 <code>setBeanFactory()</code> 方法，将 Bean 所在应用引用传入进来；</li>
<li>若 Bean 实现了 ApplicationContextAware 接口，Spring 将调用 <code>setApplicationContext()</code> 方法，将 Bean 所在应用的引用传入进来；</li>
<li>若 Bean 实现了 BeanPostProcessor 接口，Spring 将调用 <code>post-ProcessBeforeInitalization()</code> 方法；</li>
<li>若 Bean 实现了 <code>InitializingBean</code> 接口，Spring 将调用他们的 <code>after-PropertiesSet()</code> 方法，类似地，如果 Bean 使用 <code>init-method</code> 声明了初始化方法，则该方法也会被调用；</li>
<li>若 Bean 实现了 BeanPostProcessor 接口，Spring 将调用他们的 <code>post-ProcessAfterInitialization()</code> 方法；</li>
<li>此时，Bean 已经准备就绪，我们就可以被应用程序使用，他们将一直驻留在应用上下文中，直到该应用被销毁；</li>
<li>若 Bean 实现了 DisposableBean 接口，Spring 将调用它的 <code>destory()</code> 接口方法；同样，若 Bean 使用 <code>destroy-method</code> 声明了销毁方法，该方法也将被调用；</li>
</ol>
<h3> Spring 依赖注入的四种方式</h3>
<ol>
<li><strong>构造器注入</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>setter 方法注入</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><strong>静态工厂注入</strong></li>
</ol>
<p>所谓静态工厂就是通过调用静态工厂的方法来获取自己所需对象，而且为了方便 Spring 管理，我们不能通过 “类.静态方法()” 来获取对象，而应该通过 Spring 注入的形式；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li><strong>实例工厂</strong></li>
</ol>
<p>实例工厂表示获取对象实例的方法不是静态的，所以需要先 <code>new</code> 工厂类，然后再调用普通的实例方法；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Spring 自动装配方式</h3>
<p>要实现自动装配，主要从如下两个角度来进行实现：</p>
<ol>
<li><strong>组件扫描（Component Scanning）</strong>：Spring 会自动发现应用上下文中所创建的 Bean；</li>
<li><strong>自动装配（Autowiring）</strong>：Spring 自动满足 Bean 之间的依赖；</li>
</ol>
<p>Spring 装配包括 <strong>手动转配和自动装配</strong>，<strong>手动装配是通过 <code>XML</code> 装配、构造方法、<code>setter</code> 方法等方式；</strong></p>
<p>而自动装配有如下几种，使得 Spring 容器通过自动装配方式来进行依赖注入；</p>
<table>
<thead>
<tr>
<th>装配方式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>no</code></td>
<td>默认不进行自动装配，通过显式设置 <code>ref</code> 属性来进行装配</td>
</tr>
<tr>
<td><code>byName</code></td>
<td>通过参数名自动装配，Spring 容器在配置文件中发现 <code>Bean</code> 的 <code>autowire</code> 属性被设置为 <code>byName</code> 后试图匹配、装载和该 <code>Bean</code> 的属性具有相同名字的 <code>Bean</code></td>
</tr>
<tr>
<td><code>byType</code></td>
<td>通过参数类型自动装配，Spring 容器在配置文件中发现 <code>Bean</code> 的 <code>autowire</code> 属性被设置为 <code>byType</code> 后试图匹配、装载和该 <code>Bean</code> 的属性具有相同了类型的 <code>Bean</code>，若发现多个 <code>Bean</code> 符合条件，则抛出错误</td>
</tr>
<tr>
<td><code>constructor</code></td>
<td>类似于 <code>byType</code>，但需要提供给构造器参数，若无固定的带参的构造器参数类型，则抛出异常</td>
</tr>
<tr>
<td><code>autodetect</code></td>
<td>首先尝试使用 <code>constructor</code> 来自动装配，若无法工作，则使用 <code>byType</code> 方式</td>
</tr>
</tbody>
</table>
<h3> IoC 的优缺点</h3>
<ol>
<li><strong>优点</strong>：组件之间的解耦，提高程序可维护性、灵活性；</li>
<li><strong>缺点</strong>：创建对象步骤复杂，有一定学习成本；利用反射创建对象，效率会降低；</li>
</ol>
<h2> AOP 原理</h2>
<h3> 定义</h3>
<p>即剖开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为 <code>Aspect</code>，<strong>即切面</strong>。所谓切面即 <strong>与业务无关，但被业务模块所公用的逻辑，便于减少系统的重复代码，降低模块间的耦合度，利于后续的可操作性和可维护性</strong>。</p>
<p>通过使用横切，AOP 将软件切分为：<strong>核心关注点和横切关注点</strong>。业务处理的主要流程是核心关注点，与横切关注点关系不大。<strong>横切关注点的特点是经常发生在核心关注点的多处，且各处基本相似</strong>。AOP 的作用就在于 <strong>分离系统中的各种关注点，将核心关注点和横切关注点分离开</strong>。</p>
<h3> 核心概念</h3>
<h3> AOP 的两种代理方式</h3>
<p>Spring 提供了两种方式来生成代理对象：JDK Proxy 和 CGlib，<strong>默认的策略是如果目标类是接口，则使用 JDK 动态代理技术，否则使用 CGlib 来生成代理</strong>；</p>
<ol>
<li><strong>JDK 动态接口代理</strong></li>
</ol>
<p>主要涉及 <code>Proxy</code> 和 <code>InvocationHandler</code>，<code>InvocationHandler</code> 是一个接口，通过实现该接口定义横切逻辑，并通过反射机制调用目标类的代码，动态地将横切逻辑与业务逻辑编制在一起。而 <code>Proxy</code> 则利用 <code>InvocationHandler</code> 动态创建一个符合某一接口的实例，生成目标类的代理对象；</p>
<ol start="2">
<li><strong>CGlib 动态代理</strong></li>
</ol>
<p>全称 <code>Code Generation Library</code>，<strong>是一个高性能高质量的代码生成类库，能在运行期间扩展 Java 类与实现 Java 接口。</strong> CGlib 封装了 ASM，能在运行期间动态生成新的类。</p>
<ol start="3">
<li><strong>JDK 动态代理和 CGlib 动态代理的区别</strong></li>
</ol>
<p>JDK 动态代理只能为接口创建代理实例，而对于没有通过接口定义业务方法的类，则需要通过 CGlib 创建动态代理；</p>
<h3> 切面的通知类型</h3>
<ol>
<li><strong>前置通知（Before）</strong>：目标方法在被调用前调用通知；</li>
<li><strong>后置通知（After）</strong>：目标方法完成后调用通知；</li>
<li><strong>返回通知（After-returning）</strong>：目标方法成功执行之后调用通知；</li>
<li><strong>异常通知（After-throwing）</strong>：目标方法抛出异常后调用通知；</li>
<li><strong>环绕通知（Around）</strong>：在被通知的方法调用之前和调用之后执行自定义的行为；</li>
</ol>
<h2> Spring MVC</h2>
<h3> 什么是 MVC 框架？</h3>
<p>MVC，全称 Model View Controller，是模型（model）-视图（view）-控制器（controller）的缩写，是一种软件设计典范。用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件中，然后在改进和个性化定制界面及用户交互的同时，不用重写业务逻辑；</p>
<p>采用 MVC 设计模式主要有如下好处：</p>
<ol>
<li>通过分层设计，实现了业务系统各组件之间的结构，有利于业务系统的可扩展性和可维护性；</li>
<li>有利于系统的并行开发，提升开发效率；</li>
</ol>
<h3> SpringMVC</h3>
<h4> 定义</h4>
<p>Spring MVC 是 Spring 框架的一个模块，一个基于 MVC 的框架；</p>
<h4> 组件</h4>
<ol>
<li><code>DispatcherServlet</code>：核心组件，前端控制器，也叫中央控制器，由它来调度相关组件，<strong>用于接收请求、响应结果，相当于转发器，有了 <code>DispatcherServlet</code> 就减少了其他组件之间的耦合度</strong>；</li>
<li><code>HandlerMapping</code>：处理器映射器，根据 URL 路径映射到不同的 <code>Handler</code>；</li>
<li><code>HandlerAdapter</code>：处理器适配器，按照 <code>HandlerAdapter</code> 的规则来执行 <code>Handler</code>；</li>
<li><code>Handler</code>：处理器，由我们自己根据业务进行开发；</li>
<li><code>ViewResolver</code>：视图解析器，将逻辑视图解析成具体的视图；</li>
<li><code>View</code>：一个接口，支持不同的视图类型；</li>
</ol>
<h4> MVC 工作流程</h4>
<ol>
<li>浏览器发送请求，前端控制区 <code>DispatcherServlet</code> 拦截该请求；</li>
<li><code>DispatcherServlet</code> 拦截到请求后，对请求 URL 进行解析，得到请求资源标识符 URI，根据 URI 调用 <code>HandlerMapping</code> 后获取对应 <code>Handler</code>；</li>
<li><code>DispatcherServlet</code> 拿到 <code>Handler</code> 之后，找到 <code>HandlerAdapter</code> ，通过它来访问 <code>Handler</code>，并执行处理器；</li>
<li>执行 <code>Handler</code> 的逻辑，返回一个 <code>ModelAndView</code> 对象给 <code>DispatcherServlet</code>；</li>
<li>然后 <code>DispatcherServlet</code> 请求 <code>ViewResolver</code> 解析视图，根据逻辑视图名解析真正的 <code>View</code>；</li>
<li>然后 <code>ViewResolver</code> 将解析后的 <code>View</code> 返回给 <code>DispatcherServlet</code>，然后对 <code>View</code> 进行渲染；</li>
<li>然后由 <code>DispatcherServlet</code> 响应视图给浏览器；</li>
</ol>
<h4> SpringMVC 的优点</h4>
<ol>
<li>具有 Spring 的特性；</li>
<li>支持多种视图；</li>
<li>配置方便，非侵入；</li>
<li>分层更加清晰，利于团队开发的代码维护，以及可读性好；</li>
</ol>
<h3> 注解</h3>
<h4> 注解原理</h4>
<p>注解本质上是一个集成了 <code>Annotation</code> 的特殊接口，其具体实现类是 Java 运行时生成的动态代理类。通过反射获取注解时，返回的是 Java 运行时生成的动态代理对象。通过代理对象调用自定义注解的方法，将最终调用 <code>AnnotationInvocationHandler</code> 的 <code>invoke</code> 方法，然后该方法从 <code>memberValues</code> 的 <code>Map</code> 中索引出对应的值；</p>
<h4> 常用注解</h4>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@RequestMapping</code></td>
<td>用于处理请求 <code>url</code> 映射的注解，能用在类或方法上，用于类时表示所有响应请求的方法均以该地址作为父路径</td>
</tr>
<tr>
<td><code>@RequestBody</code></td>
<td>实现接收 <code>HTTP</code> 请求的 <code>json</code>数据，将 <code>json</code>转换为 Java 对象</td>
</tr>
<tr>
<td><code>@ResponseBody</code></td>
<td>实现将 <code>controller</code> 方法返回对象转化为 Json 对象响应给客户</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>数据结构简介</title>
      <link>https://cunyu1943.site/JavaPark/md/cs-basics/algorithm/20220501-datastructure.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/cs-basics/algorithm/20220501-datastructure.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">数据结构简介</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 什么是数据结构 在开始正式学习数据结构前，咱们先来看看什么是数据。所谓数据，就是用来描述客观事物的符号，在计算机中就是可以操作的对象，能够被计算机识别并输入给计算机处理的符号集合。数据不仅包括整型、浮点型等数值类型，还包括字符、声音、图像、视频等非数值型类型。</description>
      <category>数据结构与算法</category>
      <pubDate>Sun, 01 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 什么是数据结构</h2>
<p>在开始正式学习数据结构前，咱们先来看看什么是数据。所谓数据，就是用来描述客观事物的符号，在计算机中就是可以操作的对象，能够被计算机识别并输入给计算机处理的符号集合。数据不仅包括整型、浮点型等数值类型，还包括字符、声音、图像、视频等非数值型类型。</p>
<p>而数据元素就是组成数据的、有一定意义的基本单位，在计算机中一般作为整体来处理，而这些数据元素也叫做记录。</p>
<p>除了数据元素之外，还可以有数据项，一个数据元素可以由若干个数据项所组成，而数据项则是数据中不可分割的最小单位。</p>
<p>不同数据之间，或多或少都存在着一定的关系，而我们把这些关系就叫做结构。所谓数据结构，就是相互间存在一种或多种特定关系的数据元素的集合。</p>
<p>用 Java 中的类来类比，数据就像 Java 中的一个类，数据元素就是类中的各个对象，而数据项则是各个对象中的属性。</p>
<p></p>
<h2> 逻辑结构与物理结构</h2>
<h3> 逻辑结构</h3>
<p>逻辑结构，就是指数据对象中数据元素之间的相互关系。逻辑结构主要又可以分为 4 种，总结如下：</p>
<ul>
<li>集合结构</li>
<li>线性结构</li>
<li>树形结构</li>
<li>图形结构</li>
</ul>
<p></p>
<ol>
<li><strong>集合结构</strong></li>
</ol>
<p>集合结构中的数据元素除了共同属于一个集合之外，元素之间没有其他任何关系，各元素之间是平等的，类似于数学中的集合，如下图所示。</p>
<p></p>
<ol start="2">
<li><strong>线性结构</strong></li>
</ol>
<p>线性结构中用于描述数据元素之间一对一的关系，最常见就是数组。</p>
<p></p>
<ol start="3">
<li><strong>树形结构</strong></li>
</ol>
<p>树形结构用于描述数据元素之间的层次关系，最常见的莫过于二叉树。</p>
<p></p>
<ol start="4">
<li><strong>图形结构</strong></li>
</ol>
<p>用于描述数据元素之间多对多的关系，在用示意图表示图形结构时，需要注意：</p>
<ul>
<li>每个数据元素看做一个节点，用圆圈表示。</li>
<li>数据元素间的逻辑关系用节点之间的连线表示，若连线是带箭头的，则说明该关系是有方向的。</li>
</ul>
<p></p>
<h3> 物理结构</h3>
<p>除开逻辑结构之外，还有另一种物理结构，有的书里也叫存储结构。所谓物理结构，指的是数据的逻辑结构在计算机中的存储形式。数据元素的存储结构形式同样主要有四种：</p>
<ul>
<li>顺序存储</li>
<li>链式存储</li>
<li>索引存储</li>
<li>散列存储</li>
</ul>
<p></p>
<ol>
<li><strong>顺序存储</strong></li>
</ol>
<p>所谓顺序存储结构，就是把数据元素放在地址连续的存储单元中，其数据之间的逻辑关系和物理关系是一致的。</p>
<p>顺序存储的数据元素只能顺序存放，每个存储结点中只含有一个元素，存储位置反映数据元素间的逻辑关系。这种方式存储密度大，但是插入、删除等操作的效率较差。</p>
<p></p>
<ol start="2">
<li><strong>链式存储</strong></li>
</ol>
<p>所谓链式存储结构，就是将数据元素存放在任意的存储单元中，这组存储单元既可以是连续的，也可以是不连续的。但是数据元素的链式存储关系并不能反映其逻辑关系，因此需要用一个指针来存放数据元素的地址。通过该指针，我们就能找到相关联数据元素的位置。</p>
<p>链式存储不要求存储空间连续，方便动态操作（插入、删除等），但是存储空间开销大。</p>
<p></p>
<ol start="3">
<li><strong>索引存储</strong></li>
</ol>
<p>数据元素出了存在一组地址连续的内存空间外，还需要建立一个索引表，索引表中索引知识存储结点的㽾位置或存储区间端点。</p>
<ol start="4">
<li><strong>散列存储</strong></li>
</ol>
<p>通过散列函数和解决冲突的方式，将关键字散列在连续有限的地址空间中，并将散列函数的值解释成关键字所在元素的存储地址。散列存储的特点是存取速度快，但只能按关键字随机存储，不能顺序存储，也不能折半存储。</p>
<h2> 总结</h2>
<p>本文的内容到此就结束了，主要介绍了数据结构的定义，并了解了数据结构中的四种逻辑结构和四种物理结构。关于更多数据结构的知识，咱们就下期文章再见吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>算法简介</title>
      <link>https://cunyu1943.site/JavaPark/md/cs-basics/algorithm/20220502-algorithm.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/cs-basics/algorithm/20220502-algorithm.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">算法简介</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 什么是算法 什么是算法？简单来讲，算法就是用于描述解决问题的方法。而现今普遍对算法的定义为：解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令含有一个或多个操作。 算法的特性 算法具有五个基本特性，分别是：</description>
      <category>数据结构与算法</category>
      <pubDate>Mon, 02 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 什么是算法</h2>
<p>什么是算法？简单来讲，算法就是用于描述解决问题的方法。而现今普遍对算法的定义为：解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令含有一个或多个操作。</p>
<h2> 算法的特性</h2>
<p>算法具有五个基本特性，分别是：</p>
<ul>
<li>输入</li>
<li>输出</li>
<li>有穷性</li>
<li>确定性</li>
<li>可行性</li>
</ul>
<ol>
<li><strong>输入 &amp; 输出</strong></li>
</ol>
<p>一个算法，必不可少的是输入输出。算法具有零个或者多个输入，但是至少得有一个或者以上的输出。也就是说，算法可以没有输入，但一定得有输出，输出可以是打印输出，也可以是返回一个或多个值。</p>
<ol start="2">
<li><strong>有穷性</strong></li>
</ol>
<p>所谓有穷性，就是指一个算法在执行一定的步骤之后将自动结束，而不会出现无限循环的情况，而且每个步骤需要在有限的时间内完成。</p>
<ol start="3">
<li><strong>确定性</strong></li>
</ol>
<p>确定性指的是算法的每个步骤都要有具体的含义，不能有歧义。打个简单的比方来说，就像一个人只能沿着一条道走到底，而不能出现遇见分叉路口的情况。</p>
<p>也就是说，在一定条件下，算法只能有一条执行路径，同样的输入只能有唯一的输出结果。</p>
<ol start="4">
<li><strong>可行性</strong></li>
</ol>
<p>指算法的每一步都必须是可行的，也就是说每一步都可以通过执行一定的次数来完成。</p>
<h2> 算法的设计要求</h2>
<p>同一个问题，我们可以通过不同的算法来解决。俗话说得好，条条大路通罗马。同一个目的地，我们可以通过不同的方式到达。</p>
<p>话虽然这么说，但是在设计算法时也得遵循一定的要求。</p>
<ol>
<li><strong>正确性</strong></li>
</ol>
<p>一个算法，必须得保证它能达到最终目的，不然还谈什么。算法的正确性，指的是算法至少应该具有输入、输出和加工处理无歧义性，能够得到问题的正确答案。</p>
<p>算法的正确性也有不同程度的差别，由浅入深大致可以分为以下层次：</p>
<ul>
<li>算法程序无语法错误。</li>
<li>算法程序对于合法的输入能得到满足要求的输出。</li>
<li>算法程序对于非法的输入能得到满足规格说明的输出。</li>
<li>算法程序对于的特殊的测试数据也有满足要求的输出。</li>
</ul>
<ol start="2">
<li><strong>可读性</strong></li>
</ol>
<p>可读性是指算法设计出来应该便于阅读、理解和交流。高可读性能够帮助我们更好地理解算法，更加方便我们调试和修改。</p>
<ol start="3">
<li><strong>健壮性</strong></li>
</ol>
<p>一个算法不仅需要对输入的合理情况做出正确的处理，而且对于不合理的情况，也能做出相应的介绍。所谓健壮性，指的就是当算法中输入数据不合法时，它也能做出相关处理，而不会产生异常或者莫名其妙的结果。</p>
<ol start="4">
<li><strong>高时间效率</strong></li>
</ol>
<p>对于同一个问题，虽然有不同解决的算法，但是算法也有好有坏。时间效率指的是算法的执行时间，执行时间越长，效率也低，执行时间越短，效率越高。</p>
<ol start="5">
<li><strong>低存储量</strong></li>
</ol>
<p>除开时间效率之外，存储量也是一个重要的指标。存储量指的是算法在执行过程中所需的最大存储空间，主要指算法程序运行时所占用的内存或外部存储空间。针对同一问题，算法所需空间越少，则算法效果越好，所需空间越多，则算法效果越差。</p>
<h2> 算法效率衡量方法</h2>
<p>前边讲了算法的特性以及算法的设计要求，但都没有明确的方式来衡量一个算法的好坏。为了衡量一个算法的好坏，又提出了时间复杂度和空间复杂度的概念。</p>
<h3> 时间复杂度</h3>
<h4> 定义</h4>
<p>若存在函数 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，使得当 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 趋向无穷大时，<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的极限值为不等于 0 的常数，则称 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的同数量级函数，记作 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span></span></span></span>，称 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">))</span></span></span></span> 为算法的 <strong>渐进时间复杂度</strong>，简称 <strong>时间复杂度</strong>，用大 O 来表示，称为 <strong>大 O 表示法</strong>；</p>
<h4> 推导时间复杂度的原则</h4>
<ol>
<li><strong>若运行时间是常数量级，则用常数 1 表示</strong>；</li>
<li><strong>只保留时间函数中最高阶项</strong>，如 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">4</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，保留最高阶项后，成为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>；</li>
<li><strong>若最高阶项存在，则省去最高阶项前的系数</strong>，如 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">4</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，省去最高阶项的系数后，成为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>；</li>
</ol>
<h4> 分析时间复杂度的方法</h4>
<p>总结起来，对于如何分析一段代码的时间复杂度，主要有如下 3 个实用方法：</p>
<ol>
<li><strong>只关注循环执行次数最多的一行代码；</strong></li>
<li><strong>加法原则：总复杂度等于量度最大的那段代码的复杂度；</strong></li>
<li><strong>乘法原则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</strong>；</li>
</ol>
<h4> 常见的时间复杂度曲线</h4>
<p></p>
<h4> 常见时间复杂度</h4>
<h5> <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></h5>
<p>即无论执行多少行，都不会影响到其他区域，此时代码的复杂度就是 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>，如下面的代码中，假设执行每行代码时间都相同切为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6151em;"></span><span class="mord mathnormal">t</span></span></span></span>，则 2,3 行各需 1 个执行时间，即为 $t + t = 2t。此时执行时间复杂度为常数。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></h5>
<p>如下列二分查找代码中，通过 <code>while</code> 循环，能够成倍的缩减搜索范围，假设需要 <code>x</code> 次才能跳出循环，则有 <code>num * 2 * 2 * ... = n</code> ，其中 <code>num</code> 是常数，有 <code>n</code> 个 2 相乘，则有 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6644em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span>，从而推出 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord">/</span><span class="mord mathnormal">n</span><span class="mord mathnormal">u</span><span class="mord mathnormal">m</span><span class="mclose">)</span></span></span></span> ，因此时间复杂度用大 O 表示法表示为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mord cjk_fallback">。</span></span></span></span></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></h5>
<p>如下面这段代码中，<code>for</code> 循环中的代码被执行了 <code>arr.length</code> 次，因此所需要的时间和数组长度成正比的，因此可以用 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 来表示它的时间复杂度。利用上述推到原则和分析的方法，可以知道下面代码中循环次数最多的是 4,5 行，总的执行时间是 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">2</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，抛去系数后，得到最终时间复杂度 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>.</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></h5>
<p>如果我们将一个复杂度为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的代码重复执行 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 次，那么此时代码的复杂度不就变成 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 了吗。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></h5>
<p>假设我们将时间复杂度为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 的代码重复执行 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 次，那么此时的时间复杂度就是 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>，即可表示为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，表现出来就是双重循环的形式。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></h5>
<p>和 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，类似，将时间复杂度为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 的代码嵌套循环一次，此时复杂度就变成了 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，表现出来就是三重循环嵌套的形式。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">!)</span></span></span></span></h5>
<p>虽然理论上存在时间复杂度为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">!)</span></span></span></span> 的算法，但实践中基本遇不到，所以这里就不展开了。</p>
<h3> 空间复杂度</h3>
<h4> 定义</h4>
<p>空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度（即除开原始序列大小的内存，在算法过程中用到的额外的存储空间），反映的对内存占用的趋势，而不是具体内存，也叫作 <strong>渐进空间复杂度</strong> ，<strong>表示算法的存储空间与数据规模间的增长关系</strong>，用 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span> 来代替；</p>
<h4> 常用空间复杂度</h4>
<h5> <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></h5>
<p>算法执行所需临时空间不随某一变量 <code>n</code> 的大小而变化，则该算法空间复杂度为一个常量，表示为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span>；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5> <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></h5>
<p>数组占用内存大小为 <code>n</code>，而且后续未分配新的空间，因此该算法空间复杂度为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span>；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5> <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></h5>
<p>二维数组的情况；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 常见排序算法的时间复杂度和空间复杂度</h3>
<p>对于面试中常见的的排序算法，以下总结给出了其时间复杂度以及空间复杂度，以及算法稳定性。</p>
<table>
<thead>
<tr>
<th>排序算法</th>
<th>平均时间复杂度</th>
<th>最好时间复杂度</th>
<th>最坏时间复杂度</th>
<th>空间复杂度</th>
<th>稳定性</th>
</tr>
</thead>
<tbody>
<tr>
<td>插入排序</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>稳定</td>
</tr>
<tr>
<td>希尔排序</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1.3</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>不稳定</td>
</tr>
<tr>
<td>选择排序</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>不稳定</td>
</tr>
<tr>
<td>堆排序</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>不稳定</td>
</tr>
<tr>
<td>冒泡排序</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td>稳定</td>
</tr>
<tr>
<td>快速排序</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td>不稳定</td>
</tr>
<tr>
<td>归并排序</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td>稳定</td>
</tr>
<tr>
<td>计数排序</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td>稳定</td>
</tr>
<tr>
<td>桶排序</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td>稳定</td>
</tr>
<tr>
<td>基数排序</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mclose">)</span></span></span></span></td>
<td>稳定</td>
</tr>
</tbody>
</table>
<h2> 总结</h2>
<p>好了，以上就是今天文章的内容了。主要介绍了算法的定义、算法的特性、算法的设计要求以及算法效率的衡量方法。时间复杂度的定义、推导原则以及常见时间复杂度，还对空间复杂度定义以及常见空间复杂度进行了介绍，最后则是总结了常见排序算法的时间复杂度和空间复杂度。</p>
]]></content:encoded>
    </item>
    <item>
      <title>数据库简介</title>
      <link>https://cunyu1943.site/JavaPark/md/database/mysql/20220301-overview.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/database/mysql/20220301-overview.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">数据库简介</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 之前在 Java 基础部分的学习中，我们更多的是写一些和控制台进行交互的小程序，而这些小程序有个特点就是：一旦程序终止，那么程序中的数据就消失了。为了满足存储数据的需求，我们可以选择将程序中的数据保存到文本文件或者数据库中。而今天，我们就来看看数据库的简单知识，为后续基于数据库的开发打下基础。</description>
      <category>MySQL 教程</category>
      <pubDate>Tue, 01 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<p>之前在 Java 基础部分的学习中，我们更多的是写一些和控制台进行交互的小程序，而这些小程序有个特点就是：一旦程序终止，那么程序中的数据就消失了。为了满足存储数据的需求，我们可以选择将程序中的数据保存到文本文件或者数据库中。而今天，我们就来看看数据库的简单知识，为后续基于数据库的开发打下基础。</p>
<h2> 为什么使用数据库</h2>
<ul>
<li><strong>持久化</strong></li>
</ul>
<p>数据保存后，掉电也可以在存储设备中进行使用，是一种将内存中数据保存到硬盘中加“固化”，这个过程大都通过各类数据库来完成。</p>
<ul>
<li><strong>持久化的作用</strong></li>
</ul>
<p>将内存中的数据存储在关系型据库中，也可以存到其他存储介质，如磁盘文件、XML 数据文件、Json 数据文件中。</p>
<p></p>
<ul>
<li><strong>实例</strong></li>
</ul>
<h2> 数据库与数据库管理系统</h2>
<h3> 数据库相关概念</h3>
<ul>
<li><strong>DB</strong></li>
</ul>
<p>即数据库（Database），用于存储数据的“仓库”，本质上是一个文件系统，用于保存一系列有组织的数据。</p>
<ul>
<li><strong>DBMS</strong></li>
</ul>
<p>即数据库管理系统（Database Management System），用于操纵和管理数据库的大型软件。主要用于数据库的创建、使用以及维护，通过统一的管理和控制，使得用户可以通过该系统来访问数据库中表内的数据。</p>
<ul>
<li><strong>SQL</strong></li>
</ul>
<p>即结构化查询语言（Structured Query Language），用来专门和数据库进行通信的编程语言，定义了一套操作关系型数据库统一标准。</p>
<h3> 数据库与数据库管理系统的关系</h3>
<p>一般而言，数据库管理系统可以管理多个数据库。我们一般会针对一个应用就创建一个对应的数据库，而为了保存应用中的数据，就会在数据库中创建多个表，用于保存对应实体用户的数据。</p>
<p>而数据库管理系统和数据库的关系就类似于视频播放器和视频的关系，其中数据库管理系统对应视频播放器，而数据库就类比于视频。通过数据库管理系统我们可以操作数据库，而通过视频播放器我们可以打开视频。</p>
<p></p>
<h3> 常见数据库管理系统排名</h3>
<blockquote>
<p><a href="https://db-engines.com/en/ranking#/" target="_blank" rel="noopener noreferrer">https://db-engines.com/en/ranking#/</a></p>
<p><a href="https://db-engines.com/en/ranking_trend#/" target="_blank" rel="noopener noreferrer">https://db-engines.com/en/ranking_trend#/</a></p>
</blockquote>
<p></p>
<p></p>
<p>以上两张图片是截止 2022 年 8 月份市场上各大数据库的市场占有率，可以看到 MySQL 无论是在现在，还是从历年的排名来看，排名都是较为靠前的。所以不缺乏使用 MySQL 的使用场景，也从侧面说明学好 MySQL 尤其重要。</p>
<h2> RDBMS 和 非 RDBMS</h2>
<p>RDBMS，即关系型数据库，是当前 DBMS 的主流，其中以 Oracle、MySQL 和 SQL Server 最为典型。</p>
<h3> 关系型数据库（RDBMS）</h3>
<ul>
<li><strong>实质</strong></li>
</ul>
<p>关系型数据库是最古老的数据库类型，其模型是将复杂的数据结构归结为简单的二元关系，即二维表格形式，如下图形式。</p>
<p></p>
<p>关系型数据库以行（<code>row</code>）和列（<code>column</code>）的形式存储，两者共同组成表（<code>table</code>），而一个数据库（<code>database</code>）则通常包含着一系列的表（<code>table</code>）。</p>
<ul>
<li><strong>特点</strong></li>
</ul>
<ol>
<li>使用表存储数据，格式统一，方便维护。</li>
<li>使用 SQL 语言操作，标准统一，方便使用。</li>
</ol>
<p>而表之间的数据记录存在着关系（<code>relationship</code>），对应着日常生活中各种实体之间的联系，这种联系也用<strong>关系模型</strong>来表示。而关系型数据库，就是建立在<strong>关系模型</strong>上的数据库。</p>
<ul>
<li><strong>优势</strong></li>
</ul>
<ol>
<li><strong>支持复杂查询</strong>：可以利用 SQL 语句方便地在一个表及多个表之间做非常复杂的数据查询工作。</li>
<li><strong>支持事务</strong>：使得对于安全性能较高的数据访问要求也得以实现。</li>
</ol>
<h3> 非关系型数据库（非 RDBMS）</h3>
<p>非关系型数据库，相对于传统的关系型数据库功能较少，基于键值对来进行数据的存储，无需经过 SQL 层的解析，而且减少关系型数据库中了不常用的功能，所以性能相比于关系型数据库更高。</p>
<p>相比于关系型数据库，常见的非关系型数据库有如下晋中类型：</p>
<ul>
<li>
<p>键值型数据库</p>
</li>
<li>
<p>文档型数据库</p>
</li>
<li>
<p>搜索引擎数据库</p>
</li>
<li>
<p>列式数据库</p>
</li>
<li>
<p>图形数据库</p>
</li>
</ul>
<ol>
<li><strong>键值型数据库</strong></li>
</ol>
<p>键值型数据库通过 <code>key-value</code> 的形式来存储数据，其中 <code>key</code> 和 <code>value</code> 既可以是简单的对象，也能是复杂的对象。其中 <code>key</code> 作为唯一的标识符，所以是不允许重复的，因此优点也很明显，查找速度极快，但缺点是无法像关系型数据库一样使用条件来进行数据过滤。如果你不知道要查找的数据的对应的 <code>key</code>，那就必须去遍历整个数据库所有的键，消耗大量计算。</p>
<p>当前，Redis 可以说是最流行的键值型数据库，最经典的使用场景就是作为<strong>内存缓存</strong>。</p>
<ol start="2">
<li><strong>文档型数据库</strong></li>
</ol>
<p>文档型数据库可以用来获取文档，一般以 <code>XML</code>、<code>JSON</code> 等格式存放。在数据库中文档是最基本的处理信息单位，一个文档就相当于 MySQL 数据库中的一条记录，类似于键值型数据库中对应的 <code>value</code>。当前最流行的文档型数据库是 MongoDB，除此之外，还有 <code>CouchDB</code> 等。</p>
<ol start="3">
<li><strong>搜索引擎数据库</strong></li>
</ol>
<p>关系型数据库中为了提升检索效率，通常会采用索引，但是针对全文索引的效率却比较低。搜索引擎数据库是搜索引擎领域采用的数据存储形式，其核心原理是“倒排索引”。搜索引擎通过爬取大量的数据，然后以特定的格式进行存储，从而保证了检索时性能最优化。当前主流的搜索引擎数据库主要有：Elasticsearch、Solr、Splunk 等。</p>
<ol start="4">
<li><strong>列式数据库</strong></li>
</ol>
<p>之所以叫列式数据库，主要是针对行式存储的数据库而言。列式数据库通过将数据以列的形式存储到数据库中，从而大量降低了数据的 IO。基于该特点，列式数据库通常用在分布式文件系统中，功能也比较有限，当前最典型的列式数据库为 HBase 等。</p>
<ol start="5">
<li><strong>图形数据库</strong></li>
</ol>
<p>图形数据库用图这种数据结构存储了对象之间的关系，数据模式以节点和边（关系）来实现，用于高效解决复杂的关系问题，应用最多的是社交网络中人与人之间的关系。最常用的图形数据库有 Neo4j、InfoGrid 等。</p>
<p>利用图这种数据结构，将对象之间的关系进行存储。关系型数据库中，存储的一般都是关系比较明确的数据，对于关系较为复杂的数据，此时关系型数据库就有些力不从心了，此时，我们就可以采用图形数据库来进行存储。</p>
<h2> 关系型数据库设计原则</h2>
<p>关系型数据库中，最典型的数据结构就是数据表，而这些表的组成都是格式化的。通过将数据到表中之后，再将多个表存放到库中。因此一个数据库里边通常包含了多个表，而每个表都有且仅有一个名字，用于标识自己。表中的多个特性则定义了数据如何存储在表中，就像 Java 中的类设计，一个表就类似于一个类，表中的每一列特征对应类中的各个属性，每一行则对应由类所生成的一个对象。</p>
<p>通常，一个数据库和编程语言 Java 中一个类的关系映射如下，也就是我们常说的 ORM（<code>Object Relational Mapping</code>） 思想的体现：</p>
<table>
<thead>
<tr>
<th>数据库</th>
<th>Java</th>
</tr>
</thead>
<tbody>
<tr>
<td>一个表</td>
<td>一个类</td>
</tr>
<tr>
<td>一条记录</td>
<td>类中的一个对象</td>
</tr>
<tr>
<td>一个列</td>
<td>类中的一个属性</td>
</tr>
</tbody>
</table>
<h3> 表、字段、记录</h3>
<p><code>E-R（Entity-Relationship）</code> 模型中，最核心的三个概念分别是：</p>
<ul>
<li><strong>实体集</strong></li>
<li><strong>属性</strong></li>
<li><strong>联系集</strong></li>
</ul>
<p>一个实体集（<code>class</code>）对应着数据库中的一个表（<code>table</code>），一个实体（<code>instance</code>）则对应与数据库中的一行（<code>row</code>），也叫做一条记录（<code>record</code>）。一个属性（<code>attribute</code>）则对应于数据库表中的一列（<code>column</code>），也叫做一个字段（<code>field</code>）。</p>
<h3> 表之间的关联关系</h3>
<p>既然一个表之间往往对应中 Java 中的一个类，那么不同表之间肯定也像类与类之间一样存在或多或少的联系，而最常见的则主要可以分为如下几种：</p>
<ul>
<li>
<p><strong>一对一关联</strong></p>
</li>
<li>
<p><strong>一对多关联</strong></p>
</li>
<li>
<p><strong>多对多关联</strong></p>
</li>
</ul>
<ol>
<li><strong>一对一（one-to-one）</strong></li>
</ol>
<p>这种关系非常简单，而且实际应用中并不多，因为我们可以将存在一对一关系的两个表合并成一个表，而不用创建多个表。</p>
<p>通常，针对存在一对一关系的表，建表时通常遵循以下原则：</p>
<ul>
<li><strong>外键唯一</strong>：主表的主键和从表的外键形成主外键关系，要保证外键唯一。</li>
<li><strong>外键是主键</strong>：主表的主键和从表的主键共同形成主外键关系。</li>
</ul>
<ol start="2">
<li><strong>一对多（one-to-many）</strong></li>
</ol>
<p>一对多关系建表原则：在从表（多方）中创建一个字段，字段作为外键指向主表（一方）的主键。</p>
<p>一个最常见的例子：一个学生存在着多门课程的成绩，因此学生表和成绩表之间的关系就是一对多的关系，我们可以在成绩表中创建一个字段（学号）作为外键，然后指向学生表的主键（学号），从而形成一对多的关系。</p>
<ol start="3">
<li><strong>多对多</strong></li>
</ol>
<p>除开上述两种关系之外，还有一种关系就是多对多关系，要表示多对多关系，此时两个表是满足不了的，必须创建第三个表，通常也称为<strong>联接表</strong>。通过将多对多关系划分为两个一对多关系，从而将这两个表的主键都插入到联接表中。</p>
<p>一个最常见的例子如下，学生和课程之间就存在多对多关系，一个学生可以选多门课，而一门课也可以被多个学生选择，因此必须创建一个联接表，也即选课表，来将两者的多对多的关系进行划分，然后将学生表中的主键（学号）和课程表中的主键（课程编号）插入到选课表中，用于表示学生和课程之间的多对多关系。</p>
<h2> MySQL 简介</h2>
<h3> MySQL 版本</h3>
<p>就像 IntelliJ IDEA 一样，MySQL 也主要提供了两个不同的版本，一个是社区版（<code>MySQL Community Server</code>），而另一个则是商业版（<code>MySQL Enterprise Edition</code>）。其中，社区版是免费的，大家都可以免费使用，但是 <code>MySQL</code> 官方是不提供任何技术支持的。商业版则是需要付费才能使用，和社区版的最大区别就在于官方会为它提供技术支持。同时，商业版还有免费的 30 天试用期，如果你只是想体验一把，那么大可在这个时间范围内去摸索对比下社区版和商业版在使用过程中的一些体验。</p>
<h3> 为什么选用 MySQL</h3>
<p>主要归结于 MySQL 的如下特点：</p>
<ul>
<li>基于 C 和 C++ 编写，使用多种编译器进行测试，保证了代码的可移植性。</li>
<li>支持多种操作系统，如 Windows、Linux、macOS。</li>
<li>为多种编程语言提供了 API，如 Java、Python、C++ 等。</li>
<li>支持多线程，充分利用 CPU 资源，支持多用户。</li>
<li>优化的 SQL 查询算法，有效提高查询速度。</li>
<li>……</li>
</ul>
<h3> 如何选择 MySQL &amp; Oracle</h3>
<p>如果对于费用不是太敏感，而且对于性能和安全性有着更高的要求，那么推荐优先使用 Oracle。而由于 MySQL 体积小、速度快、成本低、源码开放等特点，许多互联网公司和中小型网站更喜欢选用 MySQL 作为网站数据库。</p>
]]></content:encoded>
    </item>
    <item>
      <title>环境搭建</title>
      <link>https://cunyu1943.site/JavaPark/md/database/mysql/20220302-install.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/database/mysql/20220302-install.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">环境搭建</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 了解了数据库的相关知识之后，接下来就是搭建 MySQL 的开发环境了。今天就来看看，如何在你的电脑中安装 MySQL。在正式安装过程开始之前，你需要先下载好 MySQL 的安装压缩包，下载地址如下。 https://dev.mysql.com/downloads/mysql/</description>
      <category>MySQL 教程</category>
      <pubDate>Wed, 02 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<p>了解了数据库的相关知识之后，接下来就是搭建 MySQL 的开发环境了。今天就来看看，如何在你的电脑中安装 MySQL。在正式安装过程开始之前，你需要先下载好 MySQL 的安装压缩包，下载地址如下。</p>
<blockquote>
<p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener noreferrer">https://dev.mysql.com/downloads/mysql/</a></p>
</blockquote>
<h2> 解压缩</h2>
<p>将下载的 MySQL 压缩包解压并移到你所要安装的路径，下面以我的安装路径 <code>D:\Softs\mysql-8.0.24-winx64</code> 为例。</p>
<h2> 配置文件</h2>
<p>解压完成后，在解压后的目录下新建<code>my.ini</code>文件，然后在文件中加入以下配置。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 配置环境变量</h2>
<ol>
<li>依次打开控制面板-&gt;系统与安全-&gt;系统，进入高级系统设置，如下图所示。</li>
</ol>
<p></p>
<ol start="2">
<li>然后进行环境变量的设置，需要设置两个环境变量：</li>
</ol>
<ul>
<li><code>MYSQL_HOME</code>：也就是我们存放 MySQL 8.0.x 解压缩包的位置；</li>
<li><code>Path</code>：<code>%MYSQL_HOMT%\bin</code>；</li>
</ul>
<p>具体设置见以下的图：</p>
<p></p>
<p></p>
<p></p>
<h2> 初始化</h2>
<p>设置好环境变量之后，从控制台进入 MySQL 解压后的路径，然后以管理员身份执行如下命令。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意</strong>：执行成功后会打印出初始的 root 用户密码，一定要记住！！！方便后边修改密码；</p>
<p></p>
<h2> 安装数据库服务</h2>
<p>接上一步初始化数据库后，继续执行如下命令。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>表示安装名为 <code>mysql8</code> 的服务。</p>
<p></p>
<h2> 启动与关闭 MySQL 数据库服务</h2>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 修改初始 root 用户密码</h2>
<p>先用刚才记住的初始 <code>root</code> 用户密码登陆，然后进行密码更改，命令如下。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 创建普通用户并设置密码</h2>
<p>登入 <code>root</code> 用户后，创建新的用户并指定密码如下。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着退出 <code>root</code> 用户登陆，尝试用你所创建的新用户进行登陆，登陆成功的提示如下。</p>
<p></p>
<h2> 总结</h2>
<p>好了，通过上面的流程，是不是知道了如何在 Windows 系统下安装最新的压缩包版 MySQL-8.0.x 呢，而且文中也对如何修改 <code>root</code> 用户的默认密码以及如何创建新用户给出了解决方案，是不是简单，那就亲自动手试试吧。</p>
]]></content:encoded>
    </item>
    <item>
      <title>MySQL 常用语法</title>
      <link>https://cunyu1943.site/JavaPark/md/database/mysql/20220303-grammar.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/database/mysql/20220303-grammar.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">MySQL 常用语法</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 之前了解了数据库的相关知识，然后又学习了如何安装 MySQL，接下来就来看看 SQL 常用语法，然后利用所学语法来操作我们的 MySQL 数据库实现增、删、改、查。 SQL 通用语法 所谓通用语法，就是适用于所有关系型数据库的语法，而不是只针对某一个数据库。</description>
      <category>MySQL 教程</category>
      <pubDate>Thu, 03 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<p>之前了解了数据库的相关知识，然后又学习了如何安装 MySQL，接下来就来看看 SQL 常用语法，然后利用所学语法来操作我们的 MySQL 数据库实现增、删、改、查。</p>
<h2> SQL 通用语法</h2>
<p>所谓通用语法，就是适用于所有关系型数据库的语法，而不是只针对某一个数据库。</p>
<p>常用的 SQL 通用语法主要有以下内容：</p>
<ol>
<li>SQL 语句可以以单行或多行书写，并且用分号 <code>;</code> 来表示一条语句的结束。</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，以上两种方式书写的 SQL 语句其实最终实现的效果都是一样的。</p>
<ol start="2">
<li>MySQL 中的 SQL 语句不区分大小写，但是为了将关键字和自定义变量分开，建议关键字使用大写。</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li>SQL 中的两种种注释方式。</li>
</ol>
<ul>
<li><strong>单行注释</strong></li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<ul>
<li><strong>多行注释</strong></li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h2> SQL 分类</h2>
<p>对于 SQL 语句，可以分为如下几类：</p>
<ul>
<li><strong>DDL</strong></li>
<li><strong>DML</strong></li>
<li><strong>DQL</strong></li>
<li><strong>DCL</strong></li>
</ul>
<table>
<thead>
<tr>
<th>分类</th>
<th>全程</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>DDL</strong></td>
<td>Data Definition Language</td>
<td>数据定义语言，用于定于数据库对象（数据库、表、字段等）</td>
</tr>
<tr>
<td><strong>DML</strong></td>
<td>Data Mainpulation Language</td>
<td>数据操作语言，用于对数据库表中的数据进行增、删、改</td>
</tr>
<tr>
<td><strong>DQL</strong></td>
<td>Data Query Language</td>
<td>数据查询语言，用于查询数据库中表的记录</td>
</tr>
<tr>
<td><strong>DCL</strong></td>
<td>Data Control Language</td>
<td>数据控制语言，用于创建数据库用户、控制数据库的访问权限</td>
</tr>
</tbody>
</table>
<h2> DDL（Data Definition Language）</h2>
<h3> 定义</h3>
<p>用于<strong>定义数据库对象</strong>：数据库、表、列等，相关关键字：<code>CREATE</code>、<code>DROP</code>、<code>ALTER</code>……</p>
<h3> 数据库操作</h3>
<h4> 创建</h4>
<ul>
<li>通用</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>创建数据库</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>创建数据库前先判断是否存在，不存在再创建</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>创建数据库的同时指定字符集</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<p></p>
<h4> 查询</h4>
<ul>
<li>查询所有数据库名称；</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>查询某一数据库的字符集和它的创建语句；</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h4> 更新</h4>
<ul>
<li>修改表名</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>修改数据库字符集</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h4> 删除</h4>
<ul>
<li>删除数据库</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>判断数据库是否存在，存在再删除</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h4> 使用</h4>
<ul>
<li>使用某一个数据库</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>查询当前正在使用的数据库</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h3> 表操作</h3>
<h4> 创建</h4>
<ul>
<li>语法</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>常用数据类型</li>
</ul>
<p>MySQL 中，数据类型有很多，但主要还是分为三大类：<strong>数值类型</strong>、<strong>字符串类型</strong>、<strong>日期时间类型</strong>。</p>
<ol>
<li><strong>数值类型</strong></li>
</ol>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>有符号范围</th>
<th>无符号范围</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>TINYINT</td>
<td>1 Byte</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">128</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">127</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">255</span><span class="mclose">)</span></span></span></span></td>
<td>小整数值</td>
</tr>
<tr>
<td>SMALLINT</td>
<td>2 Bytes</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">32768</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">32767</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">65525</span><span class="mclose">)</span></span></span></span></td>
<td>大整数值</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td>3 Bytes</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">8388608</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">8388607</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">16777215</span><span class="mclose">)</span></span></span></span></td>
<td>大整数值</td>
</tr>
<tr>
<td>INT/INTEGER</td>
<td>4 Bytes</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">2147483648</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">2147483647</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">4294967295</span></span></span></span></td>
<td>大整数值</td>
</tr>
<tr>
<td>BIGINT</td>
<td>8 Bytes</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0085em;vertical-align:-0.1944em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">64</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td>极大整数值</td>
</tr>
<tr>
<td>FLOAT</td>
<td>4 Bytes</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">3.402823466</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">38</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3.402823466351</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">38</span><span class="mclose">)</span></span></span></span></td>
<td>0 和 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1.175494351</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">38</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">3.402823466</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">38</span><span class="mclose">)</span></span></span></span></td>
<td>单精度浮点数值</td>
</tr>
<tr>
<td>DOUBLE</td>
<td>8 Bytes</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1.7976931348623157</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">308</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1.7976931348623157</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">308</span><span class="mclose">)</span></span></span></span></td>
<td>0 和 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2.2250738585072014</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">308</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1.7976931348623157</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">308</span><span class="mclose">)</span></span></span></span></td>
<td>双精度浮点数值</td>
</tr>
<tr>
<td>DECIMAL</td>
<td></td>
<td>依赖于精度（M）和标度（D）的值</td>
<td>依赖于精度（M）和标度（D）的值</td>
<td>小数值（精确定点数）</td>
</tr>
</tbody>
</table>
<ol start="2">
<li><strong>字符串类型</strong></li>
</ol>
<p></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>CHAR</td>
<td>0 - 255 Bytes</td>
<td>定长字符串</td>
</tr>
<tr>
<td>VARCHAR</td>
<td>0 - 65535 Bytes</td>
<td>变长字符串</td>
</tr>
<tr>
<td>TINYBLOG</td>
<td>0 - 255 Bytes</td>
<td>不超过 255 个字符的二进制数据</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>0 - 255 Bytes</td>
<td>短文本字符串</td>
</tr>
<tr>
<td>BLOB</td>
<td>0 - 65535 Bytes</td>
<td>二进制形式的长文本数据</td>
</tr>
<tr>
<td>TEXT</td>
<td>0 - 65535 Bytes</td>
<td>长文本数据</td>
</tr>
<tr>
<td>MEDIUMBLOB</td>
<td>0 - 16777215 Bytes</td>
<td>二进制形式的中等长度文本数据</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>0 - 16777215 Bytes</td>
<td>中等长度文本数据</td>
</tr>
<tr>
<td>LONGBLOB</td>
<td>0 - 4294967295 Bytes</td>
<td>二进制形式的极大文本数据</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>0 - 4294967295 Bytes</td>
<td>极大文本数据</td>
</tr>
</tbody>
</table>
<ol start="3">
<li><strong>日期时间类型</strong></li>
</ol>
<p></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>范围</th>
<th>格式</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>DATE</td>
<td>3</td>
<td>1000-01-01 ~ 9999-12-31</td>
<td>YYYY-MM-DD</td>
<td>日期值</td>
</tr>
<tr>
<td>TIME</td>
<td>3</td>
<td>-838:59:59 ~ 838:59:59</td>
<td>HH:MM:SS</td>
<td>时间值或持续时间</td>
</tr>
<tr>
<td>YEAR</td>
<td>1</td>
<td>1901 ~ 2155</td>
<td>YYYY</td>
<td>年份值</td>
</tr>
<tr>
<td>DATETIME</td>
<td>8</td>
<td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>混合日期和时间值</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>4</td>
<td>1970-01-01 00:00:01 ~ 2038-01-19 03:14:07</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>混合日期和时间值，时间戳</td>
</tr>
</tbody>
</table>
<ul>
<li>表复制</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h4> 查询</h4>
<ul>
<li>查询某个数据库中所有的表</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>查询表结构</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h4> 更新</h4>
<ul>
<li>修改表名</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>修改表的字符集</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>在表中添加一列</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>修改列名称以及对应的数据类型</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>删除列</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h4> 删除</h4>
<ul>
<li>直接删除表</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>判断表是否存在，存在则删除</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>删除指定表，并重新创建该表。</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h2> DML（Data Manipulation Language）</h2>
<h3> 定义</h3>
<p>用于<strong>对数据库中表的数据进行增删改</strong>，相关关键字：<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>……</p>
<h3> 添加数据</h3>
<ol>
<li>给指定字段添加数据</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>给全部字段添加数据</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li>批量添加数据</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 删除数据</h3>
<ul>
<li>删除所有记录，有多少条记录就执行多少次删除操作</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>删除所有数据，先删除表，然后创建一张结构一样的表，比 <code>DELETE</code> 效率更高</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 修改数据</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h2> DQL（Data Query Language）</h2>
<h3> 定义</h3>
<p>用于 <strong>查询数据库中的数据</strong>，相关关键字：<code>SELECT</code>、<code>HAVING</code>、<code>WHERE</code>……</p>
<h3> 语法</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过之得注意的是，以上只是 DQL 的编写顺序，当我们书写 DQL 语句时，需要按照以上顺序来书写。但在实际执行过程中，却不是按照书写顺序来执行的，而是按照以下顺序来执行的。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 基础查询</h3>
<ul>
<li>多字段查询</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>全部字段查询</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>去重查询</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>起别名</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 条件查询</h3>
<ul>
<li>语法</li>
</ul>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li><code>WHERE</code> 后加条件</li>
</ul>
<table>
<thead>
<tr>
<th>关键字</th>
<th>意思</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>=</code>、<code>!=</code></td>
<td>大于、小于、不小于、不大于、等于、不等于</td>
<td><code>col_name != 4</code></td>
</tr>
<tr>
<td><code>BETWEEN…AND…</code></td>
<td>介于两数之间，包含左右边界</td>
<td><code>col_name BETWEEN 10 AND 100</code></td>
</tr>
<tr>
<td><code>NOT BETWEEN…AND…</code></td>
<td>不在两数之间</td>
<td><code>col_name NOT BETWEEN 10 AND 100</code></td>
</tr>
<tr>
<td><code>IN(…)</code></td>
<td>在一个列表中</td>
<td><code>col_name IN (1, 4, 5)</code></td>
</tr>
<tr>
<td><code>NOT IN(…)</code></td>
<td>不在一个列表</td>
<td><code>col_name NOT IN (1, 4, 5)</code></td>
</tr>
<tr>
<td><code>LIKE</code></td>
<td>模糊查询，<code>_</code> 表示单个的任意字符，<code>%</code> 表示多个字符串</td>
<td><code>col_name like "ABC_"</code></td>
</tr>
<tr>
<td><code>IS NULL</code></td>
<td>判断某一字段是否为 <code>NULL</code></td>
<td><code>col_name IS NULL</code></td>
</tr>
<tr>
<td><code>AND</code> 或 <code>&amp;&amp;</code></td>
<td>表示并行关系</td>
<td><code>col_name1 == 5 AND col_name2 == 10</code></td>
</tr>
<tr>
<td><code>OR</code> 或 `</td>
<td></td>
<td>`</td>
</tr>
<tr>
<td><code>NOT</code> 或 <code>!</code></td>
<td>表示否定</td>
<td><code>col_name IS NOT NULL</code></td>
</tr>
</tbody>
</table>
<h3> 聚合函数</h3>
<p>通过将一列数据作为一个整体，进行纵向计算的函数，但是要注意的是，列中的所有 <code>null</code> 值都是不参与运算的。</p>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>count</code></td>
<td>统计数量</td>
</tr>
<tr>
<td><code>max</code></td>
<td>最大值</td>
</tr>
<tr>
<td><code>min</code></td>
<td>最小值</td>
</tr>
<tr>
<td><code>avg</code></td>
<td>平均值</td>
</tr>
<tr>
<td><code>sum</code></td>
<td>求和函数</td>
</tr>
</tbody>
</table>
<h3> 分组查询</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里需要注意 <code>HAVING</code> 和 <code>WHERE</code> 的区别，主 要有两点不一样，分别是：</p>
<ol>
<li><strong>执行时机</strong>：<code>WHERE</code> 是在分组前进行过滤，不满足条件的就不参与分组，而 <code>HAVING</code> 则是对分组后的结果进行过滤。</li>
<li><strong>判断条件</strong>：<code>WHERE</code> 不能对聚合函数进行判断 ，但是 <code>HAVING</code> 可以。</li>
</ol>
<h3> 分页查询</h3>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，起始索引一般是从 0 开始，起始索引 = （查询页码 - 1）* 每页显示的记录数。</p>
<h2> DCL（Data Control Language）</h2>
<h3> 定义</h3>
<p>用于<strong>定义数据库的访问权限和安全级别，以及用户创建</strong>，相关关键字：<code>GRANT</code>、<code>REVOKE</code>……</p>
<h3> 用户管理</h3>
<ol>
<li>查询用户</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="2">
<li>创建用户</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<ol start="3">
<li>修改用户密码</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4">
<li>删除用户</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h3> 权限控制</h3>
<table>
<thead>
<tr>
<th>权限</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ALL</code>、<code>ALL PRIVILEGES</code></td>
<td>所有权限</td>
</tr>
<tr>
<td><code>SELECT</code></td>
<td>查询数据</td>
</tr>
<tr>
<td><code>INSERT</code></td>
<td>插入数据</td>
</tr>
<tr>
<td><code>UPDATE</code></td>
<td>修改数据</td>
</tr>
<tr>
<td><code>DELETE</code></td>
<td>删除数据</td>
</tr>
<tr>
<td><code>ALTER</code></td>
<td>修改表</td>
</tr>
<tr>
<td><code>DROP</code></td>
<td>删除数据库/表/视图</td>
</tr>
<tr>
<td><code>CREATE</code></td>
<td>创建数据库/表</td>
</tr>
</tbody>
</table>
<ol>
<li>查询权限</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>授权</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li>撤销权限</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>MySQL 中的函数</title>
      <link>https://cunyu1943.site/JavaPark/md/database/mysql/20220304-function.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/database/mysql/20220304-function.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">MySQL 中的函数</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 定义 所谓函数，就是指的一段可以直接被另一端程序所调用的程序或者代码，就像 Java 中的方法一样。 字符串函数 函数 说明 concat(S1, S2, …, Sn) 字符串凭借，将 S1、S2、……Sn 拼接成一个字符串 lower(str) 将字符串 str 全部转换为小写 upper(str) 将字符串 str 全部转换为大写 lpad(str, n, pad) 左填充，用字符串 pad 对 str 的左边进行填充，达到 n 个字符串长度 rpad(str, n, pad) 右填充，用字符串 pad 对 str 的右边进行填充，达到 n 个字符串长度 trim(str) 去除字符串头部和尾部的空格 substring(str, start, len) 返回字符串 str 从 start 位置起长度为 len 的字符串</description>
      <category>MySQL 教程</category>
      <pubDate>Fri, 04 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 定义</h2>
<p>所谓函数，就是指的一段可以直接被另一端程序所调用的程序或者代码，就像 Java 中的方法一样。</p>
<h2> 字符串函数</h2>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>concat(S1, S2, …, Sn)</code></td>
<td>字符串凭借，将 <code>S1</code>、<code>S2</code>、……<code>Sn</code> 拼接成一个字符串</td>
</tr>
<tr>
<td><code>lower(str)</code></td>
<td>将字符串 <code>str</code> 全部转换为小写</td>
</tr>
<tr>
<td><code>upper(str)</code></td>
<td>将字符串 <code>str</code> 全部转换为大写</td>
</tr>
<tr>
<td><code>lpad(str, n, pad)</code></td>
<td>左填充，用字符串 <code>pad</code> 对 <code>str</code> 的左边进行填充，达到 <code>n</code> 个字符串长度</td>
</tr>
<tr>
<td><code>rpad(str, n, pad)</code></td>
<td>右填充，用字符串 <code>pad</code> 对 <code>str</code> 的右边进行填充，达到 <code>n</code> 个字符串长度</td>
</tr>
<tr>
<td><code>trim(str)</code></td>
<td>去除字符串头部和尾部的空格</td>
</tr>
<tr>
<td><code>substring(str, start, len)</code></td>
<td>返回字符串 <code>str</code> 从 <code>start</code> 位置起长度为 <code>len</code> 的字符串</td>
</tr>
</tbody>
</table>
<h2> 数值函数</h2>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ceil(x)</code></td>
<td>向上取整</td>
</tr>
<tr>
<td><code>floor(x)</code></td>
<td>向下取整</td>
</tr>
<tr>
<td><code>mod(x, y)</code></td>
<td>返回 <code>x/y</code> 的模</td>
</tr>
<tr>
<td><code>rand()</code></td>
<td>返回 <code>0~1</code> 内的随机数</td>
</tr>
<tr>
<td><code>round(x, y)</code></td>
<td>求参数 <code>x</code> 四舍五入的值，保留 <code>y</code> 位小数</td>
</tr>
</tbody>
</table>
<h2> 日期函数</h2>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>CURDATE()</code></td>
<td>返回当前日期</td>
</tr>
<tr>
<td><code>CURTIME()</code></td>
<td>返回当前时间</td>
</tr>
<tr>
<td><code>NOW()</code></td>
<td>返回当前日期和时间</td>
</tr>
<tr>
<td><code>YEAR(date)</code></td>
<td>获取指定 <code>date</code> 的年份</td>
</tr>
<tr>
<td><code>MONTH(date)</code></td>
<td>获取指定 <code>date</code> 的月份</td>
</tr>
<tr>
<td><code>DAY(date)</code></td>
<td>获取指定 <code>date</code> 的日期</td>
</tr>
<tr>
<td><code>DATE_ADD(date, INTERVAL expr type)</code></td>
<td>返回一个日期/时间值加上一个事件间隔 <code>expr</code> 后的时间值</td>
</tr>
<tr>
<td><code>DATEDIFF(date1, date2)</code></td>
<td>返回起始时间 <code>date1</code> 和结束时间 <code>date2</code> 之间的天数</td>
</tr>
</tbody>
</table>
<h2> 流程函数</h2>
<table>
<thead>
<tr>
<th>函数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>IF(value, t, f)</code></td>
<td>若 <code>value</code> 为 <code>true</code>，则返回 <code>t</code>，否则返回 <code>f</code></td>
</tr>
<tr>
<td><code>IFNULL(value1, value2)</code></td>
<td>若 <code>value1</code> 不为空，则返回 <code>value1</code>，否则返回 <code>value2</code></td>
</tr>
<tr>
<td><code>CASE WHEN [val1] THEN [res1]……ELSE [default] END</code></td>
<td>若 <code>val1</code> 为 <code>true</code>，则返回 <code>res1</code>，否则返回 <code>default</code> 默认值</td>
</tr>
<tr>
<td><code>CASE [expr] WHEN [val1] THEN [res1]……ELSE [default] END</code></td>
<td>若 <code>expr</code> 的值等于 <code>val1</code>，则返回 <code>res1</code>，否则返回 <code>default</code> 默认值</td>
</tr>
</tbody>
</table>
]]></content:encoded>
    </item>
    <item>
      <title>约束</title>
      <link>https://cunyu1943.site/JavaPark/md/database/mysql/20220305-constraint.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/database/mysql/20220305-constraint.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">约束</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 概述 所谓约束，就是作用于表中字段上的规则，用来限制存储在表中的数据。使用的目的是为了保证数据库中数据的正确性、有效性以及完整性。 约束有很多种，常见的约束分类如下表。 关键字 约束 描述 NOT NULL 非空约束 限制该字段的数据不能为 null UNIQUE 唯一约束 保证该字段的所有数据都是唯一不重复的 PRIMARY KEY 主键约束 主键是一行数据的唯一标识，要求非空且唯一 DEFAULT 默认约束 保存数据时，若未指定该字段的值，则采用默认值 CHECK 检查约束（8.0.16 版本之后） 保证字段值满足某一个条件 FOREIGN KEY 外键约束 用于让两张表之间的数据建立连接，从而保证数据的一致性和完整性</description>
      <category>MySQL 教程</category>
      <pubDate>Sat, 05 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 概述</h2>
<p>所谓约束，就是作用于表中字段上的规则，用来限制存储在表中的数据。使用的目的是为了保证数据库中数据的正确性、有效性以及完整性。</p>
<p>约束有很多种，常见的约束分类如下表。</p>
<table>
<thead>
<tr>
<th>关键字</th>
<th>约束</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>NOT NULL</code></td>
<td>非空约束</td>
<td>限制该字段的数据不能为 <code>null</code></td>
</tr>
<tr>
<td><code>UNIQUE</code></td>
<td>唯一约束</td>
<td>保证该字段的所有数据都是唯一不重复的</td>
</tr>
<tr>
<td><code>PRIMARY KEY</code></td>
<td>主键约束</td>
<td>主键是一行数据的唯一标识，要求非空且唯一</td>
</tr>
<tr>
<td><code>DEFAULT</code></td>
<td>默认约束</td>
<td>保存数据时，若未指定该字段的值，则采用默认值</td>
</tr>
<tr>
<td><code>CHECK</code></td>
<td>检查约束（8.0.16 版本之后）</td>
<td>保证字段值满足某一个条件</td>
</tr>
<tr>
<td><code>FOREIGN KEY</code></td>
<td>外键约束</td>
<td>用于让两张表之间的数据建立连接，从而保证数据的一致性和完整性</td>
</tr>
</tbody>
</table>
<h2> 外键约束</h2>
<p>所谓外键约束，就是让两张表之间的数据建立连接，从而保证数据的一致性和完整性。</p>
<h3> 创建/删除约束</h3>
<p>添加外键的方式主要有两种，一种是在创建表时添加，而另一种则是在创建表之后添加。</p>
<ol>
<li><strong>创建时</strong></li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>创建后</strong></li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>既然添加了外键，那当然就有对应删除外键的方式。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 删除/更新行为</h3>
<table>
<thead>
<tr>
<th>行为</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>NO ACTION</code></td>
<td>主表中删除/更新对应记录时，先检查该记录是否有对应外键，若有则不允许删除/更新（与 <code>RESTRICT</code> 一致）</td>
</tr>
<tr>
<td><code>RESTRICT</code></td>
<td>主表中删除/更新对应记录时，先检查该记录是否有对应外键，若有则不允许删除/更新（与 <code>NO ACTION</code> 一致）</td>
</tr>
<tr>
<td><code>CASCADE</code></td>
<td>主表中删除/更新对应记录时，先检查该记录是否有对应外键，若有则删除/更新外键在从表中的记录</td>
</tr>
<tr>
<td><code>SET NULL</code></td>
<td>当在主表中删除对应记录时，先检查该记录是否有对应外键，若有则设置从表中该外键值为 <code>NULL</code>（要求外键可以取 <code>NULL</code>）</td>
</tr>
<tr>
<td><code>SET DEFAULT</code></td>
<td>主表有变更时，从表将外键列设置为一个默认值（<code>Innodb</code> 不支持）</td>
</tr>
</tbody>
</table>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>多表查询</title>
      <link>https://cunyu1943.site/JavaPark/md/database/mysql/20220306-muti-table-query.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/database/mysql/20220306-muti-table-query.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">多表查询</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 多表关系 项目开发进行数据库表结构设计时，需要根据业务需求和业务模块之间的关系，分析并设计表结构。但由于不同业务之间存在着的关联关系，因此各个表结构之间也存在着各种关系，常见的表结构之间的关系可以分为以下三种： 一对多（多对一） 多对多 一对一</description>
      <category>MySQL 教程</category>
      <pubDate>Sun, 06 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 多表关系</h2>
<p>项目开发进行数据库表结构设计时，需要根据业务需求和业务模块之间的关系，分析并设计表结构。但由于不同业务之间存在着的关联关系，因此各个表结构之间也存在着各种关系，常见的表结构之间的关系可以分为以下三种：</p>
<ol>
<li>一对多（多对一）</li>
<li>多对多</li>
<li>一对一</li>
</ol>
<h3> 一对多（多对一）</h3>
<p>常见的就是部门和员工之间的关系，一个部门下边有多个员工，但是每个员工只能有一个部门。为了在数据库中实现这一关系，可以<strong>在多的一方建立外键，然后指向一的一方的主键。</strong></p>
<h3> 多对多</h3>
<p>最常见的有学生和课程之间的关系，每个学生可以选修多门课程，而一门课程也可以供多个学生选择。为了在数据库中实现这一关系，通常<strong>需要建立一个第三方的中间表，而且这个中间表应该至少包含两个外键，用于关联两方的主键。</strong></p>
<h3> 一对一</h3>
<p>最常见的是用户与用户详情之间的关系，多用于<strong>单表拆分</strong>，将一张表的基础字段放在一张表中，其他详情字段则放在另一张表中，从而提升操作效率。为了在数据库中实现这一关系，可以<strong>在任意一张表中加入外键，用来关联另一张表的主键，并且设置该外键唯一（<code>UNIQUE</code>）</strong>。</p>
<h2> 多表查询</h2>
<p>所谓多表查询，指的是从多张表中查询数据。</p>
<p>笛卡尔积：笛卡尔乘积指在数学中，两个集合 A 集合和 B 集合中的所有组合情况，在进行多表查询时，要注意消除掉无效的笛卡尔积。</p>
<p>多表查询可以分为<strong>子查询</strong>和连接查询，其中，连接查询又可以分为：<strong>内连接、外连接、自连接</strong>。</p>
<p>对于内连接，相当于查询两个表 A、B 之间的交集数据，即既存在表 A 中，也存在表 B 中的数据。</p>
<p>自连接表示当前表和它自身的连接查询，需要注意的是自连接查询时必须使用表别名。</p>
<p>最后是外连接，外连接可以分为<strong>左外连接和右外连接</strong>。其中，左外连接表示查询<strong>左表</strong>中的所有数据，以及左右两张表中的交集部分数据。</p>
<p>右外连接表示查询<strong>右表</strong>中的所有数据，以及左右两张表中的交集部分数据。</p>
<h2> 内连接</h2>
<p>内连接表示的是查询两张表的交集部分，其查询语法可以分为<strong>隐式内连接</strong>和<strong>显式内连接</strong>。</p>
<ol>
<li><strong>隐式内连接</strong></li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li><strong>显式内连接</strong></li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 外连接</h2>
<p>外连接可以分为左外连接和右外连接，其查询语法如下。</p>
<ol>
<li><strong>左外连接</strong></li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li><strong>右外连接</strong></li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 自连接</h2>
<p>自查询查询语法如下，自连接查询既可以是内连接查询，也可以是外连接查询。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 联合查询</h2>
<p>联合查询，顾名思义，就是把多次查询的结果合并，从而形成一个新的查询结果集的查询。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 子查询</h2>
<p>子查询指 SQL 语句中嵌套 <code>SELECT</code> 语句，所有又叫做<strong>嵌套查询</strong>。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>子查询返回的结果是一列（也可以是多列），这种子查询叫做<strong>列子查询</strong>。</p>
<p>常用的操作符有：<code>IN</code>、<code>NOT IN</code>、<code>ANY</code>、<code>SOME</code>、<code>ALL</code></p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>IN</code></td>
<td>在指定集合范围内，多选一</td>
</tr>
<tr>
<td><code>NOT IN</code></td>
<td>不在指定集合范围内</td>
</tr>
<tr>
<td><code>ANY</code></td>
<td>子查询返回列表中，有任一满足即可</td>
</tr>
<tr>
<td><code>SOME</code></td>
<td>等同于 <code>ANY</code>，可以用 <code>ANY</code> 代替</td>
</tr>
<tr>
<td><code>ALL</code></td>
<td>子查询返回列表的所有值都必须满足</td>
</tr>
</tbody>
</table>
<p>子查询返回的结果是一行（可以是多列），这种子查询叫做<strong>行子查询</strong>。</p>
<p>常用的操作符有：<code>=</code>、<code>&lt;&gt;</code>、<code>IN</code>、<code>NOT IN</code></p>
<p>若子查询返回的结果是多行多列，那么这种子查询叫做<strong>表子查询</strong>，常用操作符为：<code>IN</code>。</p>
]]></content:encoded>
    </item>
    <item>
      <title>事务</title>
      <link>https://cunyu1943.site/JavaPark/md/database/mysql/20220307-transaction.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/database/mysql/20220307-transaction.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">事务</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 事务简介 事务是一组操作的集合，是一个不可分割的工作单位，它会将所有的操作当做一个整体一起向系统提交或者撤销操作请求，因此这些操作要么同时成功，那么同时失败，最常见的就是业务场景就是银行转账。</description>
      <category>MySQL 教程</category>
      <pubDate>Mon, 07 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 事务简介</h2>
<p>事务是一组操作的集合，是一个不可分割的工作单位，它会将所有的操作当做一个整体一起向系统提交或者撤销操作请求，因此这些操作<strong>要么同时成功，那么同时失败</strong>，最常见的就是业务场景就是银行转账。</p>
<h2> 事务操作</h2>
<ol>
<li>查看/设置事务提交方式</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>提交方式</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>0</code></td>
<td>手动提交</td>
</tr>
<tr>
<td><code>1</code></td>
<td>自动提交</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>提交事务</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li>回滚事务</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4">
<li>开启事务</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 事务四大特性</h2>
<ul>
<li><strong>原子性(Atomicity)</strong>：事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li>
<li><strong>一致性(Consistency)</strong>：事务完成时，必须使所有数据都保持一直状态。</li>
<li><strong>隔离性(Isolation)</strong>：数据库系统提供的隔离机制，保证事务在不收外部并发操作影响的独立环境下运行。</li>
<li><strong>持久性(Durability)</strong>：事务一旦提交或回滚，那么它对数据库中数据的修改就是永久的。</li>
</ul>
<h2> 并发事务问题</h2>
<table>
<thead>
<tr>
<th>问题</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>脏读</td>
<td>一个事务读到另一个事务中还未提交的数据</td>
</tr>
<tr>
<td>不可重复读</td>
<td>一个事务先后读取同一条记录，但两次读取的数据不同</td>
</tr>
<tr>
<td>幻读</td>
<td>一个事务按照条件查询时，没有对应的数据行，但在插入数据时，又发现改行数据已存在，如同幻影一样</td>
</tr>
</tbody>
</table>
<h2> 事务隔离级别</h2>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Read Uncommitted</code></td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td><code>Read Committed</code></td>
<td>×</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td><code>Repeatable Read</code>(默认)</td>
<td>×</td>
<td>×</td>
<td></td>
</tr>
<tr>
<td><code>Serializable</code></td>
<td>×</td>
<td>×</td>
<td>×</td>
</tr>
</tbody>
</table>
<ol>
<li>查看事务隔离级别</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>设置事务隔离级别</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>简介及环境搭建</title>
      <link>https://cunyu1943.site/JavaPark/md/database/postgresql/20220308-pg-install-on-windows.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/database/postgresql/20220308-pg-install-on-windows.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">简介及环境搭建</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 之前由于学习，所以选择的是受众范围较广的 MySQL。至于 MySQL，在这里就不用说了，想必大家都是很熟悉的。正式参加工作之后，才发现原来不同的公司选择的数据库都不一样，有的选择 Oracle，有的选择 MySQL，而有的则选择 PostgreSQL。Oracle 的确很厉害，不过始终是面向收费的，一般小体量的公司用起来成本太高，所以大家还是更倾向于 MySQL。关于 MySQL 的教程、知识分享博客有很多，而且大家写的也很详细，所以在这里就不在赘述了。我们今天就主要来聊聊另一款数据库 PostgreSQL，揭开他的神秘面纱，一探究竟。</description>
      <category>PostgreSQL 教程</category>
      <pubDate>Tue, 08 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>之前由于学习，所以选择的是受众范围较广的 MySQL。至于 MySQL，在这里就不用说了，想必大家都是很熟悉的。正式参加工作之后，才发现原来不同的公司选择的数据库都不一样，有的选择 Oracle，有的选择 MySQL，而有的则选择 PostgreSQL。Oracle 的确很厉害，不过始终是面向收费的，一般小体量的公司用起来成本太高，所以大家还是更倾向于 MySQL。关于 MySQL 的教程、知识分享博客有很多，而且大家写的也很详细，所以在这里就不在赘述了。我们今天就主要来聊聊另一款数据库 PostgreSQL，揭开他的神秘面纱，一探究竟。</p>
<h2> PostgreSQL 的安装</h2>
<h3> 什么是 PostgreSQL</h3>
<p>它是一个免费的对象-关系数据库服务器(ORDBMS)，它自称是 "世界上最先进的开源关系型数据库"，那么它是否有它所自称的那么强大呢，下面我们就先来看看如何安装它。</p>
<h3> 准备工作</h3>
<p>经过上面的介绍之后，现在我们就来看看如何安装 PostgreSQL。</p>
<p>在正式安装过程之前，我们先需要准备好安装包，这里我主要是以 Windows 平台为例，理论上来讲普遍适用于全系 Windows 系统。</p>
<p>那么我们首先要做的就是去 PostgreSQL 官网：<a href="https://www.postgresql.org/" target="_blank" rel="noopener noreferrer">https://www.postgresql.org/</a> 去下载最新版本 PostgreSQL 安装包。</p>
<p></p>
<p>然后选择对应平台进入下载安装包，这里提供 <code>.exe</code> 的安装包，也支持下载 <code>.zip</code> 的压缩包形式解压缩安装，这里根据自己的喜好进行下载即可，下边我主要以 <code>.exe</code> 形式的安装包安装为例。</p>
<p></p>
<p></p>
<h3> 安装过程</h3>
<p>准备工作好了之后，接下来就是正式安装过程了。</p>
<ol>
<li>双击我们下载好的安装包之后，进入安装界面，首先是一个欢迎界面，直接 <code>Next</code> 下一步即可；</li>
</ol>
<p></p>
<ol start="2">
<li>然后是选择安装路径，这里默认是在 <code>C:\Program Files\PostgreSQL\13</code> 下，不过我们一般推荐安装到自己平常安装软件的地方，不要直接安装在 C 盘；</li>
</ol>
<p></p>
<ol start="3">
<li>选择所要安装的组件，这里默认是全部安装，如果你们有特殊的要求，那就默认直接点击 <code>Next</code> 下一步即可；</li>
</ol>
<p></p>
<ol start="4">
<li>选择数据数据存放的地方，这里默认实在安装路径下的 <code>data</code> 子目录下，如果你之前在第 2 步中自定义了安装路径，那么这里直接选择 <code>Next</code> 下一步即可；</li>
</ol>
<p></p>
<ol start="5">
<li>设置密码，也就是待会儿我们安装结束后登陆时所需的密码，这里自己设置即可（<strong>一定要记住！</strong>）；</li>
</ol>
<p></p>
<ol start="6">
<li>端口设置，PostgreSQL 默认端口是 5432，如果你不想使用默认端口，可以自定义想要使用的端口，这里如果改动了也要记住，确保不要和其他服务冲突；</li>
</ol>
<p></p>
<ol start="7">
<li>其实就是时区选择，这里直接默认点击 <code>Next</code> 下一步即可；</li>
</ol>
<p></p>
<ol start="8">
<li>然后是确认信息，确保我们已经准备好了要开始 PostgreSQL 的安装，直接点击 <code>Next</code> 下一步即可；</li>
</ol>
<p></p>
<ol start="9">
<li>接下来就是相对漫长的安装过程了，这里等待即可；</li>
</ol>
<p></p>
<ol start="10">
<li>好了，显示此界面就说明我们的安装过程结束了，点击 <code>Finish</code> 完成安装即可。</li>
</ol>
<p></p>
<h3> 验证</h3>
<p>既然我们的 PostgreSQL 安装好了，那么接下来就是看看如何使用它了。</p>
<p>去我们的程序列表中找到 <code>SQL Shell(psql)</code>，也就是下图中的程序打开（这里我因为安装了快捷搜索软件，所以你查找的界面会和我不一样，但是软件是一个）。</p>
<p></p>
<p>然后就是登陆过程了，首先是 <code>Server</code>，也就是说数据库 url，默认是在本地（所以是 <code>localhost</code>），没有该动的就直接回车下一步好了。</p>
<p>接着是 <code>Database</code>，也即我们数据库，这里默认是使用 <code>postgres</code>，因为我们是第一次登陆，所以这里也就直接回车下一步就好了。</p>
<p>再接着是 <code>Port</code>，也就是端口号，默认是 5432，如果你安装的时候改动了，那么此时你最好也改成你当时改的端口，否则可能导致连接失败。</p>
<p>然后是 <code>Username</code>，也就是 PostgreSQL 的用户，这里一般默认是超级用户（<code>postgres</code>，这里不同于 MySQL 的 <code>root</code>，要注意），而我们也是第一次登陆，没有建立新账户，直接默认回车下一步即可。</p>
<p>最后要输入的则是口令，也就是登陆数据库的密码，这里我们已经在上边设置过了，直接输入后回车即可。</p>
<p>如果我们登陆成功，那么就会出现下面图中的提示了。</p>
<p></p>
<h2> 总结</h2>
<p>OK，今天的文章到此就结束了，主要介绍了如何在 Windows 中安装 PostgreSQL，以及 PostgreSQL 的一些简介和如何验证安装是否成功。</p>
<p>原创不易，如果你觉得本文对你有所帮助，那就来个点赞关注吧。</p>
]]></content:encoded>
    </item>
    <item>
      <title>白嫖 IntelliJ IDEA 专业版使用权</title>
      <link>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20220201-idea-pro-with-student-email.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20220201-idea-pro-with-student-email.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">白嫖 IntelliJ IDEA 专业版使用权</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 大家在使用 JetBrains 开发工具时，往往会受限于社区版某些功能的缺失。为了进行必要的开发工作，不得不使用专业版，这样一来问题就来了。专业版需要授权，但是对于个人用户来说价格还是有点贵的，于是为了寻求免费授权，不得不去网上找各种激活码或者破解教程，然后呢过一段时间可能又失效了，折腾来折腾去就很心累了。为了减少必要的麻烦，所以我们这里教你免费申请 JetBrains 开发工具一年使用权，等到一年过后，再次重新认证下就可以继续使用了，省去了折腾的时间，再也不用担心我们的 JetBrains 开发工具弹出授权失效的弹窗了。</description>
      <category>IDEA 教程</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>大家在使用 JetBrains 开发工具时，往往会受限于社区版某些功能的缺失。为了进行必要的开发工作，不得不使用专业版，这样一来问题就来了。专业版需要授权，但是对于个人用户来说价格还是有点贵的，于是为了寻求免费授权，不得不去网上找各种激活码或者破解教程，然后呢过一段时间可能又失效了，折腾来折腾去就很心累了。为了减少必要的麻烦，所以我们这里教你免费申请 JetBrains 开发工具一年使用权，等到一年过后，再次重新认证下就可以继续使用了，省去了折腾的时间，再也不用担心我们的 JetBrains 开发工具弹出授权失效的弹窗了。</p>
<p><strong>注意：接下来的内容需要有教育邮箱为前提。</strong></p>
<h2> 相关介绍及常见问题</h2>
<p>对于如何免费申请 JetBrains 开发工具套件，可以先去阅读相关申请条件和申请可能遇到的一些问题，<a href="https://www.jetbrains.com/zh-cn/community/education/?_ga=2.100493086.1068267370.1584595992-1646227051.1584503956#students" target="_blank" rel="noopener noreferrer">免费申请详情请点击</a>；</p>
<h2> 申请步骤</h2>
<p>阅读了免费教育许可证相关信息之后，准备好你的教育邮箱，咱们来正式看看具体的申请过程吧。</p>
<ol>
<li>进入<a href="https://www.jetbrains.com/zh-cn/community/education/?_ga=2.100493086.1068267370.1584595992-1646227051.1584503956#students" target="_blank" rel="noopener noreferrer">申请页</a>，然后点击立即申请。</li>
</ol>
<p></p>
<ol start="2">
<li>如实填写相关信息。</li>
</ol>
<p></p>
<ol start="3">
<li>提交信息后，后续步骤会发送到你的教育邮箱，注意进入教育邮箱接收并完成后续步骤。</li>
</ol>
<p></p>
<p></p>
<ol start="4">
<li>阅读并同意相关条例，然后会发完成注册的邮件到你的教育邮箱，接着去邮箱完成即可。</li>
</ol>
<p></p>
<ol start="5">
<li>在邮箱中按指示完成注册。</li>
</ol>
<p></p>
<ol start="6">
<li>填写注册名以及设置密码后提交。</li>
</ol>
<p></p>
<ol start="7">
<li>好了，注册完成，下边就可以使用注册好的账号登录使用 JetBrains 开发工具套件了。</li>
</ol>
<p></p>
<h2> 如何续期</h2>
<p>以上的步骤完成之后，默认往往只有一年的使用时间，到其之后一般就会在开发工具中提醒，如：</p>
<p></p>
<p>这个时候，我们需要到官网进行续期，登录之后，我们只需要在 License 页面点击 <code>Renew my Education Pack</code> ，然后我们确认相关信息之后，它就会发送续期邮件到我们的邮箱。</p>
<p></p>
<p></p>
<p>接着我们只需要点击 <code>Accept</code> 同意即可。</p>
<h2> 总结</h2>
<p>以上就是我们利用教育邮箱来免费申请 JetBrains 家的系列开发工具的免费授权了，而且对我们到期后如何续期也进行了说明，如果你手里也有可用的教育邮箱，那就赶紧去申请吧！再也不用去费力找各种破解版了 ~</p>
]]></content:encoded>
    </item>
    <item>
      <title>最新版 IDEA 简单使用手册</title>
      <link>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20220202-idea-guide.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20220202-idea-guide.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">最新版 IDEA 简单使用手册</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 因为自己电脑最近实在是太卡了，也一直提示更新，索性就直接重装了个系统。因为需要重装下 IDEA，而现在新版本的 IDEA 和之前的版本还是有很大变化的，所以在这里写一篇博客做个记录，方便自己后续配置，也顺便分享给大家。</description>
      <category>IDEA 教程</category>
      <pubDate>Wed, 02 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>因为自己电脑最近实在是太卡了，也一直提示更新，索性就直接重装了个系统。因为需要重装下 IDEA，而现在新版本的 IDEA 和之前的版本还是有很大变化的，所以在这里写一篇博客做个记录，方便自己后续配置，也顺便分享给大家。</p>
<h2> IDEA 的优势</h2>
<p>为什么要使用 <code>IDEA</code> 呢？当然是因为它的强大。总结起来，<code>IDEA</code> 具有以下的主要优势：</p>
<ol>
<li><strong>功能强大</strong></li>
</ol>
<p>一方面体现在强大的整合能力，IDEA<code>支持集成各种开发过程中的编程框架，最常见的有</code>git<code>、</code>JVM<code>系编程语言、</code>Spring` 系产品、移动开发语言框架、前端开发语言。而另一方面，通过集成版本控制系统、对多种编程语言框架的支持，同时无需额外安装插件，带给我们开箱即用的体验。</p>
<ol start="2">
<li><strong>符合人体工程学</strong></li>
</ol>
<p><code>IDEA</code> 的提示功能十分智能，提供了快速地智能代码补全、实时代码分析以及可靠的重构工具。此外 <code>IDAE</code> 的提示功能十分快速、便捷，而且提示范围也十分广泛。</p>
<h2> 准备工作</h2>
<p>既然要安装 <code>IDEA</code>，那么首先需要前往 <code>JetBrains</code> 的官网下载最新版的 <code>IDEA</code>，下载地址如下：</p>
<p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noopener noreferrer">https://www.jetbrains.com/idea/download/</a></p>
<p></p>
<p>因为我有旗舰版的账号，所以这里就以旗舰版安装为例，其实社区版的安装也是一样的，只不过里边集成的东西有所不同。所以如果你安装的是社区版，参照此教程也是完全可以的！</p>
<p></p>
<h2> 安装</h2>
<p>好了，完成下载后，我们就可以开始我们的安装过程了！</p>
<ol>
<li>双击我们的安装包之后，来到 <code>IDEA</code> 的欢迎界面，我们此时只需要 <code>Next</code> 即可。</li>
</ol>
<p></p>
<ol start="2">
<li>接着就是选择我们要安装 <code>IDEA</code> 的位置，它默认的安装位置是 <code>C:\Program Files\JetBrains\IntelliJ IDEA 2021.1.2</code>，这里就是看大家自己的喜好了，你喜欢安在哪儿都可以，但是需要满足它所需要的内存。更加推荐大家安装到自己的非系统盘位置，比如我的安装位置是 <code>D:\SoftInstall\IntelliJ IDEA</code>。</li>
</ol>
<p></p>
<ol start="3">
<li>选择安装的配置，这里主要选择创建 32 还是 64 位的桌面快捷方式、是否要将其加入到系统 <code>PATH</code> 环境变量、是否关联相关后缀文件等等。可以根据自己的使用习惯来进行选择，以我个人来说，因为不喜欢弄一些桌面快捷方式以及关联相关后缀文件等操作，所以我默认全都不勾选，直接 <code>Next</code>。</li>
</ol>
<p></p>
<ol start="4">
<li>选择开始菜单中给 IDEA 的文件夹名，这里默认即可，直接点击 <code>Install</code>，然后就是漫长的等待安装过程了！</li>
</ol>
<p></p>
<p></p>
<ol start="5">
<li>大功告成！显示此界面就说明我们的 <code>IDEA</code> 已经安装好了，直接点击 <code>Finish</code> 即可！</li>
</ol>
<p></p>
<h2> 配置</h2>
<p>安装好之后，为了让我们的 IDEA 使用起来更顺手，推荐做一些个性化的配置，提高我们的工作效率。</p>
<h3> 激活</h3>
<p>首次打开旗舰版 <code>IDEA</code> 时，会让你激活，这里有 3 种选择：</p>
<ul>
<li>
<p>利用你的 <code>JetBrains</code> 账号登录激活；</p>
</li>
<li>
<p>利用你的 <code>IDEA</code> 激活码激活；</p>
</li>
<li>
<p>最后则是许可证服务器地址激活；</p>
</li>
</ul>
<p>当然你也可以选择 <code>Evaluate for free</code>，它是有 30 天的试用期的，你只需要在这 30 天之内激活即可，否则 30 天之后将会弹窗不可用。对于社区版，应该没有激活这一说法，因为它是免费的，我们直接打开用就可以了。</p>
<p></p>
<h3> 编码设置</h3>
<p>一般 IDEA 的编码是和系统保持一致的，而为了通用，减少不必要的编码问题，所以一般统一设置为 UTF-8，设置入口如下，依次打开 <code>Settings -&gt; Editor -&gt; File Encodings</code>，然后将 <code>Global Encoding</code>、<code>Project Encoding</code>、<code>Default encoding for properties files</code> 均设置为 UTF-8。</p>
<p></p>
<h3> 外观设置</h3>
<h4> 整体 UI</h4>
<p>安装并激活之后，进入 IDEA 的主界面，新版本的主界面如下图所示：</p>
<p></p>
<p>点击 <code>Customize</code>，可以看到右侧我们可以设置主题和字体。其中主题有如下 4 种选择：</p>
<ol>
<li>
<p>IntelliJ Light</p>
</li>
<li>
<p>Windows 10 Light</p>
</li>
<li>
<p>Darcula</p>
</li>
<li>
<p>High contrast</p>
</li>
</ol>
<p>这里可以根据自己的喜好进行主题选择，也可以勾选右方的 <code>Sync with OS</code> 选项，这样 IDEA 就会根据你系统的明亮还是黑暗主题进行自动切换了。</p>
<p>而字体大小设置这边，我个人更喜欢稍微大一点（主要是小的看久了眼睛疼 😂），所以设置的是 16 号字体。</p>
<p></p>
<p>而关于更多设置，可以点击下方的 <code>All settings…</code>，进入更详细的设置。比如这里 IDEA 默认界面字体是微软雅黑，我们要改成自己喜欢的字体就可以在这里进行更改，这里推荐 JetBrains 自家推出的 <code>JetBrains Mono</code> 字体。</p>
<p>设置入口，依次进入 <code>Settings -&gt; Appearance &amp; Behavior -&gt; Appearance</code>，然后在右边设置主题，字体以及字体大小即可。</p>
<p></p>
<h4> 编辑区</h4>
<p>上述设置只是针对于 IDEA 整体界面风格的设置，而如果我们要对我们的代码编辑区进行设置，那么就需要进入：<code>Settings -&gt; Editor -&gt; Font</code>，然后设置字体和大小。这里依然推荐使用 <code>JetBrains Mono</code> 字体，字号 16。</p>
<p></p>
<p>除开上面设置编辑区字体大小的方法外，我们还可以按住 <code>Ctrl</code>，然后通过鼠标滚轮来实现字体大小的调整，但是前提是你要先打开相关设置。设置入口如下，依次进入 <code>Settings -&gt; Editor -&gt; General</code>，然后勾选 <code>Change font size with Ctrl+Mouse Wheel</code> 即可。</p>
<p></p>
<h4> 控制台</h4>
<p>一般情况下无需调整，它会沿用编辑器一样的配置，但如果你需要自定义，可以去如下入口：<code>Settings -&gt; Editor -&gt; Color Scheme -&gt; Console Font</code>，然后勾选如下 <code>Use color scheme font instead of the default</code> 选项并进行设置即可。</p>
<p></p>
<h3> 扁平化显示及空包隐藏</h3>
<p>有时候，我们项目的包结构会变成如下样式，有时会造成一定的不便，此时是因为开启了 <code>Flatten Packages</code> 所导致。</p>
<p></p>
<p>如果我们关闭此功能，则项目包结构如下所示：</p>
<p></p>
<p>其中 <code>Compact Middle Packages</code> 表示是否隐藏空包。</p>
<h3> 打开文件多行显示</h3>
<p>平常使用 IDEA 时，你可能没有注意到，一旦我们打开过多的文件时，默认会堆积在一行显示，就像浏览器打开了多个标签一样，此时需要通过右侧箭头筛选的方式来选择其他文件。为了解决这一问题，让我们打开的所有文件能以多行显示的方式方便查看。</p>
<p>设置入口：依次打开 <code>Settings -&gt; Editor -&gt; General -&gt; Editor Tabs</code>，然后将 <code>Show tabs in</code> 勾选为 <code>Multiples rows</code>。</p>
<p></p>
<h3> 行号和方法分隔符</h3>
<p>日常为了方便定位 Bug 所在位置，我们通常需要打开代码所对应的行号，方便我们查找。另外，如果我们代码中方法较多时，最好是在每个方法之间加一个分隔符，方便我们知道一个方法的开始和结束。而这两个功能，IDEA 都是提供的。设置入口：依次打开 <code>Settings -&gt; Editor -&gt; General -&gt; Appearance</code>，然后勾选 <code>Show line numbers</code> 和 <code>Show method separators</code>。</p>
<p></p>
<h3> 自动导包</h3>
<p>日常工作中，我们会经常用到第三方的包，每次都需要我们通过手动（<code>Alt + Enter</code>） 的方式来导入，但实际上 IDEA 也是提供自动导包功能的，设置入口如下：<code>Settings -&gt; Editor -&gt; General -&gt; Auto Import</code>，将 <code>Insert imports on paste</code> 设置为 <code>Always</code>，再勾选 <code>Add unambiguous imports on the fly</code> 以及 <code>Optimize imports on the fly</code> 即可。</p>
<p></p>
<h3> 忽略大小写</h3>
<p>通常 IDEA 在导入类时大小写是全匹配的，这样一样就极大影响了我们编码的速度。此时我们就可以通过设置 IDEA，让其忽略大小写字母，提高效率。设置入口如下，依次进入 <code>Settings -&gt; Editor -&gt; General -&gt; Code Completion</code>，取消勾选 <code>Match case</code>。</p>
<p></p>
<h3> 自动编译</h3>
<p>IDEA 默认是不会对代码自动编译的，需要我们手动配置。设置入口：依次打开 <code>Settings -&gt; Build,Execution,Deployment -&gt; Compiler</code>，然后勾选 <code>Build project automatically</code> 和 <code>Compole independent modules in parallel</code>。</p>
<p></p>
<h3> 编译器设置</h3>
<p>这里推荐使用 <code>Javac</code> 编译器，然后编译器版本最好保持和你本地使用的 JDK 版本相同。因为我本地使用的是 JDK11，所以这里版本我设置的是 11，这里最好根据你自己的实际情况进行设置。设置入口：依次打开 <code>Settings -&gt; Build,Execution,Deployment -&gt; Compiler -&gt; Java Compiler</code>，然后将 <code>Use compiler</code> 设置为 <code>Javac</code>，并将 <code>Project bytecode version</code> 设置为你本地使用的 JDK 的版本。</p>
<p></p>
<h3> Maven 设置</h3>
<p>默认情况下，IDEA 是由绑定的 Maven 的，但是我们一般是自己设置自己所使用的 Maven。需要设置的主要有三点：</p>
<ol>
<li>
<p><strong>Maven home path</strong>：即自己本地的 Maven 所在目录；</p>
</li>
<li>
<p><strong>User settings file</strong>：即自己本地 Maven 环境下的 <code>settings.xml</code> 所在目录；</p>
</li>
<li>
<p><strong>Local repository</strong>：即自己本地的 Maven 仓库；</p>
</li>
</ol>
<p>设置入口：依次打开 <code>Settings -&gt; Build,Execution,Deployment -&gt; Build Tools -&gt; Maven</code>，然后设置以上三点即可。</p>
<p></p>
<h3> 类模板</h3>
<p>当我们创建一个类时，希望每个类的前边都已经一些注释的代码，用于标识这是我们自己所写的代码。此时就需要到 <code>Settings -&gt; Editor -&gt; File and Code Templates</code>，然后在右边的 <code>Includes -&gt; File Header</code> 右边的方框中，填入如下模板。设置完成之后，以后我们每次创建新的类文件时，IDEA 都会在文件的开头添加如下信息。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 导入导出设置</h3>
<p>经过我们一番调教，IDEA 用起来就十分顺手了。但这时候问题就来了，要是我们换个系统或者电脑使用啥的，难道我们又得重新设置一遍么？当然不是了！IDEA 是支持导入导出我们的配置的，我们只需要将我们的设置导出，然后换电脑或者重装系统使用时进行导入即可。</p>
<h4> 导出</h4>
<p>导出入口：依次打开 <code>File -&gt; Manage IDE Settings -&gt; Export Settings…</code>。</p>
<p></p>
<h4> 导入</h4>
<p>导入入口，依次打开 <code>File -&gt; Manage IDE Settings -&gt; Import Settings…</code>。</p>
<p></p>
<h2> 总结</h2>
<p>好了，以上就是关于 IDEA 的安装以及安装之后的一些配置了。如果你觉得对你有用，那就点个赞再走吧！如果你还有更多关于 IDEA 的高级玩法，欢迎评论区留言，大家一起交流！</p>
]]></content:encoded>
    </item>
    <item>
      <title>IDEA + Github 多设备同步开发</title>
      <link>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20220203-idea-with-github.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20220203-idea-with-github.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">IDEA + Github 多设备同步开发</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 在我们日常工作生活中，当我们换设备或者重装系统后，往往需要将我们之前的代码进行同步。这个时候我们常常都是采用 U 盘拷贝的方式，但是这样十分麻烦，那有没有不用通过 U 盘之类的介质拷贝就能实现的呢。今天我们看看如何利用 IDEA + Github，实现跨设备跨平台之间的同步。后续步骤均建立在安装好 git 和拥有 Github 账户的基础上，如果还没有安装 git 或者没有 Github 账户，那赶紧先去安装 git 和申请一个 Github 账户吧。</description>
      <category>IDEA 教程</category>
      <pubDate>Thu, 03 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>在我们日常工作生活中，当我们换设备或者重装系统后，往往需要将我们之前的代码进行同步。这个时候我们常常都是采用 U 盘拷贝的方式，但是这样十分麻烦，那有没有不用通过 U 盘之类的介质拷贝就能实现的呢。今天我们看看如何利用 IDEA + Github，实现跨设备跨平台之间的同步。后续步骤均建立在安装好 git 和拥有 Github 账户的基础上，如果还没有安装 git 或者没有 Github 账户，那赶紧先去安装 git 和申请一个 Github 账户吧。</p>
<h2> 同步过程</h2>
<h3> 新建一个 Java 项目</h3>
<ol>
<li>新建一个项目，如果有之前的项目，也可以直接打开，不用再新建，然后直接跳到下一小节；</li>
</ol>
<p></p>
<ol start="2">
<li>选择是否基于模板创建项目，默认我们不勾选，直接下一步，创建一个空项目；</li>
</ol>
<p></p>
<ol start="3">
<li>自定义项目名及存储路径，在这里指定我们的项目名，并且指定项目存放地址；</li>
</ol>
<p></p>
<h3> Git &amp; Github 设置</h3>
<ol>
<li>在 IDEA 中设置 Git 安装的路径，一般 IDEA 是会自动检测你的 Git 所在目录的，如果没有自动检测出来，就需要我们自己去找到安装好的 Git 的路径；</li>
</ol>
<p></p>
<ol start="2">
<li>设置好 Git 的安装路径之后，我们就可以直接去登录 Github 了，在这里直接输入你的 Github 账户及密码即可；</li>
</ol>
<p></p>
<ol start="3">
<li>点击登录后，如果出现如下图中的界面，即显示你的 Github 账户头像和用户名，则说明此时登录成功；</li>
</ol>
<p></p>
<h3> 本地项目推送到远程</h3>
<ol>
<li>依次进入 <code>VCS -&gt; Share Project on Github</code>；</li>
</ol>
<p></p>
<ol start="2">
<li>然后填写仓库名、远程分支、仓库描述，以及选择是否私有，最后点击 <code>Share</code> 即可；</li>
</ol>
<p></p>
<ol start="3">
<li>等待一会儿，IDEA 会指定弹出以下窗口。这里主要供我们选择所要推送到远程的文件，以及提交信息，确认好两者之后，最后点击 <code>Add</code> 即可；</li>
</ol>
<p></p>
<ol start="4">
<li>等待完成即可；</li>
</ol>
<p></p>
<ol start="5">
<li>如果遇到网络问题或者其他问题导致推送失败，可以点击下图中的按钮，然后再次提交推送即可；</li>
</ol>
<p></p>
<ol start="6">
<li>最后，点击 IDEA 最下边工具栏的 <code>Git</code> 就可以查看我们的提交记录了；</li>
</ol>
<p></p>
<ol start="7">
<li>最后去我们的 Github 查看刚才的推送是否成功；</li>
</ol>
<p></p>
<h2> 提交与拉取</h2>
<h3> 提交</h3>
<p>当我们的项目有所改动之后，如果我们想要将我们改动的内容推送到远程，可以通过如下过程来进行。</p>
<ol>
<li>点击如下图中按钮（或者使用快捷键 <code>Ctrl + K</code>），然后在左侧选中我们改动的内容并填写提交信息，接着点击下方的 <code>Commit</code> 即可；</li>
</ol>
<p></p>
<ol start="2">
<li>然后重复上一小节中的第 5 个步骤即可！</li>
<li>最后去我们的远程看看刚才提交的改动的内容。</li>
</ol>
<p></p>
<p></p>
<h3> 拉取</h3>
<p>假设有这样的场景，我们在公司的电脑上提交了我们新加的功能代码，回家之后想用自己的电脑接着开发，此时我们自己电脑上的代码还是之前的老版本，此时需要先从远程拉取我们在公司时所新加的内容。</p>
<p>此时需要按照如下过程操作：</p>
<ol>
<li>点击下图中的按钮，根据自己的需要选择 <code>Merge</code> 还是 <code>Rebase</code>；</li>
</ol>
<p></p>
<ol start="2">
<li>然后等待项目更新完成即可。</li>
</ol>
<p></p>
<h2> 总结</h2>
<p>通过上述操作，即可将 IntelliJ IDEA 与远程 Github 连接起来，随时将我们所做工作推送到 Github 保存，再也不用担心不同设备之间迁移的问题，随时随地进行开发 ~</p>
<p>最后，创作不易，如果你觉得对你有所帮助，那就点个赞再走吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>集成并使用 Git 图文教程</title>
      <link>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20220204-idea-integrate-with-git.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20220204-idea-integrate-with-git.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">集成并使用 Git 图文教程</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 一般在进行项目开发时，都离不开版本控制，当前主流的版本控制工具无非就是 Git 和 SVN，而且现在 Git 的使用率可以说是已经远远超过 SVN，本文就主要看看，如何使用 IDEA + Git 来控制代码版本，让团队开发更流畅！</description>
      <category>IDEA 教程</category>
      <pubDate>Fri, 04 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>一般在进行项目开发时，都离不开版本控制，当前主流的版本控制工具无非就是 Git 和 SVN，而且现在 Git 的使用率可以说是已经远远超过 SVN，本文就主要看看，如何使用 IDEA + Git 来控制代码版本，让团队开发更流畅！</p>
<h2> Git 安装及配置</h2>
<p>既然要使用 Git，那么首当其冲的当然是需要安装 Git 了，具体安装过程就不说了，就直接下一步下一步的事儿。</p>
<p>接下来就来说说，当我们安装好 Git 后的事。安装好 Git 之后，打开 IDEA 的设置界面，依次进入 <code>File -&gt; Settings -&gt; Version Control -&gt; Git</code>（也可以通过快捷键 <code>Ctrl + Alt + S</code> 进入设置），然后将 <code>Path to Git executable</code> 设置为你安装的 Git 所在路径即可，比如我的是 <code>D:\Program Files\Git\bin\git.exe</code>。</p>
<p></p>
<p>设置完成之后，点击右方的 <code>Test</code>，如果 Git 安装成功且路径正确，就会弹出如下的提示信息，说明我们的配置也就成功了。</p>
<p>‘</p>
<h2> Github 设置</h2>
<p>同样的，我们可以发现 <code>Version Control</code> 中还有一个 Github 选项卡，这里我们可以使用自己的 Github 账号进行登录，即 <code>Log In via Github</code>，然后就可以直接将我们 Github 上的代码拉取下来了。</p>
<p></p>
<p>登陆成功后，则会出现我们 Github 账号的相关信息，如下图。</p>
<p></p>
<h2> 拉取远程 Git 仓库代码</h2>
<p>这里平时可能更多的是将公司的 Git 库中的代码拉取到本地进行协同开发，不过这里没法演示，所以就用 IDEA 从 Github 拉取代码为例，来演示如何从远程 Git 仓库拉取代码。</p>
<p>这里主要有两种方式，第一种是事先通过 Git 工具将代码拉取到本地，然后再通过 IDEA 进行打开；而另一种则是通过 IDEA 直接将代码拉取下来，下面分别演示下这两种操作。</p>
<h3> 先拉取，再打开</h3>
<p>首先找到我们要 Github 仓库，然后复制 Github 仓库路径。</p>
<p></p>
<p>然后打开终端，使用如下命令克隆到本地。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<p>拉取成功后，我们就可以通过 IDEA 打开该项目，依次进入 <code>File -&gt; Open</code>，然后找到上一步中克隆下来的代码所在路径，即可打开项目。</p>
<p></p>
<h3> 直接拉取打开</h3>
<p>除开上面的方式之外，我们也可以直接通过 IDEA 拉取代码，依次进入 <code>File -&gt; New -&gt; Project from Version Control</code>，然后这里也有两种方式拉取。</p>
<ol>
<li><strong>URL 拉取</strong></li>
</ol>
<p>这里我们将我们在上一部分中所复制的仓库库地址 url 填入 <code>URL</code>，然后 <code>Version control</code> 选择 <code>Git</code>，<code>Directory</code> 则是我们要存放该代码的本机路径，后面拉取下来的代码将放在该路径中。</p>
<p></p>
<ol start="2">
<li><strong>账号拉取</strong></li>
</ol>
<p>Github 设置部分我们已经登陆了 Github 账号，此时也可以通过 Github 选项，然后找到我们要拉取代码的仓库，这里可以通过最上方的搜索框进行搜索快速定位，然后点击下方的 <code>Clone</code> 即可进行拉取，其中 <code>Directory</code> 同上一种拉取方式，也是我们拉取代码存放的路径。</p>
<p></p>
<p>此外，还有 <code>Githu Enterprise</code> 和 <code>Space</code> 两种方式拉取，不过这两种方式更偏向于公司或者组织，一般个人的话是不需要用到这部分的，这里知道就好，使用方法和上述两种方式大同小异。</p>
<h2> 更新代码</h2>
<p>一般在将本地代码提交到远程仓库时，最好先更新下远程仓库的代码到本地，从而避免不必要的冲突。</p>
<p>更新的方式也很简单，可以通过快捷键 <code>Ctrl + T</code> 进行拉取，也可以通过工具栏中的按钮来实现。</p>
<p></p>
<p></p>
<p>更新时有两种方式，一种是 <code>Merge incoming changes into the current brance</code>，而另一种则是 <code>Rebase the current branch on top of incoming changes</code>。</p>
<p>其中 <code>Merge</code> 的原理是找到两个分支的祖先 <code>commit</code>，然后将公共分支最新版合并到自己的分支，形成一个新的 <code>commit</code> 提交，用图表示如下。</p>
<p></p>
<p><code>Rebase</code> 则是重新基于一个分支进行 <code>commit</code>，即将当前分支从祖先的 <code>commit</code> 后所提交的 <code>commit</code> 均撤销，将他们放到一个缓存中，然后基于一个分支的后面，将缓存的 <code>commit</code> 按照顺序以一个个新增到该分支后面，用图表示如下，将 4 和 5 所提交的 <code>commit</code> 放到缓存中，然后按顺序将其新增到 6 的后面。</p>
<p></p>
<p>而使用 <code>Rebase</code> 和 <code>Merge</code> 的基本原则可以总结如下三条：</p>
<ol>
<li><strong>下游分支更新上游分支内容时使用 <code>Rebase</code></strong></li>
<li><strong>上游分支合并下游分支内容时使用 <code>Merge</code></strong></li>
<li><strong>更新当前分支内容时一定要使用 <code>--rebase</code> 参数</strong></li>
</ol>
<p>更多关于 <code>Rebase</code> 和 <code>Merge</code> 的区别，可以参考这篇文章：</p>
<blockquote>
<p><a href="https://zhuanlan.zhihu.com/p/34197548" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/34197548</a></p>
</blockquote>
<p>除开快捷键和点击工具栏中按钮更新的方式之外，还可以在项目上点击鼠标右键，然后依次进入 <code>Git -&gt; Pull</code> 进行更新。</p>
<p></p>
<h2> 提交代码</h2>
<p>本地进行开发工作后，我们需要将我们的代码提交到远程仓库，此时也可以通过以下两种方式进行。</p>
<ol>
<li><strong>快捷键</strong></li>
</ol>
<p>通过快捷键 <code>Ctrl + K</code> 打开代码提交工作区，可以看到文件会被标识成不同的颜色，一般是红色、绿色、蓝色，三者的意义分别代表如下：</p>
<ul>
<li><strong>红色</strong>：表示该文件未加入到版本控制中，比如 Java 项目中的 <code>target</code> 文件夹，这里我们可以在 <code>.gitignore</code> 文件中进行配置。</li>
<li><strong>绿色</strong>：表示该文件是新加入版本控制中的文件，比如我们项目中新建的文件，但此时它还未被提交到远程代码仓库。</li>
<li><strong>蓝色</strong>：表示该文件是修改的文件，在我们远程的代码仓库中已经存在该仓库，只是我们对它进行了修改还没有提交而已。</li>
</ul>
<p>此外，还有一个 <code>Amend</code> 区域，这里主要用于填写我们的提交信息。</p>
<p>完成勾选我们需要提交的代码文件以及填写提交信息后，我们就可以点击 <code>commit</code> 按钮完成代码提交。</p>
<p></p>
<ol start="2">
<li><strong>工具栏按钮</strong></li>
</ol>
<p>同样的，我们也可以通过工具栏中的按钮进行提交，点击该按钮后，出现的界面应该和通过快捷键提交方式的界面一致。</p>
<p></p>
<h2> 推送代码</h2>
<p>提交代码后，只是将代码提交到了本地缓冲区，要真正提交到远程代码仓库中，还需要我们进行推送，这里同样有多种方式进行推送。</p>
<ol>
<li><strong>快捷键</strong></li>
</ol>
<p>通过快捷键 <code>Ctrl + Shift + K</code>，我们可以打开如下界面，此时我们只要选中我们所要提交的记录，然后点击右下方的 <code>Push</code> 按钮即可。</p>
<p></p>
<ol start="2">
<li><strong>工具栏按钮</strong></li>
</ol>
<p>通过工具栏按钮，我们同样进行推送工作，点击如下图中的按钮后，出现的界面应该和通过快捷键推送的界面一致。</p>
<p></p>
<ol start="3">
<li><strong>鼠标右键</strong></li>
</ol>
<p>通过在项目上点击鼠标右键，然后选择 <code>Git -&gt; Push</code>，同样可以进行我们的推送工作。</p>
<p></p>
<ol start="4">
<li><strong>提交的同时进行推送</strong></li>
</ol>
<p>可能在提交时，大家会发现左下角除了 <code>Commit</code> 按钮之外，还存在一个 <code>Commit and Push</code> 按钮。通过点击该按钮，我们就可以在提交的同时弹出推送解码，然后点击需要推送的记录，点击右下方的 <code>Push</code> 按钮即可。</p>
<h2> 分支管理</h2>
<p>一般来说，我们的项目肯定是有多个分支的，假设我们此时要在 IDEA 切换分支，该怎么办呢？</p>
<p>此时就需要关注下 IDEA 底部的状态栏了，在这里我们不仅可以切换不同分支，还能进行新建分支、Checkout 分支代码、Compare 分支代码、<code>Rebase</code>、<code>Merge</code>、<code>Pull</code> 等一系列操作。</p>
<p></p>
<h2> 总结</h2>
<p>好了，以上就是本文的所有内容了，主要从 Git 安装及配置、Github 设置、拉取远程代码、更新、提交、推送代码、分支管理等几方面给大家介绍了如何在 IntelliJ IDEA 中使用 Git，希望能对大家有所帮助。</p>
<p>同时，大家如果有任何的疑问，还可以在评论区畅所欲言，我将在看到的第一时间进行回复！</p>
]]></content:encoded>
    </item>
    <item>
      <title>不得不知的实用小技巧</title>
      <link>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20220205-idea-tips.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20220205-idea-tips.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">不得不知的实用小技巧</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 人人都说 IDEA 好，但你知道他的强大之处在哪儿么？今天就来看看，增进日常开发效率的 IDEA 小技巧。 代码编辑 复制 &amp;amp; 粘贴 我们知道，最常用的复制粘贴是通过 Ctrl + C/V，但如果要针对复制历史进行粘贴，此时在 IDEA 中可以通过 Ctrl + Shift + V 来进行自主选择自己想要粘贴的内容；</description>
      <category>IDEA 教程</category>
      <pubDate>Sat, 05 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>人人都说 IDEA 好，但你知道他的强大之处在哪儿么？今天就来看看，增进日常开发效率的 IDEA 小技巧。</p>
<h2> 代码编辑</h2>
<h3> 复制 &amp; 粘贴</h3>
<p>我们知道，最常用的复制粘贴是通过 <code>Ctrl + C/V</code>，但如果要针对复制历史进行粘贴，此时在 IDEA 中可以通过 <code>Ctrl + Shift + V</code> 来进行自主选择自己想要粘贴的内容；</p>
<p></p>
<p>同时，在 IDEA 中，默认粘贴时是会对代码自动格式化的。如果我们不想让它自动格式化，那么此时可以利用快捷键 <code>Ctrl + Alt + Shift + V</code> 进行粘贴。或者通过右键菜单，选择 <code>Paste as Plain Text</code> 进行粘贴；</p>
<p></p>
<h3> 格式化代码</h3>
<p>要自动进行格式化，我们可以先全选 <code>Ctrl + A</code> 或者选中你所要格式化的部分，然后利用快捷键 <code>Ctrl + Alt + L</code> 进行格式化；</p>
<h3> 剪切和复制一行或多行</h3>
<p>剪切一行时，将鼠标光标移动到所要剪切的行，然后利用快捷键 <code>Ctrl + X</code> 进行剪切即可；</p>
<p>要复制一行，将鼠标光标移动到所要复制的行，然后利用快捷键 <code>Ctrl + D</code> 进行复制即可；</p>
<p>要复制多行，将所要复制的多行行进行选中，然后利用快捷键 <code>Ctrl + D</code> 进行复制即可；</p>
<h3> 上下移动一行或多行</h3>
<p>上下移动一行时，将鼠标光标放在需要移动的行，然后通过快捷键 <code>Ctrl + Shift + 向上/向下</code> 进行快速移动；</p>
<p>上下移动多行时，选中需要需要移动的多行，然后通过快捷键 <code>Ctrl + Shift + 向上/向下</code> 进行快速移动；</p>
<h2> 快速跳转</h2>
<h3> 根据行号定位</h3>
<p>通过快捷键 <code>Ctrl + G</code>，然后输入所要跳转的行，快速跳转到对应行。</p>
<p></p>
<h3> Tab 切换</h3>
<p>如果我们打开了多个文件，要想在不同文件之间快速切换，除了用鼠标点击对应文件标签之外，还可以通过快捷键 <code>Alt + 左/右</code> 进行 Tab 的快速切换。</p>
<h3> 查看最近浏览的文件列表</h3>
<p>通过快捷键 <code>Ctrl + E</code>，能快速打开我们最近浏览的文件列表；</p>
<p></p>
<h3> 快速打开文件所在文件夹</h3>
<p>要打开文件所在文件夹，一般是通过选中文件，然后鼠标右键选中 <code>Show in Explorer</code> 即可；</p>
<p></p>
<h2> 快速查找与替换</h2>
<h3> 内容查找与替换</h3>
<ul>
<li>
<p><strong>单个文件</strong></p>
<p>针对单个文件，可以用快捷键 <code>Ctrl + F</code> 进行查找，快捷键 <code>Ctrl + R</code> 进行替换；</p>
</li>
<li>
<p><strong>全局文件</strong></p>
<p>针对全局查找，用 <code>Ctrl + Shift+ F</code>，而针对全局替换，则可以使用 <code>Ctrl + Shift + R</code>；</p>
</li>
</ul>
<p></p>
<p></p>
<h3> 文件查找</h3>
<p>要快速查找文件，可以通过 <code>Ctrl + Shift+ N</code> 来进行查找；</p>
<p></p>
<h3> 查找菜单或操作</h3>
<p>通过 <code>Ctrl + Shift + A</code> 快捷键，然后就能通过关键字来查找我们所需要的菜单和操作；</p>
<p></p>
<h3> 万能查找</h3>
<p>通过双击两次 <code>Shift</code>，来实现万能查找，既可以实现文件查找，也可以实现菜单、操作查找，但是要注意的是它不能进行文件内容查找；</p>
<p></p>
<h3> 注意</h3>
<p>其实在 IDEA 的新版本中，文件查找、菜单或操作查找、万能查找都集成到了一起，所以我们只需要记住其中一种启动方式即可！</p>
<h2> 总结</h2>
<p>以上就是有关于 IDEA 使用中的一些提升效率的小技巧了，如果你还没有用过，那就赶紧试验用起来吧 ~</p>
<p>最后，创作不易，如果你觉得本文对你有所帮助，那就帮忙点个赞再走吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>创建 Java 入门应用</title>
      <link>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20220206-java-quick-start-with-idea.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20220206-java-quick-start-with-idea.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">创建 Java 入门应用</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 本篇文章中，我们将学习如何使用 IDEA 来创建、运行并打包我们的第一个 Hello World! Java 程序。通过阅读该教程，希望大家能对如何使用 IDEA 来创建、运行并打包 Java 程序有一个简单的了解，熟悉一下 IDEA 的一些简单使用技巧，去感受 IDEA 为我们开发者所带来的便利，接下来我们就来具体看看具体的创建、运行以及打包过程。</description>
      <category>IDEA 教程</category>
      <pubDate>Sun, 06 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>本篇文章中，我们将学习如何使用 IDEA 来创建、运行并打包我们的第一个 <code>Hello World!</code> Java 程序。通过阅读该教程，希望大家能对如何使用 IDEA 来创建、运行并打包 Java 程序有一个简单的了解，熟悉一下 IDEA 的一些简单使用技巧，去感受 IDEA 为我们开发者所带来的便利，接下来我们就来具体看看具体的创建、运行以及打包过程。</p>
<h2> 创建一个 Java 项目</h2>
<p>首先，我们来看看，如何利用 IDEA 来创建一个 Java 项目，以下是具体的创建过程。</p>
<ol>
<li>打开 IDEA 主界面，然后点击 <code>New Project</code>。</li>
</ol>
<p></p>
<ol start="2">
<li>接着选中左侧的 <code>Java</code> 选项，然后设置项目的 <code>JDK</code>，这里如果你事先安装好了 <code>JDK</code>，一般 IDEA 会自动检测出来，如果没有检测出来，那么选中 <code>Add JDK …</code>，然后去找你所安装 <code>JDK</code> 的路径即可，最后则是选择最下方的 <code>Next</code>。</li>
</ol>
<p></p>
<ol start="3">
<li>选择是否从模板创建，默认 IDEA 自带有模板，如果你要基于改模板创建，那么就勾选 <code>Create project from template</code>，默认我们不勾选，则是创建一个空项目，这里直接点击 <code>Next</code> 进入下一步即可。</li>
</ol>
<p></p>
<ol start="4">
<li>设置项目名以及项目存放路径，这里可以根据自己的需要来自定义，我们这里以 <code>HelloWolrd</code> 为示例，设置好项目名和项目存放路径后直接 <code>Finish</code> 即可。</li>
</ol>
<p></p>
<ol start="5">
<li>这时候我们的项目就创建好了，创建好项目结构如下图所示。</li>
</ol>
<p></p>
<h2> 编写代码</h2>
<p>虽然我们的项目创建好了，但是里边啥都没有，这时候我们就需要来编写我们的代码了。</p>
<ol>
<li>首先，我们在项目工具窗口鼠标右击 <code>src</code> 文件夹，然后选择 <code>New</code>，接着选择 <code>Java Class</code>（也可以直接使用快捷键 <code>Alt + Insert</code>）。</li>
</ol>
<p></p>
<ol start="2">
<li>接着在 <code>Name</code> 域输入 <code>com.cunyu1943.helloworld.HelloWorld</code>，然后回车，接着 <code>com.cunyu1943.hellowold</code> 包和 <code>HelloWorld</code> 类就创建好了。</li>
</ol>
<p></p>
<p></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>然后输入 <code>main</code> 并选择 <code>main()</code> 方法的声明，接着在 <code>main()</code> 方法中输入如下打印 <code>Hello World!</code> 的代码。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 编译并运行项目</h2>
<p>代码写好之后，我们先编译下代码，选择工具栏中的编译按钮（也可以使用快捷键 <code>Ctrl + F9</code>），项目就会自动进行编译。</p>
<p></p>
<p>编译如果没有出错，那我们就可以接着运行项目了。点击 <code>main()</code> 方法之前的绿色三角箭头，项目就会运行起来了（也可以使用快捷键 <code>Ctrl + Shift + F10</code>。</p>
<p></p>
<p>或者点击工具栏中的绿色三角箭头即可运行（或者使用快捷键 <code>Shift + F10</code>），不过此时运行的是整个项目，而上面的方法则是只运行当前类中的主方法。</p>
<p></p>
<p>然后就在控制台就可以看到我们程序的输出了。</p>
<p></p>
<h2> 打包项目为 JAR 应用</h2>
<p>依次点击 <code>File -&gt; Project Structure</code>，进入项目结构（或者使用快捷键 <code>Ctrl + Shift + Alt + S</code>），然后进入选中 <code>Project Settings -&gt; Artifacts</code>。</p>
<p></p>
<p>点击左上角的 <code>+</code>，然后选中 <code>JAR -&gt; From modules with dependencies</code>，接着会进入 <code>Create JAR from Modules</code>，将 <code>Main Class</code> 设置为刚才的 <code>HelloWolrd</code>，最后点击 <code>ok</code> 即可。</p>
<p></p>
<p></p>
<p></p>
<p>确定并 <code>apply</code> 之后，此时项目打包就配置好了，然后选择菜单栏中的 <code>Build -&gt; Build Artifacts</code>，然后点击 <code>HelloWorld:jar</code> 并选择 <code>Build</code>，然后等待打包完成即可。</p>
<p></p>
<p>接着在我们项目的 <code>out -&gt; artifacts</code> 目录下，就可以找到 <code>HelloWorld.jar</code> 了，此时我们项目的打包工作也完成了。</p>
<p></p>
<h2> 运行 JAR 应用</h2>
<p>既然我们把项目打包了，那这个时候我们就不需要再在 IDEA 中就能运行我们的项目。找到我们打包好的 <code>HelloWorld.jar</code>，然后在控制台中运行如下命令即可。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到同样打印出了 <code>Hello Wolrd!</code>，说明我们项目打包成功，而且也将其顺利运行。</p>
<p></p>
<h2> 总结</h2>
<p>今天的内容就到此结束了，本文主要讲了如何利用 IDEA 来创建、编译、运行、打包我们的 Java 项目。如果你有更多关于 IDEA 使用的小技巧，欢迎在评论区留言。</p>
<p>创作不易，如果你觉得本文对你有所帮助，那就来一波点赞关注吧。</p>
]]></content:encoded>
    </item>
    <item>
      <title>连接 MySQL 失败解决方案</title>
      <link>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20220207-connect-mysql-fail.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20220207-connect-mysql-fail.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">连接 MySQL 失败解决方案</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 此文章用于记录自己在 IDEA 中使用 MySQL 开发过程中所遇到的问题及如何修复。 Bug 及修复 使用正确的用户及密码连接数据库时，但却连不上 Bug 重现</description>
      <category>IDEA 教程</category>
      <pubDate>Mon, 07 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>此文章用于记录自己在 IDEA 中使用 MySQL 开发过程中所遇到的问题及如何修复。</p>
<h2> Bug 及修复</h2>
<h3> 使用正确的用户及密码连接数据库时，但却连不上</h3>
<ol>
<li><strong>Bug 重现</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>原因</strong></li>
</ol>
<p>最后发现是因为我的密码是以 <code>0</code> 开头的数字组合，所以会导致连接失败；</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><strong>解决方案</strong></li>
</ol>
<p>将密码用 <code>“”</code> 括起来即可；</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Tomcat 控制台乱码解决方法</title>
      <link>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20220208-tomcat-console-error-code.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20220208-tomcat-console-error-code.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">Tomcat 控制台乱码解决方法</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 当我们在 Windows 下使用 IntelliJ IDEA + Tomcat 运行自己的 Web 程序时，常会遇见控制台 Tomcat 中文乱码的情况，在网上试了很多方法，最终找到成功解决的方法，现记录如下； 解决方法</description>
      <category>IDEA 教程</category>
      <pubDate>Tue, 08 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>当我们在 Windows 下使用 IntelliJ IDEA + Tomcat 运行自己的 Web 程序时，常会遇见控制台 Tomcat 中文乱码的情况，在网上试了很多方法，最终找到成功解决的方法，现记录如下；</p>
<h2> 解决方法</h2>
<h3> IntelliJ IDEA 及项目配置</h3>
<p>将 IntelliJ IDEA 和项目均配置为 <code>UTF-8</code> 编码；</p>
<p></p>
<p></p>
<h3> IntelliJ IDEA 启动项</h3>
<ul>
<li>在 IntelliJ IDEA 安装目录下，进入 <code>./bin</code> 目录，找到 <code>idea.exe.vmoptions</code> （ 32 位）或 <code>idea64.exe.vmoptions</code> ( 64 位)，根据自己所使用的版本进行修改，在文件最后加入如下配置（如果不确定自己是哪个版本，可以对两个文件均修改）；</li>
</ul>
<div class="language-plain line-numbers-mode" data-ext="plain"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>或者直接在 IntelliJ IDEA 中直接进行修改；</li>
</ul>
<p></p>
<p></p>
<h3> Tomcat 配置</h3>
<p>对 Tomcat 启动脚本 <code>catalina.bat</code> 中的环境变量 <code>JAVA_OPTIONS</code> 追加如下参数；</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>经过上述配置之后，就成功解决 Tomcat 中文乱码问题。</p>
<p>如果你也遇到过上述问题，那就赶紧去试试我这种方法，看能不能解决吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>IDEA 代码提交前流程及提交日志模板化</title>
      <link>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20221124-code-commit.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20221124-code-commit.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">IDEA 代码提交前流程及提交日志模板化</source>
      <description>作者：村雨遥 博客：JavaPark 原文：https://mp.weixin.qq.com/s/Mhc7tygE6Fl5_3h8mz7A9g 吾生也有涯，而知也无涯。</description>
      <category>IDEA 教程</category>
      <pubDate>Thu, 24 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/Mhc7tygE6Fl5_3h8mz7A9g" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Mhc7tygE6Fl5_3h8mz7A9g</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>在开发大型项目时，通常都是由团队来进行开发。此时，每个人有每个人的代码编写风格和提交习惯，如果放任自由发挥，那么代码质量和代码提交日志就难免风格各异，导致项目代码质量难以保持统一。针对这一问题，往往公司在以项目组进行开发时，在进入正式编码前，都会制定一个标准的流程，用来规范代码提交前的流程，同时对提交日志进行规范化。从而最大程度上保持项目的代码风格统一，提高代码可读性。</p>
<p>以下就给大家介绍一下最常见的代码提交前的规范化流程，以及如何模板化我们的代码提交日志。</p>
<h2> 代码提交前检查流程</h2>
<h3> 推荐插件</h3>
<h4> p3c</h4>
<ul>
<li><strong>下载地址</strong></li>
</ul>
<blockquote>
<p><a href="https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines/versions" target="_blank" rel="noopener noreferrer">https://plugins.jetbrains.com/plugin/10046-alibaba-java-coding-guidelines/versions</a></p>
</blockquote>
<ul>
<li><strong>安装及使用</strong></li>
</ul>
<blockquote>
<p><a href="https://github.com/alibaba/p3c/wiki/IDEA%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%96%87%E6%A1%A3" target="_blank" rel="noopener noreferrer">https://github.com/alibaba/p3c/wiki/IDEA插件使用文档</a></p>
</blockquote>
<h4> SonarLint</h4>
<ul>
<li><strong>下载地址</strong></li>
</ul>
<blockquote>
<p><a href="https://plugins.jetbrains.com/plugin/7973-sonarlint/versions" target="_blank" rel="noopener noreferrer">https://plugins.jetbrains.com/plugin/7973-sonarlint/versions</a></p>
</blockquote>
<ul>
<li><strong>安装及使用</strong></li>
</ul>
<blockquote>
<p><a href="https://www.cnblogs.com/cocoxu1992/p/11336723.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/cocoxu1992/p/11336723.html</a></p>
</blockquote>
<h3> 提交前的配置项</h3>
<p></p>
<h4> Alibaba Code Guidelines</h4>
<p>安装 <code>p3c</code> 插件后，才会有该选项。在提交代码改动之前，如果勾选此选项，则会去扫描代码中不符合 <code>p3c</code> 规则中的代码，然后弹窗提示存在可疑代码，此时可以到控制台查看存疑的代码。然后只需要根据控制台中提示的去修改代码即可。</p>
<ul>
<li>代码存疑弹窗
</li>
<li>控制台中存疑的代码提示
</li>
</ul>
<h4> Reformat code</h4>
<p>提交前格式化代码，假设我们在代码中写了如下代码：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果我们在提交前勾选了此选项，提交时 <code>IDEA</code> 就会自动对此行代码进行格式化，变成以下的格式，从而大大提高代码可读性。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4> Rearrange code</h4>
<p>重新编排代码，IntelliJ IDEA 支持各种复杂的编排设置选项，当我们在 IDEA 中设置好了编码功能之后，这里就可以尝试勾选这个进行自动编排。不过一般没有去做特定的编码功能设置，因此建议不勾选。</p>
<h4> Optimize imports</h4>
<p>优化导包（删除无用的导包）。假如在写代码时一开始引入了 <code>Scanner</code> 包，但后续又没有用到，此时勾选此选项 <code>IDEA</code> 就会自动将引入的 <code>Scanner</code> 包删除。</p>
<ul>
<li>勾选前</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>勾选后</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> Analyze code</h4>
<p>勾选该选项后，<code>IDEA</code> 会用默认的配置文件去扫描我们所写代码的质量。如果扫描发现问题，则会弹出以下类似的弹窗，此时只要点击 <code>Review</code> 就可以对代码中存在问题的地方进行 <code>Review</code>，根据所给提示对代码进行修改。
</p>
<p></p>
<h4> Check TODO</h4>
<p>检查代码中存在 <code>@todo</code> 注解的地方并给出提示。一般在代码中添加 <code>@todo</code> 表示此时代码中还有未完成的功能，此时可以提醒你去补全还未完成的功能代码。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们新增的代码如上，此时如果在提交点前勾选 <code>Check TODO</code> 选项，就会弹窗提示。</p>
<p></p>
<p>此时点击 <code>Review</code> 就可以去查看对应分析结果，然后去找到对应 <code>todo</code> 所在的代码对它进行补充。
</p>
<h4> Cleanup</h4>
<p>清除下版本控制系统，去掉一些版本控制系统的错误信息，主要针对 SVN，Git 不适用，一般建议不勾选。</p>
<h4> Update copyright</h4>
<p>如果代码需要版权标识时，需要提前在 <code>IDEA</code> 中配置相关版权信息。配置的流程 <code>settings-&gt;Editor-&gt;copyright-&gt;copyright profiles</code>，然后添加类似于以下的版权信息：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成后，当提交你的代码更改时，勾选该选项可以检查更新版权，这样提交后更改的文件将有它们的版权更新。</p>
<h4> Perform SonarLint analysis</h4>
<p>安装 <code>SonarLint</code> 插件后才会有的选项。勾选该选项后，<code>SonarLint</code> 会对代码进行检查，发现代码中的一些 bug、漏洞、异味。然后根据控制台中的提示信息对代码进行修改后再次提交，能够一定程度上提高代码质量。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<h2> 提交日志模板化（Git Commit Template）</h2>
<h3> 概述</h3>
<p>通过使用该插件，能够规范在使用 <code>IDEA</code> 提交代码时的注释说明。通过模板化后的日志，便于快速查找，回溯之前的工作。</p>
<h3> 下载安装</h3>
<ol>
<li><strong>下载地址</strong></li>
</ol>
<blockquote>
<p><a href="https://plugins.jetbrains.com/plugin/9861-git-commit-template/versions" target="_blank" rel="noopener noreferrer">https://plugins.jetbrains.com/plugin/9861-git-commit-template/versions</a></p>
</blockquote>
<ol start="2">
<li><strong>安装</strong></li>
</ol>
<blockquote>
<p><a href="https://blog.csdn.net/m0_46636892/article/details/122116712" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/m0_46636892/article/details/122116712</a></p>
</blockquote>
<h3> 使用教程</h3>
<h4> 提交信息的模板</h4>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要分为三部分：</p>
<ul>
<li>Head（<code>&lt;type 类型&gt;(&lt;scope 可选作用域&gt;): &lt;subject 描述&gt;</code>）</li>
<li>Body（<code>&lt;body 可选的正文&gt;</code>）</li>
<li>Footer（<code>&lt;footer 可选的脚注&gt;</code>）</li>
</ul>
<h4> Head 参数说明</h4>
<ol>
<li><strong>type（必填）</strong></li>
</ol>
<table>
<thead>
<tr>
<th>类型</th>
<th style="text-align:left">英文</th>
<th>中文说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>feat</code></td>
<td style="text-align:left"><code>A new feature</code></td>
<td>新功能</td>
</tr>
<tr>
<td><code>fix</code></td>
<td style="text-align:left"><code>A bug fix</code></td>
<td><code>bug</code> 修复</td>
</tr>
<tr>
<td><code>docs</code></td>
<td style="text-align:left"><code>Documention only</code></td>
<td>文档注释</td>
</tr>
<tr>
<td><code>style</code></td>
<td style="text-align:left"><code>Changes that do not affect the meaning of the code(white-space、formatting、missing semi-colons、etc)</code></td>
<td>不影响代码运行的变动（格式化、去空格等）</td>
</tr>
<tr>
<td><code>refactor</code></td>
<td style="text-align:left"><code>A code change that neither fixes a bug nor adds a feature</code></td>
<td>重构、优化（既不增加新功能，也不是修复 <code>bug</code>）</td>
</tr>
<tr>
<td><code>perf</code></td>
<td style="text-align:left"><code>A code change that improves performance</code></td>
<td>性能优化</td>
</tr>
<tr>
<td><code>test</code></td>
<td style="text-align:left"><code>Adding missing tests or correcting existing tests</code></td>
<td>增加测试</td>
</tr>
<tr>
<td><code>build</code></td>
<td style="text-align:left"><code>Changes that affect the build system or external dependencies</code></td>
<td>影响生成构建或外部依赖项的更改</td>
</tr>
<tr>
<td><code>ci</code></td>
<td style="text-align:left"><code>Changes to our CI configuration files and scripts</code></td>
<td>对配置项配置文件和脚本的更改</td>
</tr>
<tr>
<td><code>chore</code></td>
<td style="text-align:left"><code>Other changes that don't modify src or test files</code></td>
<td>其他不影响源码和测试的改动</td>
</tr>
<tr>
<td><code>revert</code></td>
<td style="text-align:left"><code>Reverts a previous commit</code></td>
<td>回退版本</td>
</tr>
</tbody>
</table>
<ol start="2">
<li><strong>scope（可选）</strong></li>
</ol>
<p>用户说明此次提交所影响的范围，常见的有数据层、控制层、视图层等，这个需要根据自己的项目来具体定义。</p>
<ol start="3">
<li><strong>subject（必填）</strong></li>
</ol>
<p>此次提交的概括，一般建议不超过 50 字，结尾不加任何标点符号。</p>
<h4> Body 参数说明</h4>
<p>对此次提交的详细描述，可以分为多行，每行建议控制在 72 个字以内，以条目的形式给出，范例如下：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4> Footer 参数说明</h4>
<p>主要用于两种情况：</p>
<ol>
<li>不兼容的变动，对应具体使用部分图中的 <code>Breaking changes</code>.</li>
<li>关闭 <code>Issue</code>，对应具体使用部分图中的 <code>Closed issues</code>.</li>
</ol>
<h4> 具体使用</h4>
<ol>
<li>安装完成后，在代码提交界面会有以下图标，点击进行参数配置。</li>
</ol>
<p></p>
<ol start="2">
<li>根据自己的需求进行相关配置。</li>
</ol>
<p></p>
<p></p>
<ol start="3">
<li>完成配置之后，点击右下角的 <code>ok</code>，就会自动根据模板生成提交的具体信息，最后进行提交即可，一个自动生成的具体示例如下：</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>可能屏幕前的你所在的项目组并没有这么多的流程和提交规范，但养成良好的编码习惯总归是好的。代码不仅仅是写给自己看的，一个高手不仅仅是能够实现复杂的功能，能把代码编写得能让人看着简洁清爽也是一种艺术。</p>
<p>好了，今天的文章到此就结束了，感谢大家赏脸阅读。对于文中如果有描述不清的地方，或者有什么建议我改进的建议，欢迎与我讨论交流。</p>
]]></content:encoded>
    </item>
    <item>
      <title>IDEA 破解图文教程</title>
      <link>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20221126-idea-crack.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/dev-tools/idea/20221126-idea-crack.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">IDEA 破解图文教程</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 之前的文章中，我已经介绍过了如何安装 IDEA，并且也给出了如何白嫖 IDEA 旗舰版的免费使用权。不过想白嫖并不容易，得需要有一个长期可用的教育邮箱。</description>
      <category>IDEA 教程</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>之前的文章中，我已经介绍过了如何安装 <code>IDEA</code>，并且也给出了如何白嫖 <code>IDEA</code> 旗舰版的免费使用权。不过想白嫖并不容易，得需要有一个长期可用的教育邮箱。</p>
<p>那有的朋友就很烦了，又想用旗舰版，但又没有长期可用的教育邮箱，该怎么破？为了解决大家这个烦恼，今天进给大家来分享一个 <code>IDEA</code> 的破解激活教程。手把手教学，仅需几分钟就能搞定。</p>
<blockquote>
<p><strong>前排提示，条件允许的情况下，建议大家有限购买正版！此外，本教程中的破解补丁收集自网络，仅供个人学习使用，希望大家低调使用。</strong></p>
<p><strong>另外，文章一段时间后可能会被封禁，大家可以把 <a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">https://cunyu1943.github.io/JavaPark</a> 加入浏览器书签，以便不时之需。</strong></p>
<p><strong>如有侵权，请联系作者删除。</strong></p>
</blockquote>
<h2> 开始激活</h2>
<h3> 下载激活脚本</h3>
<p>先去下载好破解补丁</p>
<blockquote>
<p><strong>🏁 注意：激活补丁文末获取！</strong></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>计算机系统</title>
      <link>https://cunyu1943.site/JavaPark/md/exam/software-developer/20221113-computer-system.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/exam/software-developer/20221113-computer-system.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">计算机系统</source>
      <description>CPU 计算机系统硬件组成 计算机系统是由软硬件共同组成，协同运行程序。计算机的基本硬件由 运算器、控制器、存储器、输入设备、输出设备 5 大部件组成。其中，运算器和控制器等部件集成到一起的部分称为中央处理器（CPU）。CPU 是硬件系统的核心，用于加工处理各种数据，能完成各种算术、逻辑运算以及控制功能。 其中，存储器是计算机系统中的记忆设备，分为 内部存储 和 外部存储。内部存储速度快，但容量小，一般用来临时存放程序、数据及中间结果。而外部存储容量大，但速度慢，能长期保存程序和数据。</description>
      <category>软件设计师</category>
      <pubDate>Sun, 13 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> CPU</h2>
<h3> 计算机系统硬件组成</h3>
<p>计算机系统是由软硬件共同组成，协同运行程序。计算机的基本硬件由 <strong>运算器、控制器、存储器、输入设备、输出设备</strong> 5 大部件组成。其中，运算器和控制器等部件集成到一起的部分称为中央处理器（<code>CPU</code>）。<code>CPU</code> 是硬件系统的核心，用于加工处理各种数据，能完成各种算术、逻辑运算以及控制功能。</p>
<p>其中，存储器是计算机系统中的记忆设备，分为 <strong>内部存储</strong> 和 <strong>外部存储</strong>。内部存储速度快，但容量小，一般用来临时存放程序、数据及中间结果。而外部存储容量大，但速度慢，能长期保存程序和数据。</p>
<p>输入和输出设备共称为外部设备，输入设备用于输入原始数据及各种命令，最常见的就是键盘，而输出设备则用于输出计算机运行结果，最常见的就是屏幕。</p>
<h3> CPU 功能</h3>
<p><code>CPU</code> 是计算机系统的核心部件，负责获取程序指令、对指令译码并加工。其功能主要分为以下 4 点：</p>
<ol>
<li><strong>程序控制</strong>：<code>CPU</code> 通过执行指令来控制程序的执行顺序。</li>
<li><strong>操作控制</strong>：一条指令功能的实现需要若干操作信号配合完成，<code>CPU</code> 产生每条指令的操作信号并将操作信号送往对应部件，控制相应部件按指令功能要求进行操作。</li>
<li><strong>时间控制</strong>：指令执行过程中操作信号的出现时间、持续时间以及出现的时间顺序都需要严格控制。</li>
<li><strong>数据处理</strong>：<code>CPU</code> 对数据进行算术和逻辑运算等方式进行加工处理，然后我们就可以利用这些加工后的结果。因此，对数据的加工处理也是 <code>CPU</code> 最根本的任务。</li>
</ol>
<p>除开以上 4 点之外，<code>CPU</code> 还需要对系统内外部的中断（异常）做出响应，进行相应处理。</p>
<h3> CPU 组成</h3>
<p><code>CPU</code> 主要由运算器、控制器、寄存器组以及内部总线等部件组成。</p>
<p></p>
<h2> 运算器</h2>
<p>运算器由 <strong>算术逻辑单元（ALU）</strong>、<strong>累加寄存器</strong> 、<strong>数据缓冲寄存器</strong>、<strong>条件寄存器</strong> 共同组成。它是数据加工处理部件，用于完成计算机的各种算术逻辑运算。相对控制器而言，运算器接受控制器的命令而进行动作，即运算器所进行的全部操作均由控制器发出的控制信号来指挥，因此它是执行部件。</p>
<p>运算器主要功能如下：</p>
<ol>
<li>执行所有算术运算，如加、减、乘、除等。</li>
<li>执行所有的逻辑运算并进行逻辑测试，如与、或、非等。</li>
</ol>
<p>此外，运算器的各组成部件功能如下：</p>
<ol>
<li><strong>算术逻辑单元（ALU）</strong>：负责处理数据，实现对数据的算术逻辑运算。</li>
<li><strong>累加寄存器（AC）</strong>：又叫累加器，是一个通用寄存器。当算术逻辑单元执行算术逻辑运算时，为 <code>ALU</code> 提供一个工作区。如，执行一个甲酸运算器，先将一个加数取出暂存在 <code>AC</code> 中，再从内存储器中取出另一个加数，然后同 <code>AC</code> 的内容相加，并将所得结果送回 <code>AC</code>。运算的结果是放在累加器中的，运算器中至少要有一个累加寄存器。</li>
<li><strong>数据缓存寄存器（DR）</strong>：对内存储器进行读/写时，用 <code>DR</code> 暂存有内存储器读/写的一套指令或一个数据中，将不同时间段内读/写的数据分隔。<code>DR</code> 的主要作用是 <strong>作为 <code>CPU</code> 和内存、外部设备间数据传送的中转站；作为 <code>CPU</code> 和内存、外围设备之间的操作速度上的缓冲；在单累加器结构的运算器中，数据缓冲寄存器还可以兼作为操作数寄存器</strong>。</li>
<li><strong>状态条件寄存器（PSW）</strong>：保存由算术指令和逻辑指令运行或测试的结果建立的各种条件码内容，主要分为状态标志和控制标志。这些标志通常分别由 1 位出饭前保存，保存了当前指令执行完成后的状态。通常来说，一个算术操作产生一个运算结果，而一个逻辑操作产生一个判决。</li>
</ol>
<h2> 控制器</h2>
<p>顾名思义，所谓控制器，就是用来控制整个 <code>CPU</code> 的工作，决定了计算机运行过程的自动化。它不仅要保证程序的正确执行，还要能够处理异常事件。一般包括指令控制逻辑、时序控制逻辑、总线控制逻辑、中断控制逻辑等。</p>
<p>指令控制逻辑要完成<strong>取指令</strong>、<strong>分支指令</strong>和<strong>执行指令</strong>操作，其过程分为<strong>取指令、指令译码、按指令操作码执行、形成下一条指令地址</strong>等步骤。</p>
<ol>
<li><strong>指令寄存器（IR）</strong>：当 <code>CPU</code> 执行一条指令式，先将其从存储器读取到缓冲寄存器中，再送入 <code>IR</code> 暂存，指令译码器根据 <code>IR</code> 内容产生各种未操作指令，控制其他组成部件工作，完成所需功能。</li>
<li><strong>程序计数器（PC）</strong>：<code>PC</code> 具有<strong>寄存信息和计数</strong>两种功能，又叫指令计数器。程序执行分两种情况，一种是顺序执行，一种是转移执行。程序开始执行前，将程序的起始地址送入 <code>PC</code>，该地址在程序加载到内存时确认，因此 <code>PC</code> 的内容即为程序第一条指令的地址。执行指令时，<code>CPU</code> 自动修改 <code>PC</code> 中的内容，一遍使其保持的总是将要执行的下一条指令的地址。由于大多指令都是按顺序执行，所以修改的过程常只是简单地对 <code>PC</code> 加 <code>1</code>。当遇到转移指令时，后继指令的地址根据当前指令的地址加上一个向前或向后转移的位移量得到，或者根据转移指令给出的直接转移的地址得到。</li>
<li><strong>地址寄存器（AR）</strong>：<code>AR</code> 保存当前 <code>CPU</code> 所访问的内存单元的地址。由于内存和 <code>CPU</code> 存在操作速度上的差异，因此需要用 <code>AR</code> 保存地址信息，直到内存中的读/写操作完成。</li>
<li><strong>指令译码器（ID）</strong>：指令包含操作码和地址码，为了能执行任何给定的指令，必须对操作码进行分析，以便识别所完成的操作。指令译码器就是对指令中的操作码字段进行分析解释，识别该指令规定的操作，向操作控制器发出具体的控制信号，控制各部件工作，完成所需功能。</li>
</ol>
<p>总结而言，<strong>指令寄存器（IR）存放的是从内存中获取的指令，类似于中间站，用于存放指令。而程序计数器（PC）则存放的是指令的地址，同时还具有计数的功能。地址寄存器（AR）存放的是 <code>CPU</code> 访问内存单元的地址。指令译码器（ID）就是把操作码解析为对应的指令操作</strong>。</p>
<h2> 计算机中的基本单位</h2>
<table>
<thead>
<tr>
<th>单位</th>
<th>表示</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>比特</td>
<td><code>bit</code></td>
<td>最小的数据单位</td>
</tr>
<tr>
<td>字节</td>
<td><code>Byte</code></td>
<td>最小的存储单位，<code>1 Byte = 8 bit</code></td>
</tr>
<tr>
<td>千字节</td>
<td><code>KB</code></td>
<td><code>1 KB = 1024 Byte</code></td>
</tr>
<tr>
<td>兆字节</td>
<td><code>MB</code></td>
<td><code>1 MB = 1024 KB</code></td>
</tr>
<tr>
<td>吉字节</td>
<td><code>GB</code></td>
<td><code>1 GB = 1024 MB</code></td>
</tr>
<tr>
<td>太字节</td>
<td><code>TB</code></td>
<td><code>1 TB = 1024 GB</code></td>
</tr>
</tbody>
</table>
<h2> 进制转换</h2>
<p>计算机中，常见的数据表示有以下几种：</p>
<ol>
<li>二进制，以 <code>B</code> 标识，由 <code>0</code>、<code>1</code> 组成，满 <code>2</code> 则进 <code>1</code> 位。</li>
<li>十进制，以 <code>D</code> 标识，由 <code>0 ~ 9</code> 组成，满 <code>10</code> 则进 <code>1</code> 位。</li>
<li>八进制，以 <code>O</code> 标识。由 <code>0 ~ 7</code> 组成，满 <code>8</code> 则进 <code>1</code> 位。</li>
<li>十六进制，以 <code>H</code> 标识。由 <code>0 ~ 9</code> 以及 <code>A、B、C、D、E</code> 组成，满 <code>16</code> 则进 <code>1</code> 位。</li>
</ol>
<p>一个十六进制的数要用 <code>4</code> 个二进制的数来表示，而一个八进制需要转成对应 <code>3</code> 个二进制。</p>
<h2> 原码、反码、补码、移码</h2>
<p>计算机中，数值是以机器数的形式来表示的，特点是采用了二进制计数法，数的符号用 <code>0</code> 和 <code>1</code> 表示，小数点则银行，表示不占位置，而机器数所对应的实际数值就叫做数的真值。</p>
<p>机器数又分为<strong>有符号数</strong>和<strong>无符号数</strong>。其中，无符号数对应正数，表示在机器数中没有符号位。对于无符号数，如果约定小数点的位置在机器数的最低位之后，则该数为纯整数。如果约定小数点的位置在机器数的最高位之前，那么这个数是纯小数。对于带符号数，机器数的最高位是表示正、负的符号位，其余位则表示数值。</p>
<p>为了方便运算，带符号的机器数可以采用原码、反码、补码等不同编码方式，而这些编码方式就叫做码制。</p>
<h3> 原码</h3>
<p>原码表示法中，最高位是符号位，其中 <code>0</code> 表示正号，<code>1</code> 表示负号，其余的 <code>n - 1</code> 为则表示数值的绝对值。这里要注意 <code>0</code> 比较特殊，它的原码有两种表示形式：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">+</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">原</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">原</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10000000</span></span></span></span></span></p>
<h3> 反码</h3>
<p>同样的，反码表示中，最高位仍然是符号位，<code>0</code> 表示正号，<code>1</code> 表示负号。如果该数是一个正数，那么它的反码和原码相同。而如果该数是一个负数，那么它的反码则是原码除符号位之外的其他位按位取反。<code>0</code> 的反码也有两种表示形式：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">+</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">反</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">反</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11111111</span></span></span></span></span></p>
<h3> 补码</h3>
<p>补码中，最高位为符号位，<code>0</code> 表示正号，<code>1</code> 表示负号。如果一个数是正数，那么它的补码与原码和反码一样。而如果一个数为负数，则补码为反码末位加 <code>1</code>。此时 <code>0</code> 有惟一的编码表示。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">+</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></span></p>
<h3> 移码</h3>
<p>移码的表示与补码有很大关系，它就是将一个数的补码的符号位取反即可。如 <code>+1</code> 的补码为 <code>00000001</code>，那么它的移码为 <code>10000001</code>。</p>
<h3> 注意</h3>
<p>当机器字长为 <code>n</code> 时，此时该机器中各种码制所表示的带符号数的范围如下：</p>
<table>
<thead>
<tr>
<th>码制</th>
<th>定点整数</th>
<th>定点小数</th>
</tr>
</thead>
<tbody>
<tr>
<td>原码</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>反码</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>补码</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>移码</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
</tr>
</tbody>
</table>
<p>在做相关题目时，可以记住以下要点：<strong>当给定一个数的补码求它的原码时，先将这个数补码的反码求出来，然后再求出它反码的补码，此时得到的就是这个数的原码。</strong></p>
<h2> 浮点数</h2>
<p>当机器字长为 <code>n</code> 时，定点数的补码和移码可以表示为 <code>2^n</code> 个数，而其原码和反码只能表示 <code>2^n - 1</code> 个数（<code>0</code> 的表示占了两个编码）。因此定点数能表示的数值范围较小，运算时很容易越界溢出。而浮点数是小数点范围不固定的数，能表示的范围更大。</p>
<p>浮点表示法中，阶码是带符号的纯整数，而位数是带符号的纯小数。浮点数的表示格式如下：</p>
<p></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9747em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span></span></p>
<p>其中 <code>E</code> 称为阶码，<code>F</code> 称为尾数。</p>
<p>一个数的浮点表示不是唯一的。当小数点的位置改变时，阶码也会随之改变，因此一个数可以用多个浮点形式表示。</p>
<p>浮点数所能表示的数值范围主要由阶码决定，而其表示的精度则由尾数决定。为了充分利用尾数来表示更多的有效数字，常采用规格化浮点数。规格化就是将尾数的绝对值限定在 <code>[0.5, 1]</code>。此外，当尾数用补码表示时，需要注意以下问题：</p>
<ol>
<li>若位数 <code>F &gt;= 0</code>，则其规格化的位数形式为 <code>F = 0.1xxx……x</code>，其中 <code>x</code> 既可以为 <code>0</code>，也以为 <code>1</code>，即将尾数限定在 <code>[0.5, 1]</code>。</li>
<li>若尾数 <code>F &lt; 0</code>，则其规格化的尾数形式为 <code>F = 1.0xxx……x</code>，其中 <code>x</code> 可以为 <code>0</code>，也可以为 <code>1</code>，即将限定在 <code>[-1, -0.5]</code>。</li>
</ol>
<p>若浮点数的阶码（包括 <code>1</code> 位阶符）用 <code>R</code> 位的移码表示，尾数（包括 <code>1</code> 位数符）用 <code>M</code> 位的补码表示，则该浮点数的范围为：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0564em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0564em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9191em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8913em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.3064em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0564em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9191em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<h2> 寻址方式</h2>
<p></p>
<p>常用的寻址方式：</p>
<ol>
<li><strong>立即寻址</strong>：操作数包含在指令中。</li>
<li><strong>直接寻址</strong>：操作数存放于内存单元，指令中直接给出操作数所在存储单元的地址。</li>
<li><strong>寄存器寻址</strong>：操作数放在某一寄存器中，指令中给出存放操作数的寄存器名。</li>
<li><strong>寄存器间接寻址</strong>：操作数存放于内存单元，操作数所在存储单元的地址在某个寄存器中。</li>
<li><strong>间接寻址</strong>：指令中给出操作数地址的地址。</li>
<li><strong>相对寻址</strong>：指令地址码给出的是一个偏移量（可正可负），操作数地址等于本条指令的地址加上该偏移量。</li>
<li><strong>变址寻址</strong>：操作数地址等于变址寄存器的内容加偏移量。</li>
</ol>
<p>寻址速度由高到低：<strong>立即寻址</strong> &gt; <strong>寄存器寻址</strong> &gt; <strong>直接寻址</strong> &gt; <strong>寄存器间接寻址</strong> &gt; <strong>间接寻址</strong></p>
<h2> 校验码</h2>
<p>所谓码距，指的是一个编码系统中任意两个合法编码间至少有多少个二进制位不同。</p>
<h3> 奇偶校验码</h3>
<p>奇偶校验是一种简单有效的校验方法，通过在编码中增加一位校验位来使编码中 <code>1</code> 的个数为奇数（奇校验）或偶数（偶校验），从而使码距变为 <code>2</code>。对于奇校验，可以检测代码中奇数位出错的编码，但不能发现偶数位出错的情况，即当合法编码中的奇数位发生错误时，编码中的 <code>1</code> 变成了 <code>0</code> 或者 <code>0</code> 变成 <code>1</code>，则该编码中 <code>1</code> 的个数的奇偶性就发生了变化，从而可以发现错误。</p>
<p>常见的奇偶校验码有三种：<strong>水平奇偶校验码</strong>、<strong>垂直奇偶校验码</strong>、<strong>水平垂直校验码</strong></p>
<p><strong>注意</strong>：奇偶校验码只能检查错误但是不能纠错，而且奇数校验只能检查出代码奇数个出错的编码，而不能检查出偶数个出错的编码。</p>
<h3> 海明码</h3>
<p>海明码由贝尔实验室的 <em>Richard Hamming</em> 设计，一种通过利用奇偶校验性来检错和纠错的校验方法。海明码的构成方法是在数据位之间的特定位置上插入 <code>k</code> 个校验位，通过扩大码距来实现检错和纠错。</p>
<p>假设数据位为 <code>n</code> 位，校验位为 <code>k</code> 位，则 <code>n</code> 和 <code>k</code> 必须满足以下条件：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9382em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p>
<h3> 循环冗余校验码（CRC）</h3>
<p>循环冗余码常用于数据通信领域和磁介质存储系统，利用生成多项式为 <code>k</code> 个数据位产生 <code>r</code> 个校验位来进行编码，其编码长度为 <code>k + r</code>，<code>CRC</code> 的代码格式为：</p>
<p></p>
<p>循环冗余校验码由两部分组成，左边是<strong>信息码（数据）</strong>，右边是<strong>校验码</strong>，如果信息码占 <code>k</code> 位，则校验码占 <code>n - k</code> 位。其中 <code>n</code> 是 <code>CRC</code> 码的字长，所以又叫 <code>(n, k)</code> 码。校验码由信息码产生，校验码位数越多，代码校验能力越强。在求 <code>CRC</code> 编码时，才用的是模 <code>2</code> 运算。模 <code>2</code> 加减运算的规则是按位运算，不发生借位和进位。要注意，当码距为 <code>2</code> 时，<code>CRC</code> 只能检错而不能纠错。</p>
<h2> CISC &amp; RISC</h2>
<table>
<thead>
<tr>
<th></th>
<th>RISC（精简指令集计算机）</th>
<th>CISC（复杂指令集计算机）</th>
</tr>
</thead>
<tbody>
<tr>
<td>指令种类</td>
<td>少、精简</td>
<td>多、复杂</td>
</tr>
<tr>
<td>指令复杂度</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td>指令长度</td>
<td>固定</td>
<td>变化</td>
</tr>
<tr>
<td>寻址方式</td>
<td>少</td>
<td>复杂多样</td>
</tr>
<tr>
<td>译码方式</td>
<td>硬布线控制逻辑（组合逻辑控制器）</td>
<td>微程序控制技术</td>
</tr>
<tr>
<td>通用寄存器数量</td>
<td>多、大量</td>
<td>一般</td>
</tr>
<tr>
<td>流水线技术</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody>
</table>
<h2> 流水线</h2>
<p><strong>吞吐率 = 指令条数 / (一条完整指令的时间 + (n - 1) * 流水线周期)</strong></p>
<p><strong>流水线总共时间 = 一条完整指令的时间 + (n - 1) * 流水线周期</strong></p>
]]></content:encoded>
    </item>
    <item>
      <title>数据的表示</title>
      <link>https://cunyu1943.site/JavaPark/md/exam/software-developer/20221113-data-representation.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/exam/software-developer/20221113-data-representation.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">数据的表示</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 复习到数据表示方面相关的知识，所以在这里做一下记录，也方便大家参考。 什么是 R 进制 对于 R 机制，如果要实现与十进制的转换，则使用 按权展开法，其具体操作为：</description>
      <category>软件设计师</category>
      <pubDate>Sun, 13 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>复习到数据表示方面相关的知识，所以在这里做一下记录，也方便大家参考。</p>
<h2> 什么是 R 进制</h2>
<p>对于 <code>R</code> 机制，如果要实现与十进制的转换，则使用 <strong>按权展开法</strong>，其具体操作为：</p>
<blockquote>
<p>将 <code>R</code> 进制数的每一位数值用 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8491em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span></span></span></span> 的形式表示，即幂底数为 <code>R</code>，指数为 <code>k</code>，<code>k</code> 与该位和小数点间的间距有关。当该位位于小数点左边时，<code>k</code> 则是该位和小数点之间数码的个数；而当该位维语小数点右边时，则 <code>k</code> 是负值，其绝对值为该位和小数点之间数码的个数加 <code>1</code>。</p>
</blockquote>
<p>比如二进制和十进制之间的转换： <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10111.01</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>。</p>
<p>再比如七进制和十进制之间的转换：<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">403.02</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">7</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">7</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">7</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p>
<h2> 进制之间的转换</h2>
<ol>
<li><strong>十进制转二进制</strong></li>
</ol>
<p>使用 <strong>短除法</strong>，比如我们要将 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">100</span></span></span></span> 转换为二进制数，则有如下过程，最终的结果为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1100100</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span>。</p>
<p></p>
<ol start="2">
<li><strong>二进制转八/十六进制</strong></li>
</ol>
<p>假设我们有一个二进制数 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">100010010011</span></span></span></span>，如果我们要将其转换为八进制数，一个八进制数需要 8 个基数来表示，所以需要 3 位二进制来表示。那么转换过程如下，即对应的八进制数为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">4223</span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span></span></span></span>。</p>
<p></p>
<p>而如果我们将要将其转换为十六进制数，一个十六进制数需要 16 个基数来表示，所以需要 4 位二进制来表示。则对应的转换过程如下，即对应的十六进制数为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">893</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span></span></span></span>。</p>
<p></p>
<h2> 码制</h2>
<p>计算机中，无论我们要存储任何数据，它都会转换为二进制码进行存储。现在的计算机中，如果我们要进行加法运算操作，那么我们很容易实现，因为现在的计算机体系大多采用冯诺依曼所提出的经典计算机体系结构，其中就包含了加法运算器。但如果我们要进行减法运算，那么此时就犯难了。没有减法运算器，我们要如何实现减法运算呢？而针对这一问题，原码、反码、补码就产生了。我们常用这三种码来表示一个机器数，从而解决计算机做减法的问题。下面是几个数的实例（<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 的补码只有一种表现形式），下面就分别来看看几种不同表示法的具体知识。</p>
<table>
<thead>
<tr>
<th></th>
<th>1</th>
<th>-1</th>
<th>+0</th>
<th>-0</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>原码</strong></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000001</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10000001</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10000000</span></span></span></span></td>
</tr>
<tr>
<td><strong>反码</strong></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000001</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11111110</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11111111</span></span></span></span></td>
</tr>
<tr>
<td><strong>补码</strong></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000001</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11111111</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></td>
</tr>
</tbody>
</table>
<ol>
<li><strong>符号位</strong></li>
</ol>
<p>正式了解不同码制之前，我们先来看看符号位的定义。所谓符号位，是在内存中存放的最左边的一位，如果该位为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，那么说明这个数表示的是正数；而假如该位为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>，那么就说明这个数表示的是负数。</p>
<ol start="2">
<li><strong>原码</strong></li>
</ol>
<p>是一种最简单的机器数表示法，我们常<strong>用最高位来表示符号位，<code>0</code> 为正，<code>1</code> 为负，而用余下的其他位来存放该数二进制的绝对值</strong>。也即除开符号位之外，原码的数据位就是一个数的二进制绝对值表示。</p>
<p>在上面的示例中，我们发现，虽然 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 和 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">0</span></span></span></span> 的原码不一致，但是主要还是符号位的不同，我们再用上面的示例来进行运算：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0001</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0010</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">0011</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0000</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1000</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">0</span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0001</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1001</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1010</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">2</span></span></span></span></span></p>
<p>可以发现，如果我们只是进行正数之间的加法运算，是不会出现问题的。但一旦出现正负数相加的情况，就会导致错误结果，实际运算的结果与预期相反。这主要是因为符号位所引起。那有没有相应的解决办法呢？别着急，我们接下来去看看反码。</p>
<ol start="3">
<li><strong>反码</strong></li>
</ol>
<p>虽然原码很简单，但是存在的最大问题在于如果一个数加上其相反数结果不为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，即 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 的结果不为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，为了解决这个问题，才有了反码的出现。而针对反码，这里也分为两种情况：</p>
<ul>
<li><strong>如果一个数是正数，那么其反码和原码一样</strong>，如 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 的原码和反码均为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0001</span></span></span></span>。</li>
<li><strong>如果一个数是负数，那么其反码就是其原码除符号位之外，按位取反</strong>。如 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span> 的原码为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1001</span></span></span></span>，其反码为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1110</span></span></span></span>。</li>
</ul>
<p>这个时候我们再来看看原码中存在的问题：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">0001</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1001</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">1111</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">0</span></span></span></span></span></p>
<p>可以看到通过使用反码，我们解决了源码中两个相反数之和不为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 的情况，但是不是就代表我们可以用反码来进行通用减法运算呢？我们来试试两个不同的负数相加：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1110</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1100</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1010</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">5</span></span></span></span></span></p>
<p>就离谱，这结果明显错误！所以反码还是不能彻底解决减法运算的问题。而相应的，科学家们又提出了补码这一概念。</p>
<ol start="4">
<li><strong>补码</strong></li>
</ol>
<p>同样的，补码也很特殊，针对正负数也分为了两种情况：</p>
<ul>
<li><strong>如果一个数是正数，那么该数的补码等于其原码</strong>，如 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 的原码和补码均为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0001</span></span></span></span>。</li>
<li><strong>如果一个数是负数，那么该数的补码等于反码 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">+</span><span class="mord">1</span></span></span></span></strong>，如 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span> 的反码为 <code>1110</code>，那么其补码即为 <code>1111</code>。</li>
</ul>
<p>同样，我们来试试看反码中进行减法运算所出现错误的情况：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1111</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1111</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1110</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">2</span></span></span></span></span></p>
<p>诶，完美解决了反码中两个负数相加时所出现的结果错误的情况。因此在计算机中，为了避免运算错误，都是采用的补码进行加减法运算。</p>
<ol start="5">
<li><strong>不同码制之间的转换总结</strong></li>
</ol>
<p>经过上面的各种码制介绍之后，我们将一个数的不同码制之间的转换规律总结如下图：</p>
<p></p>
<ol start="6">
<li><strong>移码</strong></li>
</ol>
<p>除开常用的原码、反码、补码之外，还有一种码制叫做移码。所谓移码，又叫做增码或者偏置码，它是在数 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span> 上增加一个偏移量来定义的，通常用来表示浮点数的阶码，其表示形式类似于补码，只是其符号位用 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 来表示正数，<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> 来表示负数，则数值表示部分则是与补码相同。</p>
<table>
<thead>
<tr>
<th></th>
<th>1</th>
<th>-1</th>
<th>+0</th>
<th>-0</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>原码</strong></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000001</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10000001</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10000000</span></span></span></span></td>
</tr>
<tr>
<td><strong>反码</strong></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000001</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11111110</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11111111</span></span></span></span></td>
</tr>
<tr>
<td><strong>补码</strong></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000001</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11111111</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></td>
</tr>
<tr>
<td><strong>移码</strong></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10000001</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">01111111</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10000000</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></td>
</tr>
</tbody>
</table>
<h2> 数值表示范围</h2>
<p>在开始了解数值的表示范围之前，我们先来了解下什么叫做<strong>定点</strong>。所谓<strong>定点</strong>，是因为小数点的位置是固定的，所以我们叫做数值是定点的整数或者小数。假如一个数值用码制的形式表示， 如果小数点在数值最低位（也即最后边）是，此时该数表示的是<strong>定点整数</strong>。但如果小数点在介于数值最高位和最低位的中间位置，那么此时该数所表示的就是一个定点小数。</p>
<table>
<thead>
<tr>
<th>码制</th>
<th>定点整数</th>
<th>定点小数</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>原码</strong></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>~<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">+</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>~<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">+</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td><strong>反码</strong></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>~<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">+</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>~<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">+</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td><strong>补码</strong></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>~<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">+</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span>~<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">+</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td><strong>移码</strong></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>~<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">+</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span>~<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">+</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
</tr>
</tbody>
</table>
<p>假设我们用 8 个数位来表示一个数值，那么对于定点整数而言，其原码范围就是：</p>
<p><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">+</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord">127</span><span class="mspace nobreak">&nbsp;</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">127</span></span></span></span></p>
<p>将其转换为二进制就是：<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">11111111</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">01111111</span></span></span></span>，那么我们就可以得到该数值补码的范围：<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10000000</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">01111111</span></span></span></span>。</p>
<p>同样的，对于定点小数而言，我们用 8 个数位来表示，则其原码范围是：</p>
<p><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">+</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<p>同样将其转换为二进制：<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">0.1111111</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">+</span><span class="mord">0.1111111</span></span></span></span>，此时我们就可以得到其对应的补码范围：<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">+</span><span class="mord">0.1111111</span></span></span></span>。</p>
<h2> 浮点数的运算</h2>
<h3> 浮点数的表示</h3>
<p>所谓浮点数，指的是小数点位置不固定的数，相比整数能够表示更大的范围，其表示格式如下：</p>
<p></p>
<p>对于一个浮点数 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span>，我们常用如下形式表示：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7144em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7144em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">e</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>其中 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span> 叫做 <strong>尾数</strong>，<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span> 叫做 <strong>基数</strong>，而 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">e</span></span></span></span> 则叫做 <strong>指数</strong>。其中，指数也叫做阶码，<strong>它的位数决定了数值的表示范围</strong>，位数越多说明表示的范围越大；<strong>而尾数的位数则决定了数值的有效精度</strong>，位数越多说明该数的精度越高。</p>
<p>例如对于一个整数 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1000</span></span></span></span>，用浮点数的形式表示即为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1000</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>，其中 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.0</span></span></span></span> 就对应着浮点数表示形式中的尾数，而 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10</span></span></span></span> 则对应着基数，<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span> 则对应着指数。</p>
<h3> 浮点数运算</h3>
<p>既然整数也可以用浮点数的形式表示，那我们就可以把所有的运算都看做是浮点数运算。要进行浮点数运算，我们又该如何进行呢？</p>
<p>我们以一个实例来看看，浮点数之间应该如何进行运算。</p>
<p>假设有如下两个数：<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2.5</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，要对两个数进行加法运算。</p>
<p>首先，我们发现两个数的指数是不一样的，那要进行加法运算，我们首先将其统一为一个指数，比如统一指数为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span> 或者 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span>。按理来讲，任何一个指数都是可以的，但如果我们转换为小的指数（<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>），那么 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10.0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span>，让其与 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span></span></span></span> 进行加法运算得到的结果到时候又需要转换为大的指数（<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span>），此时就显得比较麻烦。所以为了避免结果运算之后再次进行指数的转换，我们 <strong>一般推荐统一为大的指数（<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span>）</strong>。所以我们统一指数之后，得到的两个数分别是：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.25</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>指数统一之后，我们再来计算尾数，此时尾数则为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">1.0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.25</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.25</span></span></span></span>。</p>
<p>最后，我们既然得到了尾数、指数和基数，那么对结果进行格式化操作，得到 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.25</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span>。注意这里比较特殊，因为我们的结果是很规范的浮点数（<strong>即尾数小数点的左边既不能为 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，也不能是 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span> 位以上的数</strong>），假设我们的浮点数不是规范的浮点数，那么则需要对其进行格式化操作。</p>
<p>总结起来浮点数的运算过程就是：</p>
<blockquote>
<p><strong>对阶 -&gt; 尾数计算 -&gt; 格式化结果</strong></p>
</blockquote>
<h2> 总结</h2>
<p>好了，以上就是今天的所有内容了。</p>
<p>主要讲了关于 <code>R</code> 进制的表示，以及如何与十进制进行转换。然后对常见的进制之间的转换做了介绍，接着则是对原码、反码、补码、移码等不同码制之间的转换。最后则是对数值表示范围进行了介绍，以及浮点数运算的相关知识进行补充。</p>
<p>创作不易，如果你觉得我的文章内容对你有所帮助，那就点个赞再走吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>简介</title>
      <link>https://cunyu1943.site/JavaPark/md/java/js/20220501-introduction.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/js/20220501-introduction.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">简介</source>
      <description>什么是 JavaScript 作为世界上最流行的语言之一，是一种运行在客户端的脚本语言。而所谓脚本语言，就是不需要编译就能运行的编程语言，JavaScript 在运行过程中通过 JS 解释器来逐行解释然后执行。 JavaScript 能做什么？ 最初的时候，JavaScript 被设计出来的初衷是为了实现表单的动态校验，比如密码长度校验、邮箱格式校验等。但渐渐随着 JavaScript 的发展，JavaScript 变得越来越强大，也发展出了许多产物，如 Node.js、Electron、Cordova、Ruff、cocos2d-js。利用这些产物，我们可以用来进行服务器的开发、桌面程序的搭建、APP 的开发、硬件-物联网的控制、游戏开发等等工作。</description>
      <category>JavaScript 教程</category>
      <pubDate>Sun, 01 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 什么是 JavaScript</h2>
<p>作为世界上最流行的语言之一，是一种运行在客户端的脚本语言。而所谓脚本语言，就是不需要编译就能运行的编程语言，JavaScript 在运行过程中通过 JS 解释器来逐行解释然后执行。</p>
<h2> JavaScript 能做什么？</h2>
<p>最初的时候，JavaScript 被设计出来的初衷是为了实现表单的动态校验，比如密码长度校验、邮箱格式校验等。但渐渐随着 JavaScript 的发展，JavaScript 变得越来越强大，也发展出了许多产物，如 <code>Node.js</code>、<code>Electron</code>、<code>Cordova</code>、<code>Ruff</code>、<code>cocos2d-js</code>。利用这些产物，我们可以用来进行服务器的开发、桌面程序的搭建、APP 的开发、硬件-物联网的控制、游戏开发等等工作。</p>
<h2> HTML、CSS、JavaScript 之间的关系</h2>
<p>HTML 和 CSS 不同于 JavaScript，它们都是描述类语言，其中 HTML 主要用于决定网页结构和内容（决定网页上能看到什么），而 CSS 则主要用于定义网页所呈现给用户的模样（决定网页是否美观）。JavaScript 则是专注于实现业务逻辑和页面控制（决定网页提供的功能）。</p>
<p>如果把这三者比作一个王者荣耀中的英雄的话，那 HTML 就相当于原皮的英雄，而 CSS 则是相当于英雄的皮肤，让我们的英雄更帅气，而 JavaScript 则相当于英雄的技能，我们可以通过控制英雄通过技能来实现杀敌清兵的效果。</p>
<h2> 浏览器如何执行 JavaScript</h2>
<p>JavaScript 一般运行在网页中的，所以一般是在浏览器中运行。而浏览器一般分为两部分，一个是<strong>渲染引擎</strong>，另一个则是 <strong>JS 引擎</strong>，两者的功能如下：</p>
<ul>
<li><strong>渲染引擎</strong>：用于解析 HTML 和 CSS 代码，大家一般把它叫做内核，比如 Chrome 浏览器的 Blink，Firefox 浏览器的 Gecko。</li>
<li><strong>JavaScript 引擎</strong>：也叫做 JavaScript 解释器，主要用于读取网页中的 JavaScript 代码，然后对其处理用执行，如 Chrome 浏览器的 V8，Firefox 的 TraceMonkey。</li>
</ul>
<p>所以名义上虽然说是浏览器执行了 JavaScript 代码，但如果看底层的话，却会发现其实 JavaScript 代码是通过浏览器中的 JavaScript 引擎来执行的。JavaScript 引擎在执行代码时会逐行解释源代码，将其转换为机器语言，然后交由计算机执行。也正因为如此，所以将 JavaScript 划分为脚本语言，它会逐行去解释执行，而不是像 HTML、CSS 类似的标记语言。</p>
<h2> JavaScript 的组成</h2>
<p></p>
<ol>
<li><strong>ECMAScript</strong></li>
</ol>
<p>ECMAScript 是由 ECMA 国际进行标准化的一门编程语言，往往被大家称为 JavaScript 或者 JScript，但实际上并不是一个东西，后两者其实是基于 ECMAScript 的实现和扩展。其中，JavaScript 是由网景公司所提出，而 JScript 则是由微软公司所提出。 所以 ECMAScript 更像是一种规范，它规定了 JavaScript 的编程语法和基础核心知识，然后所有的浏览器厂商都需要共同遵守这一套 JavaScript 语法工业标准。</p>
<ol start="2">
<li><strong>DOM</strong></li>
</ol>
<p>DOM（Document Object Model）即文档对象模型，是由 W3C 组织推荐的用于处理可扩展标记语言的<strong>标准编程接口</strong>。通过 DOM 所提供的各种接口，我们就能够轻易地对网页上的各种元素进行操作，如调整位置、大小、颜色等。</p>
<ol start="3">
<li>
<p><strong>BOM</strong></p>
<p>BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容，能够与浏览器进行交互的对象结构。通过使用 BOM，我们就能够十分方便的操作浏览器窗口，如弹出提示框、控制跳转、获取分辨率等操作。</p>
</li>
</ol>
<h2> JavaScript 入门体验</h2>
<p>JavaScript 的书写位置主要有 3 种，分别是行内式、内嵌式和外部式，以下就分别来看看各种方式的写法。</p>
<ol>
<li><strong>行内式</strong></li>
</ol>
<p>首先是行内式，顾名思义，所谓行内式，就是将少量的 JavaScript 代码直接写在 HTML 标签的时间属性中，比如下面的代码。通过点击页面中的按钮，页面就会弹窗。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>行内式的特点就是比较简单，但是也存在很多问题。比如可读性较差，如果需要在 HTML 编写大量 JavaScript 代码时，此时阅读就很不方便。除此之外，JavaScript 和 HTML 中都会使用到引号，如果出现多层引号相互嵌套时，会非常容易混淆，导致代码实现结果出错。所以除非特殊情况，否则一般不推荐使用行内式。</p>
<ol start="2">
<li><strong>内嵌式</strong></li>
</ol>
<p>相比于单行式，内嵌式就更加清晰明了。我们通过将 JavaScript 代码封装到 <code>&lt;script&gt;</code> 标签中，然后就可以实现简单的弹窗功能了。内嵌式的代码可读性更高，也更方便纠错。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="3">
<li><strong>外部式</strong></li>
</ol>
<p>最后一种就是外部式，通过在外部新建一个后缀名为 <code>.js</code> 的文件，然后将 JavaScript 直接写到该文件中，最后在 HTML 页面中通过 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性引入即可。</p>
<p>外部式的优点是很明显的：</p>
<ul>
<li>首先，可读性提高。JavaScript 代码量较大时，通过放在独立的文件中，排除了 HTML 和 CSS 元素的干扰。</li>
<li>其次，代码复用率提高。假设我们其他业务需要同样的功能，我们只需要将封装好的 <code>.js</code> 文件引用过去即可使用。</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>本文主要从 JavaScript 的组成定义，功能使用，同 HTML 与 CSS 之间的关系以及最简单的入门体验几个方面，对 JavaScript 做了一个简单的介绍。如果你也是刚学习 JavaScript 的新手，那就一起学起来吧。</p>
]]></content:encoded>
    </item>
    <item>
      <title>数据类型</title>
      <link>https://cunyu1943.site/JavaPark/md/java/js/20220503-datatype.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/js/20220503-datatype.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">数据类型</source>
      <description>导读 初步了解 JavaScript 之后，我们又学习了注释、输入输出以及变量的相关知识。本文紧接上两部分，来继续带领大家学习 JavaScript 中的数据类型知识，本文主要内容如下： 数据类型简介 数据类型分类 变量数据类型获取 常用的数据类型转换 简介 在计算机中，不同数据所需要的存储空间是不一样的，为了尽可能的提高内存利用率，方便把数据划分为所需内存大小不同的数据，于是需要将不同数据定义为对应的数据类型。 最常见的就是字符串和数字，就像“公众号：村雨遥”这个字符串和 1943 这个数字所对应的类型是不一样。</description>
      <category>JavaScript 教程</category>
      <pubDate>Tue, 03 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 导读</h2>
<p>初步了解 JavaScript 之后，我们又学习了注释、输入输出以及变量的相关知识。本文紧接上两部分，来继续带领大家学习 JavaScript 中的数据类型知识，本文主要内容如下：</p>
<ol>
<li>数据类型简介</li>
<li>数据类型分类</li>
<li>变量数据类型获取</li>
<li>常用的数据类型转换</li>
</ol>
<h2> 简介</h2>
<p>在计算机中，不同数据所需要的存储空间是不一样的，为了尽可能的提高内存利用率，方便把数据划分为所需内存大小不同的数据，于是需要将不同数据定义为对应的数据类型。</p>
<p>最常见的就是字符串和数字，就像“公众号：村雨遥”这个字符串和 1943 这个数字所对应的类型是不一样。</p>
<p>不同于 Java 这样的编程语言，JavaScript 是一种弱类型的语言。这意味在 JavaScript 中，不用提前声明变量的类型，在程序运行过程中，JavaScript 引擎会自动确定变量类型。在 Java 中，如果我们要定义一个变量，通常需要像如下形式：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是在 JavaScript 中，我们只需要按照下面的方式定义即可。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也正是由于 JavaScript 的动态特性，所以在 JavaScript 中，变量的数据类型是可以变化的。</p>
<p>以下是一个变量数据类型动态变化的实例，一开始变量是一个字符串，然后我们又把它变成了数字类型。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 数据类型分类</h2>
<p>在 JavaScript 中，数据类型可以分为两大类：</p>
<ul>
<li>
<p><strong>基本数据类型</strong>：<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Undefined</code>、<code>Null</code></p>
</li>
<li>
<p><strong>复杂数据类型</strong>：<code>object</code></p>
</li>
</ul>
<p>基本数据类型详情如下表所示：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>说明</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Number</code></td>
<td>数字类型，包括整形和浮点型</td>
<td>0</td>
</tr>
<tr>
<td><code>String</code></td>
<td>字符串类型</td>
<td><code>""</code></td>
</tr>
<tr>
<td><code>Boolean</code></td>
<td>布尔值类型</td>
<td><code>false</code></td>
</tr>
<tr>
<td><code>Undefined</code></td>
<td>如果一个变量声明了但是未赋值，则此时该变量为 <code>undefined</code></td>
<td><code>undefined</code></td>
</tr>
<tr>
<td><code>Null</code></td>
<td><code>var num = null</code>，声明变量 <code>num</code> 为空值</td>
<td><code>null</code></td>
</tr>
</tbody>
</table>
<h3> 数字类型（<code>Number</code>）</h3>
<p>JavaScript 中，不分整型和浮点型，它们统一称之为数字类型。也就是说，JavaScript 中数字类型的既可以保存整数值，也可以保存小数值。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>数字型中，有以下几个特殊值需要值得注意：</p>
<ul>
<li><strong>最大值</strong>：<code>Number.MAX_VALUE</code></li>
<li><strong>最小值</strong>：<code>Number.MIN_VALUE</code></li>
<li><strong>无穷大</strong>：<code>Infinity</code>，表示大于任何数值。</li>
<li><strong>无穷小</strong>：<code>-Infinity</code>，表示小于任何数值。</li>
<li><strong>非数字</strong>：<code>NaN</code>，<code>Not a number</code>，表示一个非数字。</li>
</ul>
<p>如果要确认一个变量是否是非数字，JavaScript 提供了一个方法 <code>isNaN(x)</code>。如果 <code>x</code> 是一个数字，则返回 <code>false</code>，如果 <code>x</code> 不是数字，则返回 <code>true</code>。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 字符串类型（<code>String</code>）</h3>
<p>JavaScript 中，把用引号括起来的任意文本叫做字符串类型，其中引号既可以使用双引号 <code>""</code>，也可以使用单引号 <code>''</code>。</p>
<p>以下的 <code>name</code> 就是一个字符串类型，可以使用单引号或双引号将其包括，两者的功能是一样的。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，和其他编程语言一样，JavaScript 也提供了许多转义符，常见的转义符如下表所示。</p>
<table>
<thead>
<tr>
<th>转义符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\n</code></td>
<td>换行</td>
</tr>
<tr>
<td><code>\\</code></td>
<td><code>\</code> 右斜杠</td>
</tr>
<tr>
<td><code>\'</code></td>
<td><code>'</code> 单引号</td>
</tr>
<tr>
<td><code>\"</code></td>
<td><code>"</code> 双引号</td>
</tr>
<tr>
<td><code>\t</code></td>
<td><code>tab</code> 缩进</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>空格</td>
</tr>
</tbody>
</table>
<p>JavaScript 中对于字符串的常用操作主要有以下几种。</p>
<ol>
<li><strong>获取字符串长度</strong></li>
</ol>
<p>字符串是由如果字符所组成，而字符串的长度就是这些字符的数量。在 JavaScript 中，可以通过字符串的 <code>length</code> 属性获取整个个字符串的长度。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="2">
<li><strong>字符串拼接</strong></li>
</ol>
<p>如果存在多个字符串，可以使用 <code>+</code> 来进行拼接，其具体方式为：</p>
<blockquote>
<p>字符串 + 任何类型 = 拼接后的新字符串</p>
</blockquote>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 布尔类型（<code>Boolean</code>）</h3>
<p>只有 <code>true</code> 和 <code>false</code> 两个值，<code>true</code> 代表真，而 <code>false</code> 表示假。但是当它们和数字类型相加时，此时 <code>true</code> 的值就变成了 1，而 <code>false</code> 的值变成了 0。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>Undefined</code> 和 <code>Null</code></h3>
<p>在 JavaScript 中，如果一个变量被声明后但却没有赋值，那么此时该变量的默认值就是 <code>undefined</code>。</p>
<p>如果一个对象的值未设置，那么则该对象此时为 <code>null</code>。</p>
<h2> 获取变量数据类型</h2>
<p>假设我们有一个变量，但是没有找到他的定义所在位置，那么此时也不用慌，JavaScript 提供了 <code>typeof</code> 关键字来帮助我们确定变量的数据类型。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 数据类型转换</h2>
<p>日常开发中，在浏览器中通过表单或者 <code>prompt</code> 等获取来的变量默认都是字符串类型，但实际上我们所需要的类型往往都不是字符串，此时就需要对变量的数据类型进行转换。而这一过程就叫做数据类型转换，即将一种数据类型的变量转换为另一种数据类型。</p>
<p>最常用的主要有以下三种：</p>
<ul>
<li><strong>转换为字符串类型</strong></li>
<li><strong>转换为数字类型</strong></li>
<li><strong>转换为布尔类型</strong></li>
</ul>
<h3> 转换为字符串类型</h3>
<p>转换为字符串类型的方法总结如下表，以下就分别来看看这三种方法的使用。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>toString()</code></td>
<td>转换为字符串</td>
</tr>
<tr>
<td><code>String()</code> 强制转换</td>
<td>转换为字符串</td>
</tr>
<tr>
<td><code>+</code> 拼接</td>
<td>和字符串拼接的结果都是字符串</td>
</tr>
</tbody>
</table>
<ol>
<li><strong>toString()</strong></li>
</ol>
<p>通过调用 <code>toString()</code> ，可以实现由其他类型向字符串类型的转变。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="2">
<li><strong>String()</strong></li>
</ol>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="3">
<li><strong><code>+</code> 拼接</strong></li>
</ol>
<p>字符串和其他任意类型的变量相拼接，最后得到的一定是字符串。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 转换为数字类型</h3>
<p>最常用的一般是字符串类型转换为数字类型，这里既可以将字符串类型转换为具体的整数数值类型或者浮点数数值类型，也可以将直接将其转换为数值型而不用区分整数数值还是浮点数数值。除此之外，还经常利用运算符来进行隐式转换。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>parseInt(string)</code></td>
<td>字符串类型转换为整数数值类型</td>
</tr>
<tr>
<td><code>parseFloat(string)</code></td>
<td>字符串类型转换为浮点数数值类型</td>
</tr>
<tr>
<td><code>Number()</code></td>
<td>字符串转换为数值型</td>
</tr>
<tr>
<td><code>-</code>、<code>*</code>、<code>/</code> 隐式转换</td>
<td>利用算数运算隐式转换为数值型</td>
</tr>
</tbody>
</table>
<ol>
<li><strong>parseInt(string)</strong></li>
</ol>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="2">
<li><strong>parseFloat(string)</strong></li>
</ol>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="3">
<li><strong>Number()</strong></li>
</ol>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="4">
<li><strong>运算符隐式转换</strong></li>
</ol>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 转换为布尔类型</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Boolean()</code></td>
<td>将其他类型转换为布尔类型</td>
</tr>
</tbody>
</table>
<p>在 JavaScript 中，代表<strong>空、否定</strong>的值都会转变为 <code>false</code>，比如 <code>''</code>、 <code>0</code>、<code>NaN</code>、<code>undefined</code>、<code>null</code> 等。而其他值则会转换为 <code>true</code>。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
]]></content:encoded>
    </item>
    <item>
      <title>操作符</title>
      <link>https://cunyu1943.site/JavaPark/md/java/js/20220504-operator.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/js/20220504-operator.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">操作符</source>
      <description>运算符（operator），也叫做操作符，主要是用于实现赋值、比较以及执行算数运算等功能的符号。在 JavaScript 中，主要有以下几类常见的运算符： 算数运算符 递增递减运算符 比较运算符 逻辑运算符 赋值运算符 以下就分别来看看，这些运算符都是怎么用的。 算数运算符 这个我们应该都不陌生，从小学开始，我们就学习加、减、乘、除、取余等算数运算。而算数运算符也就是供我们算术运算所使用的的符号，主要用来执行两个变量或值的算数运算。</description>
      <category>JavaScript 教程</category>
      <pubDate>Wed, 04 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>运算符（<code>operator</code>），也叫做操作符，主要是用于实现赋值、比较以及执行算数运算等功能的符号。在 JavaScript 中，主要有以下几类常见的运算符：</p>
<ul>
<li>算数运算符</li>
<li>递增递减运算符</li>
<li>比较运算符</li>
<li>逻辑运算符</li>
<li>赋值运算符</li>
</ul>
<p>以下就分别来看看，这些运算符都是怎么用的。</p>
<h2> 算数运算符</h2>
<p>这个我们应该都不陌生，从小学开始，我们就学习加、减、乘、除、取余等算数运算。而算数运算符也就是供我们算术运算所使用的的符号，主要用来执行两个变量或值的算数运算。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">+</span></span></span></span></td>
<td>加</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">−</span></span></span></span></td>
<td>减</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord">∗</span></span></span></span></td>
<td>乘</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">/</span></span></span></span></td>
<td>除</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">%</span></span></span></span></td>
<td>取余</td>
</tr>
</tbody>
</table>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>但是在进行算数运算时，特别需要注意的是浮点数的计算，浮点数值的最高精度是 17 位小数，但算数运算时却远不如整数。同时，我们也需要注意，不要用浮点数来直接进行比较。</p>
<h2> 表达式与返回值</h2>
<p>所谓表达式，就由数字、运算符、变量等组成的式子。而且表达式最终能够求得一个结果，而这个返回给我们的值就叫做返回值。</p>
<h2> 递增递减运算符</h2>
<p>如果要实现让一个变量自己加 1，以前的做法是按照如下方式：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但现在可以利用递增计算符（<code>++</code>）来给实现给变量加 1，同样，递增计算符的位置也会对最终的结果造成影响。</p>
<p>如果递增计算符放在变量前面，则该递增计算符又称为前置递增运算符。若递增计算符放在变量后面，则称为后置递增运算符。</p>
<p>同样类比，有递增那就有递减。而且和递增一样，也可以根据递减运算符所放置的位置将其分为前置递减运算符和后置递减运算符。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>前置和后置如果是单独使用，那么它们实现的效果是一样的。而两者的区别在于：</p>
<ul>
<li>使用前置时：先自加/减 1，然后再返回结果。</li>
<li>使用后置式：先返回原值，然后再自加/减 1。</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 比较运算符</h2>
<p>比较运算符又叫做关系运算符，是两个数据之间进行比较时所使用的运算符，通过比较，返回一个布尔值作为比较运算的结果，常见的比较运算符总结见下表。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;</code></td>
<td>小于</td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>大于</td>
</tr>
<tr>
<td><code>&gt;=</code></td>
<td>大于等于</td>
</tr>
<tr>
<td><code>&lt;=</code></td>
<td>小于等于</td>
</tr>
<tr>
<td><code>==</code></td>
<td>判等，值相等即可</td>
</tr>
<tr>
<td><code>!=</code></td>
<td>不等于</td>
</tr>
<tr>
<td><code>===</code></td>
<td>全等，值和数据类型都一致</td>
</tr>
</tbody>
</table>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>可以注意到 <code>==</code> 和 <code>===</code> 是不一样的，我们在比较时，一定要注意它们之间的区别。</p>
<h2> 逻辑运算符</h2>
<p>逻辑运算符是用来进行布尔值运算的运算符，其最终返回结果也是一个布尔值，常用于条件判断。常见的逻辑运算符见下表。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&amp;</code></td>
<td>与</td>
</tr>
<tr>
<td><code>&amp;&amp;</code></td>
<td>逻辑与</td>
</tr>
<tr>
<td>`</td>
<td>`</td>
</tr>
<tr>
<td>`</td>
<td></td>
</tr>
<tr>
<td><code>!</code></td>
<td>逻辑非</td>
</tr>
</tbody>
</table>
<p>其中 <code>&amp;</code> 和 <code>&amp;&amp;</code> 的区别在于：<code>&amp;</code> 中一旦符号前布尔值为 <code>false</code> 时，还会继续符号后布尔值的运算，然后判定两个布尔值的运算结果为 <code>false</code>。而 <code>&amp;&amp;</code> 一旦符号前布尔值为 <code>false</code>，就不再进行符号后布尔值的运算，直接判定两个布尔值最终结果为 <code>false</code>，这个过程就叫做短路运算。</p>
<p>而 <code>||</code> 表示只要符号前后任一布尔值为 <code>true</code>，则最终结果为 <code>true</code>。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 赋值运算符</h2>
<p>顾名思义，所谓赋值运算符就是用来将数据赋值给变量的运算符，常用的赋值运算符总结如下。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>=</code></td>
<td>直接赋值</td>
</tr>
<tr>
<td><code>+=、-=</code></td>
<td>加、减一个数后赋值</td>
</tr>
<tr>
<td><code>*=、/=、%=</code></td>
<td>乘、除、取余后赋值</td>
</tr>
</tbody>
</table>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 运算符优先级</h2>
<p>运算符的优先级决定了我们表达式中运算执行的先后顺序，优先级越高，则执行顺序越靠前。常见的运算符的优先级分级如下表。总的来说，在开发过程中要尽量避免复杂的表达式，如果实在是要用，也可以多利用小括号来提高代码的可读性，防止因疏忽代码运算执行先后顺序而导致程序结果错误。</p>
<table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
<th>顺序</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>小括号</td>
<td><code>()</code></td>
</tr>
<tr>
<td>2</td>
<td>一元运算符</td>
<td><code>++</code>、<code>--</code>、<code>!</code></td>
</tr>
<tr>
<td>3</td>
<td>算数运算符</td>
<td><code>*</code>、<code>/</code>、<code>%</code>、 <code>+</code>、<code>-</code></td>
</tr>
<tr>
<td>4</td>
<td>关系运算符</td>
<td><code>&gt;</code>、<code>&gt;=</code> 、<code>&lt;</code>、<code>&lt;=</code></td>
</tr>
<tr>
<td>5</td>
<td>相等运算符</td>
<td><code>==</code>、<code>!=</code>、<code>===</code>、<code>!==</code></td>
</tr>
<tr>
<td>6</td>
<td>逻辑运算法</td>
<td>先 <code>&amp;&amp;</code> 后 `</td>
</tr>
<tr>
<td>7</td>
<td>赋值运算符</td>
<td><code>=</code></td>
</tr>
<tr>
<td>8</td>
<td>逗号运算符</td>
<td><code>,</code></td>
</tr>
</tbody>
</table>
<h2> 总结</h2>
<p>本文的主要内容至此就结束了，主要对各种运算符进行了总结以及简单的应用。到这里，我们已经学习了 JavaScript 中的变量、数据类型、运算符、注释、输入输出。到这里我们应该可以根据所需知识写一些小的 demo，接下来就继续去看看流程控制的相关内容吧。</p>
]]></content:encoded>
    </item>
    <item>
      <title>流程控制</title>
      <link>https://cunyu1943.site/JavaPark/md/java/js/20220505-process-control.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/js/20220505-process-control.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">流程控制</source>
      <description>一个程序中，各个代码之间的执行顺序对于程序结果是会造成影响的。就拿下面简单的例子来说，假如我们拿先使用 num 这个变量然后再定义和先定义变量再使用相比。先使用再定义会报错 undefined，而定义再使用就没有问题。也就是说，代码的先后顺序会对我们的程序结果造成直接影响。 console.log(num); var num = 10;</description>
      <category>JavaScript 教程</category>
      <pubDate>Thu, 05 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>一个程序中，各个代码之间的执行顺序对于程序结果是会造成影响的。就拿下面简单的例子来说，假如我们拿先使用 <code>num</code> 这个变量然后再定义和先定义变量再使用相比。先使用再定义会报错 <code>undefined</code>，而定义再使用就没有问题。也就是说，代码的先后顺序会对我们的程序结果造成直接影响。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而今天要说的流程控制，就是为了解决这个问题。通俗来讲，流程控制就是控制我们的代码按照既定的结构顺序来执行。</p>
<p>而流程控制主要分为三种结构，分别是：</p>
<ul>
<li><strong>顺序结构</strong></li>
<li><strong>分支结构</strong></li>
<li><strong>循环结构</strong></li>
</ul>
<p>这三种结构分别代表了三种代码执行的顺序，用流程图示意如下。</p>
<table>
<thead>
<tr>
<th>顺序结构</th>
<th>分支结构</th>
<th>循环结构</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2> 顺序结构流程控制</h2>
<p>顺序结构是代码中最基本、最简单的流程控制，它没有特定的语法结构，代码会按照<strong>代码位置的先后顺序，依次执行</strong>。基本上程序中的代码都会存在顺序结构。</p>
<h2> 分支结构流程控制</h2>
<p>由上而下执行代码时，根据不同的条件，从而流向不同的代码路径，最终得到不同的结果。JavaScript 中，提供了两种分支结构语句，分别是：</p>
<ul>
<li><code>if</code> 语句</li>
<li><code>swtich</code> 语句</li>
</ul>
<h3> if</h3>
<p><code>if</code> 的语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>if</code> 语法结构中的条件表达式为 <code>true</code>，则执行大括号中的语句，若条件表达式结果为 <code>false</code>，则跳过大括号中的代码，执行大括号之后的代码。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>除开单分支语句 <code>if</code> 之外，JavaScript 也提供了双分支语句 <code>if…else…</code>，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果条件表达式为 <code>true</code>，则执行条件语句 1，若条件表达式为 <code>false</code>，则执行语句 2。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<p>当然，除开单分支和双分支之外，还有多分支语句 <code>if…else…if…</code>，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过多个条件来选择不同的语句执行，从而得到不同的结果。</p>
<h3> 三元表达式</h3>
<p>除了使用 <code>if</code> 来进行条件选择之外我们也可以利用三元表达式来做一些简单的条件选择，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>三元表达式也可以转换为 <code>if</code> 条件分支判断，两者的效果是等价的。比如上面的三元表达式就可以转换为以下 <code>if</code> 条件表达式。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> switch</h3>
<p><code>switch</code> 语句对应于 <code>if</code> 语句中的多分支语句，主要用于基于不同条件来执行不同的代码。如果要针对变量设置一系列的<strong>特定值</strong>的选项时，就可以使用 <code>switch</code>。</p>
<p><code>switch</code> 语法结构如下，通过表达式的值和 <code>case</code> 中的选项值相匹配，如果有对应匹配项，则执行该 <code>case</code> 中的语句，如果没有对应匹配项，则执行 <code>default</code> 中的代码。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> switch 和 <code>if else if</code> 的区别</h3>
<p>一般情况下，两者是可以相互替换的。其中 <code>switch…case</code> 语句通常用于处理 <code>case</code> 是确定值的情况，而 <code>if…else…</code> 语句则更加的灵活，通常用语范围判断。</p>
<p>此外，<code>switch</code> 语句进行条件判断后会直接执行到程序的条件语句，效率更高。而 <code>if…else</code> 语句有多少种情况，就需要判断多少次，较为耗费时间。</p>
<h2> 循环结构流程控制</h2>
<p>实际处理问题时，经常要做许多具有规律性的重复操作，为了更高效的完成这类操作，所以需要重复执行这些语句，而这就是我们程序中所说的循环结构。</p>
<p>在 JavaScript 中，主要有三种类型的循环语句：</p>
<ul>
<li><code>for</code> 循环</li>
<li><code>while</code> 循环</li>
<li><code>do…while</code> 循环</li>
</ul>
<h3> for 循环</h3>
<p>程序中，一组被重复执行的语句被叫做<strong>循环体</strong>，而是否需要继续重复执行，取决于<strong>循环的终止条件</strong>，由循环体和循环终止条件共同组成语句就叫做<strong>循环语句。</strong></p>
<p><code>for</code> 循环主要用于将某些代码循环若干次，通常跟计数有关系，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p><code>for</code> 循环语句的执行顺序可以总结为如下：</p>
<ul>
<li>首先去执行初始化变量语句，该语句在整个 <code>for</code> 循环中只执行一次。</li>
<li>接着去执行条件表达式，若满足条件则执行循环体，如果不满足则退出循环。</li>
<li>执行完循环体之后，最后去执行操作表达式，至此第一轮循环结束。</li>
<li>然后开始第二轮循环，继续执行条件表达式，重复上面的两个步骤直到退出循环。</li>
</ul>
<h3> while 循环</h3>
<p><code>while</code> 语句可以在表达式为真的情况下，循环执行某一段指定的代码，直到不满足表达式时才结束循环，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行时，先判断条件表达式，若结果为 <code>true</code>，则进入循环体执行循环体代码，如果结果为 <code>false</code>，则退出循环，执行 <code>while</code> 循环后边的代码。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码同样可以用于求 <code>1 + 2 + …… + 100</code> 的值，能够达到与 <code>for</code> 循环同样的效果。</p>
<h3> do…while 循环</h3>
<p><code>do…while</code> 其实是 <code>while</code> 循环的一个变体，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行时，无论如何都会先进入循环体执行一次循环体代码，然后再对条件表达式进行判断，如果条件为 <code>true</code>，则继续执行循环体代码，若条件为 <code>false</code>，则退出循环。</p>
<h3> continue 和 break</h3>
<p><code>continue</code> 用于立即<strong>跳出当次循环，继续进入下一次循环</strong>。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>以上实例中，设置了当 <code>i</code> 为 2 时，跳出当次循环，所以程序打印出了 <code>0-5</code> 中除 2 之外的其他元素。</p>
<p><code>break</code> 主要用于立即<strong>跳出整个循环</strong>。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>以上实例设置了当 <code>i</code> 为 2 时跳出整个循环，所以程序只打印出了 0、1，2 及以后的数不再打印。</p>
<h2> 总结</h2>
<p>以上就是关于流程控制中顺序结构、分支结构以及循环结构的相关知识点了，通过学习，你觉得掌握了多少呢，能用所学知识实现一个 9 * 9 乘法表么？想试试么，那就评论区见真章吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>数组</title>
      <link>https://cunyu1943.site/JavaPark/md/java/js/20220506-array.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/js/20220506-array.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">数组</source>
      <description>什么是数组 之前的学习中，如果我们要存储一个值，一般都是通过变量来存储。但如果我们现在想要存储一系列的值，又该如何存储呢，你可能会说可以用多个变量来进行存储。这种方法也可以，但如果你想，一旦值过多，那岂不是就要多个变量，到时候管理就很混乱了。这时候就想，有没有一个可以存储多个值的数据结构，方便我们进行多个值的存储管理呢？ 针对上面这一需求，提出了数组这一数据结构。 数组是指一组数据的集合，数组中的每个数据被称为元素，而且数组中可以存放任意类型的元素。通过使用数组，当我们需要存储多个值时，就可以不用再去多个创建变量，而只需要创建一个数组就好了。</description>
      <category>JavaScript 教程</category>
      <pubDate>Fri, 06 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 什么是数组</h2>
<p>之前的学习中，如果我们要存储一个值，一般都是通过变量来存储。但如果我们现在想要存储一系列的值，又该如何存储呢，你可能会说可以用多个变量来进行存储。这种方法也可以，但如果你想，一旦值过多，那岂不是就要多个变量，到时候管理就很混乱了。这时候就想，有没有一个可以存储多个值的数据结构，方便我们进行多个值的存储管理呢？</p>
<p>针对上面这一需求，提出了数组这一数据结构。</p>
<p>数组是指一组数据的集合，数组中的每个数据被称为元素，而且数组中可以存放任意类型的元素。通过使用数组，当我们需要存储多个值时，就可以不用再去多个创建变量，而只需要创建一个数组就好了。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 如何创建数组</h2>
<p>既然知道了数组这种数据结构，那怎么才能创建一个数组呢。这里主要用两种方式：</p>
<ul>
<li>利用关键字 <code>new</code> 创建数组。</li>
<li>利用数组字面量创建数组。</li>
</ul>
<h3> 利用 <code>new</code> 创建数组</h3>
<p>这里其实跟 JavaScript 中的面向对象相关，和 Java 中也类似，其语法结构为：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除了数组名，其他都是固定的，通过这种方式，我们就创建了一个新的空数组，此时中没有任何元素，数组长度为 0。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 利用数组字面量创建数组</h3>
<p>除开利用关键字 <code>new</code> 来创建数组之外，也可以利用字面量来创建数组，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过这种方式所创建的数组也是一个空数组，效果和利用 <code>new</code> 创建空数组一样，此时数组长度为 0，里边没有任何元素。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，还可以创建带有初始值的数组，其中的各个元素用逗号 <code>,</code> 分隔，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>通过字面量的方式，我们就创建了一个含有三个初始值的数组。</p>
<h2> 获取数组中元素</h2>
<p>创建好了数组，接下来就是如何拿到数组里边的元素了。JavaScript 中，是通过索引（下标）来访问数组中的元素的。需要注意的是，数组索引是从 0 开始的，而不是从 1 开始。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>以上的实例中，我们通过索引获取到了数组中的第一个元素 <code>村雨遥</code>。</p>
<p>通过索引不仅能访问数组元素，还能设置和修改数组元素，通过 <code>数组名[索引]</code> 的形式即可实现。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 遍历数组</h2>
<p>如果要拿到数组中的所有元素，那是不是得一个一个以 <code>数组名[索引]</code> 的形式来获取呢？答案是，不用！</p>
<p>还记得我们之前学习的循环么，通过循环，我们就能十分简单地实现获取数组所有元素。</p>
<p>不过在那之前，我们还可以学习下如何获取数组的长度，数组提供了一个属性 <code>length</code>，通过该属性，我们就能获取到数组的长度（即数组中元素个数）。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>接着，我们就可以通过循环来获取到数组中的所有元素了。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 数组新增元素</h2>
<p>学习了创建数组、如何获取数组元素以及遍历数组，接下来就来看看，如何往初始化后的数组中新增元素。</p>
<p>先来看看第一种，我们修改数组的长度，然后再往数组里边新增元素。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>通过实例结果可以看到，通过修改数组长度奏效了，数组长度从一开始的 3 变成了 4，而且数组中增加元素也成功了。</p>
<p>再来看看第二种，我们通过修改索引号的方式来增加数组元素。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>同样达到了往数组中新增元素的效果，区别在于没有事先修改数组长度，而是直接修改数组索引的方式来增加元素。</p>
<p>需要注意的时，在向数组中增加元素时，不能利用数组原有的索引来增加元素，否则会修改掉数组原有元素。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>以上就是今天的所有内容了，主要从数组的定义、如何创建数组、如何获取数组中元素、遍历数组以及新增数组元素几个方面总结了数组的知识点。关于更多数组的操作，期待大家和我一起去探索发现！</p>
]]></content:encoded>
    </item>
    <item>
      <title>函数</title>
      <link>https://cunyu1943.site/JavaPark/md/java/js/20220507-function.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/js/20220507-function.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">函数</source>
      <description>函数简介 编程时，可能会定义许多相同或者功能相似的代码，此时我们每需要使用一次，就需要重写编写一次。虽然利用循环结构也能够实现一些简单的重复操作，但是功能较为局限。此时，我们就需要使用到 JavaScript 中的函数。 所谓函数，就是通过将一段可以重复调用的代码块进行封装，从而实现代码的重复利用。 函数使用 了解了函数是个啥，接下来就来看看如何使用函数。 函数使用，主要可以分为两步：声明函数和调用函数。 函数声明</description>
      <category>JavaScript 教程</category>
      <pubDate>Sat, 07 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 函数简介</h2>
<p>编程时，可能会定义许多相同或者功能相似的代码，此时我们每需要使用一次，就需要重写编写一次。虽然利用循环结构也能够实现一些简单的重复操作，但是功能较为局限。此时，我们就需要使用到 JavaScript 中的函数。</p>
<p>所谓函数，就是通过将一段可以重复调用的代码块进行封装，从而实现代码的重复利用。</p>
<h2> 函数使用</h2>
<p>了解了函数是个啥，接下来就来看看如何使用函数。</p>
<p>函数使用，主要可以分为两步：<strong>声明函数</strong>和<strong>调用函数</strong>。</p>
<ul>
<li><strong>函数声明</strong></li>
</ul>
<p>函数声明，也就是说明函数用来干啥的，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>function</code> 是声明函数的关键字，而函数一般是对应某一个功能，所以函数名一般是动词。</p>
<ul>
<li><strong>函数调用</strong></li>
</ul>
<p>既然声明了函数，那就要去调用！调用函数时，通过调用其函数名来执行函数体代码，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下我们在 JavaScript 中定义一个函数，用于求 <code>1 + 2 + … + num</code> 的值。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 函数的参数</h2>
<p>为了让函数能够准确地实现我们的功能，有时候我们需要用到参数。而参数又分为形参和实参，其中，形参位于声明函数的小括号中，而实参位于函数调用的小括号中。</p>
<p>声明带有参数的函数时，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当需要调用函数时，则可以通过以下形式调用。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>函数声明时，在函数名后的小括号中紧跟一些参数，这些参数被叫做<strong>形参</strong>，而在函数调用时，同样需要传递对应的参数，而这些参数就叫做<strong>实参</strong>。两者的区别总结如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>形参</strong></td>
<td>形式上的参数，函数定义时传递的参数</td>
</tr>
<tr>
<td><strong>实参</strong></td>
<td>实际上的参数，函数调用时传递的参数，实参是传递给形参的</td>
</tr>
</tbody>
</table>
<p>所以参数的作用在于，在函数内部某些不能固定的值，可以通过参数在调用函数时传递不同的值进行。</p>
<p>假设我们定义一个函数时，传递了不同数量的参数，就可能出现以下情况。</p>
<ul>
<li>实参个数与形参个数相匹配</li>
<li>实参个数多于形参个数</li>
<li>实参个数少于形参个数</li>
</ul>
<p>以下以实例来分别看着三种情况会出现怎样的结果。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>可以看到实参和形参个数匹配时，程序输出了正确的结果，而当实参个数大于形参个数时，程序同样输出了正确的结果。而当实参个数小于形参个数时，程序结果出错。因此，在定义和调用参数时，一定要注意形参和实参的匹配问题，否则可能会导致程序出错。</p>
<h2> 函数返回值</h2>
<p>在调用函数时，我们会希望将函数调用的结果返回到调用者，此时就可以通过关键字 <code>return</code> 语句来实现，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实上面的实例中我已经给出了函数的返回值了，其中 <code>result</code> 就是函数的返回值。实例中将函数的结果进行了返回，所以在调用时直接能够直接进行输出。</p>
<p>当然，不是所有函数都需要返回值，具体是否需要要根据自己的实际需求来编写。</p>
<h2> 作用域</h2>
<p>通常来讲，程序中用到的代码并不是一直有效的，而用于限定这个代码可用范围的就是这段代码的<strong>作用域</strong>。因为作用域的存在，改高了程序逻辑的局部性，增强了可靠性，最大程度上减少了代码中的冲突。</p>
<p>JavaScript 中，主要有三种作用域：</p>
<ul>
<li>全局作用域</li>
<li>局部作用域</li>
<li>块级作用域</li>
</ul>
<ol>
<li><strong>全局作用域</strong></li>
</ol>
<p>顾名思义，全局作用域也就是在整个代码中都有效。作用于所有代码执行的环境。</p>
<ol start="2">
<li><strong>局部作用域</strong></li>
</ol>
<p>局部有效，作用于函数内的代码环境，因为和函数息息相关，所以也叫做函数作用域。</p>
<ol start="3">
<li><strong>块级作用域</strong></li>
</ol>
<p>块级作用域由 <code>{}</code> 所包含，比如 <code>if</code> 和 <code>for</code> 语句中的 <code>{}</code>。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上实例中 <code>num</code> 的作用域是全局作用域，<code>num1</code> 和 <code>num2</code> 的作用域为局部作用域，而 <code>tmp</code> 的作用域则是块级作用域。</p>
<h2> 匿名函数</h2>
<p>所谓匿名函数，其实指的就是没有函数名的函数。其语法结构如下，主要有两种定义的方式。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是一个简单的匿名函数，要注意匿名函数是不能单独使用的，它通常作为立即执行函数的基础。</p>
<p>为了避免全局变量之间的污染，因此我们有时候需要在定义函数时立即执行函数，这时候我们就可以使用到立即执行函数。立即执行函数是基于匿名函数来实现的，也没有函数名，但是他会在定义后立即执行，其语法结构如下。</p>
<p>立即执行函数也有两种形式，第一种是将匿名函数包裹在一个括号运算符中，然后再跟一个括号。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种则是在匿名函数后面跟上一个括号，然后再将整个包裹在一个括号运算符中。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>但是需要注意的是，如果存在多个匿名函数，那它们之间要用 <code>;</code> 分隔开，否则将会导致报错。</p>
<h2> 总结</h2>
<p>以上就是本文的所有内容了，主要讲解了关于函数的简介、使用、参数、返回值、作用域以及常用的匿名函数。其中可能有一些小的知识点没有顾虑到，如果有什么遗漏的地方，大家可以指出来，然后根据大家所提的建议进行文章修改，让内容更加详细。</p>
]]></content:encoded>
    </item>
    <item>
      <title>面向对象</title>
      <link>https://cunyu1943.site/JavaPark/md/java/js/20220508-oop.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/js/20220508-oop.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">面向对象</source>
      <description>什么是对象 之前学习的数据类型在存储一些复杂的信息时，十分不方便，而且也难以区分。为此，为了更加详细方便的描述某一个事物，因而提出面向对象的概念。 那什么是对象呢？ 所谓对象，也是 JavaScript 中的一种数据类型，可以看做是一系列无序数据的集合。 有了对象，就可以用来描述某一个事物，比如用对象来描述一个人。其中人的一些静态特征比如姓名、年龄、性别、身高、体重我们就可以用数字类型、字符串类型、数组、布尔类型等数据结构来表示，而人的一些动作比如吃喝拉撒啥的，就可以用函数来进行表示。 如何使用对象</description>
      <category>JavaScript 教程</category>
      <pubDate>Sun, 08 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 什么是对象</h2>
<p>之前学习的数据类型在存储一些复杂的信息时，十分不方便，而且也难以区分。为此，为了更加详细方便的描述某一个事物，因而提出面向对象的概念。</p>
<p>那什么是对象呢？</p>
<p>所谓对象，也是 JavaScript 中的一种数据类型，可以看做是一系列无序数据的集合。</p>
<p>有了对象，就可以用来描述某一个事物，比如用对象来描述一个人。其中人的一些静态特征比如姓名、年龄、性别、身高、体重我们就可以用数字类型、字符串类型、数组、布尔类型等数据结构来表示，而人的一些动作比如吃喝拉撒啥的，就可以用函数来进行表示。</p>
<h2> 如何使用对象</h2>
<p>要使用对象之前，我们需要先进行声明，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如要创建一个王者荣耀中的英雄对象，则可以按照如下方式：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那既然创建了一个对象，那对象里边还有各种属性和方法呀。比如英雄的性别、职业、初始血条值、初始魔法值等等，此外，各个英雄还有各自的技能，用于杀敌清兵。</p>
<p>我们将上面的英雄对象添加上属性和方法，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明对象并添加若干属性之后，我们既可以利用 <code>.</code> 或者 <code>[]</code> 来获取对象中属性所对应的值。紧接着上述实例，我们定义了一个英雄对象，并含有姓名、性别、职业、技能等属性，假设我们要获取其中的姓名属性，这可以通过以下两种方式来获得。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除开属性之外我们的英雄还拥有其他行为，比如放各种技能。以下我们就来看看，如何在对象中添加一个方法。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象中的方式是由方法名和函数两部分共同组成，并且中间使用 <code>:</code> 分隔。</p>
<p>当要使用该方法是，就可以通过以下方式来调用。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 操作对象</h2>
<p>对象作为一种无序的数据集合，要对对象进行操作，无非是给对象增加、修改、查询、删除各个属性或方法。</p>
<p>假设我们现在有以下的对象：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol>
<li><strong>增加</strong></li>
</ol>
<p>现在我们要给 <code>hero</code> 属性添加一个新的属性，就可以通过以下的语法形式形式：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="2">
<li><strong>修改</strong></li>
</ol>
<p>如果要修改其中的一个属性或者方法，则可以通过以下的方式：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下为修改属性和方法的实例：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<ol start="3">
<li><strong>查询</strong></li>
</ol>
<p>而如果要查询对象的属性或者方法，则可以使用的方式：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="4">
<li><strong>删除</strong></li>
</ol>
<p>删除对象中的属性，可以通过以下方式：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 遍历对象</h2>
<p>类似于数组，如果我们想要输出数组中的所有元素，我们可以对数组进行遍历。而同样的，对象也可以进行遍历，从而输出对象中所有属性和方法。</p>
<p>但是由于对象是无序的，而且也不像数组一样可以通过 <code>length</code> 属性来确定数组长度，因此要遍历对象，需要用到一个增强型的 <code>for</code> 循环，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如针对以下对象，要输出对象的属性及其属性值，则可以通过 <code>for…in</code> 的方式。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://img-blog.csdnimg.cn/img_convert/da9f90545e07c54cf7b7cf009b4ae549.png" alt=""></p>
<h2> 内置对象</h2>
<p>所谓内置对象，就是 JavaScript 中内部已经提供的对象，里边包含了各种属性和方法，当我们开发者需要时，就可以直接进行调用而不必去重新创建。</p>
<p>我们常用的有 <code>Math</code> 对象，它提供了一些用于数学运算符的方法，常见方法总结如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>random()</code></td>
<td>生成 0 - 1 之间的随机数，左闭右开，即包括 0 但不包括 1</td>
</tr>
<tr>
<td><code>ceil()</code></td>
<td>向上取整</td>
</tr>
<tr>
<td><code>floor()</code></td>
<td>向下取整</td>
</tr>
<tr>
<td><code>max()</code></td>
<td>求最大值</td>
</tr>
<tr>
<td><code>min()</code></td>
<td>求最小值</td>
</tr>
<tr>
<td><code>pow()</code></td>
<td>幂运算</td>
</tr>
<tr>
<td><code>abs()</code></td>
<td>求绝对值</td>
</tr>
</tbody>
</table>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>通过学习本文，你应该知道什么是对象，怎么使用对象，以及如何操作和遍历对象。除此之外，你还应该知道 JavaScript 中的最常见的内置对象 <code>Math</code>，并学习利用 <code>Math</code> 所提供的常用方法来简化日常开发工作。更多关于 JavaScript 中对象的知识，欢迎留言补充！</p>
]]></content:encoded>
    </item>
    <item>
      <title>DOM 元素获取、属性修改</title>
      <link>https://cunyu1943.site/JavaPark/md/java/js/20220509-dom-get-attribute.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/js/20220509-dom-get-attribute.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">DOM 元素获取、属性修改</source>
      <description>什么是 Web API Web API 是指网页服务器或者网页浏览器的应用程序接口。简单来讲，就是我们在编写 JavaScript 代码时，可以通过 Web API 来操作 HTML 网页和浏览器。 Web API 又可以分为两类： DOM（文档对象模型） BOM（浏览器对象模型） DOM（Document Object Model），即文档对象模型，主要用来呈现以及与 HTML 或 XML 文档交互的 API。说白了就是用来操作网页内容，实现各种特效，让用户用起来更顺手。</description>
      <category>JavaScript 教程</category>
      <pubDate>Mon, 09 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 什么是 Web API</h2>
<p>Web API 是指网页服务器或者网页浏览器的应用程序接口。简单来讲，就是我们在编写 JavaScript 代码时，可以通过 Web API 来操作 HTML 网页和浏览器。</p>
<p>Web API 又可以分为两类：</p>
<ul>
<li>DOM（文档对象模型）</li>
<li>BOM（浏览器对象模型）</li>
</ul>
<p></p>
<p>DOM（<code>Document Object Model</code>），即文档对象模型，主要用来呈现以及与 HTML 或 XML 文档交互的 API。说白了就是用来操作网页内容，实现各种特效，让用户用起来更顺手。</p>
<p>再来看看 DOM 树的概念，DOM 树又叫文档树，指的是将 HTML 文档以树状结构直观呈现出来，从而将 HTML 中标签与标签之间的关系直观体现出来。</p>
<p>我们都知道 HTML 页面中包含了许多标签，而 DOM 对象就是浏览器根据这些标签所生成的 JavaScript 对象。通过这个对象，我们就可以找到标签的各种属性，而通过修改这个对象的属性的结果也会映射到 HTML 页面中标签中。也就是说，通过修改 JavaScript 中的对象属性，我们就能够改变对象对应 HTML 中的标签属性。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>
可以看到原本 <code>button</code> 标签的属性 <code>innerText</code> 从原先的点击变成了 村雨遥，说明通过修改 JavaScript 对象属性从而改变 HTML 中标签属性的目的达到了。</p>
<h2> DOM 对象获取</h2>
<ol>
<li><strong>匹配的首个元素</strong>
上一小节实例中我们其实已经获取过相关 DOM 对象了，也就是以下这一句：</li>
</ol>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这其实是通过 CSS 选择器来获取的我们网页中的标签，通过以下语法，我们将会从网页中选择到匹配的第一个元素。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中的参数包含了一个或多个有效的 CSS 选择器字符串，然后返回的结果就是匹配到的 CSS 选择器中的<strong>第一个元素</strong>，是一个 <code>HTMLElement</code> 元素。当然，如果没有匹配到任何元素，则返回 <code>null</code>。</p>
<p>以下是一个获取 DOM 对象的实例。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="2">
<li><strong>匹配的多个元素</strong></li>
</ol>
<p>之前我们已经学习了如何获取匹配的首个元素，但是在日常开发中，我们常常需要获取匹配到的多个元素，此时我们就可以使用如下语法来获取匹配的多个元素。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>除开上述两种获取 DOM 对象之外，还提供了一些用于获取 DOM 元素的方法。最常见的几种总结如下：</p>
<ul>
<li>根据 <code>id</code> 获取一个元素</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>根据标签获取页面中的一类元素</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>根据类名获取页面中的元素</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下是一个分别利用上述方法来获取页面中 DOM 元素的实例。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> DOM 元素内容</h2>
<p>既然已经学会了如何获取 DOM 元素，接下来就是看看如何修改元素中的内容。</p>
<p>这里 Web API 主要提供了三种方式，分别是：</p>
<ul>
<li><code>document.write()</code></li>
<li><code>innerText</code> 属性</li>
<li><code>innerHTML</code> 属性</li>
</ul>
<h3> doucument.write()</h3>
<p>该方法只能将文本内容追加到 <code>&lt;/body&gt;</code> 标签前面的位置，而且文本内容中所包含的标签也同样会被解析。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> innerText 属性</h3>
<p>通过该属性，可以将文本内容添加或者更新到任意标签的位置，而且文本中的标签也不会被解析。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<h3> innerHTML 属性</h3>
<p>除了 <code>innerText</code> 属性之外，也可以是使用 <code>innerHTML</code> 属性来对文本内容进行添加或者更新，但不同于 <code>innerText</code> 的是，<code>innerHTML</code> 会将文本内容中中的标签也进行解析。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<h3> 修改元素样式属性</h3>
<p>出了修改文本内容，我们还可以实现对元素样式的控制，主要可以通过以下三种方式：</p>
<ul>
<li>通过 <code>style</code> 属性操作 CSS</li>
<li>通过类名 <code>className</code> 操作 CSS</li>
<li>通过 <code>classList</code> 操作类控制 CSS</li>
</ul>
<ol>
<li><strong>通过 <code>style</code> 属性操作 CSS</strong></li>
</ol>
<p>语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="2">
<li>通过类名 <code>className</code> 操作 CSS</li>
</ol>
<p>当设计修改的样式较多时，如果直接通过 <code>style</code> 属性修改比较麻烦，此时就可以通过操作 CSS 类名的方式来进行批量修改，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>使用类名来操作 CSS 时，需要注意一下，如果原先的元素中已经有了 CSS 类，那么此时新增的 CSS 类将覆盖之前 CSS 类。</p>
<ol start="3">
<li><strong>通过 <code>classList</code> 来操作 CSS</strong></li>
</ol>
<p>针对通过类名 <code>className</code> 操作 CSS 会覆盖以前类名的问题，JavaScript 中又提供了 <code>classList</code> 的方式来追加和删除类名。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>add('类名')</code></td>
<td>追加一个类</td>
</tr>
<tr>
<td><code>remove('类名')</code></td>
<td>删除一个类</td>
</tr>
<tr>
<td><code>toggle('类名')</code></td>
<td>切换一个类</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<h2> 总结</h2>
<p>本文首先讲了什么是 Web API，然后根据 Web API 所提供的各种方法，从页面中获取 DOM 对象，并对 DOM 对象中的元素内容进行设置和修改。</p>
<p>主要内容集中在常用的 DOM 对象获取方法 <code>querySelector()</code>、<code>querySelectorAll()</code>，以及 DOM 元素内容 3 种修改方式 <code>document.write()</code>、<code>innerText</code>、<code>innerHTML</code> ，最后介绍了如何对 DOM 元素的样式修改，实现样式的增加、转换和删除。</p>
]]></content:encoded>
    </item>
    <item>
      <title>DOM 事件</title>
      <link>https://cunyu1943.site/JavaPark/md/java/js/20220510-dom-event.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/js/20220510-dom-event.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">DOM 事件</source>
      <description>事件 什么是事件 在之前 DOM 的学习中，我们主要学习了如何获取 DOM 元素，并且学会了如何给获取的元素进行属性修改等操作。但这些基本都是静态的修改，并没有接触到一些动作。而今天要学习的事件，其实就是这些动作的总称。 所谓事件，就是在编程时系统内所发生的动作或者发生的事情，比如在网页中点击一个按钮之后，我们就能实现登录或者注册之类的功能。 事件监听 事件监听，就是让程序检测是否有事件产生，一旦有事件触发，就立即调用一个函数做出响应，这个过程就叫做注册事件。其语法结构如下： 元素.addEventListener(&amp;apos;事件&amp;apos;, 要执行的函数);</description>
      <category>JavaScript 教程</category>
      <pubDate>Tue, 10 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 事件</h2>
<h3> 什么是事件</h3>
<p>在之前 DOM 的学习中，我们主要学习了如何获取 DOM 元素，并且学会了如何给获取的元素进行属性修改等操作。但这些基本都是静态的修改，并没有接触到一些动作。而今天要学习的事件，其实就是这些动作的总称。</p>
<p>所谓事件，就是在编程时系统内所发生的动作或者发生的事情，比如在网页中点击一个按钮之后，我们就能实现登录或者注册之类的功能。</p>
<h3> 事件监听</h3>
<p>事件监听，就是让程序检测是否有事件产生，一旦有事件触发，就立即调用一个函数做出响应，这个过程就叫做注册事件。其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要实现事件监听，要同时包含以下三要素：</p>
<ul>
<li><strong>事件源</strong>：也就是上面语法中所对应的元素，指的是谁发出的事件，也就是网页中哪个 DOM 元素被事件所触发。</li>
<li><strong>事件</strong>：以何种方式触发，比如鼠标单击 <code>click</code>。</li>
<li><strong>事件调用函数</strong>：也就是语法结构中要执行的函数，我们触发事件后，需要去做什么。</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是一个事件监听的实例，通过在网页中点击按钮，就会执行事件调用函数，弹窗显示内容。</p>
<h3> 事件类型</h3>
<p>学习了事件的定义以及如何实现一个最简单的事件监听，接下来就来看看，Web API 中为 DOM 提供的常用事件类型有哪些。</p>
<p>主要有 4 种类型的事件，分为：</p>
<ul>
<li><strong>鼠标事件</strong></li>
<li><strong>焦点事件</strong></li>
<li><strong>键盘事件</strong></li>
<li><strong>文本事件</strong></li>
</ul>
<p>以下就分别来看看这些类型的事件又可以细分为哪些小类。</p>
<ol>
<li><strong>鼠标事件</strong></li>
</ol>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>click</code></td>
<td>鼠标点击</td>
</tr>
<tr>
<td><code>mouseenter</code></td>
<td>鼠标经过</td>
</tr>
<tr>
<td><code>mouseleave</code></td>
<td>鼠标离开</td>
</tr>
</tbody>
</table>
<ol start="2">
<li><strong>焦点事件</strong></li>
</ol>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>focus</code></td>
<td>获得焦点</td>
</tr>
<tr>
<td><code>blur</code></td>
<td>失去焦点</td>
</tr>
</tbody>
</table>
<ol start="3">
<li><strong>键盘触发</strong></li>
</ol>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>keydown</code></td>
<td>键盘按下触发</td>
</tr>
<tr>
<td><code>keyup</code></td>
<td>键盘抬起触发</td>
</tr>
</tbody>
</table>
<ol start="4">
<li><strong>文本事件</strong></li>
</ol>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>input</code></td>
<td>用户输入事件</td>
</tr>
</tbody>
</table>
<h2> 高阶函数</h2>
<p>高阶函数，简单的说可以被理解为函数的高级应用，JavaScript 中函数能够当成值来对待，然后基于这个值来实现函数的高级应用。</p>
<h3> 函数表达式</h3>
<p>函数表达式其实和普通的函数没有本质上的区别，以下是一个函数表达式和一个普通函数。</p>
<ul>
<li>函数表达式</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>普通函数</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用时，可以发现调用方式其实都一样，两者最终得到的结果也一致。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 回调函数</h3>
<p>如果有两个函数 A 和 B，假设我们将函数 A 作为参数传递给函数 B，那么我们此时将函数 A 叫做 <strong>回调函数</strong>。总结来说就是如果一个函数被当做参数来传递给另一个函数时，则这个被当做参数的函数就叫做回调函数。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 环境对象</h2>
<p>环境对象是指函数内部特殊的变量 <code>this</code>，它代表着当前函数运行时所处的环境。</p>
<p>JavaScript 中，<code>this</code> 不是固定不变的，它会随着执行环境的变化而变化。<code>this</code> 在不同位置，也有着不同的含义。</p>
<table>
<thead>
<tr>
<th>位置</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>方法中</td>
<td><code>this</code> 表示该方法所属的对象</td>
</tr>
<tr>
<td>单独使用</td>
<td><code>this</code> 表示全局对象</td>
</tr>
<tr>
<td>函数中</td>
<td><code>this</code> 表示全局对象</td>
</tr>
<tr>
<td>事件中</td>
<td><code>this</code> 表示接收事件的元素</td>
</tr>
</tbody>
</table>
<ol>
<li><strong>方法中</strong></li>
</ol>
<p>假设有一个对象，则此时对象方法 <code>info</code> 中的 <code>this</code> 就代表 <code>hero</code> 这个对象。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>单独使用</strong></li>
</ol>
<p>单独使用时，<code>this</code> 指向了全局对象。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="3">
<li><strong>函数中</strong></li>
</ol>
<p>函数中使用 <code>this</code> 时，同样指向全局对象。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>本文主要从什么是事件、如何实现事件监听和常见的事件类型三个方面介绍了关于事件的知识点。此外，从函数表达式和回调函数对函数的高阶用法做了简要介绍。最后则是对使用最多的 <code>this</code> 在不同环境中使用时所代表的一些含义。</p>
]]></content:encoded>
    </item>
    <item>
      <title>JS 教程「11」：DOM 节点</title>
      <link>https://cunyu1943.site/JavaPark/md/java/js/20220511-dom-node.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/js/20220511-dom-node.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">JS 教程「11」：DOM 节点</source>
      <description>节点操作 什么是节点 前边已经讲了什么是 DOM 树，知道了 DOM 树，那么节点就很简单了。在 DOM 树中，每一个内容我们都可以称为节点。 按照 DOM 树中内容的不同，我们又可以对节点进行分类，主要可以分为以下几类： 元素节点：HTML 页面中的所有标签，比如 body、div 、a、img 等。 属性节点：标签的属性，比如 a 标签中的 href，img 标签中的 src 等。 文本节点：也就是页面中的文本，比如 title 元素中所含文本。</description>
      <category>JavaScript 教程</category>
      <pubDate>Sun, 24 Apr 2022 16:15:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 节点操作</h2>
<h3> 什么是节点</h3>
<p>前边已经讲了什么是 DOM 树，知道了 DOM 树，那么节点就很简单了。在 DOM 树中，每一个内容我们都可以称为节点。</p>
<p>按照 DOM 树中内容的不同，我们又可以对节点进行分类，主要可以分为以下几类：</p>
<ul>
<li><strong>元素节点</strong>：HTML 页面中的所有标签，比如 <code>body</code>、<code>div</code> 、<code>a</code>、<code>img</code> 等。</li>
<li><strong>属性节点</strong>：标签的属性，比如 <code>a</code> 标签中的 <code>href</code>，<code>img</code> 标签中的 <code>src</code> 等。</li>
<li><strong>文本节点</strong>：也就是页面中的文本，比如 <code>title</code> 元素中所含文本。</li>
</ul>
<h3> 查找节点</h3>
<h3> 增加节点</h3>
<h3> 删除节点</h3>
<h2> 时间对象</h2>
<h2> 重绘和回流</h2>
]]></content:encoded>
    </item>
    <item>
      <title>简介，安装及配置</title>
      <link>https://cunyu1943.site/JavaPark/md/java/maven/20220101-maven-intro-install.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/maven/20220101-maven-intro-install.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">简介，安装及配置</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 在我们之前的开发过程中，往往会遇到以下问题： 一个项目就是一个工程，当项目过大时，难以管理； 项目中的 jar 包（也就是我们的依赖文件），需要我们手动进行移动到 Web 项目的 WEB-INF/lib 目录中； jar 一般是通过下载或其他人打包后获取； 各个 jar 包之间繁琐的依赖关系需要我们自行解决；</description>
      <category>Maven 教程</category>
      <pubDate>Sat, 01 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>在我们之前的开发过程中，往往会遇到以下问题：</p>
<ul>
<li>一个项目就是一个工程，当项目过大时，难以管理；</li>
<li>项目中的 jar 包（也就是我们的依赖文件），需要我们手动进行移动到 Web 项目的 <code>WEB-INF/lib</code> 目录中；</li>
<li>jar 一般是通过下载或其他人打包后获取；</li>
<li>各个 jar 包之间繁琐的依赖关系需要我们自行解决；</li>
</ul>
<p>针对以上的问题，我们提出采用项目管理工具来对我们的项目进行管理，而这就是我们今天所要讲的 Maven。</p>
<p>通过使用 Maven，我们就能将一个大型的项目拆分为多个工程。此外，通过 Maven，我们可以很方便的对各个 jar 包进行统一管理，而且它也能解决各个包之间的依赖关系。</p>
<h2> 什么是 Maven</h2>
<p>Maven 是一个项目管理工具，包含了一个项目对象模型（<code>Project Object Model</code>），反映在配置中就是 <code>pom.xml</code> 文件。其中包含了一个项目的生命周期、一个依赖管理系统，以及定义在项目生命周期阶段的插件（<code>plugin</code>）和目标（<code>goal</code>）。</p>
<p>其中 Maven 最核心的两大概念包括 <strong>依赖管理</strong> 和 <strong>项目构建</strong>。</p>
<ul>
<li><strong>依赖管理</strong>：提供对 <code>jar</code> 的统一管理。（Maven 提供了一个中央仓库，当我们在项目中添加完依赖后，Maven 就会自动去中央仓库中下载相关依赖）。</li>
<li><strong>项目构建</strong>：Maven 提供对项目的编译、测试、打包、部署、上传到私服等。</li>
</ul>
<h2> Maven 安装</h2>
<p>Maven 属于 Java 项目，因此使用 Maven 必须依赖于 JDK。</p>
<p>首先我们要确保我们的电脑上已经安装了 JDK，可以使用如下命令来进行确认。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果出现如下的提示，则说明我们的 JDK 安装成功了（当然，你可能和我安装的不是一个版本，但只要出现下面类似的提示，就代表你也成功了）。</p>
<p></p>
<p>安装好 JDK 之后，然后接下来在安装 Maven，安装过程如下：</p>
<ol>
<li>下载 Maven，下载地址：<a href="https://maven.apache.org/download.cgi%E3%80%82%E5%A6%82%E4%B8%8B%E5%9B%BE%EF%BC%8C%E6%88%91%E4%BB%AC%E5%9C%A8" target="_blank" rel="noopener noreferrer">https://maven.apache.org/download.cgi。如下图，我们在</a> Windows 中一般选择第二项进行下载，而在 macOS 或者 Linux 系统中，则选择第一项进行下载。</li>
</ol>
<p></p>
<ol start="2">
<li>将下载后的压缩包进行解压</li>
</ol>
<p></p>
<ol start="3">
<li>配置环境变量</li>
</ol>
<p>这里需要配置环境变量，一个是新建一个系统变量用于指向 Maven 解压缩后的路径，另一个则是修改 Path 变量环境，新加上一条指向 Maven 的 bin 目录的路径。</p>
<ul>
<li>MAVEN_HOME：即刚才解压缩后 Maven 的存放路径</li>
</ul>
<p></p>
<ul>
<li>Path：<code>%MAVEN_HOME%\bin</code></li>
</ul>
<p></p>
<ol start="4">
<li>校验安装是否成功</li>
</ol>
<p>当我们配置环境变量之后，此时就可以打开一个新的 cmd 窗口，然后利用如下校验命令来测试我们的 Maven 是否安装成功，安装成功则会出现如下提示。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h2> Maven 目录结构</h2>
<p>安装好 Maven 之后，其目录和内容如下，各目录内容如下：</p>
<p></p>
<ul>
<li><strong>bin</strong></li>
</ul>
<p>包含 mvn 运行的脚本，用于配置 Java 命令，准备好 classpath 和相关的 Java 系统属性，然后执行 Java 命令。</p>
<ul>
<li><strong>boot</strong></li>
</ul>
<p>只包含一个文件，是一个类加载器框架，相对于默认的 Java 类加载器，提供了更丰富的语法以方便配置。</p>
<ul>
<li><strong>conf</strong></li>
</ul>
<p>包含 <code>settings.xml</code> ，通过修改该文件，能在机器中全局定制 Maven 的行为。</p>
<ul>
<li><strong>lib</strong></li>
</ul>
<p>包含所有 Maven 运行时所需的 Java 类库，Maven 本身是分模块开发，所以里边有不同模块之类的类库。此外还包含了一些 Maven 用到的第三方依赖。</p>
<h2> Maven 配置</h2>
<h3> 仓库镜像配置</h3>
<p>通常安装好 Maven 之后就可以使用了，但是由于 Maven 的中央仓库服务器位于国外，国内使用网速较慢，所以我们最好将中央仓库换为国内的阿里云镜像。</p>
<p>打开 <code>apache-maven-xxx/conf/</code> 目录下的 <code>settings.xml</code> 文件，然后在 <code>mirrors</code> 节点下加入如下配置：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 本地仓库配置</h3>
<p>安装好 Maven 后，本地仓库默认在 <code>当前用户名/.m2/repository</code> 下，但是这个位置比较隐蔽，所以建议自定义为其他路径：</p>
<p>还是打开 <code>apache-maven-xxx/conf/</code> 目录下的 <code>settings.xml</code> 文件，然后将如下路径修改为自己要设置的本地仓库，比如我的本地仓库路径如下图：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>好了，以上就是关于我们日常项目开发中经常使用的 Maven 的相关知识点了。文章介绍了 Maven 是干什么的，以及我们应该如何安装 Maven 和安装后常见的一些设置，最后则是对 Maven 的目录结构进行详解。而在下一篇博客中，我将讲述 Maven 中最常见的命令，看看大家都是用什么命令来进行工作的吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>常用命令及项目骨架生成</title>
      <link>https://cunyu1943.site/JavaPark/md/java/maven/20220102-maven-command-skeleton.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/maven/20220102-maven-command-skeleton.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">常用命令及项目骨架生成</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 上一篇文章中我们已经介绍了什么是 Maven，以及如何进行 Maven 的安装，最后还对 Maven 安装后的简单配置进行了讲解。今天我们就主要来看看 Maven 中的核心概念以及 Maven 在日常使用中常用的命令。</description>
      <category>Maven 教程</category>
      <pubDate>Sun, 02 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>上一篇文章中我们已经介绍了什么是 Maven，以及如何进行 Maven 的安装，最后还对 Maven 安装后的简单配置进行了讲解。今天我们就主要来看看 Maven 中的核心概念以及 Maven 在日常使用中常用的命令。</p>
<h2> Maven 核心</h2>
<h2> 构建</h2>
<p>所谓构建，就是指项目的构建，它是面向过程的，是一系列步骤的总和，主要包括项目代码的编译、运行、测试、打包以及部署等等。而 Maven 所支持的构建主要有如下几种：</p>
<ol>
<li><strong>清理</strong>：删除之前编译产生的文件，为新的代码编译做好准备；</li>
<li><strong>编译</strong>：将源代码编译为执行代码，支持批量编译；</li>
<li><strong>测试</strong>：通过执行测试代码，验证功能是否正常，而且它也是支持批量测试的；</li>
<li><strong>报告</strong>：通过执行测试，生成测试结果的文件；</li>
<li><strong>打包</strong>：讲项目中的 <code>class</code> 文件、配置文件打包到一个压缩文件中。对于一般程序，打包的压缩文件扩展名通常是 <code>.jar</code>，而对于 Web 应用，则起压缩文件扩展名通常是 <code>.war</code>；</li>
<li><strong>安装</strong>：把打包好的文件安装到本地仓库；</li>
<li><strong>部署</strong>：让程序跑起来。</li>
</ol>
<h3> Maven 核心概念</h3>
<ol>
<li><strong>pom</strong>：项目对象模型，Maven 将项目当做一个模型，用于控制 Maven 构建项目的过程，通过它来管理 jar 依赖；</li>
<li><strong>目录结构</strong>：Maven 的目录和文件位置都是约定俗成的；</li>
<li><strong>坐标</strong>：用于表示资源的唯一标识；</li>
<li><strong>依赖管理</strong>：使用 jar 文件来管理项目；</li>
<li><strong>仓库管理</strong>：资源存放的路径；</li>
<li><strong>生命周期</strong>：Maven 工具构建项目的过程；</li>
<li><strong>插件和目标</strong>：执行 Maven 构建是的工具就是插件</li>
<li><strong>继承</strong></li>
<li><strong>聚合</strong></li>
</ol>
<h2> 常用命令</h2>
<p>Maven 中的一些常见命令如下：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>mvn clean</code></td>
<td>清理</td>
<td>用于清理已编译好的文件</td>
</tr>
<tr>
<td><code>mvn compile</code></td>
<td>编译</td>
<td>将 Java 源代码编译成字节码 <code>.class</code> 文件</td>
</tr>
<tr>
<td><code>mvn test</code></td>
<td>测试</td>
<td>项目测试</td>
</tr>
<tr>
<td><code>mvn package</code></td>
<td>打包</td>
<td>根据用户配置，将项目打包为 <code>jar</code> 包或 <code>war</code> 包</td>
</tr>
<tr>
<td><code>mvn install</code></td>
<td>安装</td>
<td>手动向本地仓库安装一个 <code>jar</code></td>
</tr>
<tr>
<td><code>mvn deploy</code></td>
<td>上传</td>
<td>将 <code>jar</code> 上传到私服</td>
</tr>
</tbody>
</table>
<h2> 利用 Archetype 来生成项目骨架</h2>
<p>实际上，为了更快捷的创建 Maven 项目骨架，我们可以使用 maven archetype 来创建，创建过程如下：</p>
<ol>
<li>首先进入你要创建项目骨架的目录，然后执行如下命令：</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>然后会有很长的输出，有多种可用的 Archetype 供你选择，选择你所需要的，然后输入对应编号即可；</li>
</ol>
<p></p>
<ol start="3">
<li>接着会让你输入 <code>groupId</code>、<code>artifactId</code>、<code>version</code>、<code>package</code> 等信息；</li>
</ol>
<p></p>
<ol start="4">
<li>再接着让你确认相关信息；</li>
</ol>
<p></p>
<ol start="5">
<li>最后确认无误后，回车生成即可。</li>
</ol>
<h2> 项目结构</h2>
<p>项目生成后的目录中主要包含如下文件：</p>
<p></p>
<p>其中 <code>src</code> 目录包含了项目的主代码和资源，同时还包括了测试相关的代码以及资源。而 <code>pom.xml</code> 则定义了项目的所有配置。</p>
<p>假设我们有一个 <code>HelloWorld</code> 的项目，我们利用 Maven 来进行管理时，其项目结构大致应该是如下：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>HelloWorld</code> 是根目录，也就是我们的工程名，而 <code>src</code> 目录下主要是存放源代码，其下有主要分为 <code>java</code> 和 <code>resources</code>，<code>java</code> 目录主要用于存放程序包以及程序包中的 Java 文件，<code>resources</code> 目录则是存放程序中所要使用的配置文件。</p>
<p><code>test</code> 目录结构同 <code>src</code>，只不过顾名思义，这里主要是存放用于测试的代码和配置文件，而且这不是一个必选项，我们可以根据自己的需要进行选择。</p>
<p>最后则是 <code>pom.xml</code>，这个每个 Maven 所管理项目的核心文件，这是必须的，后续的依赖管理等工作都基于此文件来操作。</p>
<p></p>
<p></p>
<h2> 总结</h2>
<p>好了，以上就是 Maven 中的一些常用命令和如何利用 Archetype 来生成项目骨架，以及利用 Maven 所生成的项目的总体结构了。如果你觉得对你有所帮助，还请点赞关注一波哦。今天就到此为止了，下一期我们继续来看如何利用 Maven 进行依赖管理，敬请期待吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>仓库、坐标以及依赖管理</title>
      <link>https://cunyu1943.site/JavaPark/md/java/maven/20220103-maven-warehouse-dependency.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/maven/20220103-maven-warehouse-dependency.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">仓库、坐标以及依赖管理</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 在我们创建使用 Maven 项目的过程中，当需要用到第三方的插件时，都是通过依赖管理来达成，也就是 Maven 项目中必有的 pom.xml 文件。POM（Project Object Model），即 项目对象模型，其中定义了 Maven 项目的形式。因此，pom.xml 可以看做是 Maven 项目中的导航。</description>
      <category>Maven 教程</category>
      <pubDate>Mon, 03 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>在我们创建使用 Maven 项目的过程中，当需要用到第三方的插件时，都是通过依赖管理来达成，也就是 Maven 项目中必有的 <code>pom.xml</code> 文件。POM（Project Object Model），即 <strong>项目对象模型</strong>，其中定义了 Maven 项目的形式。因此，<code>pom.xml</code> 可以看做是 Maven 项目中的导航。</p>
<h2> Maven 仓库</h2>
<p>所谓仓库，就和我们平常说的粮仓啥的差不多，其实都是用来存放东西的。只不过在 Maven 项目中，仓库使用来存放我们项目所使用的 jar 包以及 Maven 所使用的各种 jar 包的。</p>
<p>而根据仓库存放位置的不同，我们可将其分为 <strong>本地仓库</strong> 和 <strong>远程仓库</strong>。</p>
<p>其中，本地仓库也就是我们个人 PC 中存放 jar 包的文件夹，用于存放 Maven 项目所需的 jar。</p>
<p>而远程仓库则指的是存放在互联网中的仓库，我们可以将其进一步细分为 <strong>中央仓库</strong>、<strong>中央仓库镜像</strong>、<strong>私服</strong>。</p>
<ul>
<li><strong>中央仓库</strong>：全世界最权威的一个仓库，我们所有的开发人员都可以共享使用，地址为：<a href="https://repo.maven.apache.org" target="_blank" rel="noopener noreferrer">https://repo.maven.apache.org</a>。</li>
<li><strong>中央仓库镜像</strong>：顾名思义，它就是中央仓库的一个备份，它分散在各大洲的重要城市，方便各个地方的程序员使用起来更快捷。</li>
<li><strong>私服</strong>：私服则是处于安全考虑，一般搭建在局域网中，仅提供给公司内部人员使用。</li>
</ul>
<p>那我们如何使用仓库呢？或者说一个 Maven 项目从仓库中获取资源的顺序是怎样的呢？</p>
<p>通常来讲，当我们要使用 Maven 仓库中的资源时，是不需要我们去人为干预的。假设我们要使用某一个驱动，我们首先去 <code>pom.xml</code> 中进行配置，接着 Maven 将自动先去检查我们的本地仓库中是否存在该资源，如果没有，那么就到私服中午查找，如果还没有找到，那么就到中央仓库镜像中去查询，最后如果连镜像仓库中也没法找到，那就只有到中央仓库去进行搜索了。</p>
<h2> Maven 坐标</h2>
<p>坐标，其实就相当于我们人的身份证，它是唯一的，用于标识一个项目。一个坐标的组成一般有如下几部分，前三者必须，<code>packaging</code> 可选，<code>classifier</code> 不能直接定义。</p>
<ul>
<li><strong>groupId</strong>：定义 Maven 项目隶属的实际组织，一般约定以创建该项目的组织名称的逆向域名开头。比如说公司的域名是：<a href="http://google.com" target="_blank" rel="noopener noreferrer">google.com</a>，那么我们就可以将 <code>groupId</code> 设置为 <code>com.google</code>。</li>
<li><strong>artifactId</strong>：定义实际项目中的一个 Maven 项目（模块），推荐使用实际项目名作为前缀。</li>
<li><strong>version</strong>：定义 Maven 项目当前所处版本，一般使用三位数字进行标识，如 <code>1.1.1</code>。</li>
<li><strong>packaging</strong>：项目打包方式，可以是 <code>jar</code>、<code>war</code>、<code>rar</code>、<code>ear</code>、<code>pom</code>，默认使用 <code>jar</code>。</li>
<li><strong>classifier</strong>：帮助定义构建输出的一些附属构建，与主构件对应。</li>
<li><strong>dependencies</strong>：添加项目所需的 <code>jar</code> 所对应的 Maven 坐标,，表示我们项目中所需的各种资源说明。</li>
<li><strong>dependency</strong>：<code>dependencies</code> 的一个子标签，一个 <code>dependency</code> 对应一个坐标。</li>
<li><strong>properties</strong>：用于设置属性。</li>
<li><strong>scope</strong>：表示依赖的范围，通常有如下几种：</li>
</ul>
<table>
<thead>
<tr>
<th>依赖范围</th>
<th>编译期有效</th>
<th>测试期有效</th>
<th>运行时有效</th>
<th>打包有效</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>compile</code></td>
<td>😄</td>
<td>😄</td>
<td>😄</td>
<td>😄</td>
</tr>
<tr>
<td><code>test</code></td>
<td>😡</td>
<td>😄</td>
<td>😡</td>
<td>😡</td>
</tr>
<tr>
<td><code>privided</code></td>
<td>😄</td>
<td>😄</td>
<td>😡</td>
<td>😡</td>
</tr>
<tr>
<td><code>runtime</code></td>
<td>😡</td>
<td>😄</td>
<td>😄</td>
<td>😄</td>
</tr>
<tr>
<td><code>system</code></td>
<td>😄</td>
<td>😄</td>
<td>😡</td>
<td>😡</td>
</tr>
</tbody>
</table>
<p>以下就是一个最简单的 Maven 坐标实例：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 依赖冲突</h2>
<h3> 冲突产生原因</h3>
<p>Maven 项目中，通常都会定义血多 <code>dependency</code>，每个 <code>dependency</code> 内部也会定义它的 <code>dependency</code>，而有时各个依赖之间会产生冲突，冲突的原因通常主要是 <strong>由于 <code>jar</code> 包依赖的传递性</strong>，如果在一个项目中同时引入了一个依赖的不同版本，就可能导致依赖冲突。</p>
<h3> 解决冲突的办法</h3>
<p>当冲突产生时，需要如何解决呢？通常我们有两种处理策略：</p>
<ul>
<li><strong>Maven 的默认处理策略</strong>：</li>
</ul>
<ol>
<li><strong>最短路径优先</strong>：对于不同路径长度的 <code>jar</code> 包，优先选择路径更短的生效。</li>
<li><strong>最先声明优先</strong>：当路径一样时，如 <code>A -&gt; B -&gt; C</code> ，<code>E -&gt; F -&gt; C</code>，那么则谁先声明则先选择谁生效。</li>
</ol>
<ul>
<li><strong>移除依赖：用于排除某项依赖的依赖包</strong></li>
</ul>
<p>除开上述策略外，我们也可以手动在 <code>pom.xml</code> 中使用 <code>&lt;exclusion&gt;</code> 标签来排除发生冲突的依赖包，如下面用于排除 <code>spring-core</code> 冲突的例子：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>今天关于 Maven 的仓库和坐标的相关知识，以及 Maven 中依赖产生冲突的原因和如何解决冲突的内容就到此结束了。个人水平有限可能有些遗漏的方面，如果你有更多关于以上方面的知识，欢迎评论交流。既然差不多讲完了 Maven 中的核心知识点，那么下一次我们就来看看怎么使用 Maven 来进行实战吧。</p>
]]></content:encoded>
    </item>
    <item>
      <title>使用 IDEA 创建 Maven 项目</title>
      <link>https://cunyu1943.site/JavaPark/md/java/maven/20220104-maven-project-with-idea.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/maven/20220104-maven-project-with-idea.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">使用 IDEA 创建 Maven 项目</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 之前我们已经学习过 Maven 是什么，我们可以用它来干什么。接着我们又介绍了如何安装和配置 Maven，再接着，我们又了解了 Maven 中常用的一些命令以及如何利用 Archetype 来生成项目骨架，并对利用 Maven 所生成项目的结构进行了描述。最后则是 Maven 中的一些核心概念和如何进行依赖管理，并说明当依赖产生冲突时，应该如何解决。但以上始终还是停留在概念的阶段，并未进入我们实际的开发中。那么今天的内容就主要来看看，我们如何利用 IDEA 搭配 Maven 来开发一个简单的 Demo。</description>
      <category>Maven 教程</category>
      <pubDate>Tue, 04 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>之前我们已经学习过 Maven 是什么，我们可以用它来干什么。接着我们又介绍了如何安装和配置 Maven，再接着，我们又了解了 Maven 中常用的一些命令以及如何利用 Archetype 来生成项目骨架，并对利用 Maven 所生成项目的结构进行了描述。最后则是 Maven 中的一些核心概念和如何进行依赖管理，并说明当依赖产生冲突时，应该如何解决。但以上始终还是停留在概念的阶段，并未进入我们实际的开发中。那么今天的内容就主要来看看，我们如何利用 IDEA 搭配 Maven 来开发一个简单的 Demo。</p>
<h2> IDEA 中的 Maven 配置</h2>
<p>依次进入 <code>File -&gt; Settings -&gt; Build,Execution,Deployment -&gt; Build Tools -&gt; Maven</code>，IDEA 默认使用它自带的 Maven，我们可以自定义为自己的 Maven，更加方便管理。</p>
<p>这里主要配置的项目有：</p>
<ul>
<li><strong>Maven home directory</strong>：也就是我们 Maven 安装的路径；</li>
<li><strong>User settings file</strong>：Maven 安装路径下配置文件夹中的 <code>settings.xml</code> 所在路径；</li>
<li><strong>Local repository</strong>：也就是我们前边文章中所配置的本地仓库位置。</li>
</ul>
<p>比如我 IDEA 中的 Maven 相关设置就可以参照下图。</p>
<p></p>
<h2> 使用 IDEA 创建 Maven 项目</h2>
<p>接下来我们就来看看如何使用 IDEA 创建 Maven 项目，具体可以分为如下步骤：</p>
<ol>
<li>首先一次进入 <code>File -&gt; New -&gt; Project</code>，然后选择 Maven，表示新建一个 Maven 项目；</li>
</ol>
<p></p>
<ol start="2">
<li>填写相关信息，也就是我们之前所介绍的 Maven 的坐标。这里我们只要提供 GroupId、ArtifactId 以及 Version 这三项就足够了。关于其他的配置，我们可以到后续的 <code>pom.xml</code> 中去进行配置；</li>
</ol>
<p></p>
<ol start="3">
<li>新建项目完成，完成后的项目目录结构如下，基本上也就是之前介绍过的项目结构；</li>
</ol>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="4">
<li>默认生成的 <code>pom.xml</code> 如下。</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li>到上一步之后，一个新的 Maven 项目就完成了，接下来就是去编写业务代码了。</li>
</ol>
<h2> 业务代码编写</h2>
<p>上面已经学会了如何创建一个 Maven 项目，接下来就是编写业务代码了，我们以最经典的 <code>HelloWorld</code> 为例。</p>
<h3> 项目主代码</h3>
<p>项目主代码会打包到最终构件中，默认位于 <code>src/main/java</code> 目录下，我们创建一个 <code>HelloWorld</code> 的主类；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 项目测试代码</h3>
<p>要对主代码进行测试，那么则需要编写测试代码，测试代码默认位于 <code>src/test/java</code> 目录，要对指定主代码进行测试，编写测试代码时要和主代码保持相同的目录结构。如上述主代码位于 <code>com.cunyu.helloworld</code> 包下，那么测试代码也应该位于 <code>com.cunyu.helloworld</code> 包下，只是根目录不同。而要进行测试，通常首选 JUnit 单元测试。所以编写测试代码对主代码进行测试主要有如下步骤。</p>
<ol>
<li>首先在 <code>pom.xml</code> 添加 JUnit 依赖；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>接着编写测试代码；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>经过上边的项目创建以及业务代码编写之后，一个 Maven 版的 <code>Hello World</code> 项目到此就结束了。是不是很简单呢，赶快自己动手试试吧！</p>
<p>创作不易，如果大家觉得我的文章对你所有帮助，那就动动你的小手，帮我点赞关注一波吧。💖💖💖</p>
]]></content:encoded>
    </item>
    <item>
      <title>简介</title>
      <link>https://cunyu1943.site/JavaPark/md/java/mybatis/20220201-introduction.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/mybatis/20220201-introduction.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">简介</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 什么是持久化 持久化是将程序数据在持久状态和瞬时状态间转换的机制，将数据保存到可永久保存的存储设备中。最常见的就是将内存中的对象存储在数据库中，或者存在磁盘文件、XML 数据文件中等等。其中，文件 IO 属于持久化机制，而 JDBC 也是一种持久化机制。</description>
      <category>MyBatis 教程</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<h3> 什么是持久化</h3>
<p>持久化是<strong>将程序数据在持久状态和瞬时状态间转换的机制</strong>，将数据保存到可永久保存的存储设备中。最常见的就是将内存中的对象存储在数据库中，或者存在磁盘文件、XML 数据文件中等等。其中，文件 IO 属于持久化机制，而 JDBC 也是一种持久化机制。</p>
<h3> 为什么需要持久化</h3>
<p>之所以需要持久化，是由于内存自身缺陷导致。我们知道，内存在遇到某些外界因素影响后会丢失，但是我们的一些数据是绝对不能丢失的，但我们又无法保证不受外界因素影响。同时内存成本较高，比起硬盘、光盘等外存，其价格要高上几个数量级，而且维持成本也较高。在这种情况下，我们不得不寻求另一种方案来存储数据对象，而持久化就是其中的一种选择，我们能够通过持久化将数据缓存到外存，从而降低成本。</p>
<h3> 什么是持久层</h3>
<p>所谓持久层，就是用于完成持久化工作的代码块（dao 层【DAO（Data Access Object）】）。数据持久化通常都是将内存中的数据保存到磁盘中来加以固化，而实现这一过程大多是通过<strong>关系数据库</strong>来完成。而且比起其他部分，该层需要有一个较为清晰和严格的逻辑边界。</p>
<h2> 什么是 MyBatis</h2>
<h3> 为什么不用 JDBC？</h3>
<p>针对数据库操作，Java 其实已经提供了相应的解决方案 -- JDBC。那既然已经有了现成的工具，那为什么还会有 MyBatis 的出现呢？</p>
<p>虽然 JDBC 提供了对数据库操作的解决方案，但是存在着如下问题：</p>
<ol>
<li>
<p>数据库连接的频繁创建和释放造成了一定程度上的资源浪费，从而影响到系统性能，但如果使用数据库连接池就能在一定程度上缓解该问题；</p>
</li>
<li>
<p>SQL 语句在代码中出现，会造成代码不易维护；</p>
</li>
<li>
<p>使用 <code>preparedStatement</code> 向占位符传递参数时存在硬编码，也会进一步加大系统维护的难度；</p>
</li>
<li>
<p>对结果集进行解析时存在硬编码，SQL 变化将导致解析代码改变，系统难以维护，但如果能将数据库记录进行封装成 POJO 对象，解析起来就会方便很多。</p>
</li>
</ol>
<h3> MyBatis 介绍</h3>
<p>MyBatis 是一个持久层框架，是一个半自动化的<strong>ORM 框架</strong>，不仅支持自定义 SQL、存储过程以及高级映射。还简化了 JDBC 代码以及设置参数和获取结果集的工作过程，使得我们只需要通过简单的 XML 或注解配置，就能将原始类型、接口和 Java POJO 映射为数据库中的记录。</p>
<p>通过对 JDBC 操作数据库的过程进行封装，我们只需要关注 SQL 而不用再去处理注册驱动、创建 <code>connection</code>、创建 <code>statement</code>、手动设置参数、结果集检索等复杂的过程代码。</p>
<p>不同于其他的对象关系映射框架，MyBatis 并未将 Java 对象和数据库表关联，而是将 Java 方法与 SQL 语句关联。</p>
<p>总的来讲，MyBatis 有如下优点：</p>
<ul>
<li>
<p><strong>简单易学</strong>：自身小且简单，无任何第三方依赖；</p>
</li>
<li>
<p><strong>灵活</strong>：MyBatis 不会对应用程序或数据库的现有设计强加任何影响，写在 XML 中，便于统一管理和优化；</p>
</li>
<li>
<p><strong>解除 SQL 与代码程序的耦合</strong>：通过提供 DAO 层，将业务逻辑与数据访问逻辑分离，使系统设计更加清晰、易维护、易于单元测试，提高了程序的可维护性；</p>
</li>
<li>
<p><strong>提供 XML 标签，支持编写动态 SQL</strong>；</p>
</li>
<li>
<p>…</p>
</li>
</ul>
<h3> 其他持久层技术</h3>
<p>除开 JDBC 之外，大家可能还了解到了 Hibernate 和 JPA 等持久层技术。相较于 JDBC 这种原始的方式，它们操作起来显得十分方便，开发效率也很高。但是对于程序中较长和较难的复杂 SQL 需求，就需要绕过框架。此外，由于其 SQL 是内部自动生成的，所以如果要对其做特殊优化则不太容易。Hibernate 和 JPA 都是基于全映射的全自动框架，如果 POJO 中存在大量字段，要进行部分映射时就显得比较困难。最后，由于框架内部反射操作过多，导致数据库性能下降，在当前大数据的背景下，显然不能满足我们的要求。</p>
<h2> MyBatis 安装</h2>
<ol>
<li>首先<a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener noreferrer">下载</a>最新版本 MyBatis；</li>
</ol>
<p></p>
<ol start="2">
<li>解压下载好的安装包，将 <code>mybatis-xxx.jar</code> 放到你项目的类路径下（classpath）；</li>
</ol>
<p></p>
<ol start="3">
<li>如果是 Maven 项目，在 <code>pom.xml</code> 中添加如下依赖即可；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>以上就是今天的所有内容了，主要讲了持久化相关的知识，然后对 Mybatis 做了简单的介绍以及我们为什么要用 Mybatis，最后则是如何安装 Mybatis。原创不易，如果你觉得我写的内容对你有所帮助，那就点赞关注吧。</p>
]]></content:encoded>
    </item>
    <item>
      <title>快速入门</title>
      <link>https://cunyu1943.site/JavaPark/md/java/mybatis/20220202-quick-start.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/mybatis/20220202-quick-start.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">快速入门</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 上一篇文章中我们讲了什么是持久化以及 Mybatis 的相关简介，今天就来看看如何创建一个 Mybatis 入门实例以及如何利用 Mybatis 进行 CRUD。 数据库准备 首先，我们来创建一个数据库，用于后序步骤的使用；</description>
      <category>MyBatis 教程</category>
      <pubDate>Wed, 02 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>上一篇文章中我们讲了什么是持久化以及 Mybatis 的相关简介，今天就来看看如何创建一个 Mybatis 入门实例以及如何利用 Mybatis 进行 CRUD。</p>
<h2> 数据库准备</h2>
<ol>
<li>首先，我们来创建一个数据库，用于后序步骤的使用；</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>接着创建一个表，用于存放数据；</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>向数据库中插入数据</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 创建 Maven 工程</h2>
<ol>
<li>对于如何创建 Maven 工程，可以参照我之前写的一篇文章：<a href="/JavaPark/md/java/maven/20220104-maven-project-with-idea.html" target="blank">利用 IDEA 搭建一个 Maven 项目 </a></li>
<li>接着在项目的 <code>pom.xml</code> 中添加 MyBatis、MySQL、Junit 以及 Lombok 的依赖，关于更多 Lombok 的使用，可以参考我的另一篇文章：<a href="/JavaPark/md/java/se/20220719-lombok-install-and-usage.html" target="blank">Lombok 安装及使用指南</a></li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 准备工作</h2>
<ol>
<li>编写 MyBatis 核心配置文件，在 <code>main/resources</code> 文件下新建 <code>mybatis-config.xml</code> ，配置数据库。这里主要是配置连接的数据库，数据库连接用户名以及密码。</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>编写 MyBatis 工具类；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>接下来创建实体类，用于映射数据库中的 <code>user</code> 表。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 插入操作 <code>insert</code></h2>
<ol>
<li>首先在 <code>UserMapper</code> 接口中添加对应方法</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>在映射文件 <code>UserMapper.xml</code> 中添加 <code>Insert</code> 语句；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>测试方法中测试；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 查询操作 <code>select</code></h2>
<ol>
<li>在 <code>UserMapper</code> 中添加对应方法：</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>接着在 <code>UserMapper.xml</code> 中添加 <code>Select</code> 语句。其中各属性含义如下：</li>
</ol>
<ul>
<li><strong>id</strong>：对应接口中的 <strong>方法名</strong>；</li>
<li><strong>resultType</strong>：SQL 语句执行的返回值；</li>
</ul>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>在测试类中测试即可；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 修改操作 <code>update</code></h2>
<ol>
<li>在 <code>UserMapper</code> 添加对应接口；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>在 <code>UserMapper.xml</code> 中添加 <code>update</code> 语句；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>测试类中测试；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<h2> 删除操作 <code>delete</code></h2>
<ol>
<li>在 <code>UserMapper</code> 中添加接口；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>在 <code>UserMapper.xml</code> 中添加 <code>delete</code> 语句；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>在测试类中测试；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<h2> 最后</h2>
<p>以上就是我们今天的所有内容了，原创不易，如果你觉得我的文章对你有所帮助，那就帮忙点赞关注吧，我们就下篇文章再见吧 ~</p>
<p>而关于文章中的示例代码，我已经上传到了 Github，如果有需要的朋友，可以自取。</p>
<blockquote>
<p>传送门：<a href="https://github.com/cunyu1943/java-learning-demos" target="_blank" rel="noopener noreferrer">https://github.com/cunyu1943/java-learning-demos</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>MyBatis Generator 代码自动生成器</title>
      <link>https://cunyu1943.site/JavaPark/md/java/mybatis/20220203-mybatis-generator.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/mybatis/20220203-mybatis-generator.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">MyBatis Generator 代码自动生成器</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 在日常开发工作中，我们往往需要自己去构建各种数据表所对应的持久化对象（PO）、用于操作数据库的接口（DAO）以及跟 DAO 所绑定的对应 XML。这都是一些重复性的操作，不需要多大技术含量，这时候我们不禁会去想，有没有一种工具，能够帮助我们去自动生成这些文件呢？答案是：有的！</description>
      <category>MyBatis 教程</category>
      <pubDate>Thu, 03 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>在日常开发工作中，我们往往需要自己去构建各种数据表所对应的持久化对象（PO）、用于操作数据库的接口（DAO）以及跟 DAO 所绑定的对应 XML。这都是一些重复性的操作，不需要多大技术含量，这时候我们不禁会去想，有没有一种工具，能够帮助我们去自动生成这些文件呢？答案是：有的！</p>
<p>本文接下来的内容主要适用于使用 MyBatis 来做持久层框架开发的工作，如果不是使用 MyBatis，那么可能本文不太适合你的开发场景。</p>
<h2> MyBatis Generator 简介</h2>
<p>作为一个基于 MyBatis 的独立工具，MyBatis Generator 能够满足我们以上的要求，能够通过简单的配置去帮我们生成数据表所对应的 PO、DAO、XML 等文件，减去我们手动去生成这些文件的时间，有效提高开发效率。MyBatis Generator 运行方式多样，主要可以通过以下几种方式来运行：</p>
<ol>
<li>命令行</li>
<li>Ant</li>
<li>Maven</li>
<li>Java</li>
<li>Eclipse</li>
</ol>
<p>而我平时主要在 Maven 中配置并使用，所以本文主要基于 Maven 环境来进行讲解。</p>
<h2> 准备工作</h2>
<h3> 引入插件</h3>
<p>既然要使用 MyBatis Generator，那么肯定我们的项目中已经配置了数据库和 MyBatis 的相关依赖，如果还没有配置，那么可以在 <code>pom.xml</code> 文件中进行配置，这里主要以 MySQL 数据库为例。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们继续引入 MyBatis Generator 的相关配置。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 插件配置</h3>
<p>完成上述步骤后，我们只是完成了 MyBatis Generator 的引入工作，要想让它正常工作，我们还需要对它进行配置，而 MyBatis Generator 在 <code>pom.xml</code> 中的主要配置主要有以下几点。</p>
<ol>
<li><strong>代码生成器的配置文件所在路径</strong></li>
</ol>
<p>这里主要配置 MyBatis Generator 配置文件所在路径，一般我们将其放在 <code>resources</code> 路径中，而配置文件的名字则可以自定义，这里我以 <code>mybatis-generator-config.xml</code> 为例，此时需要将如下配置加入到 <code>pom.xml</code> 文件中。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="2">
<li><strong>是否每次新生成后覆盖已生成的文件</strong></li>
</ol>
<p>由于项目需求，假设我们的数据库表中有需要新增新的字段，而我们之前已经使用过 MyBatis Generator 生成过相关文件。此时，如果我们想要将新加的字段加入原来生成的文件中，第一种可以采取手动的方式，将旧文件删除，然后重新生成。第二种则是在 MyBatis Generator 中配置，让每次新生成的文件都直接覆盖掉旧文件。具体配置如下，<code>true</code> 则代表覆盖，<code>false</code> 则代表不覆盖。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过有一点需要注意，就算我们设置了覆盖旧文件，MyBatis Generator 也只会覆盖原来的 PO、DAO 文件，此时 Mapper 不会被覆盖，而是采取追加的方式，从而保证我们自己添加的 sql 语句不会被覆盖掉。</p>
<ol start="3">
<li><strong>数据库驱动依赖</strong></li>
</ol>
<p>虽然在项目的 <code>pom.xml</code> 文件中我们已经配置了数据库的相关依赖，但是在 MyBatis Generator 配置中仍然需要对其进行再次配置。此时，这里有两种方式供我们选择。</p>
<p>第一种是再次在引入数据库依赖，具体配置方式如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种则是利用 Maven 的 <code>includeCompileDependencies</code> 属性。一般来讲，我们的项目中肯定已经引入过数据库的相关依赖了，那我们此时配置 <code>includeCompileDependencies</code> 就好了，具体配置方式如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> MyBatis Generator 配置</h3>
<p>我们在上述步骤中已经引入了 MyBatis Generator，而且也在项目配置文件 <code>pom.xml</code> 中配置了 MyBatis Generator 配置文件所在的路径、是否进行文件覆盖以及数据库依赖配置，接下来就该具体来看看，如何对 MyBatis Generator 进行具体配置，配置我们生成代码中的各种细节。</p>
<ol>
<li><strong>外部配置文件</strong></li>
</ol>
<p>一般我们需要引入外部文件，主要用于配置项目数据库，方便我们后续的设置，而引入外部配置文件的方式也很简单，具体配置如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>context 配置</strong></li>
</ol>
<p>除开外部配置外，<code>context</code> 无疑是 MyBatis Generator 中最重要的配置了。一个 <code>context</code> 配置的具体示例如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的各个属性含义如下：</p>
<ul>
<li><strong>id</strong>：唯一标识，不可重复，可以根据我们自己的喜好进行自定义。</li>
<li><strong>defaultModelType</strong>：非必填项，有两个值可选，一个是 <code>conditional</code>，也是默认值，另一个值是 <code>flat</code>，也就是我们常用的一个配置，表示数据库中的一张表对应生成一个 PO。</li>
<li><strong>targetRuntime</strong>：非必填项，这里同样有两个值可选，一个是 <code>MyBatis3</code>，一个是 <code>MyBatis3Simple</code>，两者的最主要区别在于不同配置下所生成的 DAO 和 Mapper 会有所不同，后者生成的 DAO 和 Mapper 会少很多，只含有日常最常用的。</li>
</ul>
<p><code>context</code> 除了上面配置的之外，还有许多子元素需要配置，而且这些子元素的配置的个数以及顺序都是规定好的，如果不按照给定的规则进行配置，则会导致错误，常见子元素及个数配置如下（按照规定的顺序进行从上到下排序）：</p>
<table>
<thead>
<tr>
<th>子元素</th>
<th>最少个数</th>
<th>最多个数</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>property</code></td>
<td>0</td>
<td>N</td>
</tr>
<tr>
<td><code>plugin</code></td>
<td>0</td>
<td>N</td>
</tr>
<tr>
<td><code>commentGenerator</code></td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td><code>jdbcConnection</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>javaTypeResolver</code></td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td><code>javaModelGenerator</code></td>
<td>1</td>
<td>N</td>
</tr>
<tr>
<td><code>sqlMapGenerator</code></td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td><code>javaClientGenerator</code></td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td><code>table</code></td>
<td>1</td>
<td>N</td>
</tr>
</tbody>
</table>
<p>接下来依次对各个子元素进行简单的配置讲解。</p>
<h3> context 子元素配置</h3>
<ol>
<li><strong>property</strong></li>
</ol>
<p>如果我们要给我们的所生成文件的编码类型进行设置，则可以在此处进行配置，具体配置如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li><strong>plugin</strong></li>
</ol>
<p>默认生成的 PO 中，只包含了各个各个属性声明以及各个属性所对应的 <code>setter/getter</code>，如果我们想要生成对应 PO 的 <code>equals</code> 和 <code>hashCode</code> 方法，则可以通过配置如下插件来实现。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要生成 <code>toString</code> 方法，则可以使用如下插件：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为模型生成序列化方法，则使用如下插件：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li><strong>commentGenerator</strong></li>
</ol>
<p>该配置主要用于配置生成的注释，默认情况下是会生成注释的，而且会带上时间戳，如果我们不需要这些配置，则可以通过如下配置来清除：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li><strong>jdbcConnection</strong></li>
</ol>
<p>既然要自动生成对应文件，那肯定得链接数据库，所以我们需要对数据库进行配置，上面我们讲过导入外部配置文件，我们可以通过这种方式将数据库的配置定义在外部文件中，然后通过导入该文件进行配置即可，具体可以通过如下具体步骤进行：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li><strong>javaTypeResolver</strong></li>
</ol>
<p>主要用于配置 JDBC 和 Java 中的类型转换规则，如果我们不配置，会采用默认的一套转换规则，而如果我们需要自定义，也只能配置 <code>bigDecimal</code>、<code>NUMERIC</code> 和时间类型，不能去配置其他类型，否则会导致出错，具体配置规则如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>forceBigDecimals</li>
</ul>
<p>该属性默认为 <code>false</code>，此时它会将 JDBC <code>DECIMAL</code> 和 <code>NUMERIC</code> 类型解析为 <code>Integer</code>，若该属性为 <code>true</code>，此时将会把 JDBC <code>DECIMAL</code> 和 <code>NUMERIC</code> 类型解析为 <code>java.math.BigDecimal</code>。</p>
<ul>
<li>useJSR310Types</li>
</ul>
<p>该属性默认为 <code>false</code>，它会将 JDBC 所有的时间类型都解析为 <code>java.util.Date</code>，若该属性为 <code>true</code>，则会按照如下规则进行解析：</p>
<table>
<thead>
<tr>
<th>转换前</th>
<th>转换后</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>DATE</code></td>
<td><code>java.time.LocalDate</code></td>
</tr>
<tr>
<td><code>TIME</code></td>
<td><code>java.time.LocalTime</code></td>
</tr>
<tr>
<td><code>TIMESTAMP</code></td>
<td><code>java.time.LocalDateTime</code></td>
</tr>
<tr>
<td><code>TIME_WITH_TIMEZONE</code></td>
<td><code>java.time.OffsetTime</code></td>
</tr>
<tr>
<td><code>TIMESTAMP_WITH_TIMEZONE</code></td>
<td><code>java.time.OffsetDateTime</code></td>
</tr>
</tbody>
</table>
<ol start="6">
<li><strong>javaModelGenerator</strong></li>
</ol>
<p>这里主要用于配置自动生成的 PO 所在的包路径和项目路径，这里需要根据自己的需求进行配置，这里以我自己的配置为例，比如我的 PO 所在包为 <code>com.cunyu1943.mybatisgeneratordemo.entity</code>，项目路径为 <code>src/main/java</code>。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7">
<li><strong>sqlMapGenerator</strong></li>
</ol>
<p>配置生成的 <code>Mapper.xml</code> 所存放的路径，比如我们要放在 <code>src/main/resources/mapper</code> 路径下，则配置如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8">
<li><strong>javaClientGenerator</strong></li>
</ol>
<p>配置 <code>Mapper</code> 接口所存放的路径，一般我们都是存放在项目的 <code>mapper</code> 包下，如我的配置为：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="9">
<li><strong>table</strong></li>
</ol>
<p>配置所要自动生成代码的数据库表，这里一张表对应一个 <code>table</code>，如果要生成多张表，则需要配置多个 <code>table</code>，以下为一个具体实例：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>schema</code> 是数据库名，有的数据库需要配置，有的数据库不需要配置，这里需要具体根据你自己所用的数据库来填写，不过建议都填上，方便不同数据库也可以适用。<code>tableName</code> 则对应数据库表名；<code>domainObjectName</code> 对应生成的实体类名，默认可以不用配置，不配置时它将按照帕斯卡命名法将表明转换为类名；而 <code>enableXXXByExample</code> 默认为 <code>true</code>，默认会生成一个 <code>Example</code> 帮助类，不过该配置只有在 <code>targetRuntime="MyBatis3"</code> 时才能生效，当 <code>targetRuntime="MyBatis3Simple"</code> 时，<code>enableXXXByExample</code> 无论如何配置都不起作用。</p>
<h2> 执行生成</h2>
<p>经过上边的配置之后，我们就得到了整体的 MyBatis Generator 配置，完整的配置如下，可以根据自己的需求对其中的配置进行修改后即可使用。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，关于外部文件 <code>generator.properties</code> 的配置具体如下，主要对数据库的相关属性进行配置。</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，当完成所有配置后，就可以利用 Maven 工具来进行代码生成了。具体操作方法如下，点击项目 Maven 配置中的 MyBatis Generator 生成即可。</p>
<p></p>
<h2> 总结</h2>
<p>以上就是利用 Maven 搭配 MyBatis Generator 来配置生成项目 PO、Mapper、XXXMapper.xml 的具体搭建过程了。如果你也刚好有这个需求，那赶紧去试试吧。搭建过程中如果遇到什么问题，欢迎评论区留言交流，我会在看到的第一时间回复。</p>
<p>最后，关于本示例的相关代码，我已经传到了 Github，如果有需要的兄弟，可以自取。</p>
<blockquote>
<p>🎉🎉🎉 传送门 -&gt; <a href="https://github.com/cunyu1943/java-learning-demos/tree/main/mybatis-generator-demo" target="_blank" rel="noopener noreferrer">mybatis-generator-demo</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>简介及入门实例</title>
      <link>https://cunyu1943.site/JavaPark/md/java/mybatisplus/20220201-intro-and-quick-start.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/mybatisplus/20220201-intro-and-quick-start.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">简介及入门实例</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 最开始，要在 Java 中使用数据库时，需要使用 JDBC，创建 Connection、ResultSet 等，然后我们又对 JDBC 的操作进行了封装，创建了许多类似于 DBUtil 等工具类。再慢慢的，出现了一系列持久层的框架：Hibernate、JPA，Mybatis 等。各个框架的特点如下：</description>
      <category>MyBatis Plus 教程</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>最开始，要在 Java 中使用数据库时，需要使用 JDBC，创建 <code>Connection</code>、<code>ResultSet</code> 等，然后我们又对 JDBC 的操作进行了封装，创建了许多类似于 <code>DBUtil</code> 等工具类。再慢慢的，出现了一系列持久层的框架：Hibernate、JPA，Mybatis 等。各个框架的特点如下：</p>
<ul>
<li>
<p><strong>Hibernate</strong>：一个全自动的 ORM 框架，实现了数据库中表和 Java 对象的映射，通过调用 Java 对象的方法，我们就可以实现数据库表中数据的操作。而且通过该框架，我们能够不用修改代码就访问到不同的数据库。</p>
</li>
<li>
<p><strong>JPA</strong>：这是一种规范，定义了访问数据库的各种操作，定义了一致的方法来操作数据库。</p>
</li>
<li>
<p><strong>Mybatis</strong>：需要编写 XML 配置文件，我们需要在 XML 编写 SQL 语句来访问数据库，而且一切操作都需要通过 XML 来完成。而针对单表的 CRUD，也需要使用 XML 文件才能够完成。这样一来对我们开发人员的要求就提高了，我们需要特别熟悉 SQL 语言才能够完成。</p>
</li>
</ul>
<p>其实利用 Mybatis 来进行持久层的开发已经大大减少了工作人员的工作量了，但它的使用还是需要一定的门槛的。Mybatis-Plus 的出现，进一步降低了这道槛。那我们今天就来看看，Mybatis-Plus 到底是如何进一步实现 Mybatis 的增强的。</p>
<h2> Mybatis-Plus 简介</h2>
<h3> 什么是 MyBatis-Plus</h3>
<p>Mybatis-Plus：为简化开发而生</p>
<p>MyBatis-Plus（简称 MP）是一个基于 MyBatis 的增强工具，它对 Mybatis 的基础功能进行了增强，但未做任何改变。使得我们可以可以在 Mybatis 开发的项目上直接进行升级为 Mybatis-plus，正如它对自己的定位，它能够帮助我们进一步简化开发过程，提高开发效率。</p>
<p>Mybatis-Plus 其实可以看作是对 Mybatis 的再一次封装，升级之后，对于单表的 CRUD 操作，调用 Mybatis-Plus 所提供的 API 就能够轻松实现，此外还提供了各种查询方式、分页等行为。最最重要的，开发人员还不用去编写 XML，这就大大降低了开发难度</p>
<p>其官方主页为：<a href="https://mp.baomidou.com" target="_blank" rel="noopener noreferrer">https://mp.baomidou.com</a>。</p>
<h3> Mybatis-Plus 的特点</h3>
<ol>
<li>
<p><strong>无侵入，损耗小</strong></p>
</li>
<li>
<p><strong>强大的 CURD 操作</strong></p>
</li>
<li>
<p><strong>支持 Lambda 形式调用</strong></p>
</li>
<li>
<p><strong>支持主键自动生成</strong></p>
</li>
<li>
<p><strong>支持自定义全局通用模式</strong></p>
</li>
<li>
<p><strong>支持 ActiveRecord 模式</strong></p>
</li>
<li>
<p><strong>内置代码生成器、分页插件、性能分析器和全局拦截插件</strong></p>
</li>
<li>
<p>……</p>
</li>
</ol>
<h3> Mybatis-Plus 结构</h3>
<p></p>
<h2> 快速入门示例</h2>
<h3> 数据库准备</h3>
<p>我们依旧沿用官方文档中提供的实例来进行，那么我们首先来创建一个数据库并进入：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后创建一个员工表，主要有 <code>id</code>、<code>name</code>、<code>sex</code>、<code>email</code> 四大属性。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后插入部分数据：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> SpringBoot 项目</h3>
<p>这里我利用的是 IDEA 创建的一个 SpringBoot 项目，创建后，主要需要注意的有以下几点。</p>
<ol>
<li><strong>添加依赖</strong></li>
</ol>
<p>除开创建 SpringBoot 项目所需的必要依赖之外，我们还需要引入 MP 和 MySQL 的依赖。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li><strong>数据库配置</strong></li>
</ol>
<p>依赖添加完成之后，到配置文件 <code>application.yml</code> 中去添加数据库的相关配置（<strong>注意</strong>：官方创建的配置文件是 <code>application.properties</code>，我们需要手动把它的后缀名改成 <code>.yml</code>）。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li><strong>项目整体结构</strong></li>
</ol>
<p>项目创建完成后，我们最终的项目目录结构如下图所示：</p>
<p></p>
<h3> 编码</h3>
<p>完成数据库准备工作和建立 SpringBoot 项目之后，接下来的工作就是编码了。</p>
<ol>
<li><strong>实体类编写</strong></li>
</ol>
<p>实体类也就对应我们刚才所建立的数据表 <code>employee</code>。因为这里使用了 Lombok 插件，所以可以看到在类上多了一个 <code>@Data</code> 的注解，但是少了 <code>getter、setter</code> 方法，实现了代码的简洁化，大家如果还不知道这个插件，可以去了解下，后续我可能也会写一篇关于这个插件的文章，可以关注一下。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li><strong>Mapper 接口编写</strong></li>
</ol>
<p>这里 <code>EmployeeMapper</code> 继承自 MP 中 <code>BaseMapper</code>，它里边已经提供了许多方法，可以供我们使用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是 <code>BaseMapper</code> 中所提供的一些方法，通过继承该接口，我们就可以不用编写 <code>mapper.xml</code> 也可以获得 CRUD 功能了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li><strong>添加包扫描</strong></li>
</ol>
<p>Mapper 建立完成之后，我们需要去启动类种添加包扫描的注解 <code>@MapperScan()</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li><strong>测试</strong></li>
</ol>
<p>好了，完成上面的步骤之后，我们就可以去测试接口了。去测试的主程序 <code>EmployeeApplicationTests</code> 中，添加如下代码进行接口测试。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>可以看到执行我们测试代码后测试成功了，说明接口是没问题的。</p>
<p>这里需要注意的是 <code>Assert.assertEquals(3, employees.size());</code> 这句代码，这里我们引入了 <code>Junit</code> 测试模块，所以需要记得在 <code>pom.xml</code> 中添加相关依赖，更多关于 <code>Junit</code> 测试相关的信息，可以参考我之前写的一篇文章：<a href="https://cunyu1943.github.io/JavaPark/md/java/se/20220718-test-with-junit" target="_blank" rel="noopener noreferrer">抛弃传统注释测试，拥抱 Junit 单元测试</a>。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>今天的文章到此就结束了，主要介绍了 Mybatis-Plus 的一些相关简介，然后就是利用 Mybatis-Plus 来进行我们的一个实例操作了。</p>
<p>最后，创作不易，如果本文对你有所帮助，还请各位小伙伴可以 <strong>一键三连</strong>。感谢大家的支持，我们下期文章再见！</p>
]]></content:encoded>
    </item>
    <item>
      <title>日志配置及常用 CRUD</title>
      <link>https://cunyu1943.site/JavaPark/md/java/mybatisplus/20220202-log-and-common-crud.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/mybatisplus/20220202-log-and-common-crud.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">日志配置及常用 CRUD</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 上一篇文章中我们讲了 Mybatis-Plus 的定义以及相关特点，并从零开始编写了一个 SpringBoot + Mybatis-Plus 的实例。今天我们就来看看，如何利用 MP 来实现对数据库的增删改查。</description>
      <category>MyBatis Plus 教程</category>
      <pubDate>Wed, 02 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>上一篇文章中我们讲了 Mybatis-Plus 的定义以及相关特点，并从零开始编写了一个 SpringBoot + Mybatis-Plus 的实例。今天我们就来看看，如何利用 MP 来实现对数据库的增删改查。</p>
<h2> 日志配置</h2>
<p>使用 MP 时，默认是不打印任何 SQL 语句的。而为了方便日常开发工作的调试，我们需要联合控制台和各种数据可视化工具进行语句的拼接检查，因此我们利用 MP 自带的日志功能，在控制台输出我们的 SQL 语句，从而方便我们调试。</p>
<p>在配置文件 <code>application.yml</code> （IDEA 默认生成的配置文件为 <code>application.properties</code>）中，加入一下配置，这样 MP 就会在控制台中打印完整带参数的 SQL 语句，方便我们查看。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Mapper CRUD 使用方法</h2>
<p>首先我们来看 <code>Mapper</code> 层 CRUD 涉及的一些方法，<code>Mapper</code> 层主要继承自 <code>BaseMapper</code> 接口，里边实现了各种用于操作数据库的增删改查的方法，以下我们就来看看日常我们常用的一些方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> insert 操作</h3>
<p>首先是插入数据，<code>insert</code> 方法中，传入我们所要插入数据库的实体对象作为参数即可。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>插入实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>数据插入后的数据库</strong></li>
</ul>
<p></p>
<h3> select 操作</h3>
<p>相比于插入数据操作，查询数据的方法就要更多，而且还能实现批量查询和条件查询。</p>
<ol>
<li><strong>根据主键查询</strong></li>
</ol>
<p>将所要查询数据的主键作为参数传入我们的 <code>selectById</code> 方法中，即可实现。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ol start="2">
<li><strong>根据主键批量查询</strong></li>
</ol>
<p>上一个方法每次只能查询一条记录，如果我们想要查询多条数据记录，那么就可以将要查询数据的主键列表传入 <code>selectBatchIds</code> 方法即可。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>批量查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ol start="3">
<li><strong>根据多条件查询</strong></li>
</ol>
<p>除开支持主键查询外，MP 还支持条件查询，只要将我们的条件传入 <code>Map</code> 列表中，然后将其作为 <code>selectByMap</code> 方法的参数即可，其中传入 <code>Map</code> 的 <code>key</code> 对应我们数据库中的字段，而 <code>value</code> 则对应字段的值。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>条件查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<h3> update 操作</h3>
<p>更新操作，主要是根据我们数据库的主键进行查询，将对应主键的实体对象传入 <code>updateById</code> 方法即可。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>更新实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>数据更新后的数据库</strong></li>
</ul>
<p></p>
<h3> delete 操作</h3>
<p>删除操作，既可以根据主键删除一条记录，也能根据主键列表实现批量删除，还能根据条件来进行删除。</p>
<ol>
<li><strong>根据主键删除一条数据</strong></li>
</ol>
<p>将所要删除记录的主键作为参数传入 <code>deleteById</code> 方法即可。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>删除实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>删除数据后的数据库</strong></li>
</ul>
<p></p>
<ol start="2">
<li><strong>根据条件删除</strong></li>
</ol>
<p>根据条件删除同样是讲条件传入 <code>Map</code> 中，然后将 <code>Map</code> 作为参数传入 <code>deleteByMap</code> 方法，其中 <code>key</code> 对应数据库中的字段，<code>value</code> 对应字段的值。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>删除实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>删除数据后的数据库</strong></li>
</ul>
<p></p>
<ol start="3">
<li><strong>根据主键批量删除</strong></li>
</ol>
<p>将要删除记录的主键传入集合中，然后将集合作为 <code>deleteBatchIds</code> 方法的参数即可。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>批量删除实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>删除数据后的数据库</strong></li>
</ul>
<p></p>
<h2> Service CRUD 接口</h2>
<p><code>Service</code> 层继承自 <code>IService</code> 接口，其中的方法和 <code>Mapper</code> 层中所提供的方法功能是一致的，除了方法名有所不同外，其他基本类似，但 <code>Service</code> 层中提供了更为丰富的方法，两者的继承结构如下图所示。</p>
<p></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Save</h3>
<ol>
<li><strong>插入一条记录</strong></li>
</ol>
<p>功能同 <code>Mapper</code> 层中的 <code>insert</code> 方法，只不过方法名不同。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>插入实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>插入数据后的数据库</strong></li>
</ul>
<p></p>
<ol start="2">
<li><strong>批量插入</strong></li>
</ol>
<p>这里就和 <code>Mapper</code> 层中所有区别，<code>Mapper</code> 层中只支持单次插入，而 <code>Service</code> 层中支持批量插入，而传入的参数就是我们所要传入实体的集合，而且还可以分批次插入和统一插入。</p>
<p>2.1 <strong>统一插入</strong></p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>插入实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>统一插入后的数据库</strong></li>
</ul>
<p></p>
<p>2.2 <strong>分批次插入</strong></p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>分批次插入实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>分批次插入后的数据库</strong></li>
</ul>
<p></p>
<h3> SaveOrUpdate</h3>
<ol>
<li><strong>单条修改插入</strong></li>
</ol>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>单条修改插入实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>修改插入后的数据库</strong></li>
</ul>
<p></p>
<ol start="2">
<li><strong>批量修改插入</strong></li>
</ol>
<p>2.1 <strong>统一插入</strong></p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>统一插入实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>统一插入数据后的数据库</strong></li>
</ul>
<p></p>
<p>2.2 <strong>分批次插入</strong></p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>方法实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>分批次插入数据后的数据库</strong></li>
</ul>
<p></p>
<h3> Remove</h3>
<ol>
<li><strong>根据 ID 删除</strong></li>
</ol>
<ul>
<li><strong>方法实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>删除实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<p></p>
<ol start="2">
<li><strong>根据条件删除</strong></li>
</ol>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>按条件删除实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>按条件删除后的数据库</strong></li>
</ul>
<p></p>
<ol start="3">
<li><strong>根据 ID 批量删除</strong></li>
</ol>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>批量删除实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>批量删除后的数据库</strong></li>
</ul>
<p></p>
<h3> Update</h3>
<ol>
<li><strong>根据 ID 选择修改</strong></li>
</ol>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>根据 ID 修改实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>更新后的数据库</strong></li>
</ul>
<p></p>
<ol start="2">
<li><strong>根据 ID 批量更新</strong></li>
</ol>
<p>2.1 <strong>统一更新</strong></p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>批量更新实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>批量更新后的数据库</strong></li>
</ul>
<p></p>
<p>2.2 <strong>分批次更新</strong></p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>分批次更新实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>分批次更新后的数据库</strong></li>
</ul>
<p></p>
<h3> Get</h3>
<ol>
<li><strong>根据 ID 查询</strong></li>
</ol>
<p>将所要查询记录的 <code>id</code> 作为参数，然后将查询到的实体返回。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<h3> List</h3>
<ol>
<li><strong>查询所有</strong></li>
</ol>
<p>查询所有记录，然后返回到一个集合中。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ol start="2">
<li><strong>根据 ID 批量查询</strong></li>
</ol>
<p>讲所要查询的记录 <code>id</code> 传入集合，然后座位方法参数，最后返回查询到的结果到一个集合中。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>批量查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ol start="3">
<li><strong>根据条件查询</strong></li>
</ol>
<p>条件传入 <code>Map</code> 集合，<code>key</code> 对应字段，<code>value</code> 对应值，然后返回集合。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>根据条件查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ol start="4">
<li><strong>查询所有列表</strong></li>
</ol>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ol start="5">
<li><strong>查询所有记录</strong></li>
</ol>
<p>用于查询所有数据记录，并将其返回到一个集合中。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<h3> Count</h3>
<ol>
<li><strong>查询记录总数</strong></li>
</ol>
<p>用于统计数据控中的记录总条数，方法返回记录条数。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>查询记录总数实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<h2> 总结</h2>
<p>好了，以上就是关于 Mybatis-Plus 的日志配置以及如何进行 CRUD 的相关内容了，这里 CRUD 主要又分为 Mapper 层和 Service 层，我们可以根据自己的需要进行选择。当然，在我们日常使用中，常常都是两个接口一起使用，关于更多 MP 的使用技巧，我们下期文章再见！</p>
]]></content:encoded>
    </item>
    <item>
      <title>目录结构与运行原理</title>
      <link>https://cunyu1943.site/JavaPark/md/java/nginx/20220827-structure.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/nginx/20220827-structure.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">目录结构与运行原理</source>
      <description>目录</description>
      <category>Nginx 教程</category>
      <pubDate>Sat, 27 Aug 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 目录</h2>
]]></content:encoded>
    </item>
    <item>
      <title>Nginx 简介与安装</title>
      <link>https://cunyu1943.site/JavaPark/md/java/nginx/20220901-intro-install.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/nginx/20220901-intro-install.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">Nginx 简介与安装</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 简介 什么是 Nginx Nginx 是一个跨平台、轻量级、高性能的 HTTP 和反向代理 web 服务器，而且同时也提供了 IMAP/POP3/SMTP 服务。Nginx 最高能够支持高到 50000 个并发连接数的相应，在最高并发连接的情况下，可以作为 Apache 服务的一个替代品。</description>
      <category>Nginx 教程</category>
      <pubDate>Thu, 01 Sep 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 简介</h2>
<h3> 什么是 Nginx</h3>
<p><code>Nginx</code> 是一个跨平台、轻量级、高性能的 <code>HTTP</code> 和反向代理 <code>web</code> 服务器，而且同时也提供了 <code>IMAP/POP3/SMTP</code> 服务。<code>Nginx</code> 最高能够支持高到 50000 个并发连接数的相应，在最高并发连接的情况下，可以作为 <code>Apache</code> 服务的一个替代品。</p>
<p><code>Nginx</code> 作为负载均衡服务，既可以在内部直接支持 <code>Redis</code> 和 <code>PHP</code> 程序对外进行服务，也可以作为支持 <code>HTTP</code> 代理服务对外进行支持。<code>Nginx</code> 是基于 C 语言来进行开发的，所以无论是系统资源开销还是 CPU 使用率都较低，也因此 <code>Nginx</code> 性能较强。</p>
<h3> Nginx 的版本</h3>
<p>常用版本主要分为四大阵营：</p>
<ol>
<li><code>Nginx</code> 开源版</li>
<li><code>Nginx plus</code> 商业版</li>
<li><code>Openresty</code></li>
<li><code>Tengine</code></li>
</ol>
<h2> 下载</h2>
<p>上一节中我们讲了 <code>Nginx</code> 的一些简单知识，接下来就来看看，如何在我们的服务器中安装 <code>Nginx</code>。下文中，我们均以 <code>Nginx</code> 开源版做示范。</p>
<p>前往 <code>Nginx</code> 官方地址下载对应的版本，因为这里主要是在服务器中安装，所以是以 <code>Linux（Centos）</code> 版本来演示。</p>
<blockquote>
<p><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener noreferrer">http://nginx.org/en/download.html</a></p>
</blockquote>
<p></p>
<h2> 编译安装与依赖检查</h2>
<p>将下载后的 <code>Nginx</code> 压缩包进行解压，解压命令如下。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>
进入解压缩后的 <code>Nginx</code> 所在文件夹，然后执行 <code>configure</code> 脚本，这时候就会检查安装 <code>Nginx</code> 所需的依赖，这里可能会因为你的服务器中没有事先安装所需依赖而导致报错。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>这里例举几个安装时可能会遇到的错误：</p>
<ol>
<li><strong>C 编译器缺失</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要解决这个错误，只需要安装 <code>gcc</code> 编译器即可。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li><strong>PCRE Library 缺失</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样，为了解决这个这个问题，需要安装 <code>pcre-devel</code>。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li><strong>zlib Library 缺失</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解决方法，安装 <code>zlib</code> 库。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<p>如果出现以上的提示信息，则说明可以进行下一步，此时直接执行编译安装命令。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<h2> Nginx 启停</h2>
<p>如果顺利执行完 <code>configure</code> 脚本，则会在服务器终端打印出以上 <code>Nginx</code> 相关的配置。</p>
<p>进入 <code>Nginx</code> 安装后的目录 <code>/usr/local/nginx/sbin</code>，然后利用以下命令来进行 <code>Nginx</code> 的启动。</p>
<ol>
<li><strong>启动</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<p>然后在浏览器中访问服务器的 <code>IP</code> 地址，如果出现以下界面，则说明我们的 <code>Nginx</code> 安装并启动成功了！</p>
<p></p>
<ol start="2">
<li><strong>快速停止</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>停止后，再到浏览器中去访问服务器地址，就会出现以下情况。</p>
<p></p>
<ol start="3">
<li><strong>关闭前完成已接受的连接请求</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4">
<li><strong>重新加载配置</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过这种方式，可以实现 <code>Nginx</code> 的无感重启。也就是说，当我们需要修改 <code>Nginx</code> 的配置时，不希望通过停止 <code>Nginx</code> 然后再启动的方式，此时就可以通过这个命令来实现。</p>
<h2> 防火墙</h2>
<h3> 关闭防火墙</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 禁止防火墙开机启动</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 放行端口</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 重启防火墙</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 安装为系统服务</h2>
<ol>
<li><strong>添加系统服务</strong></li>
</ol>
<p>在 <code>/usr/lib/systemd/system</code> 目录下新增一个文件，命名为 <code>nginx.service</code>，然后将以下内容添加到该文件中。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>重载系统服务</strong></li>
</ol>
<p>接着执行以下命令重新加载系统服务。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li><strong>启停 Nginx</strong></li>
</ol>
<p>接着就可以分别利用下面的命令来启动和关停 <code>Nginx</code> 服务了。</p>
<ul>
<li>启动</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>关停</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>查看当前状态</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>以上就是 <code>Nginx</code> 的简介和如何在 Linux 中安装 <code>Nginx</code> 的相关内容了，如果您觉得本文对您有所帮助，那就来个一键三连支持吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java 简介</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220701-intro-to-java.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220701-intro-to-java.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">Java 简介</source>
      <description>作者：村雨遥 博客：JavaPark 原文：https://mp.weixin.qq.com/s/aGz8CBOK5mW8xjAlstlMQw 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Fri, 01 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/aGz8CBOK5mW8xjAlstlMQw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/aGz8CBOK5mW8xjAlstlMQw</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 1. 前言</h2>
<p>既然要学习一门技术，那么就先来了解下它的历史，我们为什么要使用它，以及我们能用它来干啥。</p>
<h2> 2. 历史背景</h2>
<p>1990 年代初，<code>Sun</code> 公司的詹姆斯·高斯林等人为了实现电视机、电话、闹钟等家用电器的控制和通信，开发了一套用于设置在家用电器等小型系统中的编程语言。在当时，这门语言被命名为 <code>Oka</code>。但由于市场需求不高，所以该计划被逐渐放弃。</p>
<p>随着 1990 年代互联网的发展，<code>Sun</code> 公司发现 <code>Oka</code> 语言在互联网中的应用前景广泛。于是决定对 <code>Oka</code> 进行改造，并在 1995 年 5 月以 <code>Java</code> 的名义正式发布。</p>
<p>随着互联网的迅猛发展，Java 也得以逐渐成为重要的网络编程语言，詹姆斯·高斯林也被大家公认为 Java 之父。</p>
<p>到了 2009 年， <code>Sun</code> 公司被 <code>Oracle</code> 公司所收购，自此 <code>Java</code> 成为 <code>Oracle</code> 公司的一大产品直至今日。</p>
<p>以下是截止到本文写作时间（2022 年 7 月 23 日）<code>Java</code> 的历史年表，累计经过了 18 次主要版本更新，目前来到了 <code>Java SE</code> 18。而 <code>Java SE</code> 19 早期预览版也已经流出，根据官方给出的发布时间表，大概会在 9 月份发布 Java SE 19 的 <code>GA</code> 版本。不过虽然 <code>Java</code> 已经经历了这么多版本的更新，但国内目前用的最多的应该还是 Java 1.8 版本。而出于对稳定性的考虑，企业开发更喜欢 <code>LTS</code> 版本，这也是为什么至今 Java 1.8 还占有如此高的市场比例。</p>
<table>
<thead>
<tr>
<th style="text-align:center">版本</th>
<th style="text-align:center">发布日期</th>
<th style="text-align:center">主要事件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">JDK Beta</td>
<td style="text-align:center">1995</td>
<td style="text-align:center">Java 语言发布，用 Java 实现的浏览器和 Java Applet 被大量应用</td>
</tr>
<tr>
<td style="text-align:center">JDK 1.0</td>
<td style="text-align:center">1996 年 1 月</td>
<td style="text-align:center">奠定了 JDK、JRE、JVM 的体系结构</td>
</tr>
<tr>
<td style="text-align:center">JDK 1.1</td>
<td style="text-align:center">1997 年 2 月</td>
<td style="text-align:center">加入 JIT，提升 JDK 效率</td>
</tr>
<tr>
<td style="text-align:center">J2SE 1.2</td>
<td style="text-align:center">1998 年 12 月</td>
<td style="text-align:center">确立 J2SE、J2EE、J2ME 产品结构</td>
</tr>
<tr>
<td style="text-align:center">J2SE 1.3</td>
<td style="text-align:center">2000 年 5 月</td>
<td style="text-align:center">内置 HotSpot JVM</td>
</tr>
<tr>
<td style="text-align:center">J2SE 1.4</td>
<td style="text-align:center">2002 年 2 月</td>
<td style="text-align:center">XML 处理、断言、支持正则表达式</td>
</tr>
<tr>
<td style="text-align:center">J2SE 5.0</td>
<td style="text-align:center">2004 年 9 月</td>
<td style="text-align:center">静态导入、泛型、for-each 循环、自动拆，装箱、枚举、可变参数</td>
</tr>
<tr>
<td style="text-align:center">Java SE 6</td>
<td style="text-align:center">2006 年 12 月</td>
<td style="text-align:center">提供动态语言支持、同步垃圾回收</td>
</tr>
<tr>
<td style="text-align:center">Java SE 7</td>
<td style="text-align:center">2011 年 7 月</td>
<td style="text-align:center">字符串的 switch 语句、多异常捕抓</td>
</tr>
<tr>
<td style="text-align:center">Java SE 8 (LTS)</td>
<td style="text-align:center">2014 年 3 月</td>
<td style="text-align:center">Lambda 表达式</td>
</tr>
<tr>
<td style="text-align:center">Java SE 9</td>
<td style="text-align:center">2017 年 9 月</td>
<td style="text-align:center">轻量级 json API、垃圾收集机制更新</td>
</tr>
<tr>
<td style="text-align:center">Java SE 10</td>
<td style="text-align:center">2018 年 3 月</td>
<td style="text-align:center">局部变量类型推断，Java 后续版本快速迭代更新</td>
</tr>
<tr>
<td style="text-align:center">Java SE 11 (LTS)</td>
<td style="text-align:center">2018 年 9 月</td>
<td style="text-align:center">常用类增强，Java 11 是继 Java 8 之后的首个长期支持本版</td>
</tr>
<tr>
<td style="text-align:center">Java SE 12</td>
<td style="text-align:center">2019 年 3 月</td>
<td style="text-align:center">switch 表达式增强</td>
</tr>
<tr>
<td style="text-align:center">Java SE 13</td>
<td style="text-align:center">2019 年 9 月</td>
<td style="text-align:center">文本块支持</td>
</tr>
<tr>
<td style="text-align:center">Java SE 14</td>
<td style="text-align:center">2020 年 3 月</td>
<td style="text-align:center"><code>instanceof</code> 支持模式匹配</td>
</tr>
<tr>
<td style="text-align:center">Java SE 15</td>
<td style="text-align:center">2020 年 9 月</td>
<td style="text-align:center"><code>EdDSA</code> 数字签名算法、 密封类、隐藏类</td>
</tr>
<tr>
<td style="text-align:center">Java SE 16</td>
<td style="text-align:center">2021 年 3 月</td>
<td style="text-align:center">启用 C++ 14 语言特性、Vector API</td>
</tr>
<tr>
<td style="text-align:center"><strong>Java SE 17 (LTS)</strong></td>
<td style="text-align:center">2021 年 9 月</td>
<td style="text-align:center">恢复总是严格的浮点语义、增强型伪随机数生成器</td>
</tr>
<tr>
<td style="text-align:center">Java SE 18</td>
<td style="text-align:center">2022 年 3 月</td>
<td style="text-align:center">默认 UTF-8 编码、代码片段、简单的网络服务器</td>
</tr>
</tbody>
</table>
<h2> 3. 为什么使用 Java</h2>
<p>既然编程语言有那么多，那我们为什么要使用 Java 语言呢？以下就来看看 Java 被广泛使用的几个原因。</p>
<ol>
<li><strong>世界范围内流行，国内使用最为广泛的编程语言之一。</strong></li>
</ol>
<p>以下是截止 2022 年 7 月 TIOBE 统计的编程语言排行榜，可以看到 Java 处于前三的位置。而从历年编程语言所占市场份额趋势图也可以看出，Java 虽然没有一直独占鳌头，但绝大数时间都是占据领先地位。</p>
<p>
</p>
<ol start="2">
<li><strong>移植性高</strong></li>
</ol>
<p>由于 Java 中 JVM 的特性，所以能够做到一次编译，随处运行，其移植性也就更高。</p>
<ol start="3">
<li><strong>开发社区完善</strong></li>
</ol>
<p>社区完善也是 Java 为什么使用多的原因，各种封装 API，比起 C、C++ 语言使用起来更加方便。虽然 <code>Python</code> 的封装程度更高，但是其效率比起 <code>Java</code> 却打了折扣。毕竟封装程度和效率是成反比的，<code>Java</code> 兼具了效率高和使用方便的特点，所以更受人们青睐。</p>
<h2> 4. Java 能做什么</h2>
<p>Java 应用广泛，在我们日常中就能经常见到由 Java 所开发的程序。常见的的应用应用领域如下：</p>
<ol>
<li><strong>桌面 GUI 应用开发</strong></li>
<li><strong>服务器系统</strong></li>
<li><strong>企业级应用开发</strong></li>
<li><strong>大数据开发</strong></li>
<li><strong>移动应用开发</strong></li>
<li><strong>游戏开发</strong></li>
<li>……</li>
</ol>
<h2> 5. Java 技术体系</h2>
<p>根据传统意义上 Sun 官方定义， Java 技术体系的组成主要就是我们常说的 JDK，即以下三部分：</p>
<ol>
<li><strong>Java 程序设计语言</strong></li>
<li><strong>Java 虚拟机</strong></li>
<li><strong>Java API 类库</strong></li>
</ol>
<p></p>
<p>同时，Java 技术体系又可以主要分为以下 3 个平台。</p>
<ol>
<li><strong>Java SE</strong></li>
</ol>
<p>Java Standard Edition，即 Java 标准版。主要是 Java 技术的核心和基础，要想学好 Java，那么首先你得掌握好这部分。主要运行在桌面级应用，如 Windows 应用程序。</p>
<ol start="2">
<li><strong>Java EE</strong></li>
</ol>
<p>Java Enterprise Editon，即 Java 企业版。从它的名字就不难看出，这是 Java 针对企业级应用开发所提供的一套解决方案，主要用于架设高性能企业网站。</p>
<ol start="3">
<li><strong>Java ME</strong></li>
</ol>
<p>Java Micro Edition，即 Java 小型版。主要是 Java 针对移动设备应用所提供的一套解决方案，主要运行在手机、pad 等移动端。</p>
<p></p>
<h2> 6. 总结</h2>
<p>本文主要从 Java 历史背景、选择 Java 的理由、Java 能做什么、Java 技术体系等 4 方面对 Java 语言做了一个简单介绍。接下来的文章我们就来看看，如何搭建 Java 的开发环境以及实现一个简单的入门程序。</p>
]]></content:encoded>
    </item>
    <item>
      <title>开发环境搭建及入门程序</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220702-jdk-install-and-hello-world.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220702-jdk-install-and-hello-world.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">开发环境搭建及入门程序</source>
      <description>作者：村雨遥 博客：JavaPark 原文：https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Sat, 02 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>作为一个入门的学习者，要进行 Java 开发，那怎么能少得了 JDK 呢，本文就先来看看如何安装并配置 JDK，为后续的学习做好铺垫。</p>
<h2> 下载并安装 JDK</h2>
<p>什么是 JDK 呢？JDK（Java Development Kit）即 Java 开发者工具包，使我们学习 Java 语言必须安装的一个工具。</p>
<p>这里主要以 Windows 和 macOS 系统中 JDK 的安装为例，一来因为考虑到大家用的最多的还是 Windows 和 macOS 系统，二来则是因为手边没有安装 Linux 图形化系统。如果恰好你使用的是 Linux 系统，那么推荐你参考一下其他的资料，同样你也可以参考我的另一篇文章：<a href="https://cunyu1943.blog.csdn.net/article/details/105648148" target="_blank" rel="noopener noreferrer">手把手带你玩转 Ubuntu</a>。</p>
<h3> Windows</h3>
<h4> 安装</h4>
<ol>
<li>首先进入 <a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener noreferrer">Oracle 官网</a>，然后找到自己想要的 JDK 版本，这边以 JDK 11 为例；</li>
</ol>
<p></p>
<ol start="2">
<li>点击 JDK Download 后，它会跳转到具体下载页面，然后根据自己的系统来进行选择，此处以 Windows 10 64 位为例；</li>
</ol>
<p></p>
<ol start="3">
<li>点击最后的连接后，它会让你同意协议，勾选同意，然后登陆你的 Oracle 账户即可开始下载，若是没有 Oracle 账户，点击下面的创建一个即可；</li>
</ol>
<p></p>
<p></p>
<ol start="4">
<li>下载完成后，进行安装即可，安装流程和我们平常安装软件的一样，就再赘述，需要注意的是要记住如下的安装路径，因为一般我们都不会安装到默认路径，所以一定要记住你所安装到的路径，这关系到后续的配置步骤；</li>
</ol>
<p></p>
<h4> 配置 JDK</h4>
<p>好了，经过上面的配置，我们的 JDK 就已经安装好了，但是这个使用你是用不了的，我们还需要进一步的配置；</p>
<p>打开系统属性来进行环境变量配置，打开系统属性并进行配置的方式如下：</p>
<ol>
<li><strong>Windows + R</strong> 快捷键组合唤醒 Windows 运行窗口，然后输入 <code>sysdm.cpl</code>，紧接着回车即可，一般会打开如下界面，然后点击最上方的 <strong>高级</strong>；</li>
</ol>
<p></p>
<ol start="2">
<li>点击高级后，就会打开如下界面，然后打开环境变量；</li>
</ol>
<p></p>
<ol start="3">
<li>新建环境变量 <strong>JAVA_HOME</strong>，然后变量值填入刚才安装 JDK 的路径（刚才提醒过要记住！）；</li>
</ol>
<p></p>
<ol start="4">
<li>编辑 <strong>Path</strong> 环境变量，然后新建一个变量值，填入如下内容：<code>%JAVA_HOME%\bin</code>；</li>
</ol>
<p></p>
<ol start="5">
<li>各种确定，然后突出系统属性即可，到这一步，理论上我们的 JDK 就安装并配置成功了，接下来我们就去确认一下到底安装好了没；</li>
</ol>
<h4> 验证 JDK</h4>
<p>按照上述步骤操作完成之后，接下来就是验证了，一般我们可以通过如下三个命令来进行验证；</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开命令控制台（<strong>Windows + R，然后输入 cmd 回车</strong>），然后输入如上三个命令，如果安装成功，一般是会出现如下内容的；</p>
<p></p>
<p></p>
<p></p>
<h3> macOS</h3>
<h4> 安装</h4>
<ol>
<li>首先去 <a href="https://www.oracle.com/java/technologies/javase-jdk11-downloads.html" target="_blank" rel="noopener noreferrer">官网下载</a> 对应安装包；</li>
</ol>
<p></p>
<ol start="2">
<li>
<p>接受相关协议并登录下载；</p>
</li>
<li>
<p>双击下载好的 <code>.dmg</code> 安装包，然后开始安装；</p>
</li>
</ol>
<p></p>
<ol start="4">
<li>安装过程中会让你输入密码，也就是你本机的密码。</li>
</ol>
<p></p>
<ol start="5">
<li>安装成功；</li>
</ol>
<p></p>
<h4> 验证</h4>
<p>不同于 Windows，macOS 下不用再去配置了，它会给你自动配置好，我们只需要去验证即可；</p>
<ol>
<li>查看 JDK 版本；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<ol start="2">
<li>编译命令；</li>
</ol>
<p></p>
<ol start="3">
<li>运行命令；</li>
</ol>
<p></p>
<h3> 安装目录详解</h3>
<p>安装好 <code>JDK</code> 之后，打开安装路径，通常情况下会有如下的目录结构：</p>
<table>
<thead>
<tr>
<th>目录</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>bin</code></td>
<td>用于存放各种工具命令，比如我们最常用额 <code>javac</code>、<code>java</code> 等</td>
</tr>
<tr>
<td><code>lib</code></td>
<td>存放工具的一些补充 <code>jar</code> 包</td>
</tr>
<tr>
<td><code>conf</code></td>
<td>存放相关配置文件</td>
</tr>
<tr>
<td><code>include</code></td>
<td>存放一些平台特定的头文件，比如 <code>Windows</code>、<code>macOS</code>、<code>Linux</code> 平台下这里的头文件是有所不同的</td>
</tr>
<tr>
<td><code>legal</code></td>
<td>存放各模块的授权文件</td>
</tr>
<tr>
<td><code>jmods</code></td>
<td>存放各种模块</td>
</tr>
</tbody>
</table>
<h2> 你的第一个 Java 程序：HelloWorld</h2>
<p>好了，经过上面的安装配置，我们就可以开始我们的第一个 Java 程序编写了。</p>
<p>要开发一个 Java 程序，主要分成 3 个步骤：</p>
<ol>
<li><strong>编写代码</strong></li>
<li><strong>编译代码</strong></li>
<li><strong>运行代码</strong></li>
</ol>
<p></p>
<p>我们不需要任何的基础，只需要按照上面的步骤配置好 JDK 之后，然后以上三个步骤逐一来进行就可以了。下面就来进行具体实践：</p>
<ol>
<li>打开编辑器（推荐 <code>VS Code</code>），如果没有，记事本也成，然后写入如下内容，然后保存为 <code>Main.java</code>，这里文件名一定要是 <code>Main</code>，文件后缀名为 <code>.java</code>。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>打开控制命令台，然后进入上述文件存放的路径，使用如下命令进行编译，然后会生成一个 <code>Main.class</code> 文件；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<p></p>
<ol start="3">
<li>运行，使用如下命令进行运行，然后就可以看到打印出的最终结果了！</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h2> 知识点说明</h2>
<p>我们的 Hello World 是打印出来了，但是你肯定对里边的代码很感兴趣，这一节就主要针对我们的 Hello World 程序进行说明；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整的程序代码如上：</p>
<ul>
<li><code>public</code>：权限修饰符，表示这一个可以公开访问的类，类似的还有 <code>protected、default、private</code>，后续学习过程中再一一介绍；</li>
<li><code>class</code>：Java 关键字，表示这是一个类；</li>
<li><code>Main</code>： 表示我们的类名，在保存时文件一定要和它同名，否则你的程序是编译不了的。你可以试试，如果把我们上面的 <code>Main.java</code> 改成其他名字，你看看是不是还能编译成功呢？</li>
<li><code>public static void main(String[] args){}</code>：主方法，这是我们以后最常接触到的一个方法，每个主类当中都必须有一个 <code>main</code> 方法；</li>
<li><code>System.out.println("Hello World!")</code>：控制台输出语句，执行该语句会在控制台中输出字符串，字符串要用双引号 <code>""</code> 括起来，你可以把其中的 <code>Hello Wolrd!</code> 换成你想要打印的内容试试看。</li>
</ul>
<h2> 总结</h2>
<p>好了，今天的内容到此就结束了，主要介绍了如何在 Windows 和 macOS 中安装 JDK，具体过程可以总结如下：</p>
<ul>
<li>安装</li>
<li>配置</li>
<li>验证</li>
</ul>
<p>然后编写了我们的第一个 <code>Hello World</code> 程序，并利用安装好的的 JDK 对其进行编译和运行。最后，则是对我们的 <code>Hello World</code> 程序中的相关知识进行了介绍。</p>
]]></content:encoded>
    </item>
    <item>
      <title>利用 IDEA 进行 Java 开发</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220703-learn-java-with-idea.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220703-learn-java-with-idea.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">利用 IDEA 进行 Java 开发</source>
      <description>作者：村雨遥 博客：JavaPark 原文：https://mp.weixin.qq.com/s/Pkf1WTj-x6JH4Jo8mOr8SQ 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Sun, 03 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/Pkf1WTj-x6JH4Jo8mOr8SQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Pkf1WTj-x6JH4Jo8mOr8SQ</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>上一篇中，我们讲了 <a href="https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ" target="_blank" rel="noopener noreferrer">如何搭建 Java 开发环境</a>。不过既然确定了要从事 Java 开发，那怎么能少得了一个趁手的 IDE 呢。正所谓工欲善其事。必先利其器，一个趁手的 IDE 就像电视剧里的神兵利器，能让我们功力大增，大大提高我们的效率。</p>
<p>但是目前市场上那么多的 IDE，有 Eclipse、IntelliJ IDEA、NetBeans …… 我们究竟该选择哪一个呢？既然做不了决定，那我就替你选择吧！要是都没接触过，那就直接 IDEA 吧，要是你之前是个 Eclipse 的忠实粉丝，也推荐你用一下 IDEA 试试，你只需要把 IDEA 的快捷键方式设置为 Eclipse 方式即可，相信过了一开始的阵痛期之后，就会喜欢上 IDEA 这一神器。那接下来，我们就来进行 IDEA 的安装工作！</p>
<h2> 安装前的准备工作</h2>
<p>开始安装之前，我们需要进行一些准备，首先是<strong>社区版和旗舰版该选谁</strong>，接着是<strong>软硬件的支持</strong>。</p>
<h3> 旗舰版 VS 社区版</h3>
<p>对于旗舰版和社区版，我从官网给出的对比从而摘选了如下图所示的区别。可以看出旗舰版无论在 <strong>语言支持、框架支持、Build 工具、部署工具、版本控制</strong> 等多方面都比社区版更加强大，但是最大的区别也是我们最为关心的一点：<strong>旗舰版收费，而社区版免费</strong>， 所以可以根据自己的需求进行选择。</p>
<p></p>
<h3> 软件</h3>
<ul>
<li>IntelliJ IDEA 安装包，下载地址：<a href="https://www.jetbrains.com/idea/download/%EF%BC%8C%E9%80%89%E6%8B%A9%E8%87%AA%E5%B7%B1%E7%B3%BB%E7%BB%9F%E5%AF%B9%E5%BA%94%E5%AE%89%E8%A3%85%E5%8C%85%E5%8D%B3%E5%8F%AF%E3%80%82" target="_blank" rel="noopener noreferrer">https://www.jetbrains.com/idea/download/，选择自己系统对应安装包即可。</a></li>
</ul>
<h3> 硬件</h3>
<table>
<thead>
<tr>
<th>配置项目</th>
<th style="text-align:left">最低配置</th>
<th>推荐配置</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>内存</strong></td>
<td style="text-align:left">2G +</td>
<td>8 G +</td>
</tr>
<tr>
<td><strong>硬盘</strong></td>
<td style="text-align:left">2.5 GB + 1 GB 缓存</td>
<td>至少 5GB+ 空间的 SSD</td>
</tr>
<tr>
<td><strong>显示器</strong></td>
<td style="text-align:left">1024 x 768</td>
<td>1920×1080</td>
</tr>
<tr>
<td><strong>操作系统</strong></td>
<td style="text-align:left">官方放出的 64 位操作系统：<br>1. Windows 8 +<br>2. macOS 10.13 +<br>3. Linux 的 Gnome、KDE、Unity 桌面环境的支持<br>4. 预览版系统可能支持不好</td>
<td>最新的 64 位 Windows、macOS、Linux 系统</td>
</tr>
</tbody>
</table>
<h2> 安装工作</h2>
<h3> Ubuntu</h3>
<h4> 安装</h4>
<ol>
<li>下载安装包，根据自己的需求选择旗舰版或是社区版</li>
</ol>
<p></p>
<ol start="2">
<li>将下载好的安装包 <code>ideaIU-2020.1.1.tar.gz</code> 移动到平时存放软件的目录下进行解压缩</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<p></p>
<ol start="3">
<li>进入解压后的 <code>bin</code> 目录，然后在终端启动如下命令即可：</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<ol start="4">
<li>进入初始化启动后的设置即可。</li>
</ol>
<p>首先是 UI 主题选择，根据自己的喜好选择 Light 还是 Darcula 模式；</p>
<p></p>
<p>接着是否创建启动器脚本，同时选择自己的脚本保存目录</p>
<p></p>
<p>接着选择自己想要的插件和禁用无关插件，根据自己的需求安装即可，如果不知道怎么选择，默认即可。</p>
<p></p>
<p>选择额外的插件支持，按需安装，默认不勾选，后续也可以自行安装。</p>
<p></p>
<h4> 卸载</h4>
<p>Linux 下卸载只需要将对应目录（即刚才解压后的目录）删除即可。</p>
<h3> Windows</h3>
<h4> 安装</h4>
<p>安装过程和 Ubuntu 大致相同，只是 Windows 中的安装包是可执行文件，只需要双击进行安装即可，然后后面选择自己的安装路径即可，安装好之后的设置和 Ubuntu 一致。</p>
<h4> 卸载</h4>
<p>进入 Windows 设置，然后进入应用，然后搜索 IDEA，选择卸载即可。</p>
<p></p>
<h3> macOS</h3>
<h4> 安装</h4>
<ol>
<li>首先去 <a href="https://www.jetbrains.com/idea/download/#section=mac" target="_blank" rel="noopener noreferrer">官网下载</a> 对应安装包；</li>
</ol>
<p></p>
<ol start="2">
<li>然后双击下载好的 <code>.dmg</code> 安装包，等待验证后拖拽到 <code>Applications</code> 即可；</li>
</ol>
<p></p>
<ol start="3">
<li>安装成功，打开的主页面如下图所示；</li>
</ol>
<p></p>
<h4> 卸载</h4>
<p>打开访达中的 <strong>应用程序</strong>，然后找到 IDEA，将其拖到 <strong>🗑️ 废纸篓</strong> 即可，也可以单击鼠标右键，然后 <strong>移到废纸篓</strong>；</p>
<p></p>
<h2> 创建 Java 项目</h2>
<p><a href="https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ" target="_blank" rel="noopener noreferrer">上一篇</a> 文章中，我们介绍了如何利用编辑器写我们的 <code>Hello World</code>，接下来就讲讲如何利用 IDEA 来创建并书写我们的 <code>Hello World</code> 程序。</p>
<ol>
<li>依次进入 <code>File -&gt; New -&gt; Project</code>，然后选择左侧 Java，配置项目 JDK；</li>
</ol>
<p></p>
<ol start="2">
<li>下一步之后，如果勾选上面的选项，就会从模板创建一个项目（一般都是 <code>HelloWorld</code>），不勾选就是一个空项目，看自己选择；</li>
</ol>
<p></p>
<ol start="3">
<li>再接下来，就是设置项目名以及项目存储目录了；</li>
</ol>
<p></p>
<ol start="4">
<li>最后点击完成，我们的普通 Java 项目就创建成功了；</li>
</ol>
<p></p>
<ol start="5">
<li>项目创建成功了，我们在项目 <code>src</code> 目录上右键新建一个 Java 类文件。注意，一般来讲，我们倾向于把类的命名方式定义为首字母大写的驼峰命名法。然后填入如下代码，一个 简单的 <code>HelloWorld</code> 就完成了；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="6">
<li>最后运行我们刚才写的代码，可以看到输出了 <code>Hello World</code>，和我们在上一篇文章中通过控制台打印出的一样！</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 总结</h2>
<p>今天的内容就到此为止了，主要介绍了 IDEA 的不同版本之间的区别，以及 IDEA 在不同系统中的安装和卸载工作，最后则是给大家演示了如何利用 IDEA 创建一个项目，编写我们最简单的 <code>Hello World!</code> 程序。</p>
<p>这里如果您想了解 IDEA 的更多使用技巧，可以关注一下，后边我会抽空写一个完整的教程系列，敬请期待吧！您要是等不及了，那就加我微信来催我更文吧！</p>
<blockquote>
<p>最后，针对更多 IntelliJ IDEA 的使用，我特地写了一篇文章，赶紧去看看吧！</p>
<p>-&gt; <a href="https://cunyu1943.github.io/JavaPark/md/dev-tools/idea" target="_blank" rel="noopener noreferrer">传送门</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>变量与数据类型</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220704-variable-and-datatype.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220704-variable-and-datatype.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">变量与数据类型</source>
      <description>作者：村雨遥 博客：JavaPark 原文：https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Mon, 04 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前情回顾</h2>
<p>在之前的文章中，我们已经介绍了如何搭建 Java 开发环境以及如何使用 IDEA，现在就开始正式学习 Java 语言的相关语法吧！😎</p>
<p>本期内容预告如下：</p>
<ol>
<li><strong>变量</strong></li>
<li><strong>数据类型</strong></li>
<li><strong>变量作用域</strong></li>
<li><strong>常量</strong></li>
</ol>
<p>本文将主要从以上四个方面出发，带领大家来看一下 Java 中的变量和数据类型。</p>
<h2> 变量</h2>
<h3> 什么是变量？</h3>
<p>所谓变量，就是用来命名一个数据的标识符，其定义格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中数据类型是用于限制存储数据的形式，后面会讲到 Java 中的常见数据类型；变量名称是用于代表变量的一个符号，就好比我们每个人的名字；初始值则代表该变量存储时的初始数据。</p>
<p>在 Java 中，变量主要分为两种：</p>
<ul>
<li><strong>基本类型的变量</strong></li>
<li><strong>引用类型的变量</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>int</code> 是基本数据类型，表示这是一个整型数；而 <code>String</code> 则是引用类型，表示这是一个引用类型；</p>
<p><code>id</code> 和 <code>name</code> 则是标识符，也就是我们所说的 <strong>变量</strong>；</p>
<p><code>=</code> 则是赋值操作符，而 <code>1</code> 则是基本类型的值，<code>村雨遥</code> 则是引用类型的值；</p>
<h3> 变量的特点</h3>
<p>在使用变量时，需要注意以下的几个问题。</p>
<ol>
<li>变量一定要先声明然后再使用。</li>
<li>声明一个变量的类型后，不能用它来存储其类型的数据。</li>
<li>变量定义时可以不赋初始值，但是在使用时必须赋值。</li>
<li>变量是有使用范围的，在同一使用范围内，不能重复定义同一个变量。</li>
<li>变量最重要的一个特点就是可以重新赋值。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 变量命名规则</h3>
<p>变量命名也是一门学问，并不是我们想怎么命名就怎么命名，日常开发中最常见的变量命名规则主要有如下几条：</p>
<ol>
<li><strong>强制</strong>：变量命名只能使用 <strong>字母（大小写均可）、数字、$、_</strong>；</li>
<li><strong>强制</strong>：变量名不能使用关键字（就是 Java 中内置的一些关键字，如 <code>int、for、long…</code>）；</li>
<li><strong>强制</strong>：变量第一个字符不能使用数字，只能用字母、<code>$</code>、<code>_</code>；</li>
<li>更多命名规则推荐参考阿里巴巴推出的《Java 开发手册》，下载链接：<a href="https://github.com/cunyu1943/ebooks" target="_blank" rel="noopener noreferrer">https://github.com/cunyu1943/ebooks</a></li>
</ol>
<h3> 常见关键字</h3>
<p>这是一种事先定义好的，有特定意义的标识符，也叫做保留字。对于 Java 编译器有着特殊意义，用来表示一种数据类型，或者表示程序的结构等。此外，关键字不能用作变量名、方法名、类名、包名和参数名。常见的关键字可以分为如下几类，具体的关键字如下图所示：</p>
<ul>
<li><strong>访问控制类</strong></li>
<li><strong>类、方法及变量修饰符类</strong></li>
<li><strong>程序控制类</strong></li>
<li><strong>错误处理</strong></li>
<li><strong>包相关</strong></li>
<li><strong>基本类型</strong></li>
<li><strong>变量引用</strong></li>
<li><strong>保留字</strong></li>
</ul>
<!-- ![](https://img-blog.csdnimg.cn/9f8fed4aeeda4dea9d1de0ff7677ca4a.png) -->
<p></p>
<h2> 数据类型</h2>
<h3> 基本数据类型</h3>
<p>Java 中，共有 8 种基本数据类型，由 Java 语言预定好的，每个数据类型都属于关键字，而且每种基本变量都有其对应的封装类，这 8 种基本数据类型分别是：</p>
<ul>
<li><strong>整型（4 种）</strong></li>
<li><strong>浮点型（2 种）</strong></li>
<li><strong>字符型（1 种）</strong></li>
<li><strong>布尔型（1 种）</strong></li>
</ul>
<p>下面的表就是 Java 中 8 大数据类型所占的内存空间，对应封装类，数据表示范围以及默认值的一下相关情况。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>bit</th>
<th>字节</th>
<th>封装类</th>
<th>数据范围</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>byte</code></td>
<td>8</td>
<td>1</td>
<td><code>Byte</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>short</code></td>
<td>16</td>
<td>2</td>
<td><code>Short</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>char</code></td>
<td>16</td>
<td>2</td>
<td><code>Character</code></td>
<td><code>\u0000</code> ~ <code>\uffff</code>（<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">65535</span></span></span></span>）</td>
<td><code>u0000</code></td>
</tr>
<tr>
<td><code>int</code></td>
<td>32</td>
<td>4</td>
<td><code>Integer</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>long</code></td>
<td>64</td>
<td>8</td>
<td><code>Long</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0L</code></td>
</tr>
<tr>
<td><code>float</code></td>
<td>32</td>
<td>4</td>
<td><code>Float</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1.4</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">45</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">3.4</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">38</span></span></span></span></span></span></span></span></span></span></span></span></td>
<td><code>0.0f</code></td>
</tr>
<tr>
<td><code>double</code></td>
<td>64</td>
<td>8</td>
<td><code>Double</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">4.9</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">324</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1.8</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">308</span></span></span></span></span></span></span></span></span></span></span></span></td>
<td><code>0.0D</code></td>
</tr>
<tr>
<td><code>boolean</code></td>
<td>1</td>
<td>不确定</td>
<td><code>Boolean</code></td>
<td><code>true</code> 或 <code>false</code></td>
<td><code>false</code></td>
</tr>
</tbody>
</table>
<p><strong>注意：</strong></p>
<ol>
<li><code>boolean</code> 一般用 1 <code>bit</code> 来存储，但是具体大小并未规定，JVM 在编译期将 <code>boolean</code> 类型转换为 <code>int</code>，此时 1 代表 <code>true</code>，<code>0</code> 代表 <code>false</code>。此外，JVM 还指出 <code>boolean</code> 数组，但底层是通过 <code>byte</code> 数组来实现。</li>
<li>使用 <code>long</code> 类型时，需要在后边加上 <code>L/l</code>，否则将其作为整型解析，可能会导致越界.</li>
<li>浮点数如果没有明确指定 <code>float</code> 还是 <code>double</code>，统一按 <code>double</code> 处理。</li>
<li><code>char</code> 是用 <strong>单引号 <code>''</code></strong> 将内容括起来，<strong>只能存放一个字符</strong>，相当于一个整型值（ASCII 值），能够参加表达式运算；而 <code>String</code> 是用 <strong>双引号 <code>""</code></strong> 将内容括起来，代表的是一个地址值。</li>
<li>Java 在内存中是采用 Unicode 表示，所以无论是一个中文字符还是英文字符，都能用 <code>char</code> 来表示。</li>
</ol>
<p>那么如何个一个基本类型变量赋值呢？</p>
<p>在 Java 中，基本数据类型属于 Java 的一种内置的特殊数据类型，不属于任何类，所以可以直接对其进行赋值；给基本类型的变量赋值的方式就叫做 <strong>字面值</strong>；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 引用数据类型</h3>
<h4> 常见引用数据类型</h4>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>数组</td>
<td><code>null</code></td>
</tr>
<tr>
<td>类</td>
<td><code>null</code></td>
</tr>
<tr>
<td>接口</td>
<td><code>null</code></td>
</tr>
</tbody>
</table>
<p>而对于引用数据类型，我们经常是需要 <code>new</code> 关键字来进行赋值，但是引用类型中的 <strong>接口是不能被实例化的，我们需要对其进行实现</strong>；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> String</h4>
<p>对于引用数据类型中的 <code>String</code>，我们需要特别关注。</p>
<p><code>String</code> 不同于 <code>char</code>，它属于引用类型，而 <code>char</code> 属于基本数据类型。用双引号 <code>""</code> 括起来表示字符串，一个字符串能够保存 0 个到任意个字符，它一旦创建就不能被改变。</p>
<p>而针对字符串，如果我们要打印一些特殊的字符，比如字符串本来就包含 <code>"</code>，那么这个时候就需要借助于转义字符 <code>\</code>，最常见的转义字符主要有：</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\"</code></td>
<td>字符 <code>"</code></td>
</tr>
<tr>
<td><code>\'</code></td>
<td>字符 <code>'</code></td>
</tr>
<tr>
<td><code>\\</code></td>
<td>字符 <code>\</code></td>
</tr>
<tr>
<td><code>\n</code></td>
<td>换行符</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>制表符 <code>Tab</code></td>
</tr>
<tr>
<td><code>\r</code></td>
<td>回车符</td>
</tr>
</tbody>
</table>
<blockquote>
<p>那多个字符串之间或者字符串和其他类型数据之间，该如何进行连接呢？</p>
</blockquote>
<p>Java 编译器中，对于字符串和其他数据类型之间，可以使用 <code>+</code> 进行连接，编译器会自动将其他数据类型自动转换为字符串，然后再进行连接；</p>
<blockquote>
<p><code>String</code> 既然是不可变，那有什么优点呢？</p>
</blockquote>
<ol>
<li><strong>用于缓存 <code>hash</code> 值</strong></li>
</ol>
<p>由于 <code>String</code> 的 <code>hash</code> 值被频繁使用，它的不可变性使得 <code>hash</code> 值也不可变，此时只需要进行一次计算；</p>
<ol start="2">
<li><strong>字符串常量池（String Pool）的需要</strong></li>
</ol>
<p>如果一个 <code>String</code> 对象已经被创建过，那么就会优先从字符串常量池中获取其引用，其不可变性确保了不同引用指向同一 <code>String</code> 对象；</p>
<ol start="3">
<li><strong>安全性</strong></li>
</ol>
<p>我们经常用 <code>String</code> 作为我们方法的参数，其不变性能够保证参数不可变；</p>
<ol start="4">
<li><strong>线程安全</strong></li>
</ol>
<p><code>String</code> 的不可变性让它天生 <strong>具备线程安全</strong>，能够在多个线程中方便使用而不用考虑线程安全问题。</p>
<blockquote>
<p><code>String、StringBuilder、StringBuffer</code> 对比，该如何选择？</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th>可变性</th>
<th>线程安全</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>String</code></td>
<td>不可变</td>
<td>安全</td>
<td>操作少量的数据</td>
</tr>
<tr>
<td><code>StringBuffer</code></td>
<td>可变</td>
<td>安全，内部使用 <code>synchronized</code> 进行同步</td>
<td>多线程操作字符串缓冲区下操作大量数据</td>
</tr>
<tr>
<td><code>StringBuilder</code></td>
<td>可变</td>
<td>不安全</td>
<td>单线程操作字符串缓冲区下操作大量数据，性能高于 <code>StringBuffer</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p>通过 <code>new String(“xxx”)</code> 创建字符串的两种情况？</p>
</blockquote>
<p>使用 <code>new</code> 的方式创建字符串对象，会有两种不同的情况：</p>
<ol>
<li><strong>String Pool 中不存在 “xxx”</strong></li>
</ol>
<p>此时会创建两个字符串对象，“xxx” 属于字符串字面量，因此在编译期会在 String Pool 中创建一个字符串对象，用于指向该字符串的字面量 “xxx”；然后 <code>new</code> 会在堆中创建一个字符串对象。</p>
<p></p>
<ol start="2">
<li><strong>String Pool 中存在 “xxx”</strong></li>
</ol>
<p>此时只需要创建一个字符串对象，由于 String Pool 中已经存在指向 “xxx” 的对象，所以直接在堆中创建一个字符串对象。</p>
<p></p>
<h3> 数据类型转换</h3>
<p>对于基本数据类型，不同类型之间是可以相互转换的，但是需要满足一定的条件；</p>
<blockquote>
<p><strong>从小到大自动转，从大到小强制转</strong>。</p>
</blockquote>
<p>即就是，对于低精度的数据类型，如果要转换为高精度的数据类型，直接将低精度的值赋给高精度的值即可；</p>
<p>但对于高精度的数据类型，如果想要转换为低精度的数据类型，则需要采用 <strong>强制转换</strong> 的手段，但此时需要承担精度丢失的风险，就像从一个大杯子往一个小杯子里倒水，你要做好小杯子可能装不下溢出的情况；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 隐式转换（自动类型转换）</h4>
<p>当满足如下条件时，如果将一种类型的数据赋值给另一种数据类型变量时，将执行自动类型转换：</p>
<blockquote>
<ol>
<li>两种数据类型彼此兼容；</li>
<li>目标数据类型的取值范围大于源数据类型；</li>
</ol>
</blockquote>
<p>一般而言，隐式转换的规则是从低级类型数据转换为高级类型数据，对应规则如下：</p>
<blockquote>
<ul>
<li><strong>数值类型</strong>：<code>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</code></li>
<li><strong>字符类型转整型</strong>：<code>char -&gt; int</code></li>
</ul>
</blockquote>
<h4> 显式转换（强制类型转换）</h4>
<p>那既然满足上述两个条件时会发生隐式转换，那不满足我们又想进行数据类型转换时，我们该怎么办呢？</p>
<p>这个时候就需要我们的 <strong>显式转换</strong> 登场了，其语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们举个例子来说下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**注意：**强制转换可能会导致精度丢失，所以一般情况下尽量能不用就不用。</p>
<h4> 常见数据类型转换方法</h4>
<ol>
<li><strong>字符串与其他类型之间的转换</strong></li>
</ol>
<ul>
<li><strong>其他类型 -&gt; 字符串</strong></li>
</ul>
<blockquote>
<ol>
<li>调用类的串转换方法：<code>X.toString()</code>；</li>
<li>自动转换：<code>"" + X</code>；</li>
<li>利用 <code>String</code> 的方法：<code>String.valueOf(X)</code>；</li>
</ol>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>字符串 - &gt; 其他类型</strong></li>
</ul>
<ol>
<li>调用 <code>parseXXX</code> 方法，比如 <code>parseLong、parseFloat、parseDouble...</code>；</li>
<li>先调用 <code>valueOf()</code>，方法，然后再调用 <code>xxxValue()</code> 方法；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>int、float、double</strong> 之间的转换</li>
</ol>
<ul>
<li><code>float -&gt; double</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>double -&gt; float</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>double -&gt; int</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>int -&gt; double</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 变量作用域</h2>
<p>我们已经学会了如何定义变量，也知道了使用各种数据类型来定义变量。但是还有一点不知道大家有没有注意到，如果我们的定义变量在不同的位置，其作用是不是相同的呢？</p>
<p>这就涉及到变量的作用域，一般根据其作用域的不同，可以分为：</p>
<ul>
<li><strong>成员变量</strong>：定义在方法体和语句块外，不属于任何一个方法，能在整个类中起作用；</li>
<li><strong>局部变量</strong>：定义在方法或方法体中的变量，作用域是其所在的代码块；</li>
</ul>
<h3> 成员变量</h3>
<p>成员变量又可以分为 <strong>全局变量（又叫实例变量）</strong> 和 <strong>静态变量（也叫类变量）</strong>，两者的区别如下：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>修饰符</th>
<th>访问方式</th>
<th>生命周期</th>
</tr>
</thead>
<tbody>
<tr>
<td>全局变量</td>
<td>无</td>
<td>对象名.变量名</td>
<td>一旦对象被引用，则实例变量就存在</td>
</tr>
<tr>
<td>静态变量</td>
<td><code>static</code></td>
<td>类名.变量名</td>
<td>同类共生死，只有当类被 GC 回收时才会被销毁</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 局部变量</h3>
<p>成员变量指定义在方法或方法体中的变量，作用域是其所在的代码块，可以分为如下三种：</p>
<ul>
<li>形参</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>方法内定义</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>代码块定义</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 常量</h2>
<h3> 简介</h3>
<p>既然有变量，那就有与之相对的常量（也就是值是固定的，不能再变）。</p>
<p>常量又叫做字面常量，是通过数据直接来表示的，在程序运行过程中不能发生改变。通常我们把 Java 中用 <code>final</code> 关键字所修饰的成员变量叫做常量，它的值一旦给定就无法再进行改变！</p>
<h3> 分类</h3>
<p>Java 中使用 <code>final</code> 关键字来声明常量，其语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常量可以分为如下 3 种类型：</p>
<ul>
<li><strong>静态常量</strong>：<code>final</code> 之前用 <code>public staic</code> 修饰，表示该常量的作用域是全局的，我们不用创建对象就能够访问它。</li>
<li><strong>成员常量</strong>：类似于成员变量，但是最大的不同在于它不能被修改。</li>
<li><strong>局部常量</strong>：作用类似于局部变量，不同之处也在于不能修改。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：<code>final</code> 修饰变量后，该变量则变为常量。而 <code>final</code> 也还可以用来修饰类和方法，修饰方法时，表示这个方法不能被重写（但可以重载）；修饰类时，则表明该类无法被继承。这些东西这时候你可能会觉得很陌生，不过等我们后续学习了面向对象之后，你就会发现其实很简单。</p>
<h2> 总结</h2>
<p>以上就是本期文章的所有内容了，集中介绍了 Java 中的变量、数据类型、变量作用域以及常量等主要知识点。内容虽然蛮多的，但如果大家能够静下心来慢慢学习，掌握起来还是不难的。</p>
<p>最后，码字不易，如果觉得本文对您有所帮助，可以点赞关注，帮忙分享一波哦！🙏</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
      <enclosure url="https://img-blog.csdnimg.cn/9f8fed4aeeda4dea9d1de0ff7677ca4a.png" type="image/png"/>
    </item>
    <item>
      <title>常用进制转换</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220705-binary-convert.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220705-binary-convert.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">常用进制转换</source>
      <description>作者：村雨遥 博客：JavaPark 原文：https://mp.weixin.qq.com/s/2f_dODoVco-tSS66lF0U5A 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Tue, 05 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/2f_dODoVco-tSS66lF0U5A" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/2f_dODoVco-tSS66lF0U5A</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>所谓进制转换，就是人们利用符号来计数的方法。进制转换由一组数码符号和两个基本因素“基数”和“位权”所构成。其中<strong>基数</strong>是指进位计数制中所采用的数码的个数，逢 <code>n</code> 进 1 中的 <code>n</code> 就是基数。而<strong>位权</strong>则指的是进位制中每一个固定位置所对应的单位制，而每一种进制中的某一个数的每位上都有一个权值 <code>m</code>，而且权值是位数减一，比如个位上的数的权值为 <code>0</code>（位数 1 - 1 = 0），而十位的权值为 <code>1</code>（位数 2 - 1 = 1）。</p>
<p>在 Java 学习中，我们难免会和各种进制打交道。今天就来看看，在 Java 中最常用的几个进制的相关概念，以及如何利用 Java 来实现他们之间的相互转换！</p>
<h2> 二进制</h2>
<p>二进制是计算机中采用最广泛的一种数制，用 0 和 1 两个数码来表示，其进位规则是逢二进一，而借位规则则是借一当二。</p>
<p>如果要将二进制转换为十进制，则采用 <strong>按权展开求和</strong>方法，其步骤是先将二进制的数写成加权系数展开式，然后再更具十进制的加法规则进行求和。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1011</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">11</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<h2> 十进制</h2>
<p>而一个十进制数要转换为二进制数，则需要将整数和小数部分分别转换，最后再进行组合。其中，整数部分采用<strong>除二取余，逆序排序</strong>的方法。具体方法是用 2 来整除一个十进制数，从而得到一个商和余数；然后再用 2 去除以商，从而又得到一个商和余数，重复这个步骤，直到最后得到的商小于 1 时为止。最后把按照得到余数的先后顺序，逆序依次排列，得到的数即为这个十进制数的二进制表示。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">15</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1111</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p></p>
<p>小数部分则不同于整数部分，小数部分要使用<strong>乘 2 取整法</strong>，即用十进制的小数部分乘以 2，然后取结果的整数部分，然后再用剩下的小数重复刚才的步骤，直到最后剩余的小数为 0 时停止。最后将每次得到的整数部分按照先后顺序正序排列，从而得到对应的二进制表示。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0.25</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0.01</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p></p>
<h2> 八进制</h2>
<p>所谓八进制，就是每 3 位二进制作为一个单元，其中最小的数是 0，最大的数是 7，一共 8 个数字。</p>
<p>要将二进制的数转换为八进制，需要将 3 个连续的数拼成一组，然后再独立转成八进制中的数字。</p>
<p>例如，二进制的 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">111101011110</span></span></span></span> 可以转换为八进制中的 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">7536</span></span></span></span>。</p>
<p></p>
<h2> 十六进制</h2>
<p>所谓十六进制，就是每 4 位二进制作为一个单元，其中最小数是 0，最大数是 15，一共 16 个数字，分别用 0 ~ 9、A、B、C、D、E、F 表示。</p>
<p>要将二进制转换为十六进制，需要将 4 个连续的数拼成一组，然后再独立转换为十六进制中对应的数字。</p>
<p>例如，二进制的 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1111100111010111</span></span></span></span> 可以转换为十六进制中的 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord">9</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">7</span></span></span></span>。</p>
<p></p>
<h2> 常用进制转换</h2>
<p>当然，Java 中也已经将常用的进制转换方法封装好了，我们只需要调用对应方法即可。</p>
<table>
<thead>
<tr>
<th>转换</th>
<th>方法</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>十进制 -&gt; 二进制</td>
<td><code>Integer.toBinary(int num)</code></td>
<td>二进制字符串</td>
</tr>
<tr>
<td>十进制 -&gt; 八进制</td>
<td><code>Integer.toOctalString(int num)</code></td>
<td>八进制字符串</td>
</tr>
<tr>
<td>十进制 -&gt; 十六进制</td>
<td><code>Integer.toHexString(int num)</code></td>
<td>十六进制字符串</td>
</tr>
<tr>
<td>十进制 -&gt; N 进制</td>
<td><code>Integer.toString(int num, int N)</code></td>
<td>N 进制字符串</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>相反的，如果我们要将一个 <code>N</code> 进制的字符串 <code>str</code> 转换为十进制数，那么可以使用以下方法。</p>
<table>
<thead>
<tr>
<th>转换</th>
<th>方法</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>N 进制 -&gt; 十进制</td>
<td><code>Integer.parseInt(String str, int N)</code></td>
<td>十进制数</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>以上就是有关二进制、十进制、八进制、十六进制相关的知识点了。此外还介绍了 Java 中如何进行十进制向其他进制的转换方法，以及如何将其他进制转换为十进制。如果你刚好这些内容对你有所帮助，那就来个一键三连吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>操作符</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220706-operator.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220706-operator.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">操作符</source>
      <description>作者：村雨遥 博客：JavaPark 原文：https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Wed, 06 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p><a href="https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw" target="_blank" rel="noopener noreferrer">之前的文章</a> 中介绍了 Java 变量和数据类型，那么如何对他们进行运算呢？这就要用到运算符的相关知识点了。所谓运算符，就是指 Java 中对变量或者字面量进行操作的符号。下面就来具体看看，常用的操作符。</p>
<p>本文主要内容预告如下：</p>
<ul>
<li><strong>算术运算符</strong></li>
<li><strong>关系运算符</strong></li>
<li><strong>位运算符</strong></li>
<li><strong>逻辑运算符</strong></li>
<li><strong>赋值运算符</strong></li>
<li><strong>条件运算符</strong></li>
</ul>
<p>好了，话不多说，开始正式内容吧！</p>
<h2> 算术运算符</h2>
<p>常见的算术运算符主要有下表中的几种，主要是针对整型和浮点类型的运算。</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>+</code></td>
<td style="text-align:left">加法 - 相加运算符两侧的值</td>
</tr>
<tr>
<td style="text-align:left"><code>-</code></td>
<td style="text-align:left">减法 - 左操作数减去右操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>*</code></td>
<td style="text-align:left">乘法 - 相乘操作符两侧的值</td>
</tr>
<tr>
<td style="text-align:left"><code>/</code></td>
<td style="text-align:left">除法 - 左操作数除以右操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>％</code></td>
<td style="text-align:left">取余 - 左操作数除以右操作数的余数</td>
</tr>
<tr>
<td style="text-align:left"><code>++</code></td>
<td style="text-align:left">自增: 操作数的值增加1</td>
</tr>
<tr>
<td style="text-align:left"><code>--</code></td>
<td style="text-align:left">自减: 操作数的值减少1</td>
</tr>
</tbody>
</table>
<p><strong>注意</strong>：<code>++</code> 和 <code>--</code> 可以放在操作数之前，也可以放在操作数之后；<strong>位于操作数之前时，先自增/减，再赋值；位于操作数之后，先赋值，再自增/减</strong>；总结起来就是<strong>符号在前就先加/减，符号在后就后加/减</strong>。</p>
<p>以下是部分算术运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>这里不难看出，无论是 <code>++</code> 还是 <code>--</code>，当它们单独写一行时，不管是放在变量前边还是后边，其最终结果都是一样的。但如果将它们参与运算，此时的效果就不一样了，这里需要注意。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码中，先进行了 <code>b = a</code> 的赋值操作，所以此时 <code>b</code> 的值是 <code>10</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而此时，先要对 <code>a</code> 进行加一的操作之后，再将 <code>a</code> 的值赋予 <code>b</code>，所以此时 <code>b</code> 的值为 <code>11</code>。</p>
<h2> 关系运算符</h2>
<p>关系运算符主要是指两个数据间的关系，两者之间的比较结果用逻辑值来表示，常用来比较判断两个变量或常量的大小。常见的关系运算符及含义如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>==</code></td>
<td style="text-align:left">检查如果两个操作数的值是否相等，如果相等则条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>!=</code></td>
<td style="text-align:left">检查如果两个操作数的值是否相等，如果值不相等则条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt; </code></td>
<td style="text-align:left">检查左操作数的值是否大于右操作数的值，如果是那么条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt; </code></td>
<td style="text-align:left">检查左操作数的值是否小于右操作数的值，如果是那么条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;=</code></td>
<td style="text-align:left">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;=</code></td>
<td style="text-align:left">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真</td>
</tr>
</tbody>
</table>
<p>以下是部分关系运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 位运算符</h2>
<p>位运算符主要用来对操作数二进制的位进行运算，其运算结果是整型的。常见的位运算符及功能描述如下表所示：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>＆</code></td>
<td>如果相对应位都是 1，则结果为 1，否则为 0</td>
</tr>
<tr>
<td><code>|</code></td>
<td>如果相对应位都是 0，则结果为 0，否则为 1</td>
</tr>
<tr>
<td><code>^</code></td>
<td>如果相对应位值相同，则结果为 0，否则为 1</td>
</tr>
<tr>
<td><code>〜</code></td>
<td>按位取反运算符翻转操作数的每一位，即 0 变成 1，1 变成 0</td>
</tr>
<tr>
<td><code>&lt;&lt;</code></td>
<td>按位左移运算符。左操作数按位左移右操作数指定的位数</td>
</tr>
<tr>
<td><code>&gt;&gt;</code></td>
<td>按位右移运算符。左操作数按位右移右操作数指定的位数</td>
</tr>
<tr>
<td><code>&gt;&gt;&gt;</code></td>
<td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充</td>
</tr>
</tbody>
</table>
<p>以下是部分位运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 逻辑运算符</h2>
<p>逻辑运算符通过将关系表达式连接起来，从而组成一个复杂的逻辑表达式，从而判断程序中的表达式是否成立，其结果返回 <code>true</code> 或 <code>false</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>&amp;&amp;</code></td>
<td style="text-align:left">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真</td>
</tr>
<tr>
<td style="text-align:left"><code>||</code></td>
<td style="text-align:left">称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>!</code></td>
<td style="text-align:left">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为 <code>true</code>，则逻辑非运算符将得到 <code>false</code></td>
</tr>
</tbody>
</table>
<p>以下是逻辑运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 赋值运算符</h2>
<p>赋值运算符表示一个动作，将其右侧的值送到左侧的变量中。常见的赋值运算符及含义如下表所示：</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>=</code></td>
<td style="text-align:left">简单的赋值运算符，将右操作数的值赋给左侧操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>+=</code></td>
<td style="text-align:left">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>-=</code></td>
<td style="text-align:left">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>*=</code></td>
<td style="text-align:left">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>/=</code></td>
<td style="text-align:left">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>％=</code></td>
<td style="text-align:left">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;&lt; =</code></td>
<td style="text-align:left">左移位赋值运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;&gt;=</code></td>
<td style="text-align:left">右移位赋值运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>＆=</code></td>
<td style="text-align:left">按位与赋值运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>^=</code></td>
<td style="text-align:left">按位异或赋值操作符</td>
</tr>
<tr>
<td style="text-align:left"><code>|=</code></td>
<td style="text-align:left">按位或赋值操作符</td>
</tr>
</tbody>
</table>
<p>以下是部分赋值运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 条件运算符（? :）</h2>
<p>也叫作三元运算符，共有 3 个操作数，且需要判断布尔表达式的值，常用来取代某个 <code>if-else</code> 语句。其语法结构如下所示：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下是条件运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> instanceof</h2>
<p>用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型），其语法结构如下。该知识点涉及到类与对象，此处就不做展开，等到后边学习类与对象之后，就能理解了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 运算符优先级</h2>
<p>运算符有很多，如果我们将多个运算符组合在一起，那它们又该先计算哪一个，然后再计算哪一个呢？其实就像我们日常排队一样，运算符也是有优先级的。
常用运算符的优先级如下表所示，在我们使用时，如果涉及到一个表达式中含有多个运算符，一定要注意运算符的优先级。当然了，让我们背下来这些也是挺难的。不过不要紧，我们只需要学会灵活运用 <code>()</code> 就好了。我们可以利用 <code>()</code> 将需要先计算的表达式括起来，然后再去进行下一步的运算。</p>
<table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>.</code>、<code>()</code>、<code>{}</code></td>
</tr>
<tr>
<td>2</td>
<td><code>!</code>、<code>~</code>、<code>++</code>、<code>--</code></td>
</tr>
<tr>
<td>3</td>
<td><code>*</code>、<code>/</code>、<code>%</code></td>
</tr>
<tr>
<td>4</td>
<td><code>+</code>、<code>-</code></td>
</tr>
<tr>
<td>5</td>
<td><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></td>
</tr>
<tr>
<td>6</td>
<td><code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>instanceof</code></td>
</tr>
<tr>
<td>7</td>
<td><code>==</code>、<code>!=</code></td>
</tr>
<tr>
<td>8</td>
<td><code>&amp;</code></td>
</tr>
<tr>
<td>9</td>
<td><code>^</code></td>
</tr>
<tr>
<td>10</td>
<td><code>|</code></td>
</tr>
<tr>
<td>11</td>
<td><code>&amp;&amp;</code></td>
</tr>
<tr>
<td>12</td>
<td><code>||</code></td>
</tr>
<tr>
<td>13</td>
<td><code>?:</code></td>
</tr>
<tr>
<td>14</td>
<td><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&amp;=</code></td>
</tr>
</tbody>
</table>
<h2> equals() 和 ==</h2>
<ul>
<li><code>==</code></li>
</ul>
<p>基本数据类型用 <code>==</code> 比较的是值，而 用于引用数据类型时判断两个对象的内存地址是否相等，即两对象是否是同一个对象；</p>
<blockquote>
<p>本质来讲，由于 Java 中只有值传递，所以不管是基本数据类型还是引用数据类型，比较的其实都是值，只不过引用类型变量存的值是对象的地址；</p>
</blockquote>
<ul>
<li><code>equals()</code></li>
</ul>
<p>作用也是判断两个对象是否相等，但是 <strong>不能用于基本数据类型变量的比较</strong>。存在于 <code>Object()</code> 类中，所以所有类都具有 <code>equals()</code> 方法存在两种使用情况：</p>
<ol>
<li><strong>类未覆盖 <code>equals()</code> 方法</strong>：此时通过 <code>equals()</code> 比较该类的两个对象时，等价于 <code>==</code> 比较这两个对象，默认使用  <code>Object</code> 类中的 <code>equals()</code> 方法；</li>
<li><strong>类覆盖了 <code>equals()</code> 方法</strong>：一旦覆盖了该方法，则用来比较两个对象的内容是否相等，如我们常用的 <code>String、BitSet、Data、File</code> 就覆盖了 <code>equals()</code> 方法；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>好了，以上就是有关操作符系列的相关知识点了。老规矩，如果您觉得对您有所帮助，那就点个赞吧 🥳.</p>
<p>对于文中所遗漏或者存在错误的知识点，也欢迎大家评论指正呀！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>流程控制</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220707-control-process.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220707-control-process.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">流程控制</source>
      <description>作者：村雨遥 博客：JavaPark 原文：https://mp.weixin.qq.com/s/3WU5l37DpPkR6o7CnFiStA 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Thu, 07 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/3WU5l37DpPkR6o7CnFiStA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/3WU5l37DpPkR6o7CnFiStA</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>我们在 <a href="https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g" target="_blank" rel="noopener noreferrer">上一篇文章</a> 中讲了各种操作符的使用技巧，接上一篇文章中的内容，本次文章主要将流程控制，文章主要内容安排如下：</p>
<ul>
<li><strong>输入输出</strong></li>
<li><strong>顺序结构</strong></li>
<li><strong>分支结构</strong></li>
<li><strong>循环结构</strong></li>
</ul>
<h2> 输入输出</h2>
<p>之前的学习中，我们会发现都是通过定义变量并赋初值的方式来得到一个实现固定好值得变量。加入我们现在不想再以这种方式获取变量值，而想要直接控制变量值，又该怎么做呢？这就涉及到 Java 中的输入输出相关知识了，以下就先来看看，如何实现从控制台输入，并从控制台输出吧。</p>
<h3> 输入</h3>
<p>先来看一个实例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>要实现从控制台输入并读取到我们的程序中时，需要借助 <code>Scanner</code> 类，它属于标准输入流，其步骤总结如下：</p>
<ol>
<li>首先，需要导入 <code>Scanner</code> 类。即 <code>import java.util.Scanner</code>，其中 <code>import</code> 表示导入某个类，并且只能放在程序的开头。</li>
<li>然后创建 <code>Scanner</code> 对象。这里需要注意，创建时需要传入 <code>System.in</code>，表示标准输入流，与之对应的 <code>System.out</code> 则代表标准输出流。</li>
<li>最后就是读取用户输入即可。这里读取时，调用不同的方法 <code>Scanner</code> 会自动转换数据类型，不用我们去进行手动转换。</li>
</ol>
<p>从控制台获取不同类型的输入，其常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>boolean</code></td>
<td><code>hasNext()</code></td>
<td>如果还有输入，则返回 <code>true</code>，否则返回 <code>false</code></td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>next()</code></td>
<td>返回输入的字符串，以空格为分隔符</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>nextLine()</code></td>
<td>返回输入的字符串，以换行为分隔符</td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>nextInt()</code></td>
<td>输入整型数</td>
</tr>
<tr>
<td><code>long</code></td>
<td><code>nextLong()</code></td>
<td>输入长整型数</td>
</tr>
<tr>
<td><code>float</code></td>
<td><code>nextFloat()</code></td>
<td>输入单精度数</td>
</tr>
<tr>
<td><code>double</code></td>
<td><code>nextDouble</code></td>
<td>输入双精度数</td>
</tr>
</tbody>
</table>
<p>这里值得注意的是 <code>next()</code> 和 <code>nextLine</code> 两个方法，虽然他们的作用都是用于获取输入的 <code>String</code> 类型的内容，但是它们具体的处理机制又会有所区别。
针对 <code>next()</code> 而言，它会自动消除有效字符前的空格，从而只返回输入的字符，得到的字符串都不会带有空格。也就是说，当使用 <code>next()</code> 时，如果遇到空格，此时就会停止录入，只录入空格前的内容，而空格后的内容则会保留到缓冲区。除了空格之外，<code>next()</code> 也会对制表符和换行符采用同样的处理方式。
而对 <code>nextLine()</code> 来说，它会返回换行符之前的所有内容，甚至是带空格的字符串。</p>
<p>因此，在使用时一定要注意它们之间的区别，合理搭配使用，从而得到自己想要的结果。</p>
<h3> 输出</h3>
<p>其实从一开始的 <code>hello world</code> 到目前的代码中，我们已经接触过输出了，也就是我们的 <code>System.out.println()</code>。</p>
<p>其中 <code>println</code> 表示输出并换行，如果我们不想换行，则使用 <code>print</code> 就可以了。</p>
<p>通过上述方式所输出的内容都是挤在一起的，十分不方便我们阅读。为了更加清晰的打印出我们所需要的结果，可以使用格式化输出。</p>
<p>要使用格式化输出，需要使用 <code>System.out.printf()</code> 或者 <code>System.out.format()</code> 搭配占位符，然后在后面的参数格式化成指定格式即可，两者达成的效果是等价的。常见的占位符如下：</p>
<table>
<thead>
<tr>
<th>占位符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>%d</code></td>
<td>格式化输出整数</td>
</tr>
<tr>
<td><code>%f</code></td>
<td>格式化输出浮点数</td>
</tr>
<tr>
<td><code>%s</code></td>
<td>格式化输出字符串</td>
</tr>
<tr>
<td><code>%x</code></td>
<td>格式化输出十六进制整数</td>
</tr>
<tr>
<td><code>%e</code></td>
<td>格式化输出科学计数法表示的浮点数</td>
</tr>
</tbody>
</table>
<p>此外，我们还可以使用各种转义字符来使得我们的输出更为简洁，常见的转义字符及意义如下表所示。</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\n</code></td>
<td>换行</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>水平制表符</td>
</tr>
<tr>
<td><code>\\</code></td>
<td>表示一个反斜杠</td>
</tr>
<tr>
<td><code>\'</code></td>
<td>表示一个单引号</td>
</tr>
<tr>
<td><code>\"</code></td>
<td>表示一个双引号</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 顺序结构</h2>
<p></p>
<p>顺序结构如上图所示，它可以说是最简单的，只需要按照解决问题的顺序写出对应的语句即可，其执行顺序是自上而下，依次执行的。就类似于我们求解一道数学题，你得根据题意一步一步来，直至解出最后的答案。</p>
<h2> 分支结构</h2>
<p>
上图是分支结构，顺序结构虽然能够处理计算、输出等问题，当遇到需要判断选择时，顺序结构已经不能很好的解决了，此时就需要使用分支结构。
Java 中，分支结构相关的语句主要涉及到 <code>if</code> 和 <code>switch</code> 相关，下面就分别来看一下。</p>
<h3> if</h3>
<ol>
<li><strong>单次判断</strong></li>
</ol>
<p>当我们只进行一次判断时，可以使用一个 <code>if</code> 语句包含一个条件表达式，其语法格式如下；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其执行逻辑如下图所示，如果条件表达式的值为 <code>true</code>，则执行 <code>if</code> 语句块中的执行语句，否则就执行 <code>if</code> 语句块后边的代码；</p>
<p></p>
<ol start="2">
<li><strong>多次判断</strong></li>
</ol>
<p>要进行多次判断时，可以使用 <code>if…else</code> 的形式，其语法格式如下；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其执行逻辑如下图所示，如果条件表达式 1 为 <code>true</code>，则执行执行语句 1，否则接着判断条件表达式 2，若为 <code>true</code>，则执行执行语句 2，以此类推，直到完成最后一个条件表达式的判断。</p>
<p></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> switch</h3>
<p>当我们需要使用 <code>if</code> 进行判断时，难免显得有些繁琐。此时，我们就可以使用 <code>switch</code> 来进行替代，通过判断一个变量所属范围，从而划分出不同的分支。</p>
<p><code>switch</code> 分支的语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过判断表达式的值，然后执行对应值下的执行语句，而 <code>default</code> 下的执行语句表示如果 <code>switch</code> 表达式未匹配到对应的值时所执行的语句；</p>
<p>一个 <code>switch</code> 的实例如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上面的形式之外，也可以使用以下形式：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在使用 <code>switch</code> 分支语法时，需要遵循一定的规则：</p>
<ol>
<li><code>switch</code> 中的变量类型可以是：<code>byte</code>、<code>short</code>、<code>int</code>、<code>char</code>、<code>String</code> （自 JDK 1.7 开始）；</li>
<li><code>switch</code> 语句根据表达式的结果跳转到对应的 <code>case</code> 结果，然后执行其后跟着的语句，直到遇到 <code>break</code> 才结束执行；</li>
<li>默认情况下，一般都会跟着一个 <code>default</code> 的分支，用于未匹配到对应情况时的执行情况；</li>
</ol>
<h2> 循环结构</h2>
<p>
上图为循环结构示意，让程序中遇到需要反复执行某一个功能时，我们发现顺序结构以及分支结构实现起来都太过于繁琐，于是又提出了循环结构的相关概念。
通过循环结构，我们就可以通过判断循环语句，然后判断是否进入循环体。Java 中，循环结构主要涉及的语句有 <code>while</code>、<code>for</code>、<code>continue</code>、<code>break</code> 等。</p>
<h3> while</h3>
<p>假设我们现在有一个题目，需要你计算 <code>1 + 2 + 3 + …… + 50</code> 的结果，你会怎么办呢？</p>
<p>这么写么：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这么写就太麻烦了，计算到 50 的值就已经很多了，假如有 1000,10000 甚至更大，那我们岂不是写个好久才能写完。这个时候我们就得找找有没有简单的方法，能够只写几句就实现相同的效果呢？答案是：Yes，这就是我们这一小节将要讲到的循环。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>从上面的实例，利用 <code>while</code> 循环，我们就能轻易达成循环的效果。其语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要表达式为 <code>true</code>，就会不断循环执行其中的执行语句，直到表达式为 <code>false</code>，此时便跳出循环，不再执行其中的执行语句。</p>
<p>除开上面的形式之外，还有另一种 <code>while</code> 形式：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两者的最大区别在于：<code>do……while</code> 无论 <code>表达式</code> 是否为 <code>true</code>，都至少会执行一次。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>观察以上两个实例，在 <code>while</code> 程序中，我们定义 <code>num = 10</code>，然后假设 <code>num &lt;= 9</code> 时就进入循环体，而 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9</span></span></span></span>，所以不进入循环体，直接打印 <code>sum</code> 的值为 <code>0</code>。而在 <code>do…while</code> 程序中，我们同样定义 <code>num = 10</code>，然后假设 <code>num &lt; 10</code> 时继续循环，很明显不满足该情况，理应跳出循环，打印出 <code>sum</code> 的值为 <code>10</code>，说明此时还是进行了一次循环。</p>
<p>因此，当我们需要在 <code>while</code> 和 <code>do……while</code> 之间做出选择时，如果我们最少需要进行一次循环，则选择 <code>do……while</code>，其他情况下选用两者都可以。</p>
<h3> for</h3>
<ul>
<li><strong>普通 for 循环</strong></li>
</ul>
<p>除开 <code>while</code> 和 <code>do……while</code> 之外，我们还有 <code>for</code> 循环来达成同样的结果，只是表达方法不一样。同样以上面计算 <code>1 + 2 + …… + 50</code> 为例，可以写成如下的形式：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p><code>for</code> 循环的语法形式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>for</code> 循环的执行步骤如下：</p>
<ol>
<li>首先执行初始条件，可以声明一种类型，但可以初始化一个或多个循环控制变量，甚至可以放空。</li>
<li>接着判断终止条件，如果为 <code>true</code>，则进入循环体执行循环语句；如果为 <code>false</code>，则终止循环，执行循环体后面的语句。</li>
<li>一次循环完成后，执行更新语句来更新循环控制变量。</li>
<li>最后再次判断终止条件，循环以上三个步骤。</li>
</ol>
<p><code>for</code> 和 <code>while</code> 最大的区别就在于 <code>for</code> 循环一般都是事先知道需要循环的次数的，而 <code>while</code> 循环则不需要。</p>
<ul>
<li><strong>增强 for 循环</strong></li>
</ul>
<p>自 Java 5 后，引入了一种增强型 <code>for</code> 循环，主要用于数字遍历，其语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>其中，声明语句一般是声明一个同数组数据类型相同的局部变量，而表达式则是要访问的数组名或者返回值是数组的方法。</p>
<h3> for 和 while 的区别</h3>
<p>经过上面的学习，我们可以发现，基本能用 <code>for</code> 循环的，都能将其改写成 <code>while</code> 循环。而使用 <code>while</code> 循环的，也可以在一定程度上改写成 <code>for</code> 循环。两者的运行规则都是一样的，那针对什么场景该使用 <code>for</code>，什么场景又该使用 <code>while</code> 呢？</p>
<p>通常，如果我们知道循环的次数或者循环的范围，那么我们优先使用 <code>for</code> 循环。如果不知道循环的次数和范围，而只知道循环的结束条件，那么此时优先使用 <code>while</code> 循环。</p>
<h3> continue &amp; break</h3>
<h3> break</h3>
<p>主要用在循环语句或者 <code>switch</code> 语句中，表示跳出最里层的循环，然后继续执行该循环下的语句。</p>
<p><code>break</code> 在 <code>switch</code> 语句中的用法已经见识过了，我们就来看看它在循环中的应用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>观察结果可知，当 <code>i == 5</code> 时，我们执行了 <code>break</code> 语句，此时就直接跳出了 <code>for</code> 循环，而不再进行下一次的循环。</p>
<h3> continue</h3>
<p><code>continue</code> 也同样是应用在循环控制结构中，主要是让程序跳出当次循环，进而进入下一次循环的迭代。</p>
<p>在 <code>for</code> 循环中，执行 <code>continue</code> 语句后，直接跳转到更新语句，而不再执行 <code>continue</code> 后的语句。而在 <code>while</code> 或 <code>do……while</code> 循环中，执行 <code>continue</code> 语句后，直接跳转到表达式的判断。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>观察上述结果可知，当 <code>i == 5</code> 时，我们执行了 <code>continue</code> 语句，此时便跳出了当次循环，不再进行后边的打印语句，然后继续下一次的循环，所以最终打印的结果没有 5.</p>
<h2> 总结</h2>
<p>今天的内容到此就结束了，老规矩，如果大家觉得有用的话，就给个点赞关注吧！</p>
<p>其次就是对于文中遗漏或者存在欠缺的知识点，还请大家不吝赐教，在评论区指出来！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>面向对象的 3、5 知识点</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220709-oop-1.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220709-oop-1.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">面向对象的 3、5 知识点</source>
      <description>作者：村雨遥 博客：JavaPark 原文：https://mp.weixin.qq.com/s/Z4F7tsjLkPbTGy4_gJPQTw 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Sat, 09 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/Z4F7tsjLkPbTGy4_gJPQTw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Z4F7tsjLkPbTGy4_gJPQTw</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>前面已经讲了 Java 的一些环境搭建、IDE 使用、变量及数据类型、操作符、控制流程以及数组操作，今天就来看看 Java 里边的一个核心思想 - <strong>面向对象编程</strong>。</p>
<h2> 什么是面向对象？</h2>
<p>所谓面向对象，是一种通过对象的方式，将现实中的事物映射到计算机模型的一种编程方法。</p>
<p>对象的含义指的是具体的某一个事物，即我们在现实生活中能够看得见摸得着的。在面向对象程序设计中，对象指的是计算机系统中的某一个成分，主要有两层含义。一个是指 <strong>数据</strong>，另一个则是 <strong>动作</strong>。即对象是两者的结合体，通过对象不仅能够进行操作，还能对操作的结果进行记录。</p>
<p>在这之前，另一种编程方式是 <strong>面向过程</strong>，用一个具体的例子来讲，可以描述成下面这样：</p>
<blockquote>
<p>假如有一天你很想吃酸菜鱼，那么你该怎么办呢？下面就以面向对象和面向过程给你两个选择，让你决定来选哪一个！</p>
<ol>
<li><strong>面向对象</strong>：打开手机，打开外卖软件，搜索酸菜鱼，然后下单，等着外卖送到家就行！</li>
<li><strong>面向过程</strong>：先去买菜，鱼、酸菜、调料……，然后回家杀鱼、切酸菜、切调料……，再接着开始炒，最后做好盛到盘子里！</li>
</ol>
</blockquote>
<p>对比可以发现两者的优缺点：</p>
<ul>
<li><strong>面向过程</strong>
<ul>
<li><strong>优点</strong>：性能好；以例子来说自己做比起点外卖，经济又实惠，还吃得放心。</li>
<li><strong>缺点</strong>：不易维护、不易复用、不易扩展；以例子来讲，要是我们自己做，临时又想吃其他的菜，又得跑去买材料啥的，麻烦！但外卖就不一样了，直接打开手机再点就是。</li>
</ul>
</li>
<li><strong>面向对象</strong>
<ul>
<li><strong>优点</strong>：易维护、易复用、易扩展，也就是面向过程的缺点。</li>
<li><strong>缺点</strong>：性能较差；比起自己做，点外卖成本啥的可能就比较高了。</li>
</ul>
</li>
</ul>
<h2> 面向对象的 5 大原则</h2>
<ol>
<li><strong>单一职责原则 SRP</strong></li>
</ol>
<p>又称为单一功能原则，它规定了一个类应该只有一个发生变化的原因。也就是说类的功能要单一，不能太复杂。</p>
<p>举个例子来说，学校里边有学生、老师、管理员，如果将这些人统一封装在一个类中，那么到时候难以对他们的身份作区分，那么此时按照 SRP 原则，我们就可以将他们各自分为一个类，从而方便管理。</p>
<ol start="2">
<li><strong>开放封闭原则 OCP</strong></li>
</ol>
<p>指一个模块对于扩展是开放的，但对于修改则是封闭的。也就是说可以增加功能，但是不能修改功能。</p>
<p>也就是说，一个类可以进行扩展（添加属性或者方法），但是对于类中已有的属性和方法，不要修改它们。</p>
<ol start="3">
<li><strong>里氏替换原则 LSP</strong></li>
</ol>
<p>指子类能够替换父类出现在父类能够出现的任何地方。</p>
<p>假设有两个类 <code>Father</code> 和 <code>Child</code>，其中 <code>Father</code> 是 <code>Child</code> 的父类，那么在进行调用时，<code>Father</code> 类可以引用 <code>Child</code> 类，反之却不行。</p>
<ol start="4">
<li><strong>依赖倒置原则 DIP</strong></li>
</ol>
<p>高层次的模块不应该依赖于低层次的模块，而应该都依赖于抽象。抽象不应该依赖于具体实现，但具体实现应该依赖于抽象。</p>
<p>也就是说，我们可以将同类事物的共性抽取出来，将其作为这一类事物的“高层次模块”，然后由“低层次模块”来继承或者实现“高层次模块”。</p>
<ol start="5">
<li><strong>接口分离原则 ISP</strong></li>
</ol>
<p>指设计时可以采用多个与特定客户类相关的接口，而不是采用一个通用的接口。</p>
<h2> 面向对象的 3 大特性</h2>
<h3> 封装</h3>
<p>利用抽象数据类型把数据和方法封装在一起，然后共同构成一个相互关联的对象。从而隐藏对象的属性和实现细节，只对外提供访问的接口，提高代码的复用性和安全性。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于以上的 <code>Hero</code> 类，它封装了 <code>name</code> 、<code>skill</code> 等属性，如果我们想要获取 <code>Hero</code> 的 <code>name</code> 和 <code>skill</code> 属性值，那么就只能通过 <code>get()</code> 方法来获取，而如果我们想要改变这两个属性值，也只能通过 <code>set()</code> 方法来进行设置。</p>
<p>封装时，需要注意其原则，对象代码表什么，就封装对应的数据，并提供数据所对应的行为。</p>
<h3> 继承</h3>
<p>定义父类之后，子类可以从基础类进行继承，这样一来，子类就可以获得父类中非 <code>private</code> 的属性和方法，从而提高了代码的复用性。</p>
<p>继承实现了 <code>IS-A</code> 关系，假设我们现在有一个类 <code>Shooter</code> 继承自 <code>Hero</code>，那么此时我们就可以定义一个父类引用，然后将该引用指向它的子类对象。</p>
<p><code>Java</code> 中提供了一个关键字 <code>extends</code>，从而让一个类和另一个类建立起继承关系，其格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，被继承的类叫做父类（也叫超类或基类），如上述代码中的 <code>Hero</code>，另外一个类则叫做子类（也叫派生类），比如上面的 <code>Shooter</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是要注意一点：<strong>在 Java 中，类只能单继承</strong>。</p>
<h3> 多态</h3>
<p>所谓多态，就是同类型的对象，表现出的不同形态，表现形式为：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指的是父类或者接口定义的引用变量可以指向子类或具体实现类的实例对象，提高程序的扩展性。</p>
<p>多态又可以分为编译时多态和运行时多态，其中，编译时多态是指方法的重载，而运行时多态则指的是程序中定义的对象引用所指向的具体类型在运行期间才能确定下来。</p>
<p>要确定一个多态是编译时还是运行时多态，可以通过以下三个条件来区分：</p>
<ul>
<li><strong>继承</strong></li>
<li><strong>覆盖（重写）</strong></li>
<li><strong>向上转型</strong></li>
</ul>
<p>如果同时满足以上三个条件，那么此时多态是运行时多态。</p>
<p>多态中，调用成员变量和成员方法时，遵循以下原则。</p>
<ol>
<li><strong>调用成员变量：编译看左边，运行也看左边</strong>：指 <code>javac</code>&nbsp; 编译时，会看左边的父类中是否有该变量，如果有则编译成功，如果没有就会编译失败。而用 <code>java</code>&nbsp; 运行代码时，实际获取的成员变量是父类中的值。</li>
<li><strong>调用成员方法：编译看左边，运行看右边</strong>：指 <code>javac</code> 编译时，会看左边的父类中是否有该方法，如果有则编译成功，如果没有就会编译失败。而用 <code>java</code> 运行代码时，实际调用的是子类中的方法。</li>
</ol>
<h2> 总结</h2>
<p>以上就是关于面向对象编程思想的一些简单知识介绍了，主要讲了面向对象的概念，面向对象的 3 大特性以及面向对象的 5 大原则。如果觉得本文对你有所帮助，那就来个一键三连再走吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>类的相关知识</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220710-oop-2.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220710-oop-2.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">类的相关知识</source>
      <description>作者：村雨遥 博客：JavaPark 原文：https://mp.weixin.qq.com/s/1BPFnyNuC3fdYBVxP7J3VA 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Sun, 10 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/1BPFnyNuC3fdYBVxP7J3VA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/1BPFnyNuC3fdYBVxP7J3VA</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>学习了面向对象编程的思想，今天就来看看面向对象编程思想在 Java 中的体现 - 类。以及有关类的相关知识，比如属性、方法、引用等。</p>
<h2> 类与对象</h2>
<p>以我们日常生活为例，我们现在很多人都养宠物，而宠物 <strong>都有一些共同状态</strong>，比如名字、毛色、年龄…… 这样一来我们就可以设计一个叫做<strong>类</strong>的东西，用来 <strong>代表宠物</strong> 这一类事物。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个类之后，它就相当于我们的一个模板，根据这个模板我们就能够创建一个个具体的宠物，而这些宠物，就叫做 <strong>对象</strong>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结起来，类就是对对象所共有特征的描述，而对象则是真实存在的具体实例。在 Java 中，必须先设计类，然后才能创建并使用对象。</p>
<h2> 属性</h2>
<p>每个宠物都有自己的名字、毛色和年龄等一系列状态，而这些状态就叫做一个类的<strong>属性</strong>。而属性的类型既可以是基本类型（比如上述例子中的 <code>int</code>），也可以是引用类型（上述例子中的 <code>String</code>）。而在 Java 语言中，这些属性就叫做成员变量。成员变量的命名虽然没有强制规定，但是一般都是有一套大家通用的命名方法，即：</p>
<blockquote>
<p>若成员变量是一个单词组成，那么一般都是小写。</p>
<p>若成员变量是多个单词组成，那么则采用驼峰法。</p>
<p>关于更多的命名规定，推荐参考阿里巴巴出品的 《Java 开发手册》，下载地址：<a href="https://github.com/cunyu1943/ebooks" target="_blank" rel="noopener noreferrer">https://github.com/cunyu1943/ebooks</a></p>
</blockquote>
<p>成员变量的完整定义格式语如下，一般来说无需指定初始化值，它是存在默认值的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>数据类型</th>
<th>明细</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>基本类型</td>
<td><code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code>、<code>long</code></td>
<td>0</td>
</tr>
<tr>
<td>基本类型</td>
<td><code>float</code>、<code>double</code></td>
<td>0.0</td>
</tr>
<tr>
<td>基本类型</td>
<td><code>boolean</code></td>
<td><code>false</code></td>
</tr>
<tr>
<td>引用类型</td>
<td>类、接口、数组、<code>String</code></td>
<td><code>null</code></td>
</tr>
</tbody>
</table>
<p>要访问属性，通常需要先创建一个对象，然后通过<strong>对象名.成员变量</strong>的方式来进行访问。</p>
<h2> 方法</h2>
<h3> 方法的定义</h3>
<p>而除开属性之后，每个对象还能够有许多其他的功能，就像宠物都能吃东西、会叫……，那么这些他们能够做的事情，在类里边就可以用 <strong>方法</strong> 来进行表示。所谓方法就是程序中最小的执行单元，一般用于封装重复且具有独立功能的代码，从而提高代码的复用性和可维护性。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法的定义格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，修饰符主要有以下 4 种不同的访问权限：</p>
<ol>
<li><code>default</code>：默认什么都不写的情况，表示在同一个包内可见，主要用于修饰类、接口、变量、方法。</li>
<li><code>private</code>：表示在同一类中可见，常用于修饰变量和方法，但要注意，它不能用来修饰类（外部类）。</li>
<li><code>protected</code>：表示对同一个包内的类和所有子类可见，常用于修饰变量、方法，同样的，它也不能修饰类（外部类）。</li>
<li><code>public</code>：表示对所有类可见，常用于修饰类、接口、变量、方法。</li>
</ol>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>当前类</th>
<th>同一包内</th>
<th>子类（同一包）</th>
<th>子类（不同包）</th>
<th>其他包</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>private</code></td>
<td>✅</td>
<td>❎</td>
<td>❎</td>
<td>❎</td>
<td>❎</td>
</tr>
<tr>
<td><code>default</code></td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❎</td>
<td>❎</td>
</tr>
<tr>
<td><code>protected</code></td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❎</td>
</tr>
<tr>
<td><code>public</code></td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
</tbody>
</table>
<p>同样的，和属性一样，如果要调用一个方法，那么也需要先创建一个 Java 对象，然后通过**对象名.方法名(……)**的形式调用。</p>
<h3> 方法的分类</h3>
<p>而对于方法，也有需要注意的几点：</p>
<ol>
<li>方法是可以有返回值的，如果要返回对应值，则其返回值的类型要与返回值相对于，对于不需要返回值的方法，则将其返回类型设置为 <code>void</code>；</li>
<li>方法是可以有参数的，我们上述例子的方法中都是不带参数的，但如果我们有需要，就可以加上自己需要的参数，但此时注意要带上参数的类型；</li>
</ol>
<p>总结起来，可以分为如下四种方法：</p>
<ol>
<li><strong>无参无返回值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>无参有返回值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><strong>有参无返回值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li><strong>有参有返回值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而对于方法命名的方式，也是有一定讲究的。因为一般而言方法都是一个类的动作行为，所以 <strong>一般都是以动词开头，而如果有多个单词组合，则除开第一个单词全部小写之外，后面每个单词的第一个字母都要使用大写</strong>。</p>
<p>注意到这里有个关键字 <code>return</code>，它主要用于设置方法的返回。</p>
<p>如果一个方法没有返回值，那么此时可以省略不写，一旦书写，那么就代表着该方法结束。比如，以下这个方法的两种书写方式最终效果都是一样的。</p>
<ul>
<li>带 <code>return</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>不带 <code>return</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而如果一个方法有返回值，那么此时 <code>return</code> 就必须写，它表示结束方法并返回结果。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 重写与重载</h3>
<p>此外，既然提到了方法，那肯定少不了重写和重载了，下面就来看看重写和重载之间的区别。</p>
<ol>
<li><strong>重写</strong></li>
</ol>
<p>所谓重写，其实就是子类对父类中允许访问的方法的实现过程进行加工重新编写，是面向对象编程中多态性的体现，通常发生在父类和子类之间。</p>
<p>重写时，方法的参数和返回值都不能改变。通过重写，子类可以根据自己的需要，从而去重新定义区别于父类的行为。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>重载</strong></li>
</ol>
<p>而重载则是让类以统一的方式来处理不同类型数据的一种方式。一个类中存在多个同名方法，但他们具有不同的参数个数或者类型。</p>
<p>简单来说，就是在 Java 的一个类中，我们可以创建多个相同名字的方法，但是这些方法之间的参数和返回值有所不同。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 参数传递机制</h3>
<p>了解参数传递前，先来了解下形参和实参的相关概念。</p>
<p><strong>实参</strong>，指在调用时所传递给方法的参数，可以是常量、变量、表达式、函数等。无论实参是何种类型的值，在进行方法调用时，都必须有确定的值，从而将这些值传递给形参。</p>
<p><strong>形参</strong>，在方法定义时，<code>()</code> 中所声明的参数，目的是用来接收调用方法时传入的参数。不是实际存在的变量，所以又叫做虚拟变量。</p>
<p>Java 中，方法的参数传递都是通过<strong>值传递</strong>的机制来实现的。所谓值传递，就是在传输实参给方法的形参时，并非传输的是实参变量本身，而是通过传输实参变量中所存储的值。</p>
<p>但是要注意区分的是，Java 中的<strong>基本数据类型的参数传输的是存储的数据值</strong>，而<strong>引用类型的参数传输的是存储的地址值</strong>。</p>
<h2> 构造方法</h2>
<p>上面我们说了实例（也就是对象）和属性，那么当我们创建一个实例的时候，通常我们想要把它的属性也给它设置好。为了实现这一功能，这时候我们可以添加方法，从而达到这一目的，以上述设置宠物的年龄为例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现通过上述调用方法的方式是可以完成这一目的的，但假设我们需要设置的属性很多，此时要全部设置属性值时就需要调用许多次 <code>setter</code> 方法，一旦遗漏一个，则实例内部状态就紊乱了。那我们就想了，有没有一种简单点的方法，能够让我们在创建实例对象的同时就把内部属性初始化了呢？</p>
<p>答案是：Yes！🎉🎉🎉</p>
<p>这时候我们就可以用到一类特殊的方法 - <strong>构造方法</strong>，所谓构造方法，就是定义在类中可以用来初始化一个类的对象，并返回对象的地址，以下就来看看这个构造方法的特殊之处。构造方法的格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实在上面我们创建实例的时候就已经调用了构造方法了，只不过它是没有带任何参数的构造方法。以上述动物类 <code>Pet</code> 为实例，我们来看看如何编写它的构造方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上我们只是给出了无参的构造方法和带了所有属性的构造方法，除了上面的两个构造方法之外，我们还可以根据需要创建带有部分属性的构造方法。</p>
<p>其中，无参构造方法（默认存在）在初始化对象时，成员变量的数据均采用的默认值，而有参构造方法在初始化对象时，同时可以接收参数来给对象赋值。</p>
<p>经过对比可以发现，相比于普通的方法，构造方法有着明显的特点：</p>
<ol>
<li><strong>没有返回值</strong>：是的，无论是带参还是不带参的构造函数，它们都是没有返回值的，而它也是 <strong>每个类默认的构造方法</strong>。</li>
<li><strong>方法名同类名一样</strong>：必须确保构造方法的名字和类名一致，否则它就不是构造方法了。</li>
</ol>
<p>有了构造方法之后，我们创建实例时就可以直接给它初始化了，而不用再去麻烦地调用各个 <code>setter</code> 方法来初始化实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🎈 Tips：对于实例的属性值，在未经构造方法初始化时，各数据类型都有默认值，整型默认值为 <code>0</code>，浮点型默认值为 <code>0.0</code>，布尔类型默认值为 <code>false</code>，引用类型默认值为 <code>null</code>。</p>
<h2> 引用</h2>
<p>既然知道了什么是面向对象以及面向对象中的一些关键知识点如对象、属性、方法的概念，那我们就趁热来看看啥是引用。</p>
<p>所谓引用，其实在之前学习的时候就已经涉及到了。你是否还记得 <code>String</code> 这个特殊的数据类型，其实在我们创建一个 <code>String</code> 对象时，也就创建了一个引用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 <code>str</code> 既是一个变量，也是一个引用，指向一个值为 <code>"村雨遥"</code> 的 <code>String</code> 对象，后续如果我们要访问这个 <code>String</code> 对象，就需要使用 <code>str</code> 这个引用来代表它。</p>
<p></p>
<p>以上我们说的是一个引用指向一个对象，但是我们也可以用多个引用指向同一个对象。就好比你家买了一辆车，不仅你可以开，你老婆也可以开，你爸妈也可以开。而这时候的车就好比一个“对象”，而使用它的人就是多个“引用”。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> JavaBean</h2>
<p><code>JavaBean</code> 也可以称为实体类，其对象可以用在程序中封装数据。对于一个标准的 <code>JavaBean</code>，定义时需要满足以下要求：</p>
<ul>
<li>成员变量均使用 <code>private</code> 修饰。</li>
<li>提供成员变量所对应的 <code>getXxx()/setXxx()</code> 方法。</li>
<li>必须提供一个标准的无参构造器，而有参构造器则是可写可不写。</li>
</ul>
<h2> 总结</h2>
<p>今天的内容就到此结束了，主要对面向对象中的类、对象、属性、方法、构造方法以及引用做了介绍，关于更多面向对象的知识，我们下一篇文章再见！</p>
]]></content:encoded>
    </item>
    <item>
      <title>包和 jar 文件的创建</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220711-oop-3.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220711-oop-3.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">包和 jar 文件的创建</source>
      <description>作者：村雨遥 博客：JavaPark 原文：https://mp.weixin.qq.com/s/l4O4bhDMgHamQ5DVPcqUYA 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Mon, 11 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/l4O4bhDMgHamQ5DVPcqUYA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/l4O4bhDMgHamQ5DVPcqUYA</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>在之前的文章中，讲到了面向的 3 大特性（<strong>封装、继承、多态</strong>）和面向对象设计的 5 大原则（SRP、OCP、LSP、DIP、ISP）。此外，我们还讲了如何创建一个类，并且在创建类后如何构造一个对象。然后还介绍了类中的属性和方法，并对构造方法和引用也做了简单的讲解。</p>
<p>有了上面的基础之后，今天我们来继续学习面向对象的相关知识，主要内容预告如下：</p>
<ul>
<li><strong>包</strong></li>
<li><strong>注释</strong></li>
<li><strong>jar 文件的创建</strong></li>
</ul>
<h2> 包</h2>
<p>假设现在有这么一种情况，诸葛亮、周瑜、曹操共同开发一款程序。其中，周瑜和曹操均在自己代码模块中写了一个 <code>PublicUtil</code> 类，现在诸葛亮要调用周瑜和曹操模块中代码，需要同时用到他们中的 <code>PublicUtil</code> 类，这时候就犯难了，诸葛亮在他的代码中使用 <code>PublicUtil</code> 类时，该怎么区分是调用周瑜的，还是调用的曹操的呢？</p>
<p>针对这个问题，开发 Java 的前辈们当然也想到了。于是，他们在 Java 中定义了一种名字空间，也就是我们今天要讲的包：<code>package</code>。通过使用包机制，就十分容易区别类名的命名空间了。</p>
<p>一般包名的规则为：公司域名反写 + 包的作用，而且全部都要用英文小写。</p>
<p>假设曹操的 <code>PublicUtil</code> 类代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>周瑜的 <code>PublicUtil</code> 类代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，如果诸葛亮要同时使用他们俩代码中的 <code>PublicUtil</code> 类，此时就可以通过引入他们俩的包，然后通过使用 <code>包名.类名</code> 的引用方式来进行区分即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码中的 <code>import</code> 你可能也在其他代码中见到过，但你不知道啥作用。其实它就是为了包的使用而生，如果我要使用另一个人的包，那该怎么做呢？其实很简单，只需要在程序中使用关键字 <code>import</code> 即可完成包的导入。</p>
<p>通过使用包，可以达到以下的作用：</p>
<ol>
<li>将功能类似或或相关的类以及接口组织放在同一个包中，方便类的查找与使用。</li>
<li>包也像文件夹一样，采用了树形目录的存储方式。同一个包中的类名不同，不同包中的类名可以相同。当同时调用两个不同包中的同一类名的类时，通过加上完整的包名就可以加以区分，从而避免类名冲突。</li>
<li>同时包也限定了访问权限，只有拥有包访问权限的类才能间接去访问包中的类。</li>
</ol>
<h2> 注释</h2>
<p>所谓注释，就是写在程序里边对代码进行结束说明的文字，既方便自己也方便他人查看，更快理解程序含义。而且注释是不影响程序的执行的，在我们对 Java 源代码进行编译后，字节码文件中不含源代码中的注释内容。</p>
<p>在 Java 中，通常支持三种注释方式，它们分别是：</p>
<ul>
<li><code>//</code>：单行注释</li>
<li><code>/* */</code>：多行注释</li>
<li><code>/** */</code>：文档注释</li>
</ul>
<h3> 单行注释</h3>
<p>单行注释是以双斜杠 <code>//</code> 来标识，表示只注释当前行内容，一般用在需要注释的内容较少的地方，以下就是一个单行注释的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 多行注释</h3>
<p>通常我们把要注释的内容放在 <code>/*</code> 和 <code>*/</code> 之间，表示在两者之间的内容都是我们的注释内容，以下是一个多行注释的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 文档注释</h3>
<p>文档注释和多行注释很像，它是将我们所需要注释的内容包含在 <code>/**</code> 和 <code>*/</code> 之间。而文档注释和其他两种注释最大的区别就在于：我们可以利用 <code>javadoc</code> 工具来提取文档注释，然后生成一个 HTML 文档，类似于 Java 官网所提供的 API 文档，以下是一个文档注释的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们通过终端，使用 <code>javadoc</code> 命令就可以为上述文件生成一个 HTML 文档。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而文档注释相比于其他两种注释，也有更多值得注意的地方，下面就分别来看看需要留意的地方。</p>
<ol>
<li><strong>常用文档注释分类</strong></li>
</ol>
<ul>
<li><strong>类注释</strong></li>
</ul>
<p>顾名思义，所谓类注释，就是针对整个类的说明，它必须放在 <code>import</code> 之后，但又必须放在类定义之前。以下是一个类注释的实例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意的是，在 <code>/**</code> 和 <code>*/</code> 之间的其他行注释，<code>*</code> 是可有可无的，之所以加上，更大情况出于美观的考虑，上面的实例写成如下样式也是合法的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>方法注释</strong></li>
</ul>
<p>同样的，方法注释也就是针对类中方法的注释，它必须放在所描述的方法之前。而一般情况下，除开说明该方法的功能之外，我们经常使用如下标记来对方法进行注释。</p>
<table>
<thead>
<tr>
<th>标记</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@param variable description</code></td>
<td>用于介绍当前方法的参数，可以占据多行</td>
</tr>
<tr>
<td><code>@return description</code></td>
<td>用于描述当前方法的返回值，可以跨多行</td>
</tr>
<tr>
<td><code>@throws class description</code></td>
<td>用于表示该方法有可能抛出的异常</td>
</tr>
</tbody>
</table>
<p>以下就是一个方法注释的实例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>字段注释</strong></li>
</ul>
<p>字段注释顾名思义，也就是对于类中字段的说明，用于描述字段的含义，以下是一个字段注释的例子。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，如果你不喜欢把一个字段的注释分成多行的话，也可以写成以下格式。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种方式都是可以的，也没有优劣之分，可以根据自己的风格来选择。但是在 IntelliJ IDEA 等 IDE 中，如果对代码进行格式化，IDEA 会将第二种方式格式化成第一种方式，这一点需要注意。</p>
<ol start="2">
<li><strong>如何提取文档注释</strong></li>
</ol>
<p>假设有以下一段代码，我们需要生成关于代码的文档说明。那么就可以使用 JDK 中所提供的 <code>javadoc</code> 命令来提取代码的文档注释。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后利用以下命令就可以生成我们的文档注释。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上命令的意思就是，对名为 <code>HelloWorld.java</code> 的提取其中的文档注释，并将输出的文件放在 <code>helloworld</code> 文件夹下，并且在文档中包含程序作者和版本，编码方式为 <code>UTF-8</code>。</p>
<p></p>
<p>生成的文件列表详情见下图，打开其中的 <code>index.html</code> 就可以查看提取的文档注释。</p>
<p></p>
<p></p>
<h2> jar 文件的创建</h2>
<p>其实关于这个，我在之前的文章也写过。不过我是利用 IntelliJ IDEA 来对进行代码的打包，如果感兴趣，可以点击下方传送门去看看。</p>
<blockquote>
<p><a href="https://cunyu1943.github.io/JavaPark/dev-tools/idea/java-quick-start-with-idea" title="如何利用 IntelliJ IDEA 创建 Java 入门应用" target="_blank" rel="noopener noreferrer">如何利用 IntelliJ IDEA 创建 Java 入门应用</a></p>
</blockquote>
<p>不过那是借助工具来生成的，今天我们来看看如何利用 JDK 所提供的命令行工具，来创建一个能打印出 <code>Hello World!</code> 的 <code>jar</code> 包。</p>
<p>同样的，我们仍然是需要先准备一个能输出 <code>Hello World!</code> 的 Java 源代码，命名为 <code>HelloWorld.java</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，利用 <code>javac</code> 命令对该文件进行编译，然后会生成 <code>HelloWorld.class</code> 字节码文件。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，利用 <code>jar</code> 命令来对生成的字节码文件进行打包。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 <code>c</code> 表示创建一个新 <code>jar</code> 包，<code>v</code> 表示创建过程中打印创建过程中的信息，<code>f</code> 则表示对新生成的 <code>jar</code> 命名。</p>
<p>最后，利用以下命令来运行 <code>jar</code> 包。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不过并不会顺利出现我们想要的结果，此时会报错 <code>hello.jar</code> 中没有主清单属性。这是因为我们还没有在 <code>MENIFEST.MF</code> 文件中添加 <code>Main-Class</code> 属性。
</p>
<p>用压缩软件打开刚创建的 <code>hello.jar</code>，里边除了 <code>HelloWorld.class</code> 文件之外，还会多一个 <code>META-INF</code> 文件夹，里边还有一个 <code>MENIFEST.MF</code> 文件，此时我们只需要用编辑器打开该文件，然后在文件中加入以下代码。（<strong>记得添加之后要保证整个文件最后保留一行空行</strong>）</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<p>添加完成之后，再次运行 <code>java -jar hello.jar</code> ，就可以成功在控制台打印 <code>Hello World!</code> 了。</p>
<h2> 总结</h2>
<p>以上就是今天博客的所有内容了，如果您觉得本文不错，那就来个一键三连吧，您的关注就是我坚持的不懈动力！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>成员变量、实例变量、静态变量、局部变量</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220712-all-kinds-of-variable.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220712-all-kinds-of-variable.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">成员变量、实例变量、静态变量、局部变量</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 学习 Java 的过程中，一开始很容易被这些各种变量绕晕，这篇博客主要介绍了这几种变量之间的关系和区别。 实例 package com.cunyu.demo public class Demo { private String name; //成员变量、实例变量 private int age; //成员变量、实例变量 private int ID; //成员变量、实例变量 public static final String school = &amp;quot;卡塞尔学院&amp;quot;; //成员变量、静态变量(类变量) public static String level = &amp;quot;SSS&amp;quot;; //成员变量、静态变量(类变量) public int getAge() { return age; } public int getId() { return ID; } public String getName() { return name; } public void setAge(int age) { this.age = age; } public void setId(int ID) { this.ID = ID; } public void setName(String name) { this.name = name; } public void study(){ String subject1 = &amp;quot;屠龙&amp;quot;; //局部变量 String subject2 = &amp;quot;炼金术&amp;quot;; //局部变量 System.out.println(&amp;quot;学习科目： &amp;quot; + subject1 + &amp;quot;、&amp;quot; + subject2); } public static void main(String[] args) { Demo demo = new Demo(); demo.setAge(23); demo.setId(14000001); demo.setName(&amp;quot;楚子航&amp;quot;); System.out.println(&amp;quot;ID: &amp;quot; + demo.getId() + &amp;quot;Age: &amp;quot; + demo.getAge() + &amp;quot;Name: &amp;quot; + demo.getName()); System.out.print(&amp;quot;主修科目： &amp;quot;); demo.study(); System.out.println(&amp;quot;学院：&amp;quot; + Demo.school); System.out.println(&amp;quot;等级：&amp;quot; + Demo.level); } }</description>
      <category>Java 基础教程</category>
      <pubDate>Tue, 12 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>学习 Java 的过程中，一开始很容易被这些各种变量绕晕，这篇博客主要介绍了这几种变量之间的关系和区别。</p>
<h2> 实例</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 各变量联系与区别</h2>
<h3> 成员变量</h3>
<p>作用范围是整个类，相当于 C 语言中的全局变量，定义在方法体和语句块之外，一般定义在类的声明之下；成员变量包括实例变量和静态变量(类变量)。</p>
<h3> 实例变量</h3>
<p>独立于与方法之外的变量，无 <code>static</code> 修饰，声明在一个类中，但在方法、构造方法和语句块之外，数值型变量默认值为 0，布尔型默认值为 <code>false</code>，引用类型默认值为 <code>null</code>。</p>
<h3> 静态变量(类变量)</h3>
<p>独立于方法之外的变量，用 <code>static</code> 修饰，默认值与实例变量相似，一个类中只有一份，属于对象共有，存储在静态存储区，经常被声明为常量，调用一般是类名.静态变量名，也可以用对象名.静态变量名调用。</p>
<h3> 局部变量</h3>
<p>类的方法中的变量，访问修饰符不能用于局部变量，声明在方法、构造方法或语句块中，在栈上分配，无默认值，必须经初始化。</p>
<h3> 成员变量 VS 局部变量</h3>
<table>
<thead>
<tr>
<th>区别</th>
<th>成员变量</th>
<th>局部变量</th>
</tr>
</thead>
<tbody>
<tr>
<td>类中位置不同</td>
<td>类中、方法外</td>
<td>方法中</td>
</tr>
<tr>
<td>初始化值不同</td>
<td>有初始值，无需初始化</td>
<td>无默认值，使用前需完成赋值</td>
</tr>
<tr>
<td>内存位置不同</td>
<td>堆内存</td>
<td>栈内存</td>
</tr>
<tr>
<td>生命周期不同</td>
<td>随对象创建而存在，随对象的消失而消失</td>
<td>随方法的调用而存在，随方法的运行结束而消失</td>
</tr>
<tr>
<td>作用域</td>
<td></td>
<td>所属大括号</td>
</tr>
</tbody>
</table>
<h2> 总结</h2>
<p>以上就是关于 Java 编程中，静态变量、类变量、实例变量、局部变量以及成员变量之间的相关区别了。读完本文，你是否对这几个变量之间能进行一定程度上的区分了呢？</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>String 详解</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220713-string.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220713-string.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">String 详解</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 概述 String 类代表字符串，定义的变量可以用来指向字符串对象，然后操作该字符串，同时还提供了许多用于操作字符串的功能。Java 中，所有的字符串都用双引号 &amp;quot;&amp;quot; 括起来。</description>
      <category>Java 基础教程</category>
      <pubDate>Wed, 13 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 概述</h2>
<p><code>String</code> 类代表字符串，定义的变量可以用来指向字符串对象，然后操作该字符串，同时还提供了许多用于操作字符串的功能。Java 中，所有的字符串都用双引号 <code>""</code> 括起来。</p>
<p>此外，<code>String</code> 是不可变的字符串类型，它的对象一旦创建，就不能够再被更改。</p>
<p>但在实际使用过程中，给我们的实际观感可能会觉得 <code>String</code> 是可变的，但实际上 <code>String</code> 每次的修改都是产生并指向了新的字符串对象，原来的字符串对象实际上是没有改变的。</p>
<h2> 创建对象的两种方式</h2>
<ol>
<li>直接赋值</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>通过构造方法创建</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>构造方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public String()</code></td>
<td>创建一个不含任何内容的空白字符串对象</td>
</tr>
<tr>
<td><code>public String(String original)</code></td>
<td>根据传入的字符串内容来创建字符串对象</td>
</tr>
<tr>
<td><code>public String(char[] chs)</code></td>
<td>根据字符串数组的内容来创建字符串对象</td>
</tr>
<tr>
<td><code>public String(bytes[] chs)</code></td>
<td>根据字节数组的内容来创建字符串对象</td>
</tr>
</tbody>
</table>
<p>两者的区别在于，利用 <code>""</code> 方式所给出的字符串对象，存储在字符串常量池中，而且相同内容只会在其中存储一份。但是通过构造方法 <code>new</code> 对象，每次 <code>new</code> 都会产生一个新对象，它们是存放在堆内存中的。</p>
<p>这里要注意，任何类型的数据与字符串相加时，得到的会是一个字符串。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 字符串常用 API</h2>
<h3> public boolean equals(Object anotherObject)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>将此字符串与指定对象比较，只关心字符串内容是否一致。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> public boolean equalsIgnoreCase(String anotherString)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>将此字符串与指定对象进行比较，忽略大小写比较字符串内容是否一致。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> public int length()</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>求字符串长度。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> public char charAt(int index)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>获取某个索引位置处的字符。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> public char[] toCharArray()</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>字符串转换为字符串数组。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> public String substring(int beginIndex, int endIndex)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>根据开始和结束索引进行截取得到新的子串（左闭右开）。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> public String replace(CharSequence target, CharSequence replacement)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>使用新值将字符串中的旧值替换得到新字符串。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> public String[] split(String regex)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>通过正则规则切割字符串，得到字符串数组。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> StringBuilder</h2>
<p><code>StringBuilder</code> 可以看做一个容器，创建后其中的内容可变，主要是为了提高字符串 <code>String</code> 的操作效率。</p>
<h3> 构造方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public StringBuilder()</code></td>
<td>创建一个不含任何内容的空白可变字符串对象</td>
</tr>
<tr>
<td><code>public StringBuilder(String str)</code></td>
<td>根据字符串内容，创建可变字符串对象</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 常用方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public int length()</code></td>
<td>返回字符串长度</td>
</tr>
<tr>
<td><code>public String toString()</code></td>
<td>将 <code>StringBuilder</code> 转换为 <code>String</code></td>
</tr>
<tr>
<td><code>public StringBuilder append(Object obj)</code></td>
<td>添加数据并返回对象本身</td>
</tr>
<tr>
<td><code>public StringBuilder reverse()</code></td>
<td>反转容器中的内容</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> StringJoiner</h2>
<p>类似于 <code>StringBuilder</code>，都可以把它们看做是一个容器，而且它们里面的内容还是可变的，而它的出现也是为了提高操作字符串的效率。</p>
<h3> 构造方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public StringJoiner(间隔符)</code></td>
<td>创建一个 <code>StringJoiner</code> 对象并指定拼接时的间隔符</td>
</tr>
<tr>
<td><code>public StringJoiner(间隔符, 开始符号, 结束符号)</code></td>
<td>创建一个 <code>StringJoiner</code> 对象并指定拼接时的间隔符、开始符号、结束符号</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 常用方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public StringJoiner add(Object obj)</code></td>
<td>添加数据后返回对象本身</td>
</tr>
<tr>
<td><code>public int length()</code></td>
<td>返回字符串长度</td>
</tr>
<tr>
<td><code>public String toString()</code></td>
<td>将 <code>StringJoiner</code> 转换为 <code>String</code></td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>以上就是关于 <code>Java</code> 中字符串的相关知识点了，主要介绍了 <code>String</code> 类创建对象的两种方式以及常用 <code>API</code>。此外，为了提高字符串的操作效率，还了解 <code>StringBuilder</code> 和 <code>StringJoiner</code> 的构造方法以及常用方法，方便后续编程中使用。</p>
]]></content:encoded>
    </item>
    <item>
      <title>ArrayList 详解</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220714-arraylist.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220714-arraylist.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">ArrayList 详解</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 概述 ArrayList 代表的是集合类，集合是一种容器，类似于数组。不同的是数组一旦定义后，其类型和长度就固定了，但集合的大小却是动态变化的，而且其中的元素类型也是动态的。 因此，数组更适合数据个数和类型确定的场景，而集合则更适合数据个数不确定，且需要做增删元素的场景。</description>
      <category>Java 基础教程</category>
      <pubDate>Thu, 14 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 概述</h2>
<p><code>ArrayList</code> 代表的是集合类，集合是一种容器，类似于数组。不同的是数组一旦定义后，其类型和长度就固定了，但集合的大小却是动态变化的，而且其中的元素类型也是动态的。</p>
<p>因此，数组更适合数据个数和类型确定的场景，而集合则更适合数据个数不确定，且需要做增删元素的场景。</p>
<h2> 泛型支持</h2>
<p><code>ArrayList&lt;E&gt;</code> 实际上就是一个泛型类，能够在编译阶段约束集合对象只能操作某种数据类型。而且这里的数据类型只能是引用类型，而不能是基本数据类型。</p>
<table>
<thead>
<tr>
<th>正确</th>
<th>错误</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;;</code></td>
<td><code>ArrayList&lt;int&gt; list = new ArrayList&lt;&gt;;</code></td>
</tr>
</tbody>
</table>
<h2> 构造方法</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public ArrayList()</code></td>
<td>创建一个初始容量为 10 的空列表</td>
</tr>
<tr>
<td><code>public ArrayList(int initialCapacity)</code></td>
<td>创建一个指定容量的空列表</td>
</tr>
<tr>
<td><code>public ArrayList(Collection&lt;? extends E&gt; c)</code></td>
<td>创建一个包含指定集合中元素的列表</td>
</tr>
</tbody>
</table>
<h2> 常用方法</h2>
<h3> 元素个数</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public int size()</code></td>
<td>返回集合中的元素个数</td>
</tr>
</tbody>
</table>
<h3> 元素获取</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public E get(int index)</code></td>
<td>获取索引位置为 <code>index</code> 的元素</td>
</tr>
</tbody>
</table>
<h3> 元素新增</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void add(int index, E element)</code></td>
<td>在指定索引位置 <code>index</code> 新增元素 <code>element</code></td>
</tr>
<tr>
<td><code>boolean add(E element)</code></td>
<td>在列表末尾新增一个元素 <code>element</code></td>
</tr>
</tbody>
</table>
<h3> 元素删除</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public E remove(int index)</code></td>
<td>删除指定索引处的元素并返回被删除的元素</td>
</tr>
<tr>
<td><code>public boolean remove(Object obj)</code></td>
<td>删除指定元素并返回是否删除成功</td>
</tr>
</tbody>
</table>
<h3> 元素修改</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public E set(int index, E element)</code></td>
<td>修改指定索引处的元素，返回被修改的元素</td>
</tr>
</tbody>
</table>
<h3> 元素遍历</h3>
<ol>
<li><strong>for 循环</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>增强 for 循环</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><strong>迭代器</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>本文主要讲解了 <code>ArrayList</code> 的定义、泛型支持、构造方法以及常用方法等。主要针对的是日常中的使用，更多关于 <code>ArrayList</code>&nbsp; 底层原理的一些知识，抽个时间再聊吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>输入输出流</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220715-in-out-stream.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220715-in-out-stream.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">输入输出流</source>
      <description>作者：村雨遥 博客：JavaPark 原文：https://mp.weixin.qq.com/s/I8UJKtTtdqcbbxcTx_dVzg 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Fri, 15 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/I8UJKtTtdqcbbxcTx_dVzg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/I8UJKtTtdqcbbxcTx_dVzg</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>我们日常开发过程中，有许多方面都涉及到 IO 流，比如上传下载、传输、设计模式等等。而所有的一切都是基于 IO 流来进行，所以今天就来看看 Java 中 IO 流的相关知识点。</p>
<p>本文主要内容安排如下：</p>
<ul>
<li><strong>文件对象</strong></li>
<li><strong>流简介</strong></li>
<li><strong>字节流</strong></li>
<li><strong>字符流</strong></li>
</ul>
<h2> 文件对象</h2>
<h3> 文件路径</h3>
<p>Java 标准库 <code>java.io</code> 提供了 <code>File</code> 对象用于操作文件和目录，也就是说我们的文件和目录都是可以通过 <code>File</code> 封装成对象的。构造 <code>File</code> 对象时，需要传入我们的文件或目录的路径名，常用的构造方法如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>File(String pathName)</code></td>
<td>通过将给定路径名字符串转换为抽象路径名来创建新实例</td>
</tr>
<tr>
<td><code>File(String parent, String child)</code></td>
<td>从父路径名字符串和子路径名字符串创建新实例</td>
</tr>
<tr>
<td><code>File(File parent, String child)</code></td>
<td>从父抽象路径名和子路径名字符串创建新实例</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>对于我们传入文件的路径，既可以使用绝对路径，也可以使用相对路径。</p>
<ul>
<li><strong>相对路径</strong>：以当前文件所在位置为参考，然后建立出另一个文件所在位置路径。我们最常用的有 <code>.</code> 和 <code>..</code>，前者表示当前目录，而后者则表示当前目录的上一级目录。假设我们当前目录为 <code>/home/cunyu1943/data</code>，则 <code>.</code> 仍然表示该目录，而 <code>..</code> 则表示 <code>/home/cunyu1943</code> 目录。</li>
<li><strong>绝对路径</strong>：又可以分为 <strong>本地绝对路径</strong> 和 <strong>网络绝对路径</strong>。本地绝对路径以根目录为参考，指文件在硬盘中真实存在的路径，比如在 Windows 系统，我们的一个绝对路径是 <code>D:\\Softwares\\Typora\\Typora.exe</code>，而在类 <code>Unix</code> 系统中则为 <code>/home/cunyu1943/IO.md</code>，此时需要注意平台间的分隔符是不一样的，但为了同一，推荐同一写成 <code>/</code>，这样程序在不同系统中迁移时也不会出现问题。而网络绝对位置则指带有网址的路径，比如 <code>https://cunyu1943.site/index.html</code>。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 文件和目录操作</h3>
<h4> 创建与删除</h4>
<p>既然拿到了 <code>File</code> 对象，接下来就是通过操作该对象来进行创建和删除文件或目录了，以下是一些 <code>File</code> 类常用的创建和删除方法。</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>boolean</code></td>
<td><code>createNewFile()</code></td>
<td>当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件；存在时，则创建失败</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>mkdir()</code></td>
<td>创建由此抽象路径名命名的目录</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>mkdirs()</code></td>
<td>创建由此抽象路径名命名的多级目录，包括任何必需但不存在的父目录</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>delete()</code></td>
<td>删除由此抽象路径名命名的文件或目录，删除目录的前提是该目录必须为空</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p><strong>注意</strong>：</p>
<ul>
<li>
<p>创建文件时，调用的是 <code>createNewFile()</code> 方法，而创建目录时调用的是 <code>mkdir()</code> 或者 <code>mkdirs()</code> 方法。我们在调用时要注意区分，否则就算你的路径是文件，当调用了创建目录的方法后它也会创建成目录而非文件。对应的，就算你给定的路径是目录，当调用创建文件的方法后它也会创建成文件而非目录。</p>
</li>
<li>
<p>删除目录时，若目录中有内容（目录、文件），则 <strong>不能直接删除</strong>，而是应该先删除目录中的内容，然后才能删除目录；</p>
</li>
</ul>
<h4> 相关属性</h4>
<p>获取到 <code>File</code> 对象后，我们可以对其相关属性进行判断，常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>long</code></td>
<td><code>length()</code></td>
<td>该抽象路径名表示的文件的所占字节大小</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>canRead()</code></td>
<td>该抽象路径名表示的文件是否可读</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>canWrite()</code></td>
<td>该抽象路径名表示的文件是否可写</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>canExecute()</code></td>
<td>该抽象路径名表示的文件是否可执行</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h4> 判断和获取</h4>
<p>获取到 <code>File</code> 对象后，我们既可以用它来表示文件，也可以用来表示目录。而对于文件和目录的判断和获取功能，可以使用如下常用的方法：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>boolean</code></td>
<td><code>isFile()</code></td>
<td>测试此抽象路径名表示的文件是否为普通文件</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>isDirectory()</code></td>
<td>测试此抽象路径名表示的文件是否为目录</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>exists()</code></td>
<td>测试此抽象路径名表示的文件或目录是否存在</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>getPath()</code></td>
<td>将抽象路径转换为路径字符串</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>getAbsolutePath()</code></td>
<td>返回此抽象路径名的绝对路径名字符串</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>getName()</code></td>
<td>返回由此抽象路径名表示的文件或目录的名称</td>
</tr>
<tr>
<td><code>String[]</code></td>
<td><code>list()</code></td>
<td>返回字符串数组，表示该抽象路径名表示目录下的文件和目录</td>
</tr>
<tr>
<td><code>File[]</code></td>
<td><code>listFiles()</code></td>
<td>返回抽象路径名数组，表示该抽象路径名表示目录下的文件</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 练习</h3>
<p>假设我们要遍历 Windows 下 C 盘的 Windows 目录，并且列出其中文件名和文件大小，而不用列出目录名，我们可以利用如下代码来实现：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 流</h2>
<h3> 什么是流</h3>
<p>所谓流，就是一系列数据的组合。当我们需要进行数据交互的时候，比如在服务器和客户端之间进行数据交互时，我们此时就可以使用 Java 中的流来实现。Java 中，数据的输入和输出都是以流的形式来进行的。根据数据流方向的不同，我们可以将其分为：<strong>输入流</strong>、<strong>输出流</strong>。而根据处理的数据单位不同，可分为：<strong>字节流</strong>、<strong>字符流</strong>。两者的关系可以描述为下表：</p>
<table>
<thead>
<tr>
<th></th>
<th>字节流</th>
<th>字符流</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>输入流</strong></td>
<td><code>InputStream</code></td>
<td><code>Reader</code></td>
</tr>
<tr>
<td><strong>输出流</strong></td>
<td><code>OutputStream</code></td>
<td><code>Writer</code></td>
</tr>
</tbody>
</table>
<p>而对于字节流和字符流的选用原则，我们建议遵循如下规则：<strong>如果数据能够通过 Windows 自带笔记本软件打开并且能够读懂其中的内容，则选用字符流，否则选择字节流。而如果我们也不知道应该使用何种类型的流，则默认使用字节流</strong>。</p>
<p>下图描述了字节流和字符流的类层次图，注意：<strong>无论是字节流还是字符流，其子类名都是以其父类名作为子类名的后缀的</strong>。</p>
<p></p>
<h3> InputStream</h3>
<p></p>
<p>注意，<code>InputStream</code> 并非是并不是一个接口，而是所有字节输入流所有类的父类。下面我们主要以 <code>FileInputStream</code> 来举例，所谓 <code>FileInputStream</code>，就是从文件流中读取数据，然后将数据从文件中读取到内存，常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>int</code></td>
<td><code>available()</code></td>
<td>返回该输入流中可以读取的字节数的估计值</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>close()</code></td>
<td>关闭输入流并释放相关资源</td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>read(bytep[] b)</code></td>
<td>从输入流读取一些字节数，并将其存储到缓冲区 b</td>
</tr>
</tbody>
</table>
<p>下面是一个从文件中读取数据到内存中的实例，文件内容如下：</p>
<p></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> OutputStream</h3>
<p></p>
<p><code>OutputStream</code> 并非是并不是一个接口，而是所有输出字节流的所有类的父类。下面我们主要以 <code>FileOutputStream</code> 来举例，所谓 <code>FileOutputStream</code>，就是从内存中读取数据，然后将数据从内存存放到文件中，常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void</code></td>
<td><code>write(byte[] b)</code></td>
<td>将 <code>b.length</code> 个字节从指定字节数组写入此文件输出流</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>close()</code></td>
<td>关闭文件输出流并释放相关资源</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<p>需要注意的点：</p>
<ul>
<li>字节流写入数据时如何实现换行？</li>
</ul>
<p>写入换行的转义字符的字节数组即可，但是需要注意，不同系统下换行的转义字符不同，Windows 下为 <code>\r\n</code>，macOS 下为 <code>\r</code>，而 Linux 下为 <code>\m</code>。</p>
<ul>
<li>字节流写入数据时如何实现追加？</li>
</ul>
<p>调用 <code>public FileOutputStream(String name, boolean append)</code> 这个构造方法即可，当 <code>append</code> 为 <code>true</code> 时，表示追加，默认情况下是 <code>false</code>，表示不追加。</p>
<h3> 字符串中的编解码问题</h3>
<h4> 编码</h4>
<ul>
<li><code>byte[] getBytes()</code>：使用平台默认字符集将该字符串编码成一系列字节，然后将结果存储到新的字节数组中；</li>
<li><code>byte[] getBytes(String charsetName)</code>：使用指定字符集将该字符串编码为一系列字节，然后将结果存储到新的字节数组中；</li>
</ul>
<h4> 解码</h4>
<ul>
<li><code>String(byte[] bytes)</code>：使用平台默认字符集解码指定的字节数来构造新的字符串；</li>
<li><code>String(byte[] bytes, String charsetName)</code>：通过指定的字符集解码指定的字节数组来构造新的字符串；</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> Writer</h3>
<p></p>
<p>当我们要写入基于字符的数据到数据源中时，需要使用写入器 <code>Writer</code>. 以其中的 <code>FileWriter</code> 具体展开，其常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void</code></td>
<td><code>close()</code></td>
<td>先刷新再关闭流，不能再写数据</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>flush()</code></td>
<td>刷新流，可以继续写数据</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>newLine()</code></td>
<td>写入行分隔符</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>write()</code></td>
<td>写入字符或字符串</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> Reader</h3>
<p></p>
<p>当我们要从数据源读取基于字符的数据时，需要使用读取器 <code>Reader</code>. 我们以 <code>FileReader</code> 实践，其常用的方法有：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void</code></td>
<td><code>close()</code></td>
<td>关闭流并释放相关资源</td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>read()</code></td>
<td>读取一个字符</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>readLine()</code></td>
<td>读一行文字</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>ready()</code></td>
<td>获取该流是否准备好被读取</td>
</tr>
</tbody>
</table>
<p>我们以从文件中读取内容为例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>好了，关于 IO 流的知识点到此就结束了，赶紧学起来！如果你觉得本文对你有所帮助，那就点赞关注一波吧！</p>
<p>对于文中遗漏或者错误的知识点，欢迎大家评论留言，咱们评论区见！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>反射机制详解</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220716-reflection.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220716-reflection.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">反射机制详解</source>
      <description>作者：村雨遥 博客：JavaPark 原文：https://mp.weixin.qq.com/s/f0sJpAhgI6B7oirsJfv9jQ 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Sat, 16 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/f0sJpAhgI6B7oirsJfv9jQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/f0sJpAhgI6B7oirsJfv9jQ</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 反射概述</h2>
<h3> 什么是反射</h3>
<p>将类的各个组成部分封装为其他对象的过程就叫做 <strong>反射</strong>，其中 <strong>组成部分</strong> 指的是我们类的 <strong>成员变量（Field）</strong>、<strong>构造方法（Constructor）</strong>、<strong>成员方法（Method）</strong>。</p>
<h3> 使用反射的优缺点</h3>
<ul>
<li>
<p><strong>优点</strong></p>
<ol>
<li>在 <strong>程序运行过程中</strong> 可以操作类对象，增加了程序的灵活性；</li>
<li>解耦，从而提高程序的可扩展性，提高代码的复用率，方便外部调用；</li>
<li>对于任何一个类，当知道它的类名后，就能够知道这个类的所有属性和方法；而对于任何一个对象，都能够调用它的一个任意方法。</li>
</ol>
</li>
<li>
<p><strong>缺点</strong></p>
<ol>
<li><strong>性能问题</strong>：Java 反射中包含了一些动态类型，JVM 无法对这些动态代码进行优化，因此通过反射来操作的方式要比正常操作效率更低。</li>
<li><strong>安全问题</strong>：使用反射时要求程序必须在一个没有安全限制的环境中运行，如果程序有安全限制，就不能使用反射。</li>
<li><strong>程序健壮性</strong>：反射允许代码执行一些平常不被允许的操作，破坏了程序结构的抽象性，导致平台发生变化时抽象的逻辑结构无法被识别。</li>
</ol>
</li>
</ul>
<h2> Class 对象的获取及使用</h2>
<h3> 获取 Class 对象的方式</h3>
<ol>
<li><code>Class.forName("全类名")</code></li>
</ol>
<p>源代码阶段，它能将字节码文件加载进内存中，然后返回 <code>Class</code> 对象，多用于 <strong>配置文件</strong> 中，将类名定义在配置文件中，通过读取配置文件来加载类。</p>
<ol start="2">
<li><code>类名.class</code></li>
</ol>
<p>类对象阶段，通过类名的 <code>class</code> 属性来获取，多用于 <strong>参数的传递</strong>。</p>
<ol start="3">
<li><code>对象.getClass()</code></li>
</ol>
<p>运行时阶段，<code>getClass()</code> 定义在 <code>Object</code> 类中，表明所有类都能使用该方法，多用于 <strong>对象的获取字节码</strong> 的方式。</p>
<p>我们首先定义一个 <code>Person</code> 类，用于后续反射功能的测试；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义好 <code>Person</code> 类之后，我们尝试用 3 种不同的方式来获取 <code>Class</code> 对象，并比较它们是否相同。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>上述代码中，会发现最后输出的比较结果返回的是两个 <code>true</code>，说明通过上述三种方式获取的 <code>Class</code> 对象都是同一个，<strong>同一个字节码文件（<code>*.class</code>）在一次运行过程中只会被加载一次</strong>。</p>
<h3> Class 对象的使用</h3>
<h4> 获取成员变量</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Field[] getFields()</code></td>
<td>返回包含一个数组 <code>Field</code>对象反射由此表示的类或接口的所有可访问的公共字段类对象</td>
</tr>
<tr>
<td><code>Field getField(String name)</code></td>
<td>返回一个 <code>Field</code>对象，它反映此表示的类或接口的指定公共成员字段类对象</td>
</tr>
<tr>
<td><code>Field[] getDeclaredFields()</code></td>
<td>返回的数组 <code>Field</code>对象反映此表示的类或接口声明的所有字段类对象</td>
</tr>
<tr>
<td><code>Field getDeclaredField(String name)</code></td>
<td>返回一个 <code>Field</code>对象，它反映此表示的类或接口的指定已声明字段类对象</td>
</tr>
</tbody>
</table>
<ul>
<li><code>Field[] getFields()</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>回顾下我们的 <code>Person</code> 类，可以发现 <code>id</code>、<code>grade</code> 成员变量都是被 <code>public</code> 所修饰的，说明该方法是用于获取类中所有被 <code>public</code> 所修饰的成员变量（<strong>包括父类</strong>）。</p>
<ul>
<li><code>Field getField(String name)</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<p>从上面的结果分析可知，该方法只能用于获取类中指定名称的 <code>public</code> 所修饰的成员变量，对于 <code>protected</code>、<code>private</code> 所修饰的成员变量，该方法是无法获取的（<strong>包括父类</strong>）。而获取或设置成员变量值时，可以通过 <code>get/set</code> 方法来操作，具体操作方法如下。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>Field[] getDeclaredFields()</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>观察上面的结果可知，该方法可用于获取所有的成员变量，不用考虑修饰符的限制（<strong>不包括父类</strong>）。</p>
<ul>
<li><code>Field getDeclaredField(String name)</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>观察上面的结果可知，该方法可用于获取指定的成员变量，不用考虑成员变量修饰符的限制（<strong>不包括父类</strong>）。但是在利用 <code>set</code>、<code>get</code> 方法来获取和设置 <code>private</code>、<code>protected</code> 修饰的成员变量时，需要利用 <code>setAccessible()</code> 来忽略访问全新啊修饰符的安全检查，否则程序将会报错。</p>
<h4> 获取构造方法</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Constructor&lt;?&gt;[] getConstructors()</code></td>
<td>返回包含一个数组 <code>Constructor</code>对象反射由此表示的类的所有公共构造类对象</td>
</tr>
<tr>
<td><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</code></td>
<td>返回一个 <code>Constructor</code> 对象，该对象反映 <code>Constructor</code>对象表示的类的指定的公共类函数</td>
</tr>
<tr>
<td><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></td>
<td>返回一个反映 <code>Constructor</code> 对象表示的类声明的所有 <code>Constructor</code> 对象的数组类</td>
</tr>
<tr>
<td><code>Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)</code></td>
<td>返回一个 <code>Constructor</code> 对象，该对象反映 <code>Constructor</code> 对象表示的类或接口的指定类函数</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ul>
<li>
<p><code>Constructor&lt;?&gt;[] getConstructors()</code></p>
<p>类似于通过 <code>Class</code> 实例来获取成员变量，该方法用于获取所有 <code>public</code> 所修饰的构造方法（<strong>包括父类</strong>）；</p>
</li>
<li>
<p><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</code></p>
</li>
</ul>
<p>该方法用于获取某一指定参数类型后的 <code>public</code> 所修饰的构造方法（<strong>包括父类</strong>）；</p>
<ul>
<li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></li>
</ul>
<p>该方法用于获取所有 <code>public</code> 所修饰的构造方法（<strong>不包括父类</strong>）；</p>
<ul>
<li><code>Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)</code></li>
</ul>
<p>该方法用于获取某一指定参数类型后的 <code>public</code> 所修饰的构造方法（<strong>不包括父类</strong>）；</p>
<p>而获取到构造方法之后，我们就可以利用 <code>newInstance()</code> 方法来创建类的实例。特殊的，如果我们的构造方法是无参的，此时则可以直接利用 <code>Class.newInstance()</code> 来构造实例。</p>
<h4> 获取成员方法</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Method[] getMethods()</code></td>
<td>返回包含一个数组 方法对象反射由此表示的类或接口的所有公共方法 类对象，包括那些由类或接口和那些从超类和超接口继承的声明</td>
</tr>
<tr>
<td><code>Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</code></td>
<td>返回一个方法对象，它反映此表示的类或接口的指定公共成员方法 类对象</td>
</tr>
<tr>
<td><code>Method[] getDeclaredMethods()</code></td>
<td>返回包含一个数组方法对象反射的类或接口的所有声明的方法，通过此表示 类对象，包括公共，保护，默认（包）访问和私有方法，但不包括继承的方法</td>
</tr>
<tr>
<td><code>Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)</code></td>
<td>返回一个方法对象，它反映此表示的类或接口的指定声明的方法类对象</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ul>
<li><code>Method[] getMethods()</code></li>
</ul>
<p>用于获取当前类的所有 <code>public</code> 所修饰的成员方法（<strong>包括父类</strong>）。</p>
<ul>
<li><code>Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</code></li>
</ul>
<p>用于获取当前类的某一个指定名称 <code>public</code> 所修饰的成员方法（<strong>包括父类</strong>）。</p>
<ul>
<li><code>Method[] getDeclaredMethods()</code></li>
</ul>
<p>用于获取当前类的所有 <code>public</code> 所修饰的成员方法（<strong>不包括父类</strong>）。</p>
<ul>
<li><code>Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)</code></li>
</ul>
<p>用于获取当前类的某一个指定名称 <code>public</code> 所修饰的成员方法（<strong>不包括父类</strong>）。</p>
<p>而当我们获取到类的成员方法后，如果要执行某一个方法，可以使用 <code>invoke()</code> 方法来执行该方法。</p>
<h4> 获取类名</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ul>
<li><code>String getName()</code></li>
</ul>
<p>从上述程序的结果可知，当我们获取到 <code>Class</code> 对象之后，如果不知道类的全名，就可以使用 <code>getName()</code> 来获取该类的全名。</p>
<h2> 反射实例</h2>
<p>假设我们有如下需求：在不改变类的代码的前提下，我们能够创建任意类的对象，并执行其中的方法。</p>
<p>此时，我们可以通过 <strong>配置文件 + 反射</strong> 的方式来实现这一效果，而这也就是我们现在所用框架中的基础，当我们使用反射后，只需要通过修改配置文件中的内容就能够不用去改代码就实现对应的功能。</p>
<p>假设我们有两个类，一个 <code>Student</code>，一个 <code>Teacher</code>，两者的定义如下；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要实现我们的需求，通常需要如下步骤：</p>
<ol>
<li>将要创建对象的全类名和要执行的方法都配置在配置文件中；</li>
</ol>
<p>定义的配置文件 <code>prop.properties</code> ，其中主要内容包括 <code>className</code> 和 <code>methodName</code> 两个属性，分别代表类的全类名和要调用方法的名字。一个具体实例如下，分别代表名为 <code>Student</code> 的类和名为 <code>study</code> 的方法。</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>然后在主方法中加载读取配置文件；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>利用反射技术将类加载到内存中；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>接着利用 <code>newInstance()</code> 方法创建对象；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li>最后则是利用 <code>invoke()</code> 方法来执行方法；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将整个流程汇总起来就是：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，我们只需要改动配置文件 <code>prop.properties</code> 中的配置即可输出不同结果；</p>
<p></p>
<p></p>
<h2> 总结</h2>
<p>好了，感谢耐心看到这里的各位。如果您觉得本文对您有所帮助，那就给我点个赞吧！</p>
<p>最后，对于文中知识点有错误或欠缺的地方，还请大家见谅，欢迎大家评论留言给我指正~</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>JDBC 入门指南</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220717-jdbc-introduction.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220717-jdbc-introduction.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">JDBC 入门指南</source>
      <description>作者：村雨遥 博客：JavaPark 原文：https://mp.weixin.qq.com/s/DOXFxk5dk9WBfAVK0UJUng 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Sun, 17 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/DOXFxk5dk9WBfAVK0UJUng" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/DOXFxk5dk9WBfAVK0UJUng</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>在我们日常使用的 APP 或网站中，往往需要存取数据，比如在微信中，需要存储我们的用户名、手机号、用户密码…… 等一系列信息。依靠之前所学习的 Java 相关知识已经无法满足这一需求。现在的应用程序中最基本、应用最广的也就是关系型数据库，如 MySQL。Java 语言中为了实现与关系型数据库的通信，制定了标准的访问接口，即 JDBC（Java Database Connectivity）。本文主要介绍在 Java 中使用 JDBC 的相关知识，主要内容如下：</p>
<ul>
<li><strong>JDBC 简介</strong></li>
<li><strong>数据的增删改查</strong></li>
<li><strong>事务</strong></li>
<li><strong>连接池</strong></li>
</ul>
<h2> JDBC 简介</h2>
<p>JDBC（Java Database Connectivity），即 Java 数据库连接。是 Java 语言中用于规范客户端程序如何来访问数据库的应用程序接口，它是面向关系型数据库的，提供了查询和更新数据库中数据的方法。</p>
<p>本文以 MySQL 来演示如何使用 JDBC，所以需要事先在你的机器上准备好 MySQL，而且最好是懂一些 MySQL 的使用。</p>
<p>首先我们需要建立 MySQL 与 Java 程序间的联系，所以需要事先好 mysql-connector-java 这个第三方包，下载地址：<a href="https://downloads.mysql.com/archives/c-j/" target="_blank" rel="noopener noreferrer">https://downloads.mysql.com/archives/c-j/</a></p>
<h3> 导入驱动包</h3>
<p>以在 IDEA 中导入 jar 包为例，当我们建立好项目后，导包过程如下：</p>
<ol>
<li>首先依次打开 <code>File -&gt; Project Structure -&gt; Modules -&gt; Dependencies</code>；</li>
</ol>
<p></p>
<ol start="2">
<li>然后点击 <code>+</code> 号，选择 <code>1 JARs or Directories</code>，找到你下载好的 jar 包导入；</li>
</ol>
<p></p>
<ol start="3">
<li>导入成功，点击 <code>OK</code> 即可；</li>
</ol>
<p></p>
<p></p>
<h3> 初始化并建立连接</h3>
<p>导入我们的 jar 包之后，就需要进行初始化工作。新建一个类，用于初始化并连接。先将驱动类加载到 JVM 中，加载过程中会执行其中的静态初始化块，从而完成驱动的初始化工作。然后建立数据库与程序之间的连接，此时需要提供数据库的 IP 地址、端口号、数据库名、编码方式、用户名、用户密码等信息。</p>
<p>首先，我们在数据库中建立一个表 <code>student</code>，建表语句如下，用于后续实践。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<p>创建好数据库及表之后，我们就可以进行初始化和连接工作了，这里的步骤主要分为如下几步：</p>
<ol>
<li>首先需要加载驱动，主要是利用 <code>Class.forName()</code> 将驱动类加载到 JVM；</li>
<li>建立程序和数据库之间的连接，主要是创建 <code>Connection</code> 对象；</li>
<li>接着是创建用于执行 SQL 语句的 <code>Statement</code> 对象；</li>
<li>最后则是关闭连接从而释放资源，先关闭 <code>Statement</code> ，再关闭 <code>Connection</code> ；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>对于上述关闭 <code>Connection</code> 和 <code>Statement</code> 的方式，可能略显繁琐，为了进一步简化，可以使用 <code>try-with-source</code> 的方式自动关闭，简化后的代码如下；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JDBC 增删改查</h2>
<p>当我们初始化并建立 JDBC 连接之后，我们就可以对数据库进行 CRUD （增加、查询、更新、删除）等操作。</p>
<p>在正式开始 CRUD 前，我们最好先了解下 MySQL 中的数据类型在 Java 中所对应的数据类型，以便后续操作数据。一般来讲，两者中的数据类型对应关系如下表所示。</p>
<table>
<thead>
<tr>
<th>SQL 中的数据类型</th>
<th>对应的 Java 数据类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>BIT</code>、<code>BOOL</code></td>
<td><code>boolean</code></td>
</tr>
<tr>
<td><code>INTEGER</code></td>
<td><code>int</code></td>
</tr>
<tr>
<td><code>BIGINT</code></td>
<td><code>long</code></td>
</tr>
<tr>
<td><code>REAL</code></td>
<td><code>float</code></td>
</tr>
<tr>
<td><code>FLOAT</code>、 <code>DOUBLE</code></td>
<td><code>double</code></td>
</tr>
<tr>
<td><code>CHAR</code>、 <code>VARCHAR</code></td>
<td><code>String</code></td>
</tr>
<tr>
<td><code>DECIMAL</code></td>
<td><code>BigDecimal</code></td>
</tr>
<tr>
<td><code>DATE</code></td>
<td><code>java.sql.Date</code>、<code>LocalDate</code></td>
</tr>
<tr>
<td><code>TIME</code></td>
<td><code>java.sql.Time</code>、 <code>LocalTime</code></td>
</tr>
</tbody>
</table>
<p>此外，虽然我们在 JDBC 的简介部分在初始化和建立连接时使用的是用 <code>Statement</code> 来创建一个对象并用于后续操作，但是在实际使用过程中时，SQL 参数基本都是从方法参数传入的，这时使用 <code>Statement</code> 就十分容易引起 SQL 注入，为了解决这一问题，大牛们提出了如下两个办法：</p>
<ol>
<li>对字符串中的参数进行转义，然后利用转义后的参数来进行操作。但是转义十分麻烦，而且一使用 SQL，我们就必须增加转义代码。</li>
<li>利用 <code>PreparedStatement</code>，它利用 <code>?</code> 作为占位符，将数据联通 SQL 本身传递给数据库，从而保证每次传给数据库的 SQL 语句都是保持一致的，每次变动的只是占位符中的数据不同。通过使用 <code>PreparedStatement</code>，我们就能够 <strong>完全避免 SQL 注入 问题</strong>。</li>
</ol>
<p>针对后续利用 JDBC 操作数据库的过程，为了尽量避免 SQL 注入问题，我们优先采用 <code>PreparedStatement</code> 而非 <code>Statement</code>.</p>
<h3> 查询数据</h3>
<p>首先，我们来进行查询操作。进行查询时，可以总结为如下几个步骤：</p>
<ol>
<li>通过创建一个 <code>Connection</code> 对象从而建立连接；</li>
<li>然后利用 <code>prepareStatement()</code> 方法创建一个 <code>PreparedStatement</code> 对象并传入 SQL 语句，用于执行查询操作；</li>
<li>接着执行 <code>PreparedStatement</code> 对象所提供的 <code>executeQuery()</code> 方法，获取查询结果并返回到一个 <code>ResultSet</code> 结果集中；</li>
<li>最后则是利用 <code>ResultSet</code> 对象的 <code>next()</code> 方法去读取我们所查询返回的结果；</li>
</ol>
<blockquote>
<p>需要注意的地方：</p>
<ol>
<li>如果你不是利用 <code>try-with-source</code> 的方式，那么一定要记得在使用完连接之后记得释放资源；</li>
<li>结果集 <code>ResultSet</code> 中，索引位置是从 <code>1</code> 开始的，而不是从 <code>0</code> 开始，这一点要特别注意！</li>
</ol>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 增加数据</h3>
<p>即插入一条新记录，和查询语句很像，但是区别在于最后 <code>PreparedStatement</code> 对象执行的不是 <code>executeQuery()</code>，而是 <code>executeUpdate()</code>. 插入记录的步骤总结如下：</p>
<ol>
<li>创建 <code>Connection</code> 对象从而建立连接；</li>
<li>利用 <code>prepareStatement()</code> 方法创建一个 <code>PreparedStatement</code> 对象并传入 SQL 语句，用于执行插入操作；</li>
<li>然后依次设置占位符所代表的值；</li>
<li>执行 <code>PreparedStatement</code> 对象所提供的 <code>executeUpdate()</code> 方法，此时返回的是一个 <code>int</code> 类型的数，表示插入记录的条数；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新增数据后，接着查询数据，得到如下结果，可以看到我们新插入的数据成功加入到了数据库中！</p>
<p></p>
<h3> 删除数据</h3>
<p>删除数据和新增数据的方式基本一样，两者最大的区别在于 SQL 语句的不同，删除操作利用的是 <code>DELETE</code> 语句，能一次删除若干列。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除数据后，接着查询数据，得到如下结果，可以看到 <code>id = 101</code> 的数据列已经被删除了，说明我们删除数据成功了！</p>
<p></p>
<h3> 修改数据</h3>
<p>修改数据的方式同删除数据和新增数据基本一致，最大的区别在于 SQL 语句的不同，修改操作利用的是 <code>UPDATE</code> 语句，能一次更新若干列。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改数据后，接着查询数据，得到如下结果，可以看到 <code>id = 201</code> 对应的数据列中，<code>name</code> 从小黄变成了村雨遥，说明数据更新成功。</p>
<p></p>
<h3> 注意</h3>
<p>当我们的数据库表设置自增主键后，在新增数据时无需指定主键也会自动更新。但是在获取自增主键的值时，不能先插入再查询，否则可能会导致冲突。要正确获取自增主键，需要在创建 <code>PreparedStatement</code> 时，指定一个标志位 <code>RETURN_GENERATED_KEYS</code>，用于表示 JDBC 驱动必须返回插入的自增主键。</p>
<p>假设我们创建表时，设置了自增长的键：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时无论是 <code>executeQuery()</code> 还是 <code>execureUpdate()</code> 都不会返回这个自增长的 <code>id</code>，所以需要在创建 <code>PreparedStatement</code> 对象时加入 <code>Statement.RETURN_GENERATED_KEYS</code> 参数以确保会返回自增长 ID，然后通过 <code>getGeneratedKeys</code> 获取该字段；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> JDBC 工具类</h3>
<p>观察上面的代码，我们可以注意到每次都需要注册驱动、传递参数，关闭连接等操作，为了提高工具通用性，我们利用配置文件来配置数据库相关信息，然后创建一个 JDBC 工具类来简化上述操作。</p>
<ol>
<li>首先在 <code>src</code> 目录下创建一个配置文件 <code>jdbc.properties</code>，并且填入数据库的相关信息；</li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>创建工具类</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JDBC 事务</h2>
<h3> 事务 4 大特性</h3>
<p>事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行结果必须使数据库从一种一致性状态切换到另一中一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。事务能够在数据库提交工作时确保要么所有修改都保存，要么所有修改都不保存。<strong>即事务是逻辑上的一组操作，要么都执行，要么都不执行</strong>。</p>
<ol>
<li><strong>原子性（Atomicity）</strong></li>
</ol>
<p>原子性是整个数据库事务中不可分割的工作单位，只有事务中的所有的数据库操作都执行成功，才代表整个事务成功，如果其中任一环节执行失败，那么就算已经执行成功的 SQL 语句也必须撤销，回滚到事务执行前的状态。即原子性能够保证 <strong>动作要么全部完成，要么完全不起作用。</strong> <strong>即事务是最小的执行单位，不允许分割</strong>。</p>
<ol start="2">
<li><strong>一致性（Consistency）</strong></li>
</ol>
<p>指事务将数据库从一种一致性状态变为另一种一致性状态。在事务开始前后，数据库的完整性约束未被破坏。<strong>在事务执行前后，数据能够保持一致，多个事务对统一数据读取的结果相同</strong>。</p>
<ol start="3">
<li><strong>隔离性（Isolation）</strong></li>
</ol>
<p>并发访问数据库时，隔离性要求每个读写事务对其他事务的操作对象能够相互分离，即一个用户的事务不被其他事务所干扰，各并发事务间数据库是独立的；</p>
<ol start="4">
<li><strong>持久性（Durability）</strong></li>
</ol>
<p>表示事务一旦被提交，其结果就是永久性的，它对数据库中数据的改变是持久的，即便数据库发生故障也不应该对其产生影响；</p>
<h3> 脏读、幻读 &amp; 不可重复读</h3>
<p>了解事务隔离级别之前，先来看看这几个读的概念：</p>
<ol>
<li><strong>脏读（Dirty Read）</strong></li>
</ol>
<p>表示某一事务已经更新了一份数据，另一个事务在此时读取了同一份数据。当前一个事务撤销操作后，就会导致后一个事务所读取的数据不正确。</p>
<ol start="2">
<li><strong>幻读（Phantom Read）</strong></li>
</ol>
<p>在一个事务的两次查询中数据量不一致，假如有一个事务查询了几列数据，同时另一个事务中在此时查询了新的数据，则查询事务在后续查询中，就会发现数据比最开始的查询数据更丰富。</p>
<ol start="3">
<li><strong>不可重复读（Non-repeatable Read）</strong></li>
</ol>
<p>一个事务中两次查询数据不一致，有可能是因为两次查询过程中插入了一个更新原有数据的事务。</p>
<p><strong>注意：不可重复读和幻读的区别在于：</strong></p>
<blockquote>
<p><strong>不可重复读的重点在于修改，</strong> 比如多次读取一条记录发现其中某些列的值被修改，而 <strong>幻读的重点在于新增或删除</strong>，比如多次读取一条记录发现记录增多或减少了。</p>
</blockquote>
<h3> 隔离级别</h3>
<p>SQL 标准定义了 4 个隔离级别，隔离级别从低到高分别是：</p>
<ol>
<li><strong>READ-UNCOMMITTED（读取未提交）</strong></li>
</ol>
<p>最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能导致脏读、幻读或不可重复读</strong>。</p>
<ol start="2">
<li><strong>READ-COMMITTED（读取已提交）</strong></li>
</ol>
<p>允许读取并发事务已经提交的数据，<strong>能够阻止脏读，但可能导致幻读或不可重复读</strong>。</p>
<ol start="3">
<li><strong>REPEATABLE-READ（可重复读）</strong></li>
</ol>
<p>对同一字段的多次读取结果时一致的，除非数据是被本身事务自己所修改，<strong>能够阻止脏读和不可重复读，但可能导致幻读</strong>。</p>
<ol start="4">
<li><strong>SERIALIZABLE（可串行化）</strong></li>
</ol>
<p>最高的隔离级别，完全服从 ACID 的隔离级别，所有事务依次逐个执行，这样事务之间就完全不可能产生干扰，<strong>能够防止脏读、幻读以及不可重复读</strong>。</p>
<p>以下是 SQL 隔离级别和各种读之间的关系：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>READ-UNCOMMITTED</code></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>READ-COMMITTED</code></td>
<td>❌</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>REPEATABLE-READ</code></td>
<td>❌</td>
<td>❌</td>
<td>✔</td>
</tr>
<tr>
<td><code>SERIALIZABLE</code></td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
</tbody>
</table>
<h3> 实例</h3>
<p>关于回滚，主要涉及 <code>Connection</code> 对象，常用的三个方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void</code></td>
<td><code>setAutoCommit(boolean autoCommit)</code></td>
<td>设定连接的自动提交模式，<code>true</code> 表示自动提交，<code>false</code> 表示手动提交</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>commit()</code></td>
<td>使上次提交/回滚以来所做的所有更改成为永久更改，并释放此 <code>Connection</code> 对象当前持有的所有数据库锁</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>rollback()</code></td>
<td>撤销当前十五中所做的所有更改，并释放此 <code>Connection</code> 对象当前持有的所有数据库锁</td>
</tr>
</tbody>
</table>
<p>以下是一个回滚实例，我们当我们第一次插入一条数据时，由于是新数据，所以不会报错，但是如果我们执行一次程序之后再次执行，此时按理来说就会报错，因为插入的数据重复，这时候利用事务就可以十分方便的解决这个问题，我们设置插入出错就回滚到未出错之前的状态，这样就能保证插入数据不会报错了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上述回滚的方式外，JDBC 还支持设置保存点的方式，我们可以使用事务回滚到指定的保存点，主要涉及的方法如下：</p>
<ul>
<li><code>setSavepoint(String savePointName)</code>：创建新的保存点，返回一个 <code>SavePoint</code> 对象；</li>
<li><code>rollback(String savePointName)</code>：回滚到指定保存点；</li>
</ul>
<h2> 连接池</h2>
<h3> 简介</h3>
<p>当我们使用多线程时，每个线程如果都需要连接数据库来执行 SQL 语句，那么每个线程都得创建一个连接，然后在使用之后关闭。这个创建和关闭连接的过程是十分耗时的，一旦多线程并发时，就容易导致系统卡顿。针对这一问题，提出使用数据库连接池。数据库连接池，其实就相当于一个集合，是一个存放数据库连接的容器。当我们的系统初始化好之后，集合就被创建，集合中会申请一些连接对象，当用户来访问数据库时，从集合中获取连接对象，一旦用户访问完毕，就将连接对象返还给容器。</p>
<p>使用数据库连接池的优点：一来是节约资源，二来提高了用户访问的效率。</p>
<h3> 常用数据库连接池</h3>
<h4> C3P0</h4>
<ol>
<li>导包</li>
</ol>
<p>首先需要导包，先去下载 C3P0 对象的 jar 包，下载地址：<a href="https://sourceforge.net/projects/c3p0/%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B0%86%E5%85%B6%E4%B8%AD%E7%9A%84%E5%A6%82%E4%B8%8B%E4%B8%A4%E4%B8%AA%E5%8C%85%E5%AF%BC%E5%85%A5%EF%BC%9B" target="_blank" rel="noopener noreferrer">https://sourceforge.net/projects/c3p0/，然后将其中的如下两个包导入；</a></p>
<p></p>
<ol start="2">
<li>定义配置文件</li>
</ol>
<p>创建 C3P0 对应的配置文件，注意：配置文件一般放在 <code>src</code> 路径下，而且文件的名称要必须为以下其中的一个：</p>
<ul>
<li><code>c3p0.properties</code></li>
<li><code>c3p0-config.xml</code></li>
</ul>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>
<p>创建连接池对象</p>
</li>
<li>
<p>获取连接对象</p>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h4> Druid</h4>
<ol>
<li>导包</li>
</ol>
<p>导入 Druid 的 jar 包，下载地址：<a href="https://repo1.maven.org/maven2/com/alibaba/druid/" target="_blank" rel="noopener noreferrer">https://repo1.maven.org/maven2/com/alibaba/druid/</a></p>
<ol start="2">
<li>定义配置文件</li>
</ol>
<p>配置文件名称无要求，但是后缀名为 <code>.properties</code>，而且可以存放在任意目录下；</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>加载配置文件</li>
<li>创建连接池对象</li>
<li>获取连接对象</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>今天的内容到此就结束了，老规矩，点赞关注走一波 🧐。</p>
<p>对于文中有错或遗漏的地方，还烦请各位大佬在评论区指出来。我是村雨遥，一个技术栈主要为 Java 的菜鸟程序员，关注我，一起学习成长吧！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>是时候拥抱 Junit 单元测试了</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220718-test-with-junit.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220718-test-with-junit.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">是时候拥抱 Junit 单元测试了</source>
      <description>作者：村雨遥 博客：JavaPark 原文：https://mp.weixin.qq.com/s/_FWd0Bj3DlbCReex6pqJKQ 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Mon, 18 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/_FWd0Bj3DlbCReex6pqJKQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/_FWd0Bj3DlbCReex6pqJKQ</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 何为测试</h2>
<p>在计算机领域中，所谓测试，描述的是一种用来鉴定软件正确性、完整性和质量的过程。而软件测试又一般可以分为黑盒测试和白盒测试，两者的相关定义如下。</p>
<h3> 黑盒测试</h3>
<blockquote>
<p>黑盒测试（<code>black-box testing</code>），也称黑箱测试，是软件测试方法，测试应用程序的功能，而不是其内部结构或运作。测试者不需具备应用程序的代码、内部结构和编程语言的专门知识。测试者只需知道什么是系统应该做的事，即当键入一个特定的输入，可得到一定的输出。测试案例是依应用系统应该做的功能，照规范、规格或要求等设计。测试者选择有效输入和无效输入来验证是否正确的输出。</p>
</blockquote>
<p>黑盒测试方法可适合大部分的软件测试，例如集成测试（<code>integration testing</code>）以及系统测试（<code>system testing</code>）。</p>
<h3> 白盒测试</h3>
<blockquote>
<p>白盒测试（<code>white-box testing</code>），又称透明盒测试 <code>glass box testing</code>、结构测试 <code>structural testing</code> 等）是一个测试软件的方法，测试应用程序的内部结构或运作，而不是测试应用程序的功能（即黑盒测试）。在白盒测试时，以编程语言的角度来设计测试案例。测试者输入资料验证资料流在程序中的流动路径，并确定适当的输出，类似测试电路中的节点。</p>
</blockquote>
<p>白盒测试可以应用于单元测试（<code>unit testing</code>）、集成测试（<code>integration testing</code>）和系统的软件测试流程，可测试在集成过程中每一单元之间的路径，或者主系统跟子系统中的测试。尽管这种测试的方法可以发现许多的错误或问题，它可能无法检测未使用部分的规范。</p>
<p>介绍一下黑白盒测试，主要是为了大家有一个概念，明白两者之间的区别，关于更多测试的内容，这里就不展开讲了，毕竟我们的重点是 JUnit。</p>
<h2> JUnit 简介</h2>
<h3> 什么是 JUnit</h3>
<blockquote>
<p>官网：<a href="https://junit.org/" target="_blank" rel="noopener noreferrer">https://junit.org/</a></p>
</blockquote>
<p>JUnit 是一个编写可重复测试的简单框架，是单元测试框架 xUnit 的一个实例，属于白盒测试。</p>
<p>针对 Java 语言而言，程序中最小的功能单元是方法，因此，对 Java 程序进行单元测试就是针对单个 Java 方法的测试。</p>
<p>在我们简单的小程序中，平常测试使用的方法是在主类中创建对象，然后调用对应方法。但是这样一来存在两个缺点：</p>
<ol>
<li>不能将测试代码和业务代码分离；</li>
<li>未打印出测试结果和期望结果；</li>
</ol>
<p>因此此时我们就需要一种新的测试框架来帮助我们编写测试，而 JUnit 则是专门针对 Java 而设计的一种标准单元测试框架。作为一个 Java 开发者，学习 JUnit 来进行测试是必备技能。</p>
<h3> 如何安装 JUnit</h3>
<ul>
<li><strong>本地安装</strong></li>
</ul>
<p>对于这种方法，我们只需要去下载 JUnit 最新的包，当前有 Junit4 和 Junit5 两个版本，可以根据自己的需要进行选择然后导入我们 IDE 的依赖文件即可，依赖文件下载地址如下：</p>
<blockquote>
<p>JUnit4：<a href="https://github.com/junit-team/junit4/releases/" target="_blank" rel="noopener noreferrer">https://github.com/junit-team/junit4/releases/</a></p>
<p>JUnit5：<a href="https://github.com/junit-team/junit5/releases/" target="_blank" rel="noopener noreferrer">https://github.com/junit-team/junit5/releases/</a></p>
</blockquote>
<p>以 IDEA 为例，依次打开 <code>File -&gt; Project Structure -&gt; Project Settings -&gt; Modules -&gt; Dependencies -&gt; 点击 + -&gt; Library... -&gt; Java</code>，最后找到下载的 JUnit 文件即可；</p>

<ul>
<li><strong>Maven 安装</strong></li>
</ul>
<p>当使用 Maven 之后，我们就能十分简单地安装 JUnit 了，只需要在项目的 <code>pom.xml</code> 配置文件中导入依赖即可；</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 使用 Junit 进行单元测试</h3>
<p>首先我们需要有一个主类，然后基于该类来进行测试，这里我们以简单的运算器为例；</p>
<p>创建一个简易计算机类 <code>Calc</code>，然后包括加法 <code>add</code> 和减法 <code>sub</code> 两个方法；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义好上述主类之后，我们来进行测试，测试步骤如下；</p>
<ol>
<li><strong>定义测试类</strong></li>
</ol>
<p>定义测试类时，我们推荐定义类名时就是 <strong>主类 Test</strong> 的形式，比如我们上面的类为 <code>Calc</code>，我们要对其进行测试，则测试类的类名为 <code>CalcTest</code>；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>定义测试方法</strong></li>
</ol>
<p>测试类定义好之后，我们就可以定义测试方法了，而定义测试方法时，我们也有几点建议；</p>
<ul>
<li>测试方法名是在主类方法名前加上 <code>test</code>，比如我们上边的方法为 <code>add</code>，则我们对应的测试方法名为 <code>testAdd</code>；</li>
<li>针对测试方法的返回值，因为我们只需要在方法内给出结果即可，不用再供其他人调用，所以建议返回值设置为 <code>void</code>；</li>
<li>针对测试方法的参数列表，由于我们主要还是针对传统建类调用方法测试的方法，所以此时最好是保持参数列表为空；</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>@Test</code> 为注解，用来注释一个普通的方法为一条测试用例。<code>assertEquals</code> 方法用于断言两个值是否相等。</p>
<p>如果测试成功，则在 IDE 中会出现如下提示。</p>
<p></p>
<p>一般来讲，测试成功一般是绿色，而测试失败则是红色。</p>
<ul>
<li>测试成功的界面</li>
</ul>
<p></p>
<ul>
<li>测试失败的界面</li>
</ul>
<p></p>
<p>总结起来，我们针对一个方法的具体测试的步骤如下：</p>
<ol>
<li>首先是创建被测试类的对象；</li>
<li>然后调用被测试的方法；</li>
<li>最后加入断言，判断调用方法得到结果和实际的结果之间是否相同；</li>
</ol>
<h2> JUnit 常用注解</h2>
<p>由于现在主要用到的有 Junit4 和 Junit5 两个版本，而两者之间也是存在一些区别的，所以在这里给出两者中常用注解的一些差异。</p>
<p>下表中，给出了 Junit4 和 Junit5 中所共有功能的对应注解：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Junit4 注解</th>
<th>Junit5 注解</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>@Test</code></td>
<td><code>@Test</code></td>
<td style="text-align:left">标识一条测试用例</td>
</tr>
<tr>
<td style="text-align:center"><code>@Ignore</code></td>
<td><code>@Disable</code></td>
<td style="text-align:left">忽略的测试用例</td>
</tr>
<tr>
<td style="text-align:center"><code>@Before</code></td>
<td><code>@BeforeEach</code></td>
<td style="text-align:left">每一个测试方法之前运行</td>
</tr>
<tr>
<td style="text-align:center"><code>@After</code></td>
<td><code>@AfterEach</code></td>
<td style="text-align:left">每一个测试方法之后运行</td>
</tr>
<tr>
<td style="text-align:center"><code>@BefreClass</code></td>
<td><code>@BeforeAll</code></td>
<td style="text-align:left">所有测试开始之前运行</td>
</tr>
<tr>
<td style="text-align:center"><code>@AfterClass</code></td>
<td><code>@AfterAll</code></td>
<td style="text-align:left">所有测试结果之后运行</td>
</tr>
<tr>
<td style="text-align:center"><code>@Category</code></td>
<td><code>@Tag</code></td>
<td style="text-align:left">标记和过滤</td>
</tr>
</tbody>
</table>
<p>而相对于 Junit4，Junit5 也有做出升级，其特有的一些注解如下：</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@TestFactory</code></td>
<td>测试工厂进行动态测试</td>
</tr>
<tr>
<td><code>@Nested</code></td>
<td>嵌套测试</td>
</tr>
<tr>
<td><code>@ExtendWith</code></td>
<td>注册自定义扩展</td>
</tr>
</tbody>
</table>
<h2> 常用断言方法</h2>
<p>而在测试中，我们经常用到断言方法。这些断言方法都来自于由继承了 <code>java.lang.Object</code> 的 <code>Assert</code> 类，用于提供编写测试。</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>void assertArrayEquals([String message],expected array, result array)</code></td>
<td style="text-align:left">断言预期数组和结果数组相等</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertEquals([String message],expected value, actual value)</code></td>
<td style="text-align:left">断言两个值是否相等。类似于字符串比较使用的 <code>equals()</code> 方法</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertNotEquals(String message], first, second)</code></td>
<td style="text-align:left">查看两个对象是否不相等</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertNull(String message], object)</code></td>
<td style="text-align:left">查看对象是否为空</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertNotNull(String message], object)</code></td>
<td style="text-align:left">查看对象是否不为空</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertSame(String message], expected, actual)</code></td>
<td style="text-align:left">查看两个对象的引用是否相等。类似于使用 <code>==</code> 比较两个对象</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertNotSame(String message], unexpected, actual)</code></td>
<td style="text-align:left">查看两个对象的引用是否不相等。类似于使用 <code>!=</code> 比较两个对象</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertTrue(String message], boolean condition)</code></td>
<td style="text-align:left">查看运行结果是否为 <code>true</code></td>
</tr>
<tr>
<td style="text-align:left"><code>void assertFalse([String message], boolean condition)</code></td>
<td style="text-align:left">查看运行结果是否为 <code>false</code></td>
</tr>
<tr>
<td style="text-align:left"><code>void assertThat([String message], actual, matcher)</code></td>
<td style="text-align:left">查看实际值是否满足指定的条件</td>
</tr>
<tr>
<td style="text-align:left"><code>fail()</code></td>
<td style="text-align:left">让测试失败</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>好了，以上就是有关单元测试 Junit 的简单使用指南了。虽说大家现在还是有很多人在使用 Junit4，但如果你之前并未接触过 Junit，个人建议那就直接学习 Junit5 吧。当然了，Junit4 了解也是很有必要的，毕竟技多不压身，多一份技能少求人嘛。</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Lombok 安装及使用指南</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220719-lombok-install-and-usage.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220719-lombok-install-and-usage.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">Lombok 安装及使用指南</source>
      <description>作者：村雨遥 博客：JavaPark 原文：https://mp.weixin.qq.com/s/t4h5VRfbYqNIRZVlMaqPEg 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Tue, 19 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/t4h5VRfbYqNIRZVlMaqPEg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/t4h5VRfbYqNIRZVlMaqPEg</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 简介</h2>
<p>为了减少写一些 <code>get/set/toString</code> 方法，让项目代码更加整洁，提高开发效率，发现大家都开始采用 Lombok 这个工具。Lombok 是一个 Java 类库，它会自动插入编辑器和构建工具，用于帮助开发人员消除 Java 中冗长样板代码。而我们开发人员所要做的，仅仅是添加几个 Lombok 中的注解，就可以替换掉原来的多行 <code>get/set/toString</code> 方法代码，既简洁也易于维护。下面我们就来看看，如何安装并使用这一工具。</p>
<h2> 安装 Lombok</h2>
<p>日常开发中，相信大多数人现在使用的都是 IDEA 这个 Java 神器了，如果你还在使用 Eclipse 或者 MyEclipse 等工具，那强烈推荐你去体验一把 IDEA，相信你一用上它就会爱上它的强大！下面我就以在 IDEA 中使用 Lombok 为例，看看如何安装并使用它。</p>
<p>在先前 IDEA 的版本中，Lombok 是需要通过插件来安装的，安装方法如下：依次进入<code>File -&gt; Settings -&gt; Plugins</code>，然后搜索 Lombok ，最后进行安装即可。而在新版本的 IDEA 中，Lombok 已经被集成到 IDEA 中，我们不用再去安装它就可以直接使用，可以说是十分方便了。</p>
<ul>
<li>老版本 IDEA 安装 Lombok</li>
</ul>

<ul>
<li>新版本中集成了 Lombok</li>
</ul>

<p>以上就是 Lombok 的安装过程了，是不是十分简单？那接下来我们就来看看，如何在我们的项目中使用 Lombok！</p>
<h2> Lombok 使用</h2>
<p>现在大家进行项目管理时用的工具大多应该都是 Maven，所以我们直接在需要使用 Lombok 的项目中加入 Lombok 编译支持，也就是在 <code>pom.xml</code> 文件中加入以下依赖。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入相关依赖之后，接下来就是具体使用过程了。</p>
<h3> 具体使用</h3>
<p>在需要的实体类中引入相关注解即可，只不过注解不同它们所对应的功能也不同，而且同一个注解可能在不同位置的功能也不一样。如下图；</p>
<p></p>
<h3> 常用注解</h3>
<h4> @Data</h4>
<p>注解在 <strong>类</strong> 上：给类的所有属性提供 <code>get</code> 和 <code>set</code> 方法，此外还有 <code>equals、canEqual、hashCode、toString</code> 方法以及 <strong>默认参数为空的构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Setter</h4>
<p>注解在 <strong>类</strong> 上：为该类所有属性均提供 <code>set</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解在 <strong>属性</strong> 上：为该属性提供 <code>set</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Getter</h4>
<p>注解在 <strong>类</strong> 上：为该类所有属性均提供 <code>get</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解在 <strong>属性</strong> 上：为该属性提供 <code>get</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @ToString</h4>
<p>注解在 <strong>类</strong> 上：生成所有参数的 <code>toString()</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Value</h4>
<p>注解在 <strong>类</strong> 上：生成 <code>get</code> 方法，以及 <code>equals、hashCode、toString</code> 方法，同时提供 <strong>含所有参数的构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @AllArgsConstructor</h4>
<p>注解在 <strong>类</strong> 上：为类提供一个 <strong>全参构造方法</strong>，但此时不再提供默认构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @NoArgsConstructor</h4>
<p>注解在 <strong>类</strong> 上：为类提供一个 <strong>无参构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @RequiredArgsConstructor</h4>
<p>注解在 <strong>类</strong> 上：使用类中所有带 <code>@NonNull</code> 注解的或带有 <code>final</code> 修饰的成员变量生成对应构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @NonNull</h4>
<p>注解在 <strong>属性</strong> 上，自动生成一个关于该参数的非空检查，若参数为 <code>null</code>，则抛出一个空指针异常，同时提供 <strong>默认构造方法</strong>，具体用法可以参照上面的例子；</p>
<h4> @EqualsAndHashCode</h4>
<p>注解在 <strong>类</strong> 上，生成 <code>equals、canEquals、hasnCode</code> 方法，同时会生成默认构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Cleanup</h4>
<p>注解在 <strong>局部变量</strong> 前，保证该变量代表的资源使用后自动关闭，默认调用资源的 <code>close()</code> 方法，若该资源有其它关闭方法，可用 <code>@Cleanup("方法名")</code> 来指定要调用的方法，同时提供 默认构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Synchronized</h4>
<p>注解在 <strong>类方法 或 实例方法</strong>：效果与 <code>synchronized</code> 关键字相同，区别在于锁对象不同，对于类方法和实例方法，<code>synchronized</code> 关键字的锁对象分别是 <strong>类的</strong> <code>**class**</code> <strong>对象和</strong> <code>**this**</code> <strong>对象</strong>，而 <code>@Synchronized</code> 的锁对象分别是 <strong>私有静态</strong> <code>**final**</code> <strong>对象</strong> <code>**lock**</code> <strong>和 私有</strong> <code>**final**</code> <strong>对象</strong> <code>**lock**</code>，也可以自己指定锁对象，同时提供默认构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @SneakyThrows</h4>
<p>注解在 <strong>方法</strong> 上：将方法中的代码用 <code>try-catch</code> 语句包裹，捕获异常并在 <code>catch</code> 中用 <code>Lombok.sneakyThrow(e)</code> 将异常抛出，还可以用 <code>@SneakyThrows(Exception.class)</code> 的形式指定抛出异常类型，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Log</h4>
<p>注解在 <strong>类</strong> 上：主要用于我们记录日志信息，同时提供 <strong>默认构造方法</strong>。它封装了多个主流 <code>Log</code> 库，主要有如下几个；</p>
<ul>
<li>
<p><code>@Log</code></p>
</li>
<li>
<p><code>@Slf4j</code></p>
</li>
<li>
<p><code>Log4j</code></p>
</li>
<li>
<p><code>Log4j2</code></p>
</li>
</ul>
<h2> 总结</h2>
<p>以上就是关于 Lombok 的相关使用小技巧了，如果你还没有使用过它，那就赶紧去试试吧！</p>
<p>最后，创作不易，如果你觉得我的文章对你有所帮助，那就来个一键三连吧！</p>
<h2> 参考资料</h2>
<ol>
<li><a href="https://projectlombok.org/features/all" target="_blank" rel="noopener noreferrer">https://projectlombok.org/features/all</a></li>
</ol>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Fastjson V2 简单使用手册</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220720-fastjson2-quickstart.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220720-fastjson2-quickstart.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">Fastjson V2 简单使用手册</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 在日常 Java 企业级开发中，可能避不开 JSON 这个格式。 JSON 源于 1999 年的 JS 语言规范 ECMA262 的一个子集，然后又在 2003 年作为一种数据格式 ECMA404 发布，到了 2006 年，又作为 rfc4627 发布。直到现在，JSON 的应用已经十分广泛了。</description>
      <category>Java 基础教程</category>
      <pubDate>Wed, 20 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>在日常 Java 企业级开发中，可能避不开 <code>JSON</code> 这个格式。 <code>JSON</code> 源于 1999 年的 <code>JS</code> 语言规范 <code>ECMA262</code> 的一个子集，然后又在 2003 年作为一种数据格式 <code>ECMA404</code> 发布，到了 2006 年，又作为 <code>rfc4627</code> 发布。直到现在，<code>JSON</code> 的应用已经十分广泛了。</p>
<p><code>JSON</code> 基于纯文本，所以阅读起来也十分轻松，而且规范简单，容易处理，能够做到开箱即用，最最重要的是，<code>JSON</code> 和平台无关，所以能够作为不同系统间的传输格式协议。</p>
<p><code>JSON</code> 有 7 大基本数值，分别是：<code>false</code>、<code>null</code>、<code>true</code>、<code>object</code>、<code>array</code>、<code>number</code>、<code>string</code>。其结构也非常简单，只有两种结构：一个是 <strong>数组</strong>，一个是<strong>对象中的键值对集合</strong>。其中，对象用 <code>{}</code> 来表示，其内部是 <code>key:value</code> 形式，而数组则是用 <code>[]</code> 来表示，不同值之间用逗号 <code>,</code> 分隔。</p>
<p>以下就是一个 <code>JSON</code> 的简单示例：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在 Java 中，主流的 <code>JSON</code> 库只要有以下三个：</p>
<ol>
<li><code>Fastjson</code>：国内阿里巴巴公司所开发的 <code>JSON</code> 库，性能出众且快速。</li>
<li><code>Jackson</code>：<code>Spring</code> 默认的 <code>JSON</code> 库，社区十分活跃，更新迭代快。</li>
<li><code>Gson</code>：谷歌出品的 <code>JSON</code> 库，算是目前来说功能最全的 <code>JSON</code> 库了。</li>
</ol>
<p>得益于 <code>Fastjson</code> 的超高性能，国内的大部分公司都选择了阿里出品的 <code>Fastjson</code> 作为处理 <code>JSON</code> 的工具库。本文就来看看，<code>Fastjson</code> 的一些常用的使用技巧。</p>
<h2> 使用技巧</h2>
<p>首先，我们创建一个 <code>Maven</code> 项目，用来演示 <code>Fastjson</code> 的使用，也方便我们管理依赖。同时，这里选择 <code>Fastjson v2</code> 来作为今天的演示主角。</p>
<p>当然，首要的工作就是创建一个 <code>Maven</code> 项目，如果你还有点摸不着头脑，那可以移步先去看看前备知识：</p>
<blockquote>
<p><a href="https://cunyu1943.github.io/JavaPark/md/java/maven/20220104-maven-project-with-idea" target="_blank" rel="noopener noreferrer">Maven 教程：使用 IDEA 创建 Maven 项目</a></p>
</blockquote>
<p>当我们创建完成一个 <code>Maven</code> 项目之后，首要的工作就是在项目的 <code>pom.xml</code> 中添加 <code>Fastjson V2</code> 的依赖。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们创建一个 <code>Hero</code> 类，方便后续过程中的使用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Java 对象序列化为 JSON</h3>
<p>在我们的主类中创建一个 <code>Hero</code> 对象，然后利用 <code>toJSONString()</code> 方法将其转换为 <code>JSON</code> 字符串，可以看到结果正确转换了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> JSON 解析为 Java 对象</h3>
<p>假设有一个 <code>JSON</code> 字符串，我们想将其转换为 Java 对象，则可以使用 <code>parseObject()</code> 方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> JSON 解析为 JSONObject</h3>
<p>将 <code>JSON</code> 解析为 <code>JSONObject</code> 的方法和将 <code>JSON</code> 转换为 Java 对象的方法类似，但是少了一个参数，这里需要注意。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> JSON 解析为 JSONArray</h3>
<p>要将 <code>JSON</code> 解析为 <code>JSONArray</code>，此时可以使用 <code>parseArray()</code> 方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>以上就是日常开发中常见的 4 种其他格式和 <code>JSON</code> 格式之间的转换过程了，其中，最常用的应该莫过于 <code>JSON</code> 和 Java 对象之间的相互转换了，一定要熟练掌握！关于 <code>Fastjson V2</code> 的简单使用就介绍到这里了，关于更多 <code>Fastjson V2</code> 的高级使用技巧，等待我们后续文章再见吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>深入浅出 Java 注解</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20220721-annotations.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20220721-annotations.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">深入浅出 Java 注解</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 注解简介 所谓注解，其实就像一种拥有特定作用的注释，自 JDK1.5 及之后版本所引入的特性，它是放在 Java 源码的类、方法、字段、参数前的一种用作标注的“元数据”，与类、接口、枚举处于同一个层次中。 通过其作用的不同，我们常常将注解分为如下 3 类：</description>
      <category>Java 基础教程</category>
      <pubDate>Thu, 21 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 注解简介</h2>
<p>所谓注解，其实就像一种拥有特定作用的注释，自 JDK1.5 及之后版本所引入的特性，它是放在 Java 源码的类、方法、字段、参数前的一种用作标注的“元数据”，与类、接口、枚举处于同一个层次中。</p>
<p>通过其作用的不同，我们常常将注解分为如下 3 类：</p>
<ol>
<li><strong>编写文档</strong>：通过代码中标识的注解生成对应文档（即类似于 Java doc 的文档）；</li>
<li><strong>代码分析</strong>：通过代码中标识的注解对代码进行分析（使用反射）；</li>
<li><strong>编译检查</strong>：通过代码中标识的注解让编译器能实现基本的编译检查（<code>@Override</code>）；</li>
</ol>
<h2> 常用的预定义注解</h2>
<h3> <code>@Override</code></h3>
<p>一般是用在方法上，表示重写该父类的方法，比如我们使用最多的 <code>toString()</code> 方法，它是 <code>Object</code> 类的一个方法，而我们的写的类都是继承自 <code>Object</code> 类，所以我们自定义的所有类都是有 <code>toString()</code> 方法的。但是如果我们自定义类中的方法在父类中没有，则不能使用该注解，否则会导致无法编译通过。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>@Deprecated</code></h3>
<p>一般用在方法之前，表示该方法已经过期，不建议再继续使用（但是仍然有效，只不过可能有更新的版本，推荐使用更新的版本）。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>@SuppressWarnings</code></h3>
<p>表示忽略警告信息，常用的值以及含义如下表：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>deprecation</code></td>
<td>使用了不赞成使用的类或方法时的警告</td>
</tr>
<tr>
<td><code>unchecked</code></td>
<td>使用了未经检查的转换时的警告</td>
</tr>
<tr>
<td><code>fallthrough</code></td>
<td>当 <code>switch</code> 程序块直接通往下一种情况而没有 <code>break</code> 时的警告</td>
</tr>
<tr>
<td><code>path</code></td>
<td>在类路径、源文件路径等中有不存在的路径时的警告</td>
</tr>
<tr>
<td><code>serial</code></td>
<td>当在可序列化的类上缺少 <code>serialVersionUID</code> 定义时的警告</td>
</tr>
<tr>
<td><code>finally</code></td>
<td>任何 <code>finally</code> 子句不能正常完成时的警告</td>
</tr>
<tr>
<td><code>rawtypes</code></td>
<td>泛型类型未指明</td>
</tr>
<tr>
<td><code>unused</code></td>
<td>引用定义了，但是没有被使用</td>
</tr>
<tr>
<td><code>all</code></td>
<td>关闭以上所有情况的警告</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 自定义注解</h2>
<h3> 格式</h3>
<p>我们可以使用 <code>@interface</code> 来自定义注解，其格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个简单的示例如下，其中 <code>AnnoDemo</code> 代表着我们自定义注解的名称，而 <code>name()</code>、<code>age()</code>、<code>score()</code> 则分别表示自定义注解的三个属性，而且我们利用关键字 <code>default</code> 对每个属性都赋予了默认值。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 原理</h3>
<p>注解本质上相当于一个接口，它默认继承自 <code>java.lang.annotation.Annotation</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 参数</h3>
<p>注解的参数类似于无参的方法，通常我们推荐用 <code>default</code> 来设定一个默认值，对于方法的基本要求通常有如下几点：</p>
<ol>
<li>方法的返回值类型不可以是 <code>void</code>；</li>
<li>如果定义了方法，那么在使用时需要给方法进行赋值，赋值的规则如下：
<ol>
<li>若定义方法时，使用了关键字 <code>default</code> 对方法赋予了默认初始值，那么在使用注解时，可以不用对方法进行再次赋值；</li>
<li>若只有一个方法需要赋值，且方法名为 <code>value</code>，那么此时 <code>value</code> 可以省略，直接定义值即可；</li>
<li>数组赋值时，值需要用大括号 <code>{}</code> 包裹，若数组中只有一个值，那么此时 <code>{}</code> 可以省略；</li>
</ol>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上述例子中，<code>name()</code>、<code>age()</code>、<code>score()</code> 就是我们自定义注解的参数。而当我们要是用该注解时，则通过如下方式来对参数进行赋值。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 元注解</h2>
<h3> 定义</h3>
<p>所谓元注解(<code>meta annotation</code>)，就是可以用来修饰其他注解的注解。</p>
<h3> 常用的元注解</h3>
<ol>
<li><code>@Target</code></li>
</ol>
<p>描述注解所修饰的对象范围，其取值主要有如下几种：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ElementType.TYPE</code></td>
<td>表示可以作用于类或接口</td>
</tr>
<tr>
<td><code>ElementType.FIELD</code></td>
<td>表示可以作用于成员变量</td>
</tr>
<tr>
<td><code>ElementType.METHOD</code></td>
<td>表示可以作用于方法</td>
</tr>
<tr>
<td><code>ElementType.CONSTRUCTOR</code></td>
<td>表示可以作用于构造方法</td>
</tr>
<tr>
<td><code>ElementType.PARAMETER</code></td>
<td>表示可以作用于方法的参数</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><code>@Retention</code></li>
</ol>
<p>用于约束注解的生命周期，其取值如下：</p>
<table>
<thead>
<tr>
<th>值</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>RetentionPolicy.SOURCE</code></td>
<td style="text-align:left">表示在源代码文件中有效，注解将被编译器丢弃（注解信息仅保留在源码中，源码经编译后注解信息丢失，不再保留到字节码文件中）</td>
</tr>
<tr>
<td><code>RetentionPolicy.CLASS</code></td>
<td style="text-align:left">表示在字节码文件中有效，注解在字节码文件中可用，但会被 JVM 丢弃</td>
</tr>
<tr>
<td><code>RetentionPolicy.RUNTIME</code></td>
<td style="text-align:left">表示在运行时有效，此时可以通过反射机制来读取注解的信息</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><code>@Documented</code></li>
</ol>
<p>描述其他类型的注解是否被抽取到 API 文档中。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li><code>@Inherited</code></li>
</ol>
<p>这是一个标记注解，描述某个注解能够被子类继承，但是该元注解只适合已经配置了 <code>@Target(ElementType.TYPE)</code> 类型的自定义注解，而且仅针对于类的继承，而对于接口的继承则无效。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li><code>@Repeatable</code></li>
</ol>
<p>该注解是从 JDK1.8 新引入的元注解，表示在同一位置能够重复相同的注解。在没有该注解之前，我们一般是无法在同一类型上使用相同注解的，但引入该注解后，我们就可以在同一类型上使用相同注解。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用 <code>@Repeatable</code> 配置自定义注解之后，我们就可以在某个类型声明处添加多个我们自定义的注解了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>总结上述的知识点，我们将自定义注解的过程归纳为如下 3 步。</p>
<ol>
<li><strong>定义一个注解</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>添加参数并设置默认值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><strong>利用元注解来配置我们的自定义注解</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际应用过程中，利用元注解配置自定义注解时，必须设置 <code>@Target</code> 和 <code>@Retention</code> 两个元注解，而且 <code>@Retention</code> 的值通常是设置为 <code>RetentionPolicy.RUNTIME</code>。</p>
<p>好了，以上就是我们注解的相关概念以及自定义注解所需要的掌握的一些知识点了，如果你觉得对你有所帮助，那就来一波点赞关注吧！
<strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>流程控制知识大闯关</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20221127-loop-in-action.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20221127-loop-in-action.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">流程控制知识大闯关</source>
      <description>作者：村雨遥 博客：JavaPark 原文：https://mp.weixin.qq.com/s/K4aL8o_ND7R_W0mooNhusw 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Sun, 27 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/K4aL8o_ND7R_W0mooNhusw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/K4aL8o_ND7R_W0mooNhusw</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>既然已经学习了 <code>Java</code> 中的流程控制，接下来就来实际操作下，利用我们所学知识来解决实际的问题。</p>
<p>光学是没有用的，只有不断实践才能了解其中的真正含义。</p>
<h2> 闯关</h2>
<h3> 第一关：打印折纸的次数</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>已知世界上最高的山峰是珠穆朗玛峰，它的高度是 <code>8844.43</code> 米，假设有一张足够大的纸，其厚度为 <code>0.1</code> 毫米，那么请问我要折叠多少次，才能将这张纸折成珠穆朗玛峰的高度？</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">折叠次数</th>
<th style="text-align:center">厚度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>1</code></td>
<td style="text-align:center"><code>0.1</code></td>
</tr>
<tr>
<td style="text-align:center"><code>2</code></td>
<td style="text-align:center"><code>0.2</code></td>
</tr>
<tr>
<td style="text-align:center"><code>3</code></td>
<td style="text-align:center"><code>0.4</code></td>
</tr>
<tr>
<td style="text-align:center"><code>4</code></td>
<td style="text-align:center"><code>0.8</code></td>
</tr>
<tr>
<td style="text-align:center"><code>……</code></td>
<td style="text-align:center"><code>……</code></td>
</tr>
</tbody>
</table>
<p>可以发现，纸张初始厚度为 <code>0.1</code> 毫米，而每次折叠之后，折叠后的纸张厚度都是未折叠前的 <code>2</code> 倍。而同时，我们事先是不清楚具体要叠多少次的，所以我们选择 <code>while</code> 来进行循环。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第二关：回文数</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>假设给你一个整数 <code>x</code>，如果这个数是回文数，打印 <code>true</code>，否则打印 <code>false</code>。</p>
<p>回文数：指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>既然回文数的定义是正序和倒序读都是一样，那么我们就把这个数逆转，然后比较逆转的数和原来的数是否相等，如果相等，那么说明这个数是一个回文数，否则它就不是一个回文数。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第三关：求商和余数</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>给定两个整数，分别是被除数和除数，然后在不使用乘法、除法和 <code>%</code> 运算符的情况下，求出商和余数。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>平时如果要求两数的商，那么可以使用 <code>/</code>，而要求两数的余数则可以使用 <code>%</code>。但现在已经规定不能使用这两个运算符，那么就只想另想办法。</p>
<p>我们知道，其实乘除法归根结底还是加减法的简化，所以我们可以利用减法来实现求两数的商和余数。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第四关：逢七必过</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>游戏规则：从任意一个数字开始报数，当要报的数字是包含 <code>7</code> 或 <code>7</code> 的倍数时，都要说：过。</p>
<p>打印出 <code>1 - 100</code> 之间的满足逢七必过规则的数据。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>当一个数是 <code>7</code> 的倍数，那么这个数除以 <code>7</code> 的余数为 <code>0</code>。而如果这个数包含 <code>7</code>，那么这个数的个位或者十位是 <code>7</code>。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第五关：平方根</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>输入一个大于等于 <code>2</code> 的整数，计算并返回这个数的平方根，结果只保留整数部分。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>求一个数的平方根，通过遍历的方式，如果在不大于所给数的范围之内存在一个数的平方等于所给数，那么范围内的这个数就是所给数的平方根。而如果范围内存在一个数的平方刚好大于所给数，那么比这个数小 <code>1</code> 的数一定是所给数的平方根的整数部分，也就是我们所求的结果。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第六关：判断一个数是否为质数</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>从键盘输入一个正整数，判断该数是否为质数。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>所谓质数，就是指这个数只能被 <code>1</code> 和它本身整除，要注意 <code>1</code> 既不是质数也不是合数。</p>
<p>此时通过遍历，如果 <code>1</code> 到它之间存在一个数能被所给数整除，那么说明说给数不是一个质数。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第七关：猜数小游戏</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>系统随机给出一个 <code>1 - 100</code> 之间的整数，然后用程序实现才出这个数字是多少。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>随机数需要用 <code>Random</code> 包，然后就是通过比较输入的数和生成的随机数大小，直到最后猜中。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>以上就是关于流程控制中关于 <code>for</code>、<code>while</code> 的知识测验了，你闯过了几关呢？</p>
<p>最后，文中所有代码已上传到 <code>Gitee</code>，有需要的朋友可以自取。</p>
<blockquote>
<p>传送门：<a href="https://gitee.com/cunyu1943/java-in-practice" target="_blank" rel="noopener noreferrer">https://gitee.com/cunyu1943/java-in-practice</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>static 和 final 小课堂</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20221203-oop-advance.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20221203-oop-advance.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">static 和 final 小课堂</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 学习了面向对象的一些知识点后，在看别人的代码中经常会看到 static 和 final 两个关键字，那你知道它俩都是做什么用的么，使用的时候需要注意啥呢？ 今天的内容就来一起了解下，static 和 final 关键字的使用。</description>
      <category>Java 基础教程</category>
      <pubDate>Sat, 03 Dec 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>学习了面向对象的一些知识点后，在看别人的代码中经常会看到 <code>static</code> 和 <code>final</code> 两个关键字，那你知道它俩都是做什么用的么，使用的时候需要注意啥呢？</p>
<p>今天的内容就来一起了解下，<code>static</code> 和 <code>final</code> 关键字的使用。</p>
<h2> static</h2>
<p>静态的意思，是 <code>Java</code> 中常用的修饰符，既可以用它来修饰成员变量，也可以用它来修饰成员方法。</p>
<h3> 静态变量</h3>
<p>静态变量就是用 <code>static</code> 来修饰的成员变量，最重要的特点就是一个类中的静态变量被类中的所有对象所共享。它不属于任何一个对象，而是属于类。其生命周期同类一样，共生共存，是优先于对象的。</p>
<p>和成员变量不同的是，成员变量只能通过新建对象，然后用对象名来进行调用。而静态变量不仅仅可以用这种方式，还可以直接通过类名来进行调用，而这也是更为推荐的方式。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li><strong>成员变量调用</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>静态变量调用</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 静态方法</h3>
<p>静态方法就是类中用 <code>static</code> 来修饰的成员方法，一般用来修饰公共的工具类或者测试类。</p>
<p>同样的，静态方法既可以用通过新建对象，然后用对象名来调用的方式，也可以直接通过类名来调用的方式，这也是更为推荐的方式。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 注意</h3>
<p>使用 <code>static</code> 修饰方法或变量后，需要注意以下的小细节。</p>
<ul>
<li>一个静态方法中<strong>只能</strong>访问静态变量和其他的静态方法。而不能访问非静态的变量和方法。</li>
<li>但一个非静态方法一方面既可以访问静态变量，也可以访问非静态变量；另一方面，也既可以访问静态方法，也可以访问非静态方法。</li>
<li>不同于成员方法，静态方式中是不存在 <code>this</code> 关键字的。</li>
</ul>
<h3> 静态代码块</h3>
<p>在代码中用 <code>static{}</code> 包裹起来的代码叫做静态代码块，它会随着类的加载而加载，而且会自动触发，只执行一次，一般用来对一些数据初始化。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> final</h2>
<h3> 修饰变量</h3>
<p>用 <code>final</code> 修饰的变量叫做常量，说明它只能被赋值一次。</p>
<p>实际开发中，一般用常量来作为系统的配置信息，一方面既方便维护，另一方面又可以提高代码可读性。</p>
<p>对常量进行命名时，一般遵循以下的规范：</p>
<ul>
<li>如果是单个单词，那么将它全部大写即可。</li>
<li>如果是多个单词，那么将每个单词都大写，并且单词之间用下划线 <code>_</code> 隔开。</li>
</ul>
<p>此外，对于修饰的变量的类型不同，含义也是不一样的。</p>
<p>如果修饰的变量是一个基本类型，那么表示的是该变量存储的<strong>数据值</strong>不可改变。而如果修饰的变量是一个引用类型，则表示该变量存储的<strong>地址值</strong>不能改变，但是对象内部是可以发生变化的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 修饰方法</h3>
<p>说明该方法是最终方法，不能再被重写。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 修饰类</h3>
<p>说明这个类时最终类，不能够再被继承。也就是说，如果一个类被 <code>final</code> 所修饰，那么这个类不能作为其他任意类的福来。如果试图对一个用 <code>final</code> 修饰的类进行继承，则在编译期间可能会发生错误。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>今天的内容到此就结束了，首先介绍了 <code>static</code> 用来修饰符变量和方法的应用场景，还额外补充了静态代码块相关的知识点。另外，我们也对 <code>final</code> 用来修饰变量、方法和类时的场景进行了回顾。</p>
<p>码字不易，如果本文对你所有帮助，那就来个一键三连吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>抽象、接口和内部类</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se/20221211-abstract.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se/20221211-abstract.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">抽象、接口和内部类</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 抽象方法 定义 所谓抽象方法，就是将公共的行为（方法）抽取到一个父类后，由于每个子类中执行的内容是不一致的，所以父类中无法确认具体的方法体，此时就可以将该方法定义为抽象方法。 格式</description>
      <category>Java 基础教程</category>
      <pubDate>Sun, 11 Dec 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 抽象方法</h2>
<h3> 定义</h3>
<p>所谓抽象方法，就是将公共的行为（方法）抽取到一个父类后，由于每个子类中执行的内容是不一致的，所以父类中无法确认具体的方法体，此时就可以将该方法定义为抽象方法。</p>
<h3> 格式</h3>
<p>要定义一个抽象方法，那么需要遵循以下的格式，要注意，抽象方法一般都是没有定义</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下是一个抽象方法定义的具体实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 抽象类</h2>
<h3> 定义</h3>
<p>知道了什么是抽象方法，那么抽象类就很简单了，如果我们发现一个类中存在着抽象方法，那么这个类一定要声明为抽象类。</p>
<h3> 格式</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 注意</h3>
<ol>
<li>抽象类不能实例化。</li>
<li>抽象类中不一定有抽象方法，但有抽象方法的类一定是抽象类。</li>
<li>抽象类中可以有构造方法。</li>
<li>如果一个类的父类是抽象类，那么这个类要么是抽象类，要么重写父类中所有的抽象方法。</li>
</ol>
<h3> 作用</h3>
<p>在抽取共性是，如果无法确定方法体，此时就可以将该方法定义为抽象方法。然后强制让子类按照某种格式重写。</p>
<h2> 接口</h2>
<h3> 定义</h3>
<p>接口是一种规则，是对行为的抽象。</p>
<h3> 格式</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 注意</h3>
<ol>
<li>接口和抽象类一样，不能被实例化。</li>
<li>接口和类之间是实现关系，通过关键字 <code>implements</code> 表示，实现格式为:</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>如果一个类实现了某个接口，那么这个类要么是抽象类，要么就得重写接口中所有的抽象方法。</li>
<li>不同于类单继承的特点，一个类是可以实现多个接口的。</li>
</ol>
<h3> 成员的特点</h3>
<ol>
<li><strong>成员变量</strong></li>
</ol>
<p>接口中，成员变量只能是常量，默认修饰符为 <code>public static final</code>。</p>
<ol start="2">
<li><strong>构造方法</strong></li>
</ol>
<p>接口中不存在构造方法。</p>
<ol start="3">
<li><strong>成员方法</strong></li>
</ol>
<p><code>JDK 7</code> 之前，只能是抽象方法，其默认修饰符为 <code>public abstract</code>。<code>JDK 8</code> 时，能够定义有方法体的方法，<code>JDK 9</code> 中，有带来了可以定义私有方法的特性。</p>
<h3> 默认方法</h3>
<p>自 <code>JDK 8</code> 之后，就允许在接口中定义默认方法，但是需要使用关键字 <code>default</code> 来修饰，从而解决接口升级的问题。</p>
<p>接口中的<strong>默认方法</strong>的定义格式为：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用默认方法时，需要注意：</p>
<ul>
<li>接口中的默认方法不是抽象方法，所以没有要求强制被重写。但如果要重写默认方法，重写时就需要去掉默认方法的关键字 <code>default</code>。</li>
<li>默认方法中的权限空置房 <code>public</code> 可以省略不写，但关键字 <code>default</code> 不能省略。</li>
<li>如果一个类实现了多个接口，而且着多个接口中还存在着重名的默认方法，那么该类就必须对重名的默认方法进行重写。</li>
</ul>
<p>以下是一个存在重名默认方法必须重写的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 静态方法</h3>
<p>除了默认方法，<code>JDK 8</code> 以后还可以在接口中定义静态方法，此时需要用关键字 <code>static</code> 修饰。</p>
<p>接口中<strong>静态方法</strong>的定义格式为：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在接口中使用静态方法时，需要注意：</p>
<ul>
<li>静态方法只能通过接口名调用，不能通过实现接口的类名或者对象名来调用。</li>
<li>权限控制符 <code>public</code> 可以省略，但关键字 <code>static</code> 不能省略。</li>
</ul>
<p>以下是一个在接口中定义静态方法和调用接口中静态方法的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 私有方法</h3>
<p>除了上述的静态方法和默认方法之外，<code>JDK 9</code> 中又引入接口中定义私有方法的特性。</p>
<p>其中，接口中定义私有方法的格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>两者的区别在于：静态的私有方法（带关键字 <code>static</code>）是为接口中的静态方法服务，而非静态的私有方法（不带关键字 <code>static</code>） 则是为接口中的默认方法服务。</p>
<p>以下是在接口中定义私有方法的实例：</p>
<ol>
<li><strong>私有方法</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>静态私有方法</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 接口和类之间的关系</h3>
<ol>
<li><strong>类和类的关系</strong></li>
</ol>
<p>类与类之间只能存在继承关系，且只限于单继承，不能多继承，但是可以多层继承。</p>
<ol start="2">
<li><strong>类和接口的关系</strong></li>
</ol>
<p>类和接口之间是实现关系，既可以单实现，也可以多实现，还能在继承一个类的同时实现多个接口。</p>
<ol start="3">
<li><strong>接口和接口的关系</strong></li>
</ol>
<p>接口之间是继承关系，但不同于类和类之间的关系，接口之间既可以单继承，也可以多继承。</p>
<h2> 内部类</h2>
<h3> 定义</h3>
<p>顾名思义，所谓内部类就是定义在类中的类。比如说在 <code>A</code> 类的内部定义了一个 <code>B</code> 类，那么我们就说 <code>B</code> 是内部类。其中 <code>B</code> 类表示的是 <code>A</code> 类的一部分，而且 <code>B</code> 类单独存在时没有任何意义。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 特点</h3>
<p>如果一个类中定义了一个内部类，那么这个内部类就能够直接访问外部类的所有成员，包括私有成员。</p>
<p>但是，如果一个外部类要访问内部类的成员，那么此时就必须创建对象。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 分类</h3>
<p><code>Java</code> 中，内部类主要分为以下四种：</p>
<ol>
<li><strong>成员内部类</strong></li>
<li><strong>静态内部类</strong></li>
<li><strong>局部内部类</strong></li>
<li><strong>匿名内部类</strong></li>
</ol>
<h4> 成员内部类</h4>
<p>写在成员位置，属于外部类的成员，其中成员内部类也能够被常用的修饰符 <code>public、private、protected、static</code> 等所修饰。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要想获取成员内部类对象，可以通过以下两种方式：</p>
<ol>
<li>在外部类中编写方法，然后对外提供内部类的对象。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>直接创建，创建格式为：<code>外部类名.内部类名 对象名 = 外部类对象.内部类对象</code>。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 静态内部类</h4>
<p>静态内部类就是用关键字 <code>static</code> 修饰的内部类。静态内只能访问外部类中的静态变量和静态方法，如果要访问非静态的变量和方法就需要创建对象。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建静态内部类对象的格式为：<code>外部类名.内部类对象名 = new 外部类名.内部类名();</code></p>
<p>调用非静态方法的格式：先创建对象，然后用对象调用。</p>
<p>调用静态方法的格式：<code>外部类名.内部类名.方法名();</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 局部内部类</h4>
<p>如果一个类被定义在方法中，那么这个类就叫做局部内部类。外界是无法直接使用局部内部类，需要在方法内部创建对象并使用。同时，这个内部类既可以访问外部类的成员，也可以访问方法中的局部变量。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 匿名内部类</h4>
<p>匿名内部类就是没有名字的内部类，也正因为名字，所以匿名内部类只能使用一次。而且使用匿名内部类还有个前提条件：必须继承一个父类或者实现一个接口。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>学生成绩管理系统</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se-in-action/20220301-score-management.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se-in-action/20220301-score-management.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">学生成绩管理系统</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 对于计算机专业的学生来讲，一定对于学生成绩管理系统课程设计十分印象深刻。设计、上机、编码、写报告、答辩等一系列流程，虽然很简单，但也可以综合运用我们所学的一些知识了。 今天就来复习以下这个课题，用 Java SE 来实现该课题，也算是补上当初上课的时候没有好好写的遗憾吧。</description>
      <category>Java 基础实战</category>
      <pubDate>Tue, 01 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>对于计算机专业的学生来讲，一定对于学生成绩管理系统课程设计十分印象深刻。设计、上机、编码、写报告、答辩等一系列流程，虽然很简单，但也可以综合运用我们所学的一些知识了。</p>
<p>今天就来复习以下这个课题，用 Java SE 来实现该课题，也算是补上当初上课的时候没有好好写的遗憾吧。</p>
<p>虽然很简单，但是对于刚涉足编程学习的人来讲，还是有一定难度的，既要考虑界面打印，也要考虑条件判断、循环语句、输入输出控制等等技巧，所以在这里简单地实现一下，方便给初学的小伙伴们一个参考（对于我的界面比较丑的问题，就不要过于纠结了，下去可以自己调整 😂，我们只关注功能实现 🤣）。</p>
<p>对于学生成绩管理系统，主要可以分为如下几个功能：</p>
<ol>
<li>录入学生成绩</li>
<li>统计学生成绩</li>
<li>查找学生成绩</li>
<li>修改学生成绩</li>
<li>删除学生成绩</li>
<li>按平均分排序</li>
<li>显示所有成绩</li>
<li>退出管理系统</li>
</ol>
<p></p>
<p>进入系统之后，我们应该有系统菜单，然后根据提示选择我们所要进行的操作。</p>
<p></p>
<ul>
<li><strong>录入学生成绩</strong></li>
</ul>
<p>该功能是每次录入学生的成绩信息，或者在当前数据的基础上添加录入新的学生成绩信息；</p>
<p></p>
<ul>
<li><strong>统计学生成绩</strong></li>
</ul>
<p>主要是对学生的成绩进行统计，然后输出平均分，并打印出对应信息；</p>
<p></p>
<ul>
<li><strong>查找学生成绩</strong></li>
</ul>
<p>根据输入的学号来查找对应学生的相关成绩信息；</p>
<p></p>
<ul>
<li><strong>修改学生成绩</strong></li>
</ul>
<p>根据输入的学号来对对应学生的成绩进行修改；</p>
<p></p>
<ul>
<li><strong>删除学生成绩</strong></li>
</ul>
<p>根据输入的学生学号，删除对应学生的成绩信息；</p>
<p></p>
<ul>
<li><strong>按平均分排序</strong></li>
</ul>
<p>按照平均分降序排序；</p>
<p></p>
<ul>
<li><strong>显示所有成绩</strong></li>
</ul>
<p>便利所有学生成绩，然后打印出来；</p>
<p></p>
<ul>
<li><strong>退出管理系统</strong></li>
</ul>
<p>退出菜单；</p>
<p></p>
<ul>
<li><strong>注意</strong></li>
</ul>
<p>鉴于大家的留言说经常会报错找不到对应类，所以在这里也给出这个程序的包结构如下图所示。</p>
<p></p>
<h2> 功能设计与实现</h2>
<h3> 主界面</h3>
<p>主要是打印出来系统功能的选择菜单，然后根据我们的输入进入不同的子功能模块；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 主类设计</h3>
<p>系统主要是针对学生成绩信息管理的，所以我们设计一个学生类，包括一系列属性（也就是简单的个人信息和各科成绩）；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 录入学生成绩</h3>
<p>首先录入学号，判断是否可用，不可用则重新输入，可用则输入其他信息；</p>
<p>然后将信息赋值到学生对象，最后将该学生对象加入集合就可以了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 统计学生成绩</h3>
<p>主要实现对于各学生平均成绩的统计，然后打印出信息；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 查找学生成绩</h3>
<p>先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生成绩信息并打印；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 修改学生成绩</h3>
<p>先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生，然后对其成绩信息进行修改，但不修改个人其他信息；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 删除学生成绩</h3>
<p>先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生，然后将其从集合中删除即可；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 按平均分排序</h3>
<p>先判断是否有数据，有数据再进行后续操作。然后对集合中的学生的平均成绩进行排序，然后依次从高到低打印出学生信息；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 显示所有成绩</h3>
<p>先判断是否有数据，有数据再进行后续操作。遍历学生对象集合，然后打印出各个学生的成绩信息。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总程序</h2>
<p>将上述所有模块整合之后，我们得到最终的程序；</p>
<ol>
<li><strong>Manager.java</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>Student.java</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>虽然功能比较简陋，但还是需要一定时间来完成的。此外，本设计只是针对一次运行过程，一旦程序终止，录入的数据就无法保存了，这一点需要注意。后续考虑加入文件写入或者数据库的方式来实现该课程设计，以保存我们所录入的数据。</p>
]]></content:encoded>
    </item>
    <item>
      <title>点菜系统</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se-in-action/20220302-order-system.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se-in-action/20220302-order-system.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">点菜系统</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 继上次写了一个 Java SE 版本的 学生成绩管理系统 之后，发现大家反响还不错，所以今天我有带来了差不多一样的点菜系统，希望利用我们所学的 Java SE 知识，实现我们的点菜系统。</description>
      <category>Java 基础实战</category>
      <pubDate>Wed, 02 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>继上次写了一个 Java SE 版本的 <a href="/JavaPark/md/java/se-in-action/20220301-score-management.html" target="blank">学生成绩管理系统</a> 之后，发现大家反响还不错，所以今天我有带来了差不多一样的点菜系统，希望利用我们所学的 Java SE 知识，实现我们的点菜系统。</p>
<p>而在上次文章的评论中，我也看到了大家的一些建议，可能没有及时回复大家，但是在这次文章中，我会尽量满足大家提的一些好的建议，向着更好的方向前进！</p>
<h2> 需求分析</h2>
<p>此次可以，我们需要设计一个点菜系统，我们就需要对我们的系统进行分析，面向的对象是谁？对象常用的操作又有哪些？</p>
<p>既然是点菜系统，那我们的餐馆一般都是有一个固定的菜单，然后面向的对象一般都是顾客，顾客可以通过这个菜单进行点菜、删除菜，查看已经点过的菜，以及最后用完餐后的结账。</p>
<p>因此，对于点菜系统，主要所需功能如下：</p>
<ol>
<li><strong>初始化菜单</strong></li>
<li><strong>点菜</strong></li>
<li><strong>移除已点的菜</strong></li>
<li><strong>查看已点的菜</strong></li>
<li><strong>结账</strong></li>
<li><strong>退出系统</strong></li>
</ol>
<p></p>
<h2> 功能预览</h2>
<h3> 系统菜单</h3>
<p>进入我们的点菜系统之后，一般都是有系统菜单的，用于提示我们进行下一步的操作。</p>
<p></p>
<h3> 点菜</h3>
<p>根据系统菜单进入点菜功能后，输入菜品序号进行点菜以及返回上一级菜单。</p>
<p></p>
<h3> 查看已点菜品</h3>
<p>假设我们点完菜之后，要确认下有没有点重复的菜，此时就可以查看已点菜品。</p>
<p></p>
<p>当然，上图是我们已经点过菜才会出现菜品，如果我们还没有点过菜，那么系统则会提示还未点菜。</p>
<p></p>
<h3> 删除菜品</h3>
<p>假设我们不小心点了重复的菜，那该怎么办呢？不用担心，我们直接选择删除菜品功能，然后删除对应重复菜品即可。</p>
<p></p>
<p>同样的，加入我们还未点菜就进入删除菜品功能，系统也会给出提示。</p>
<p></p>
<h3> 结账</h3>
<p>当我们用完餐之后，接下来就是结账了。此时只要进入我们的结账选项，系统就会打印出本次所消费的所有金额。</p>
<p></p>
<p>同样的，加入我们还未点菜就进入结账功能，系统也会给出提示。</p>
<p></p>
<h3> 退出系统</h3>
<p>当我们输入选择为 0 时，表示我们退出系统。</p>
<p></p>
<h2> 功能实现</h2>
<h3> 主界面</h3>
<p>系统主界面，主要是打印出功能选择菜单，然后根据我们的输入选择不同的子功能。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 主类设计</h3>
<p>主要涉及的菜品，于是定义一个菜品类，主要包括序号、菜品名、菜品单价三个属性。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 功能接口</h3>
<p>上次的文章中，读者建议我把各个功能独立出接口，然后再实现，所以这里先将各个功能的接口给出来。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 初始化菜单</h3>
<p>一般餐馆都是提供的固定的菜单，所以这里没有给出管理菜单的功能，直接进行初始化后给出各个菜品，将其存入列表中。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 展示菜品列表</h3>
<p>初始化菜单后，把整个菜单展示给顾客看。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 展示已点菜品</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 移除菜品</h3>
<p>找到对应序号对应的菜品，然后将其移除。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结账</h3>
<p>先判断是否点菜，如果没有则提示，若已经点过餐，则直接结账。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总程序</h2>
<p>好了，实现以上各个模块功能之后，将其整合到一起，就得到我们最后的总体程序。</p>
<p>各部分的代码都已经贴出来的，不过为了大家更方便，我这这里给出总程序结构。</p>
<p></p>
<p>所有代码均位于 <code>com.cunyu</code> 包下，然后分别是实体类 <code>Dish</code>、接口类 <code>DishInterface</code> 以及主程序 <code>DishApp</code>。</p>
<h2> 总结</h2>
<p>好了，以上就是我们点菜系统的实现了。如果你对 Java SE 部分的知识掌握较好的话，这一定不是啥难事，毕竟是个十分简单的控制台程序，主要语法熟悉，稍微理理逻辑即可。</p>
<p>好了，今天的内容就到此结束了，如果你有什么好的建议，欢迎留言交流。</p>
<p>最后的最后，贴出本设计的 Github 仓库地址：<a href="https://github.com/cunyu1943/java-in-actions" target="_blank" rel="noopener noreferrer">https://github.com/cunyu1943/java-in-actions</a></p>
<p>有需要的童鞋可以自取，当然了，也希望大家给我一个 ⭐ <strong>star</strong>，满足一下我这个菜鸟的虚荣心呀 ~ ❤️❤️❤️</p>
]]></content:encoded>
    </item>
    <item>
      <title>手撸记账本</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se-in-action/20220303-tally-book.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se-in-action/20220303-tally-book.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">手撸记账本</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 之前已经写过关于 学生成绩管理系统 以及 点菜系统 的文章，大家如果感兴趣，可以点击各自的传送门去看看呀！</description>
      <category>Java 基础实战</category>
      <pubDate>Thu, 03 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>之前已经写过关于 <a href="/JavaPark/md/java/se-in-action/20220301-score-management.html" target="blank">学生成绩管理系统</a> 以及 <a href="/JavaPark/md/java/se-in-action/20220302-order-system.html" target="blank">点菜系统</a> 的文章，大家如果感兴趣，可以点击各自的传送门去看看呀！</p>
<p>接下来开始我们今天的正题，我们日常生活中，想必有很多人都有记账的习惯，那今天，我们就来看看，如何设计并实现一个记账本。</p>
<h2> 需求分析</h2>
<p>打开我们手机里的记账本，可以发现主要提供如下几个功能：</p>
<ol>
<li>
<p><strong>添加账目</strong></p>
</li>
<li>
<p><strong>删除账目</strong></p>
</li>
<li>
<p><strong>修改账目</strong></p>
</li>
<li>
<p><strong>查询账目</strong></p>
</li>
</ol>
<ul>
<li>
<ul>
<li>查询所有账目</li>
<li>按时间区间查询</li>
</ul>
</li>
<li>
<ul>
<li>按账目类型查询</li>
</ul>
</li>
</ul>
<ol>
<li><strong>退出记账本</strong></li>
</ol>
<p></p>
<h2> 功能预览及代码实现</h2>
<h3> 主菜单</h3>
<p>主菜单中，主要用于打印提示我们进行选择，然后根据我们的输入再进入不同的子功能模块中。</p>
<ul>
<li>预览</li>
</ul>
<p></p>
<ul>
<li>代码实现</li>
</ul>
<p>代码实现很简单，只需要打印出提示信息即可，之后后续输入以及进入不同子功能模块，我们可以使用 <code>switch</code> 来进行选择。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 添加账目</h3>
<p>当我们需要添加一笔新的账目时，此时就可以进入 <strong>添加账目</strong> 子模块，这里的功能主要是根据我们自己输入的 ID、类别、账户、类型、金额、时间以及备注将其添加到我们的总账目列表中进行汇总。</p>
<ul>
<li>预览</li>
</ul>
<p></p>
<ul>
<li>代码实现</li>
</ul>
<p>要实现添加功能也很简单，根据我们的输入，我们利用账目类的构造函数创建一个对象，然后将其加入总账目列表当中就可以了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 删除账目</h3>
<p>假如我们的账目要公开给别人看，而自己有的账目又不想让别人看到，咋办呢？很简单！我们只需要将这笔账目干掉即可！这里我们只要输入我们所要删除的账单 ID，然后将其从总账目列表中删除即可。</p>
<ul>
<li>预览</li>
</ul>
<p></p>
<ul>
<li>代码实现</li>
</ul>
<p>要删除我们的账目，只需要根据我们输入的账单 id，找到对应 id 的账目，然后将其删除即可，这里之所以没有使用 <code>remove(index)</code> 的方式，是因为我们的 id 是自己输入的，这其实是不规则的，如果我们使用 <code>remove(index)</code> 的方式，就有可能导致越界的问题。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 修改账目</h3>
<p>我们偷偷拿了私房钱买了猛男必备显卡（RTX 3090）想趁空了打打游戏，遇到老婆查账时，这时候可不能慌，我们只需要把账单偷梁换柱，改换成其他东西就可以，而且此事神不知鬼不觉，美滋滋呀！</p>
<ul>
<li>预览</li>
</ul>
<p></p>
<ul>
<li>代码实现</li>
</ul>
<p>利用代码实现也很简单，找到对应 ID 的账单，然后重新输入账单各个细节进行修改即可！</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 查询账目</h3>
<p>查询账目这里，我们又分为 3 个不同的功能，既可以查看所有账单，也可以根据我们所输入的时间区间进行筛选，最后，还能够根据我们的输入查询出收入和支出的详细情况。</p>
<h4> 查询所有账目</h4>
<ul>
<li>预览</li>
</ul>
<p></p>
<ul>
<li>代码实现</li>
</ul>
<p>查询所有账单很简单，只需要遍历我们总账单列表即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 按时间区间查询</h4>
<ul>
<li>预览</li>
</ul>
<p></p>
<ul>
<li>代码实现</li>
</ul>
<p>按照时间跨度来查询稍微要麻烦一些，这里要处理两个输入，一个是开始时间，一个是结束时间，我们需要将账单的时间和这两个时间进行比较，筛选出介于这两者之间的账单。所以这里要涉及到 <code>Date</code> 类，然后就是如何从总账单列表中过滤出满足时间跨度的账单。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 按类型查询</h4>
<ul>
<li>预览</li>
</ul>
<p></p>
<ul>
<li>代码实现</li>
</ul>
<p>这里按类型查询其实就是在查询所有账单的基础上加上一个限制条件，只要其类型等于我们的输入即可，这里我写了两种筛选的方法。一种是直接使用 <code>if</code> 语句进行过滤，而另一种则是同按时间跨度一样使用集合的 <code>Stream</code> 流来进行过滤。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 退出系统</h3>
<ul>
<li>预览</li>
</ul>
<p></p>
<ul>
<li>代码实现</li>
</ul>
<p>在主菜单中，我们已经设置了一个标志位 <code>flag</code>，当 <code>flag</code> 为 <code>true</code> 时，我们每完成一项功能则循环打印主菜单在控制台中，而如果我们想要退出系统，只需要将标志位 <code>flag</code> 设置为 <code>false</code> 即可，此时不满足 <code>while</code> 循环的条件，所以跳出循环，因此退出系统的关键在于标志位状态的转换。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 整体程序</h2>
<p>将各个子模块功能实现之后，剩下的就是整合工作了，最后得到我们最后的总体程序结构如下，主要代码均位于 <code>com.cunyu</code> 包下，然后分别是：</p>
<ul>
<li>
<p>实体类 <code>Bill</code></p>
</li>
<li>
<p>接口类 <code>IBill</code></p>
</li>
<li>
<p>主程序 <code>MainApp</code></p>
</li>
</ul>
<p></p>
<h2> 总结</h2>
<p>好了，以上就是我们简单的记账本的实现了。实现的功能比较简陋，程序的健壮性也不够强，还有很大的优化空间。大家如果感兴趣或者有优化的地方，欢迎到本设计的 Github 仓库地址：<a href="https://github.com/cunyu1943/java-in-actions" target="_blank" rel="noopener noreferrer">https://github.com/cunyu1943/java-in-actions</a> 提交 issue。当然了，如果你只是需要用来简单的做个示例，也可以自取。</p>
<p>最后，如果本文对大家有用的话，希望给我一个 ⭐ <strong>star</strong>，满足一下我的虚荣心呀 ~ 🙊🙊🙊</p>
]]></content:encoded>
    </item>
    <item>
      <title>MySQL + MyBatis 版学生成绩管理系统</title>
      <link>https://cunyu1943.site/JavaPark/md/java/se-in-action/20220304-mysql-mybatis-score-management.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/se-in-action/20220304-mysql-mybatis-score-management.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">MySQL + MyBatis 版学生成绩管理系统</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 之前写了一篇文章，是关于 Java SE 版本的学生成绩管理系统，发现反响还不错。同时也有不少小伙伴通过评论或者私信的方式问过有没有和数据库交互版本的学生成绩管理系统，然后自己也把这件事儿列入了自己的计划。害，都怪自己懒，所以一直拖到了现在。不过终究是逼迫自己完成了，也算是给私信和评论的小伙伴们一个交代吧。</description>
      <category>Java 基础实战</category>
      <pubDate>Fri, 04 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>之前写了一篇文章，是关于 <a href="https://cunyu1943.github.io/posts/cc1bbc33/" title="Java SE 版本的学生成绩管理系统" target="_blank" rel="noopener noreferrer">Java SE 版本的学生成绩管理系统</a>，发现反响还不错。同时也有不少小伙伴通过评论或者私信的方式问过有没有和数据库交互版本的学生成绩管理系统，然后自己也把这件事儿列入了自己的计划。害，都怪自己懒，所以一直拖到了现在。不过终究是逼迫自己完成了，也算是给私信和评论的小伙伴们一个交代吧。</p>
<p>同样的，本次和数据交互版本的学生成绩管理系统具有增删改查成绩等功能。不过相比于之前 SE 版本的功能做了点精简，少了两个小的功能点。因此此次版本的学生成绩管理系统主要分为如下功能：</p>
<ol>
<li><strong>录入学生成绩</strong></li>
<li><strong>查询单个学生成绩</strong></li>
<li><strong>查询所有学生成绩</strong></li>
<li><strong>更新学生成绩</strong></li>
<li><strong>删除学生成绩</strong></li>
<li><strong>退出管理系统</strong></li>
</ol>
<p></p>
<h2> 系统演示</h2>
<ol>
<li><strong>主菜单</strong></li>
</ol>
<p>将我们的系统运行起来之后，应该有对应的系统菜单，然后可以根据我们的输入进行不同的操作。</p>
<p></p>
<ol start="2">
<li><strong>录入学生成绩</strong></li>
</ol>
<p>进入录入学习成绩菜单后，会提示我们依次录入学号、年级、姓名、高数、英语、体育、Java、C++、政治、算法等科目的成绩，录入成功后进行下一次功能选择。</p>
<p></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ac9e88ea870cb767ad3c2a6bf1524a92.png" alt="录入成绩结果"></p>
<ol start="3">
<li><strong>查找单个学生成绩</strong></li>
</ol>
<p>该功能主要通过我们所输入的学生学号，然后查询对应学号学生的成绩，如果查到则进行打印，如果没查到就进行提示。但无论是查询到成绩与否，都会进入下一次的功能选择。</p>
<p></p>
<ol start="4">
<li><strong>查询所有学生成绩</strong></li>
</ol>
<p>该功能可以查询当前数据库中的所有成绩，无论是否查询到成绩与否，都将进入下一次的功能选择。</p>
<p></p>
<p></p>
<ol start="5">
<li><strong>更新学生成绩</strong></li>
</ol>
<p>该功能通过输入对应学号，然后如果找到对应学号的学生，则重新依次输入各科成绩，然后对数据库中的成绩进行更新。如果没有找到对应学号的学生，则进行提示。</p>
<p></p>
<p></p>
<ol start="6">
<li><strong>删除学生成绩</strong></li>
</ol>
<p>该功能通过对应学号，然后删除对应学号的学生成绩，如果没有对应学号的学生，则进行提示。</p>
<p></p>
<p></p>
<h2> 功能设计与实现</h2>
<p>与 SE 项目不同的是，本系统需要与数据库进行交互，所以这里选择使用 MyBatis 作为数据库交互框架。接下来我就对本系统的搭建过程做一个记录，留给有需要的小伙伴。</p>
<h3> 环境搭建</h3>
<p>本项目主要采用 Maven 来构造，而 IDE 则用的是最新版的 IntelliJ IDEA。所以首要工作就是搭建一个 Maven 工程，因为之前我已经写过相关的文章了，所以这里就不再啰嗦了，如果你还对创建 Maven 工程不太熟悉，可以参考：👉 <a href="https://cunyu1943.github.io/JavaPark/md/java/maven/20220104-maven-project-with-idea" target="_blank" rel="noopener noreferrer">如何使用 IDEA 创建 Maven 项目</a>。</p>
<h3> POM 文件</h3>
<p>要实现本项目，主要需要以下依赖，所以我们需要在项目的 <code>pom.xml</code> 文件引入对应依赖。</p>
<ul>
<li><strong>MyBatis</strong></li>
<li><strong>Lombok</strong></li>
<li><strong>MySQL 驱动</strong></li>
</ul>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里你可能对 Lombok 比较陌生，它主要是为了简化我们的代码而使用，所以也推荐大家了解下。对于 Lombok 的简单使用，我之前特意写了一篇相关文章，如果有感兴趣的小伙伴，可以去了解一下。传送门 👇：</p>
<blockquote>
<p><a href="https://cunyu1943.github.io/JavaPark/md/java/se/20220719-lombok-install-and-usage" target="_blank" rel="noopener noreferrer">Lombok 安装及使用指南</a></p>
</blockquote>
<h3> 数据库准备</h3>
<p>既然要把数据存入数据库，那肯定得准备下数据库。关于数据库的安装以及环境搭建，可以去网上找个教程看一下，我这里的话只提供创建表的数据脚本。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> MyBatis 配置</h3>
<p>既然要使用 MyBatis，那肯定少不了对它配置一番。这里呢，主要需要配置 MyBatis 的核心配置文件以及设置一个工具类。然后添加对数据库进行增删改查的接口，方便后边使用。如果你对 MyBatis 不是很熟悉，建议先去了解下，关于更多 MyBatis 的使用方法，可以参考我之前写的一些文章：<a href="https://cunyu1943.github.io/MyBatis-%E4%B8%93%E6%A0%8F/" title="MyBatis 专栏" target="_blank" rel="noopener noreferrer">MyBatis 专栏</a>。</p>
<ol>
<li><strong>MyBatis 配置文件</strong></li>
</ol>
<p>在项目的 <code>main/resources</code> 文件夹下创建一个文件，命名为 <code>mybatis-config.xml</code>，在这里主要是配置数据库连接。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>MyBatis 工具类</strong></li>
</ol>
<p>为了方便后续各个方法的调用，推荐大家先配置一个 MyBatis 的工具类，免去一些重复建立连接操作。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>
<h3> <strong>设计接口</strong></h3>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li><strong>映射 SQL 文件</strong></li>
</ol>
<p>记得上面 MyBatis 配置中的 XML 存放路径么，那就是我们用来映射 SQL 的文件。一般我们是在 <code>resource</code> 下新建一个 <code>mapper</code> 目录，然后在 <code>mapper</code> 目录中创建用于映射接口的 SQL 文件。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 主类设计</h3>
<p>系统主要是针对学生成绩信息管理，所以主要涉及的是一个学生类。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 主界面</h3>
<p>主界面主要是打印出系统功能菜单，然后根据我们的指令进入不同的子功能模块。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 录入学生成绩</h3>
<p>首先录入学号，判断是否可用，不可用则重新输入，可用则继续输入后续其他信息。</p>
<p>然后将信息赋值到学生对象，最后将该学生对象插入数据库就可以了。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 查询单个学生成绩</h3>
<p>先判断数据库中是否有数据，有数据则进行后续操作。通过对输入的学号进行查询，从数据库中找到对应学号的学生成绩。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 查询所有学生成绩</h3>
<p>先判断是否有数据，有数据再进行后续操作。从数据库中查询所有数据，接着打印各个学生的成绩信息即可。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 修改学生成绩</h3>
<p>先判断是否有数据，有数据再进行后续操作。通过对输入的学号进行匹配，找到对应学号的学生，然后对其成绩信息进行修改，但不修改个人其他信息。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 删除学生成绩</h3>
<p>先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生，然后将其从数据库中删除即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>以上就是关于本次数据库版本学生成绩管理系统的相关设计的所有内容了，相信读到这里的小伙伴应该也能够顺利完成本次的课程设计了。如果还是对其中的一些细节不理解，欢迎评论或者关注私信我。</p>
<h2> 代码实例</h2>
<p>最后，关于本文示例的代码，我已经上传到了 GitCode ，需要的小伙伴可以自取！</p>
<blockquote>
<p>🏳️‍🌈 传送门：<a href="https://gitcode.net/github_39655029/java-learning-demos" target="_blank" rel="noopener noreferrer">https://gitcode.net/github_39655029/java-learning-demos</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>简介</title>
      <link>https://cunyu1943.site/JavaPark/md/java/spring/20220201-spring-intro.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/spring/20220201-spring-intro.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">简介</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 为了解决我们开发者在 J2EE 开发时所遇到的众多问题，Rob Johnson 等人发起了 Spring 框架项目。Spring 是一个开源的 J2EE 应用程序框架，是针对 Bean 的生命周期进行管理的轻量级容器。它既可以单独用于构建程序，也能和当前众多的 Web 框架进行组合使用，能够十分方便的降低当前企业应用开发的复杂性。既然 Spring 如此强大，那我们今天就来探究一下 Spring 的内容。</description>
      <category>Spring 教程</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>为了解决我们开发者在 J2EE 开发时所遇到的众多问题，Rob Johnson 等人发起了 Spring 框架项目。Spring 是一个开源的 J2EE 应用程序框架，是针对 Bean 的生命周期进行管理的轻量级容器。它既可以单独用于构建程序，也能和当前众多的 Web 框架进行组合使用，能够十分方便的降低当前企业应用开发的复杂性。既然 Spring 如此强大，那我们今天就来探究一下 Spring 的内容。</p>
<h2> Spring 概览</h2>
<p>Spring 其实是一个很大的范围概称，包含着许多分支，在正式了解 Spring 之前，我们先来看看 Spring 家族中的主要分支。</p>
<h3> Spring FrameWok</h3>
<p>Spring 领域中其他一切的基础，提供了 <strong>核心容器和依赖注入框架</strong>，还提供了一些基本数据持久性支持，特别是基于模板的 JDBC 文件。</p>
<h3> Spring Boot</h3>
<p>Spring Boot 不仅提供了 <strong>启动依赖和自动配置</strong>，还提供了如下的其他特性：</p>
<ol>
<li>
<p>Actuator 提供了对应用程序内部工作方式的运行时监控，包括端点、线程 dump 信息、应用程序健康状况和应用程序可用的环境属性。</p>
</li>
<li>
<p>灵活的环境属性规范。</p>
</li>
<li>
<p>核心框架的辅助测试之外的额外测试支持。</p>
</li>
</ol>
<h3> Spring Data</h3>
<p>将应用程序的数据存储库抽象为简单的 Java 接口，同时当定义方法用于驱动数据进行存储和检索的问题时，对方法使用了命名约定。此外还能处理几种不同类型的数据库，包括包括关系型（JPA）、文档型（Mongo）、图型（Neo4j）等。</p>
<h3> Spring Security</h3>
<p>Spring Security 解决了广泛的应用程序安全性需求，包括身份验证、授权和 API 安全性等一系列工作。</p>
<h3> Spring Integration 和 Spring Batch</h3>
<p>Spring Integration 解决了实时集成，即数据在可用时进行处理。相反，Spring Batch 解决了批量集成的问题，允许在一段时间内收集数据，直到某个触发器（可能是一个时间触发器）发出信号，表示该处理一批数据。</p>
<h3> Spring Cloud</h3>
<p>Spring Cloud 是一组用 Spring 开发云本地应用程序的项目。</p>
<p>Spring 是为了减少 EJB 的复杂性而创建的一套解决方案，而 EJB 过于臃肿，使用 Spring 能够让 Java Bean 之间进行有效的解耦。而且 Spring 不仅仅局限于服务端的开发，在测试性和松耦合方面均有较好表现。</p>
<h2> 什么是 Spring</h2>
<h3> Spring 简介</h3>
<p>我们日常所说的 Spring，实际上指的是 Spring Framework，属于 Spring 家族的一个分支。</p>
<p>Spring 的核心是一个 <strong>容器</strong>，常称为 <strong>Spring 应用程序上下文</strong>，用于创建和管理应用程序组件。组件（或 Bean）在 Spring 应用程序上下文中连接在一起互相构成一个完整的应用程序。</p>
<p>那么是如何将各种 Bean 连接在一起呢？这就是 Spring 中最重要的特性之一：<strong>依赖注入（DI）</strong>。</p>
<p><strong>依赖注入（DI）</strong>：通过依赖注入的应用程序 <strong>不是</strong> 由组件自身创建和维护其所依赖的其他 Bean 的生命周期，<strong>而是依赖于单独的实体（容器）来创建和维护所有组件，并将这些组件注入需要他们的 Bean，通常是通过构造函数或属性访问器方法来完成</strong>。</p>
<h3> Spring 的特点</h3>
<ul>
<li>
<p>方便解耦，简化开发过程；</p>
</li>
<li>
<p>支持面向切面编程（Aop），方便我们不用修改源码就能对功能进行增强；</p>
</li>
<li>
<p>整合支持 Junit，方便程序的测试；</p>
</li>
<li>
<p>既可以独立构建程序，也支持各种框架，而且大大降低各种框架使用难度；</p>
</li>
<li>
<p>支持事务管理，方便进行事物操作；</p>
</li>
<li>
<p>降低了各种 API 的开发难度；</p>
</li>
</ul>
<h3> Spring 的组成</h3>
<p></p>
<p>Spring 是一个分层架构，主要由如下 7 大模块所构成。Spring 模块位于核心容器，定义了创建、配置和管理 Bean 的方式。</p>
<ol>
<li>
<p><strong>Spring Core</strong>：提供 Spring 框架基本功能，主要组件是 BeanFactory，是工厂模式的实现，通过 IOC 机制将应用程序的配置和依赖性规范与实际的应用程序代码分开。</p>
</li>
<li>
<p><strong>Spring Context</strong>：一个配置文件，给 Spring 框架提供上下文信息，上下文包括 JNDI、EJB、电子邮件、国际化、校验和调度等企业服务。</p>
</li>
<li>
<p><strong>Spring AOP</strong> ：通过配置管理特性，Spring AOP 直接将 AOP（面向切面）功能集成到 Spring 框架。从而我们能够十分方便的使用 Spring 框架来管理任何支持 AOP 的对象。模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用该组件，可以不依赖其他组件九江声明性事务管理集成到应用程序中。</p>
</li>
<li>
<p><strong>Spring DAO</strong>：JDBC DAO 抽象层提供了有意义的异常层次结构，可以用来管理异常处理和不同数据库供应商抛出的错误信息。异常层次结构简化了错误处理，而且极大降低了需要编写的异常代码数量。Spring DAO 面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</p>
</li>
<li>
<p><strong>Spring ORM</strong>：Spring 框架中插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map，这些都遵从 Spring 的通用事务和 DAO 异常层次结构；</p>
</li>
<li>
<p><strong>Spring Web</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文，所以 Spring 框架支持与 Jakarta Structs 的集成。同时该模块还简化了处理多部分请求以及请求参数绑定到域对象的工作。</p>
</li>
<li>
<p><strong>Spring Web MVC</strong>：MVC 是一个全功能的构建 Web 应用的 MVC 实现，可以通过策略接口对 MVC 框架实现高度可配置。而且 MVC 还容纳了 JSP、Velocity、Tiles 等视图技术。</p>
</li>
</ol>
<p></p>
<h3> XML 配置 VS Java 配置</h3>
<p>对于之前的版本，Spring 容器将各个组件连接起来的方式是通过 XML 配置，但现在的版本中更多的是使用基于 Java 的配置，如下面基于 XML 的配置等效于基于 Java 的配置。</p>
<ul>
<li>基于 XML 配置</li>
</ul>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>基于 Java 配置</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在基于 Java 的配置中，<code>@Configuration</code> 向 Spring 表明该类是一个配置类，为 Spring 应用程序上下文提供 Bean。而 <code>@Bean</code> 注解则指示类方法返回的对象应作为 Beans 添加到应用程序上下文中。</p>
<p>那你可能想，既然之前有了 XML 配置的方式，那么为什么后来的版本中又加入了基于 Java 的配置方式呢？基于 Java 的配置方式相比于 XML 的配置方式，<strong>包含了更高的类型安全性和更高的可重构性</strong>。而且仅当 Spring 无法自动配置组件时，才需要通过 <strong>XML 的配置方式</strong> 或者 <strong>基于 Java 的配置方式</strong> 来进行显式配置。</p>
<p><strong>自动配置</strong> 即 <strong>自动装配 + 组件扫描</strong>。有赖于 <strong>组件扫描</strong>，Spring 能 <strong>自动从应用程序的类路径中发现组件，同时将其创建为 Spring 应用程序上下文中的 Bean</strong>。而通过 <strong>自动装配，Spring 将自动将组件与其所依赖的其他 Bean 一起注入</strong>。</p>
<p>最近随着 Spring Boot 的推出，自动配置的优势进一步加强，在这种配置中，Spring Boot 将根据 <strong>类路径中的条目、环境变量和其他因素，合理猜测所需配置的组件，将其连接在一起</strong>。Spring Boot 中的自动配置大大减少了构建应用程序所需的显式配置的数量，增强了 Spring 开发的能力。</p>
<h2> 初始化 Spring 应用程序</h2>
<h3> 项目结构</h3>
<p>对于一个 Spring 项目而言，其结构主要包括以下部分：</p>
<ol>
<li><code>src/main/java</code>：该目录主要包含应用程序的源码，主要可分为如下几类：</li>
</ol>
<ul>
<li>
<ul>
<li><code>build</code> ：工程启动类；</li>
<li><code>entity</code> ：实体类；</li>
</ul>
</li>
<li>
<ul>
<li><code>mapper</code> ：数据访问层；</li>
<li><code>service</code> ：数据服务层，业务类代码；</li>
</ul>
</li>
<li>
<ul>
<li><code>controller</code> ：前端访问控制器；</li>
<li><code>config</code> ：配置信息类；</li>
</ul>
</li>
<li>
<ul>
<li><code>dto</code>：数据传输层；</li>
<li><code>utils</code> ：工具类；</li>
</ul>
</li>
<li>
<ul>
<li><code>constant</code> ：常用接口类；</li>
<li><code>vo</code> ：数据传输类；</li>
</ul>
</li>
<li>
<ul>
<li><code>Application.java</code>：项目的启动类；</li>
</ul>
</li>
</ul>
<ol>
<li>
<p><code>src/main/resources</code>：相关资源文件；</p>
</li>
<li>
<p><code>src/test/java</code>：测试相关代码；</p>
</li>
<li>
<p><code>src/test/resources</code>：测试相关资源；</p>
</li>
<li>
<p><code>pom.xml</code>：Maven 构建规范，包含一些项目及依赖方面的配置。</p>
</li>
</ol>
<h3> 项目启动类</h3>
<p>项目启动类，即运行 jar 文件时用来引导应用程序执行的类，也就是项目结构中的 <code>Application.java</code>，下面是一个项目启动类的实例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>@SpringBootApplication</code> 注解说明该类是一个 Spring 引导应用程序，但实际上它是组合了下列三个注解的复合应用注解：</p>
<ul>
<li>
<p><code>@SpringBootConfiguration</code>：<strong>指定该类为配置类</strong>。</p>
</li>
<li>
<p><code>@EnableAutoConfiguration</code>：<strong>启用 Spring 自动配置</strong>。</p>
</li>
<li>
<p><code>@ComponentScan</code>：<strong>启用组件扫描</strong>。允许声明其他带有 <code>@Component</code>、<code>@Controller</code>、<code>@Service</code> 等注解的类，以便让 Spring 自动发现他们并将他们注册为 Spring 应用程序上下文中的组件。</p>
</li>
</ul>
<h2> 总结</h2>
<p>OK，总结一下今天的内容，主要讲了：</p>
<ol>
<li>
<p>Spring 家族成员的内容；</p>
</li>
<li>
<p>Spring 的概念</p>
</li>
<li>
<p>Spring 的特点</p>
</li>
<li>
<p>Spring 的组成</p>
</li>
<li>
<p>配置 Spring 的两种方式</p>
</li>
<li>
<p>一个 Spring 项目常见的项目结构</p>
</li>
</ol>
<p>好了，以上就是今天的所有内容了。原创不易，如果你觉得我的内容对你有所帮助，那就帮忙点赞关注吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>IoC 简介及入门实例</title>
      <link>https://cunyu1943.site/JavaPark/md/java/spring/20220202-ioc.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/spring/20220202-ioc.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">IoC 简介及入门实例</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 IoC IoC（Inversion of Control），中文名又叫做控制反转。 针对当前书写代码时耦合度偏高的现状，大牛们提出了对应的解决方案。那就是在使用对象时，不要再通过主动使用 new 来创建对象，而是转变为由外部来提供对象。而这种将对象的创建控制权从程序转移到外部的思想就叫做控制反转。</description>
      <category>Spring 教程</category>
      <pubDate>Wed, 02 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> IoC</h2>
<p>IoC（<code>Inversion of Control</code>），中文名又叫做控制反转。</p>
<p>针对当前书写代码时耦合度偏高的现状，大牛们提出了对应的解决方案。那就是在使用对象时，不要再通过主动使用 <code>new</code> 来创建对象，而是转变为由外部来提供对象。而这种将对象的创建控制权从程序转移到<strong>外部</strong>的思想就叫做<strong>控制反转</strong>。</p>
<p>总结来说，IoC 就是指在使用对象时由主动 <code>new</code> 创建对象的方式转换为由外部提供，这个过程中对象的创建控制权由程序转移到了外部，这个思想就叫做控制反转。而 Spring 实现了 IoC 思想，它提供了一个容器用来充当 IoC 思想中的外部，而我们将这个容器称为 IoC 容器。</p>
<p>IoC 容器专门负责对象创建、初始化等一系列工作，而这些由 IoC 容器所管理的对象我们统称为 <code>Bean</code>。</p>
<h2> DI</h2>
<p>DI（<code>Dependency Injection</code>），中文名又叫做依赖注入。</p>
<p>IoC 容器虽然负责了创建和初始化对象等一系列工作，但实际上不同的对象之间或多或少存在着依赖关系，这个问题 IoC 是解决不了的，因此才有了 DI 的提出。依赖注入实现了容器中 Bean 与 Bean 之间依赖关系的建立。</p>
<h2> 入门案例</h2>
<p>接下来我们来看看 IoC 的一个入门实例。</p>
<p>首先，我们创建一个 Maven 项目，如果不太熟悉如何创建，可以参考我之前的一篇教程 -&gt; <a href="https://cunyu1943.github.io/JavaPark/md/java/maven/20220104-maven-project-with-idea" target="_blank" rel="noopener noreferrer">使用 IDEA 创建 Maven 项目</a></p>
<p>接着我们分别创建 DAO 层和 Service 层接口，并实现其接口，最后则是在主程序入口中调用，创建后的项目结构如下：</p>
<p></p>
<ul>
<li><strong>DAO 层</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>Service 层</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 传统方式</h3>
<p>我们先以传统的方式，通过手动创建对象的方式。通过创建一个 <code>BookService</code> 对象，调用接口后打印结果如下。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> IoC 方式</h3>
<p>以上还是通过我们手动创建对象的方式，接下来看看利用 IoC 的方式。</p>
<p>首先，要使用 IoC 的特性，我们需要在项目的 <code>pom.xml</code> 中引入 Spring 的依赖。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们创建配置文件，告知 IoC 容器需要管理的对象。</p>
<p>在 <code>resource</code> 目录下创建 Spring 配置文件 <code>applicationContext.xml</code>，然后配置需要管理的 <code>BookService</code> 和 <code>BookDao</code> 对象。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们创建一个主程序入口，通过从配置文件中获取对象，然后调用对应方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> DI 方式</h3>
<p>之前的方式有一点不知道有没有注意，那就是在 Service 层中，无论是使用传统方式还是 IoC 的方式，我们都是通过手动创建的 <code>BookDao</code> 的对象，那有没有什么方式让我们不用通过手动创建 <code>BookDao</code> 对象的呢？答案是：有的，那就是 DI。接下来我们就来看看基于依赖注入的方式，来解决 <code>BookDao</code> 和 <code>BookService</code> 之间的依赖关系。</p>
<p>DAO 层中的代码我们依旧保持不变，主要修改 Service 中的代码，去掉通过 <code>new</code> 方式来创建对象，修改后 Service 层 的代码如下。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 Spring 配置文件 <code>applicationContext</code> 中配置 <code>BookDao</code> 和 <code>BookService</code> 的关系。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，用 IoC 方式中同样的方式，在主程序入口获取配置文件，然后获取对象调用接口即可。</p>
<p></p>
<h2> 总结</h2>
<p>本文主要讲了 IoC 和 DI 的定义，然后对比了传统方式、IoC 方式和 DI 方式用来管理对象，而且最终三者的结果都是一样的，但其中还是有一点的区别。通过引入 Spring 中的 IoC 和 DI 特性，我们只需要配置相关配置即可，而不用再去通过 <code>new</code> 手动创建对象以及管理 Bean 之间的依赖关系。</p>
<p>最后，关于本文的示例代码，我已经上传到远程仓库，有需要的小伙伴可以自取。</p>
<blockquote>
<p><a href="https://github.com/cunyu1943/java-learning-demos/tree/main/spring-ioc-demo" target="_blank" rel="noopener noreferrer">Spring-IoC-Demo</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title></title>
      <link>https://cunyu1943.site/JavaPark/md/java/spring/20220203-di.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/spring/20220203-di.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml"></source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 依赖注入的方式 如果要想一个类中传递数据，我们常用的可以通过构造方法来传递，而另一种就是常用的 getter\setter 方法。 之前说过依赖注入描述了容器中 Bean 和 Bean 之间的依赖关系，但如果 Bean 在运行中书需要的不是对象，而是其他类型的数据比如数字或者字符串呢？</description>
      <pubDate>Fri, 10 Mar 2023 06:19:45 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 依赖注入的方式</h2>
<p>如果要想一个类中传递数据，我们常用的可以通过构造方法来传递，而另一种就是常用的 <code>getter\setter</code> 方法。</p>
<p>之前说过依赖注入描述了容器中 Bean 和 Bean 之间的依赖关系，但如果 Bean 在运行中书需要的不是对象，而是其他类型的数据比如数字或者字符串呢？</p>
<p>因此，依赖注入也提供了其他类型数据的注入方式，这里同样可以分为 <code>setter</code> 注入和构造器注入的方式。</p>
<h2> setter 注入</h2>
<p>首先是引用类型的注入。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着在 Spring 配置文件 <code>applicationContext.xml</code> 中，使用 <code>property</code> 标签的 <code>ref</code> 属性注意引用类型的对象即可。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>3 种创建项目的方式</title>
      <link>https://cunyu1943.site/JavaPark/md/java/spring/20220204-the-methods-to-create-spring-project.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/spring/20220204-the-methods-to-create-spring-project.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">3 种创建项目的方式</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 上一篇文章中我们讲了 Spring 的相关简介，那么这一节我们就来看看，如何使用 Spring 来创建一个最简单的 HelloWorld 入门实例。等到我们上手之后，再去研究一下 Spring 的一些核心原理及配置。</description>
      <category>Spring 教程</category>
      <pubDate>Fri, 04 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>上一篇文章中我们讲了 Spring 的相关简介，那么这一节我们就来看看，如何使用 Spring 来创建一个最简单的 <code>HelloWorld</code> 入门实例。等到我们上手之后，再去研究一下 Spring 的一些核心原理及配置。</p>
<h2> 创建 Spring 实例的各种方式</h2>
<p>创建 Spring 项目的方式有很多种，最原始可以通过导包来创建，但在这里我们就直接用 Maven 来进行依赖管理，省去各种导包过程。如果你对 Maven 还不够熟悉，那么推荐你先去看看 Maven 的相关内容，我这里之前也写了 Maven 的相关文章。</p>
<h3> Maven 创建</h3>
<ol>
<li>新建 Maven 项目；</li>
</ol>
<p></p>
<ol start="2">
<li>填写项目名及 Maven 坐标相关配置；</li>
</ol>
<p></p>
<ol start="3">
<li>点击 <code>Finish</code> 后完成项目构建，构建后的项目目录结构如下；</li>
</ol>
<p></p>
<ol start="4">
<li>接下来我们就是在 <code>pom.xml</code> 中添加 Spring 的相关依赖，这里主要导入 Spring 的四个核心依赖包 <code>Beans</code>、<code>Context</code>、<code>Core</code>、<code>Expression</code>。</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li>创建一个普通类，然后类中创建一个普通方法；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6">
<li>创建 Spring 配置文件，用于配置创建的对象；</li>
</ol>
<p>Spring 配置文件一般是一个 <code>xml</code> 文件，其名字可以有我们自定义。但是要注意它的存放位置，一般是位于 <code>resources</code> 目录下，如果放在其他位置，有可能出现报错。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7">
<li>建立测试类进行测试；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> Spring Initializer 创建</h3>
<ol>
<li>新建项目时选择 <code>Spring Initializer</code> ，并填下 Maven 坐标相关信息；</li>
</ol>
<p></p>
<ol start="2">
<li>这里其实严格上说是一个 SpringBoot 项目，而不是 Spring 项目，但用于 Spring 项目也可以，直接 <code>Finish</code>；</li>
</ol>
<p></p>
<ol start="3">
<li>同样的，我们创建实体类 <code>Hero</code></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>然后同样在 <code>resources</code> 目录下新建 Spring 配置文件 <code>ApplicationContent.xml</code>；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li>编写测试类进行测试；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="6">
<li><strong>注意</strong></li>
</ol>
<p>通过这种方式创建的 <code>pom.xml</code> 文件如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比通过 Maven 创建的方式，这里所添加的依赖有所不同。这是因为这种方式实际上创建的是 SpringBoot 项目，而 SpringBoot 的依赖和 Spring 有所不同，但 SpringBoot 能够实现 Spring 所具有的功能，所以这里不用再去重复添加 Spring 的相关依赖。</p>
<h3> 在线创建</h3>
<p>这种方式其实和 Spring Initializer 创建的方式一样，只不过它是以网页在线的方式，然后再导入导出 IDEA 中进行后续操作。</p>
<ol>
<li>打开 <a href="https://start.spring.io/" target="_blank" rel="noopener noreferrer">https://start.spring.io/</a> 来生成项目；</li>
</ol>
<p></p>
<ol start="2">
<li>然后点击左下角生成按钮或使用快捷键 <code>Ctrl + Enter</code> 生成；</li>
<li>将压缩包下载后，解压缩后用自己喜欢的 IDE 开发即可；</li>
</ol>
<p></p>
<p>假如我们导入到 IDEA，那么接下来的步骤就是同上一种方式相同，接着就是创建实体类、配置 Spring 相关配置，最后测试类测试即可。</p>
<h2> 总结</h2>
<p>好了，以上就是今天的所有内容了，主要介绍了 3 种创建 Spring 实例的方式。当然，你也可以去把 Spring 相关的依赖包进行下载后，然后导入包的方式进行项目创建，但这里更加推荐使用 Maven 的方式，方便快捷。</p>
<p>最后，原创不易，如果你觉得文章的内容对你有所帮助，那就点赞关注吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>Bean 详解</title>
      <link>https://cunyu1943.site/JavaPark/md/java/spring/20220205-bean.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/spring/20220205-bean.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">Bean 详解</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 Bean 的别名配置 接着上一篇文章中的 &amp;lt;bean&amp;gt; 配置，其中配置了 id 属性，通过 id 属性我们就可以获取到对象。其实 &amp;lt;bean&amp;gt; 配置也提供了 name 属性，它是用于定义 Bean 的别名，一个 Bean 的别名是可以有多个的，各个别名之间可以通过逗号（,）、分号（;）、空格（``）分隔。</description>
      <category>Spring 教程</category>
      <pubDate>Sat, 05 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> Bean 的别名配置</h2>
<p>接着上一篇文章中的 <code>&lt;bean&gt;</code> 配置，其中配置了 <code>id</code> 属性，通过 <code>id</code> 属性我们就可以获取到对象。其实 <code>&lt;bean&gt;</code> 配置也提供了 <code>name</code> 属性，它是用于定义 Bean 的别名，一个 Bean 的别名是可以有多个的，各个别名之间可以通过逗号（<code>,</code>）、分号（<code>;</code>）、空格（``）分隔。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们要获取 Bean 时，既可以通过 <code>id</code>，也可以通过 <code>name</code> 获取。两者的区别在于 <code>id</code> 属性是惟一的，而 <code>name</code> 不是，因此在配置时，更加推荐使用 <code>id</code> 而非 <code>name</code> 防止因为重名而导致在获取 Bean 时混淆。</p>
<p>通过 <code>id</code> 或者 <code>name</code> 获取 Bean 时，如果获取不到，此时程序将抛出异常 <code>NoSuchBeanDefinitionException</code>。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一旦遇到以上错误，那么第一反应应该是是去 Spring 配置文件 <code>applicationContext.xml</code> 中查看对应 Bean 是否配置，或者在代码和配置中的 Bean 名是否匹配一致。</p>
<h2> Bean 的作用范围</h2>
<p>Bean 既然是一个对象，那么它也是有作用范围的。在 <code>&lt;bean&gt;</code> 配置时我们可以利用 <code>scope</code> 属性。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>singleton</code></td>
<td>单例，也是 Bean 磨人的作用范围</td>
</tr>
<tr>
<td><code>prototype</code></td>
<td>非单例</td>
</tr>
</tbody>
</table>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上两种配置的效果是一致的，因为 Bean 默认的作用范围是 <code>singleton</code>。接着我们创建两个 <code>BookService</code> 对象，然后打印出来，可以看到它们指向的是同一块内存。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>而如果我们将 Bean 的 <code>scope</code> 配置为 <code>prototype</code>，那么此时再创建两个 <code>BookService</code> 对象，然后对比它们的内存地址，会发现两者指向的并非指向同一块内存。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> Bean 实例化</h2>
<h3> 构造方法</h3>
<p>Bean 的本质是对象，所以可以使用构造方法完成。</p>
<p>同样基于上一篇文章中的实例，配置好 <code>&lt;bean&gt;</code> 之后，然后在 <code>BookDao</code> 接口的实现中用构造方法来创建 Bean，最后在主程序入口中获取 Bean 之后调用方法，可以发现调用了构造方法。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 静态工厂方法</h3>
<p>利用静态工厂方法对 Bean 进行实例化时，首先需要创建一个工厂类，并在工厂类中创建一个静态方法用于创建对象。然后在 Spring 的配置文件 <code>applicationContext.xml</code> 中配置静态工厂类并指定其中的方法，最后在主程序入口中获取 Bean 并调用方法即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 实例工厂对象方法</h3>
<p>假设有一个接口和它的实现如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们创建一个实例工厂方法，注意此时我们是继承了 <code>FactoryBean</code> 接口，然后实现了其中的 <code>getObject()</code> 和 <code>getObjectType()</code> 两个方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着在 Spring 的配置文件中进行配置，需要注意此时的类应该是我们的工厂类 <code>PersonDaoFactoryBean</code>，而不是 <code>PersonDaoImpl</code>。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后在程序主入口中获取 Bean，然后调用方法即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> Bean 的生命周期</h2>
<p>先来看看生命周期的定义，所谓生命周期就是指从创建到消亡的完整过程，类比到我们人身上，生命周期就是从我们出生到死亡的这个过程。而 Bean 的生命周期就指的是 Bean 从创建到销毁的整体过程。</p>
<p>Bean 的生命周期主要分为三个阶段：</p>
<ul>
<li><strong>初始化容器</strong></li>
<li><strong>使用 Bean</strong></li>
<li><strong>销毁容器</strong></li>
</ul>
<p>初始化容器阶段，主要执行的操作有：创建对象（内存分配）、执行构造方法、执行属性注入（<code>set</code> 操作）、执行 Bean 初始化方法。</p>
<p>使用 Bean 阶段，主要是去执行业务操作。</p>
<p>销毁容器阶段，主要是执行 Bean 的销毁方法。</p>
<h2> 总结</h2>
<p>以上就是今天关于 Bean 的内容了，主要从 Bean 的别名配置、作用范围、如何进行实例化以及声明周期 4 个方面着手，学习了 Bean 的相关操作。</p>
]]></content:encoded>
    </item>
    <item>
      <title>入门简介</title>
      <link>https://cunyu1943.site/JavaPark/md/java/springboot/20220101-introduction.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/springboot/20220101-introduction.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">入门简介</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 Spring 是重量级企业开发框架 EJB（Enterprise JavaBean） 的替代品，是为了解决企业级应用开发的复杂性而创建的，简化开发。通过 依赖注入（DI） 和 面向切面编程，用简单的 Java 对象（POJO，Plain Old Java Object） 实现 EJB 的功能，其组件代码轻量，但是配置很繁琐（需要大量 XML 配置）。Spring 2.5 引入基于注解的组件扫描，Spring 3.0 引入基于 Java 的配置，可以代替 XML，虽然引入的特性大大提高了配置的效率，但是也无法避免，针对这一问题，Spring Boot 应运而生。</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Sat, 01 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p><code>Spring</code> 是重量级企业开发框架 <code>EJB（Enterprise JavaBean）</code> 的替代品，是为了解决企业级应用开发的复杂性而创建的，简化开发。通过 <strong>依赖注入（DI）</strong> 和 <strong>面向切面编程</strong>，用简单的 <strong><code>Java</code> 对象（<code>POJO</code>，<code>Plain Old Java Object</code>）</strong> 实现 <code>EJB</code> 的功能，<strong>其组件代码轻量，但是配置很繁琐（需要大量 <code>XML</code> 配置）</strong>。<code>Spring 2.5</code> 引入基于注解的组件扫描，<code>Spring 3.0</code> 引入基于 <code>Java</code> 的配置，可以代替 <code>XML</code>，虽然引入的特性大大提高了配置的效率，但是也无法避免，针对这一问题，<code>Spring Boot</code> 应运而生。</p>
<p>Spring Boot 是为简化 Spring 应用初始搭建和开发过程，我们只要基于特定方式来进行配置即可。</p>
<p>今天我们就来看看，关于 Spring Boot 的相关介绍吧！</p>
<h2> Spring Boot</h2>
<h3> 定义</h3>
<blockquote>
<p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”...Most Spring Boot applications need very little Spring configuration.</p>
</blockquote>
<p>上面的一段话来自 <code>Spring</code> 官方，即“<code>Spring Boot</code> 能够轻松创建基于 <code>Spring</code> 的独立的生产级别的应用程序，而只需要通过 “<code>just run</code> （可能是 <code>java -jar、tomcat、maven、shell、'Application'</code> 等）”就可以让项目跑起来，大多 <code>Spring Boot</code> 项目仅需少量配置即可运行”。</p>
<p>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以<strong>约定大于配置的核心思想</strong>，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等）。</p>
<h3> 为什么需要 Spring Boot</h3>
<p><code>Spring</code> 框架能够让 <code>J2EE</code>企业应用程序开发更加简化，但是还是需要配置大量文件，针对这一问题，<code>Spring Boot</code> 能够进一步简化 <code>Spring</code> 框架，使得开发更为高效；</p>
<h3> 特点</h3>
<ul>
<li>可以创建独立 <code>Spring</code> 应用程序，并且基于 <code>Maven</code> 或 <code>Gradle</code> 插件，可以创建可执行的 <code>JARs</code> 和 <code>WARs</code>；</li>
<li>内嵌 <code>Tomcat</code> 或 <code>Jetty</code> 等 <code>Servlet</code> 容器；</li>
<li>提供自动配置的 <code>started</code> 项目对象模型（<code>POMS</code>）以简化 <code>Maven</code> 配置；</li>
<li>尽可能自动配置 <code>Spring</code> 容器；</li>
<li>提供准备好的特性，如指标、健康检查和外部化配置；</li>
<li>没有冗余代码生成，不需要 <code>XML</code> 配置；</li>
</ul>
<h3> 重要策略</h3>
<ul>
<li><strong>开箱即用</strong>：<code>Outofbox</code>，指在开发过程中，通过在 <code>Maven</code> 项目的 <code>pom</code> 文件中添加相关依赖包，然后使用对应注解来代替繁琐的 <code>XML</code> 配置文件以管理对象的生命周期。这一特点使得开发人员摆脱了复杂的配置工作以及相关依赖的管理工作，更加专注于业务逻辑；</li>
<li><strong>约定优于配置</strong>：<code>Convention over configuration</code>，一种由 <code>SpringBoot</code> 本身来配置目标结构，由开发者在结构中添加信息的软件设计范式。这一特点虽然降低了部分灵活性，增加了 <code>BUG</code> 定位的复杂性，但减少了开发人员需要做出决定的数量，同时减少了大量 <code>XML</code> 配置，而且可以将代码编译、测试和打包等工作自动化；</li>
</ul>
<h3> Spring Boot 项目约定</h3>
<ul>
<li>约定项目中有且只有一个入口类，其类名推荐使用：<code>xxxApplication.java</code>。而且该入口类必须位于所有的子包之外，其中必须存在一个用于启动项目的 <code>main</code> 函数。</li>
</ul>
<p></p>
<ul>
<li>此外， Spring Boot 项目约定必须在项目根目录中存在一个名为 <code>application.yml</code> 或者 <code>yml.prpperties</code> 的配置文件，一般是位于 <code>resources</code> 目录下。</li>
</ul>
<p></p>
<h3> Spring Boot 的优缺点</h3>
<h4> 优点</h4>
<ol>
<li>使得开发基于 <code>Spring</code> 的应用程序变得简单；</li>
<li><code>Spring Boot</code> 项目开发所需时间明显减少，提高整体生产力；</li>
<li>无需编写大量样板代码、<code>XML</code> 配置和注释；</li>
<li>与 <code>Spring</code> 生态系统更加容易集成，如 <code>Spring JDBC、Spring ORM、Spring Data、Spring Security</code>；</li>
<li>遵循默认配置，我们通过修改默认配置能够减少开发工作；</li>
<li>提供嵌入式 <code>http</code> 服务器，方便开发测试 <code>web</code> 应用程序；</li>
<li>提供命令行接口（<code>CLI</code>）工具，用于开发测试 <code>Spring Boot</code> 应用程序；</li>
<li>提供多种插件，能使用内置工具（<code>Maven &amp; Gradle</code>）开发测试 <code>Spring Boot</code> 应用程序；</li>
</ol>
<h4> 缺点</h4>
<ol>
<li>相关文档资料较少；</li>
<li>版本迭代快，导致各版本间的模块改动可能很大；</li>
</ol>
<p>总体来讲，采用 Spring Boot 的优点是绝对的，而且其缺点看似是缺点，但如果保持学习，还是很容易就能掌握的。而之所以迭代，不就是为了像 SSM -&gt; Spring Boot 这样简化我们的开发，提高开发效率么？有了更高的效率，那是不是就意味着我们能有更多的时间摸鱼或者早点下班跑路？🤪</p>
<h2> 总结</h2>
<p>以上就是今天的所有内容了，主要讲了 Spring Boot 的定义、特点、项目约定以及其优缺点。而关于 Spring Boot 项目的具体事例的搭建，我们就下期文章再见吧！</p>
<blockquote>
<p>传送门：<a href="https://blog.csdn.net/github_39655029/article/details/119618308" target="_blank" rel="noopener noreferrer">创建 SpringBoot 项目的 3 种方式</a></p>
</blockquote>
<p>最后，如果本文对你有所帮助，那就点个赞再走吧 ~</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/cunyu1943/cunyu1943@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>创建项目的 3 种方式</title>
      <link>https://cunyu1943.site/JavaPark/md/java/springboot/20220102-the-methods-to-create-springboot-project.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/springboot/20220102-the-methods-to-create-springboot-project.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">创建项目的 3 种方式</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 如果你是一个浸淫 SpringBoot 已久的老手，那么可能下面的内容可能不那么适合你，写得很简单。但如果是 对于一个刚学习 SpringBoot 的新手而言，我想多少还是有些用的。本文就来手把手教你如何创建一个 SpringBoot 项目，并对其中的一些关键信息进行简单分析，让你更加快速的掌握如何创建一个 SpringBoot 项目。</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Sun, 02 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>如果你是一个浸淫 SpringBoot 已久的老手，那么可能下面的内容可能不那么适合你，写得很简单。但如果是
对于一个刚学习 SpringBoot 的新手而言，我想多少还是有些用的。本文就来手把手教你如何创建一个 SpringBoot 项目，并对其中的一些关键信息进行简单分析，让你更加快速的掌握如何创建一个 SpringBoot 项目。</p>
<h2> Spring Boot 简介</h2>
<p>使用 <code>Servlet/JSP</code> 开发 <code>JavaWeb</code> 时，一个接口对应一个 <code>Servlet</code>，配置很繁琐。未尽量减少这种麻烦，<code>Spring Boot</code> 应用而生。它是由 <code>Pivotal</code> 团队提供的全新框架，目的适用于简化 Spring 应用的初始搭建即开发过程。该框架使用特定方式进行配置，从而使开发人员无需定义样板化的配置。</p>
<h2> 如何创建 Spring Boot 项目</h2>
<p><code>Sping Boot</code> 项目的本质其实还是一个 <code>Maven</code> 项目，主要有如下几种创建 <code>Spring Boot</code> 项目的方式；</p>
<h3> 在线创建</h3>
<ol>
<li>打开 <a href="https://start.spring.io/" target="_blank" rel="noopener noreferrer">https://start.spring.io/</a> 来生成 <code>Spring Boot</code> 项目；</li>
</ol>

<ol start="2">
<li>然后选择和填写相关配置；</li>
</ol>
<ul>
<li><strong>Project</strong>：表示使用什么构建工具，<code>Maven or Gradle</code>；</li>
<li><strong>Language</strong>：表示使用什么编程语言， <code>Java</code> 、<code>Kotlin</code> 还是 <code>Groovy</code>；</li>
<li><strong>Spring Boot</strong>：<code>Spring Boot</code> 的版本；</li>
<li><strong>Project Metadata</strong>：项目元数据，即 <code>Maven</code> 项目基本元素，根据自己的实际情况填写；</li>
<li><strong>Dependencies</strong>：要加入的 <code>Spring Boot</code> 组件；</li>
</ul>

<ol start="3">
<li>然后点击生成或 <code>Ctrl + Enter</code> 即可；</li>
</ol>

<ol start="4">
<li>将压缩包下载后，解压缩后用自己喜欢的 <code>IDE</code> 开发即可；</li>
</ol>
<h3> IntelliJ IDEA 创建</h3>
<ol>
<li>新建项目时选择 <code>Spring Initializr</code> ；</li>
</ol>
<p></p>
<ol start="2">
<li>点击下一步，填写相关配置；</li>
</ol>
<ul>
<li><code>Group</code>：组织 <code>ID</code>，一般分为多个段，一般第一段为<strong>域</strong>，而第二段则是 <strong>公司名称</strong>；</li>
<li><code>Artifact</code>：唯一标识符，一般是项目名；</li>
</ul>
<p></p>
<ol start="3">
<li>选择包，添加相关依赖；</li>
</ol>
<p></p>
<ol start="4">
<li>配置项目名，点击完成即可；</li>
</ol>
<p></p>
<h3> Maven 创建</h3>
<ol>
<li>新建 Maven 项目；</li>
</ol>
<p></p>
<ol start="2">
<li>填写项目名和相关配置；</li>
</ol>

<ol start="3">
<li>点击完成即可；</li>
</ol>

<ol start="4">
<li>配置 <code>pom.xml</code> 添加依赖；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li>在 <code>main/java</code> 目录下创建一个包，然后新建一个类，比如我的如下；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6">
<li>运行上一步中的 <code>main</code> 方法即可；</li>
</ol>

<h2> 常见项目结构</h2>
<h3> 代码层</h3>
<p>根目录：<code>com.springboot</code>：</p>
<ul>
<li><code>build</code> ：工程启动类；</li>
<li><code>entity</code> ：实体类；</li>
<li><code>dao</code> ：数据访问层；</li>
<li><code>service</code> ：数据服务层，业务类代码；</li>
<li><code>controller</code> ：前端访问控制器；</li>
<li><code>config</code> ：配置信息类；</li>
<li><code>util</code> ：工具类；</li>
<li><code>constant</code> ：常用接口类；</li>
<li><code>vo</code> ：数据传输类；</li>
<li><code>Application.java</code>：项目的启动类；</li>
</ul>
<h3> 资源文件结构</h3>
<p>根目录 <code>src/main/resources</code>：</p>
<ul>
<li><code>config</code> ：<code>.properties、.json</code> 等配置文件；</li>
<li><code>i18n</code> ：国际化相关；</li>
<li><code>META-INF/spring</code> ：<code>spring.xml</code> ；</li>
<li><code>static</code> ：页面以及 <code>js、css、image</code> 等分别放在各自文件夹下；</li>
</ul>
<h2> @SpringBootApplication 注解分析</h2>
<h3> 相关代码</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 说明</h3>
<p><code>@SpringBootApplication</code> 标注该类是一个启动类，可以看做是 <code>@Configuration、@EnableAutoConfiguration、@ComponentScan</code> 的集合；</p>
<ul>
<li><code>@Configuration</code> ：允许在上下文中注册额外的 <code>Bean</code> 或导入其他配置；</li>
<li><code>@EnableAutoConfiguration</code>：启动 <code>Spring Boot</code> 的自动配置机制；</li>
<li><code>@ComponentScan</code>：扫描被 <code>@ComponentScan（@Service、@Controller、@Repository）</code> 注解的 <code>Bean</code>，默认扫描该类所在包下所有类，将这些 <code>Bean</code> 定义加载到 <code>IOC</code> 容器中；</li>
</ul>
<h2> pom.xml 分析</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建好项目后，如果没有选其他组件，会生成如上的 <code>Spring Boot</code> 项目依赖，主要有四个部分：</p>
<ul>
<li><strong>项目元数据</strong></li>
</ul>
<p>创建时输入的 <code>Project Metadata</code> 部分，即 <code>Maven</code> 项目的基本元素，包括 <code>groupId、artifactId、version、name、description</code> 等；</p>
<ul>
<li><strong>parent</strong></li>
</ul>
<p>继承 <code>spring-boot-starter-parent</code> 的依赖管理，控制版本与打包等等内容；</p>
<ul>
<li><strong>dependencies</strong></li>
</ul>
<p>项目具体依赖，默认包含 <code>spring-boot-starter-web</code>，用于实现 HTTP 接口（该依赖中包含了 <code>Spring MVC</code>）；<code>spring-boot-starter-test</code>用于编写单元测试的依赖包。后续开发中，主要就是在这里添加各种依赖。</p>
<ul>
<li><strong>build</strong></li>
</ul>
<p>构建配置部分，默认使用 <code>spring-boot-maven-plugin</code>，配合 <code>spring-boot-starter-parent</code> 可以把 <code>Spring Boot</code> 应用打包成 <code>jar</code> 来直接运行。</p>
<h2> 总结</h2>
<p>以上就是今天的全部内容了，文章主要介绍了两种创建 <code>Spring Boot</code> 的方式，一种是通过 <code>Spring</code> 官网在线创建的方式，另一种则是通过 <code>IDEA</code> 创建的方式，两个方式其实效果都是一样的，只不过形式不同而已。</p>
<p>最后，创作不易，如果觉得我的文章对你有所帮助，那就帮忙点赞关注吧，感谢支持！</p>
]]></content:encoded>
    </item>
    <item>
      <title>配置详解</title>
      <link>https://cunyu1943.site/JavaPark/md/java/springboot/20220103-configuration.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/springboot/20220103-configuration.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">配置详解</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 为了 Spring Boot 能够更好地生成配置元数据文件，我们可以在创建项目时添加 Spring Configuartion Processor 依赖，或者在创建好项目后的 pom.xml 文件中手动添加。添加该依赖后，我们在编写配置时就会有属性提示，大大降低编写错误。</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Mon, 03 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>为了 <code>Spring Boot</code> 能够更好地生成配置元数据文件，我们可以在创建项目时添加 <code>Spring Configuartion Processor</code> 依赖，或者在创建好项目后的 <code>pom.xml</code> 文件中手动添加。添加该依赖后，我们在编写配置时就会有属性提示，大大降低编写错误。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> application.properties</h2>
<h3> 自定义属性</h3>
<p><code>application.properties</code> 配置文件是创建项目后就自带的，如果我们要自定义属性，可以在其中直接配置，配置过程如下：</p>
<ol>
<li>在 <code>application.properties</code> 中添加我们要自定义的配置；</li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>创建实体类来映射我们配置的属性；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>定义 <code>Controller</code> 来注入测试；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>打开网页测试，打开 <a href="http://localhost:8080/cunyu/profile%EF%BC%8C%E5%90%8C%E6%97%B6%E8%A7%82%E5%AF%9F%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%8C%E6%98%BE%E7%A4%BA%E5%A6%82%E4%B8%8B%E5%86%85%E5%AE%B9%E5%88%99%E8%AF%B4%E6%98%8E%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5%E6%88%90%E5%8A%9F%EF%BC%9B" target="_blank" rel="noopener noreferrer">http://localhost:8080/cunyu/profile，同时观察控制台，显示如下内容则说明属性注入成功；</a></li>
</ol>
<p></p>
<p></p>
<h3> 多环境配置</h3>
<p>实际开发过程中，常常需要多个环境（如 <strong>开发、测试、生产</strong>等），而不同环境的配置都不一样，此时配置方法如下；</p>
<ol>
<li>创建不同环境对应的配置文件，配置文件名为 <code>application-{profile}.properties</code>，<code>{profile}</code> 为我们自定义环境，如下：</li>
</ol>
<blockquote>
<p>开发环境：application-dev.properties</p>
</blockquote>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>测试环境：application-test.properties</p>
</blockquote>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>生产环境：application-prod.properties</p>
</blockquote>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>然后在 <code>application.properties</code> 中加入激活的环境，此时就会激活对应环境的配置；</li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>之所以要分为多个环境的配置，主要是方便在不同环境中开发的需求，比如我们要开发新功能，那此时就可以激活开发配置文件的相关设置，等待我们开发完成之后，然后再切换到测试环境进行测试。而经过严格的测试之后，我们就可以将新推出的功能上线到生产环境中。纵观整个开发流程，我们既完成了新功能的开发，也没有影响到用户对现有系统的使用，所以现在大家基本都是基于这种模式来进行业务开发。</p>
<h2> 自定义配置文件</h2>
<p>假如我们不想用项目自带的 <code>application.properties</code> 配置环境，那我们也可以自定义我们需要的配置。但该如何配置呢？接下来我们就来看看 ~</p>
<ol>
<li>首先创建一个自定义配置文件 <code>my.properties</code>，文件名可以自定义，但是后缀要保持一致，然后在其中加入我们自定义配置的属性；</li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>定义实体类，用于映射自定义配置文件中的内容；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>定义 <code>Controller</code> 来注入测试</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>打开网页测试，打开 <code>http://localhost:8080/my/profile</code>，同时观察控制台，显示如下内容则说明属性注入成功；</li>
</ol>
<p></p>
<p></p>
<h2> 注意</h2>
<p><code>application.properties</code> 和 <code>my.properties</code> 会优先加载 <code>application.properties</code>。</p>
<h2> .yml 和 .properties</h2>
<p>一般来说，使用 <code>IDEA</code> 创建一个 <code>Spring Boot</code> 项目时，默认都会生成一个 <code>application.properties</code> 的配置文件。该配置文件是用来 <strong>修改 <code>Spring Boot</code> 自动配置的默认值</strong>。 但有的朋友会更倾向于使用 <code>application.yml</code>，那么问题来了，这两种格式到底有啥区别呢？</p>
<p>开始比较之前，我们先来看看各自的实例：</p>
<ul>
<li><strong>.properties 格式</strong></li>
</ul>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>.yml 格式</strong></li>
</ul>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的实例我们可以发现，两者的区别主要有以下几点：</p>
<ol>
<li><strong>语法结构</strong></li>
</ol>
<ul>
<li>
<p><code>.properties</code> 格式使用的是 <strong>键值对形式（key=value）</strong>，而 <code>.yml</code> 格式则使用的是 <strong>树状结构（key: value）</strong>；</p>
</li>
<li>
<p><code>.properties</code> 格式通过 <code>.</code> 来连接，<code>=</code> 来赋值，结构上比较直接，而 <code>.yml</code> 格式则使用 <code>:</code> 来分层，结构上呈现树状结构，层次感明显，而且赋值时 <code>:</code> 的后边必须 <strong>接着一个空格再赋值</strong></p>
</li>
</ul>
<ol start="2">
<li><strong>执行先后顺序</strong></li>
</ol>
<p>如果一个工程中同时存在两种格式的文件，那么会 <strong>优先加载 <code>.yml</code> 文件，然后再加载 <code>.properties</code>，而且后加载的 <code>.properties</code> 会覆盖之前加载的 <code>.yml</code> 文件</strong>。</p>
<p>此外，<code>.yml</code> 配置时需要注意以下几点：</p>
<ol>
<li><strong>缩进必须用空格，不能用 <code>Tab</code></strong></li>
<li><code>@PropertySource</code> 注解不能加载 <code>yml</code> 文件</li>
</ol>
<h2> 总结</h2>
<p>以上就是关于 <code>Spring Boot</code> 中的配置相关内容了。本文主要介绍了 <code>Spring Boot</code> 项目自带的配置文件的相关信息，同时也介绍了如果我们想要满足自己需求如何进行自定义配置。最后，则是对 <code>.yml</code> 和 <code>.properties</code> 不同格式的配置文件的区别进行解释。</p>
]]></content:encoded>
    </item>
    <item>
      <title>集成 Swagger2</title>
      <link>https://cunyu1943.site/JavaPark/md/java/springboot/20220104-integrated-swagger2.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/springboot/20220104-integrated-swagger2.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">集成 Swagger2</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 不管你是从事前端还是后端开发，相信都难免被接口文档折磨过。如果你是一个前端开发者，可能你会经常发现后端给的接口文档跟实际代码有所出入。而假设你是一个后端开发者，你可能又会觉得自己开发后端接口已经够烦的了，还要花费大量精力去编写和维护接口文档，所以难免有时候会更新不及时。这就可能造成了前后端相互不理解，最后甚至吵起来，哈哈哈 🤪。</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Tue, 04 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>不管你是从事前端还是后端开发，相信都难免被接口文档折磨过。如果你是一个前端开发者，可能你会经常发现后端给的接口文档跟实际代码有所出入。而假设你是一个后端开发者，你可能又会觉得自己开发后端接口已经够烦的了，还要花费大量精力去编写和维护接口文档，所以难免有时候会更新不及时。这就可能造成了前后端相互不理解，最后甚至吵起来，哈哈哈 🤪。</p>
<p>这时候我们就会想，有没有一款工具，能让我们快速实现编写接口文档。这个工具既能保证我们的接口文档实时更新，也能保证我们不用花过多时间去维护，就像写注释那么简单。</p>
<p>既然这是大多数前后端程序员的一大痛点，那必须得有一个解决方案吧。而这个方案使用的人多了，慢慢就成了一种规范，大家都默认使用这个方案，从而解决前后端接口文档不同步的问题，而这就是我们今天的主角 - Swagger 的由来。</p>
<p>通过使用 Swagger，我们只需要按照它所给定的一系列规范去定义接口以及接口的相关信息，然后它就能帮我们自动生成各种格式的接口文档，方便前后端开发者进行前后端联调。同时，如果我们的代码接口有所变动，只需要更新 Swagger 的描述，它就能进行实时更新，做到实际代码和接口文档的一致性。</p>
<h2> Swagger 简介</h2>
<h3> Swagger 是什么</h3>
<p>Swagger 是一种接口描述语言，主要用于生成、描述、调用以及可视化 RESTful 风格的 Web 服务接口文档。以前的项目可能更多的是前后端未分开同时进行开发，所以接口文档可能不是那么重要。但现在主流的项目基本都是前后端分离，如果前后端没有沟通好，就有可能导致接口文档更新不及时，造成一些不必要的麻烦。而通俗地讲，Swagger 就是帮我们写接口文档的。它不仅能自动生成实时接口文档，还能生成测试用例，方便我们进行测试。</p>
<p>Swagger 主要提供了如下几种开源工具：</p>
<p></p>
<ol>
<li><strong>Swagger Editor</strong></li>
</ol>
<p>Swagger 所提供的的编辑器，主要用于编辑 Swagger 描述文件，支持实时预览描述文件更新后的效果，类似于我们的 Markdown 编辑器，左边编写源码，右边就可以进行实时预览。该编辑器不仅提供在线使用，还支持本地部署。</p>
<ol start="2">
<li><strong>Swagger UI</strong></li>
</ol>
<p>提供可视化的 UI 页面，用于展示 Swagger 的描述文件。接口的调用方、测试等都可以通过该页面查阅接口的相关信息，并且进行简单的接口请求测试。</p>
<ol start="3">
<li><strong>Swagger Codegen</strong></li>
</ol>
<p>通过使用该工具，可以将 Swagger 的描述文件生成 HTML 和 CWIKI 形式的接口文档，而且还能生成针对多种不同语言的服务端和客户端的代码。</p>
<h3> Swagger UI</h3>
<p>平时和我们打交道最多的，可能就是 Swagger UI 这个工具了，它主要用于显示接口文档。根据我们代码中按照 Swagger 规范所设置的描述，自动生成接口说明文档。一个简单的示例如下：</p>
<p></p>
<h2> Spring Boot 集成 Swagger</h2>
<h3> 创建 Spring Boot 项目</h3>
<p>通过以上对 Swagger 简单的介绍之后，我们来看看如何在 Spring Boot 项目中使用 Swagger。</p>
<p>首先需要创建一个简单的 Spring Boot 项目，如果你还不知道如何创建，可以参考我之前的一篇文章 <a href="https://cunyu1943.blog.csdn.net/article/details/119618308" target="_blank" rel="noopener noreferrer">创建 Spring Boot 项目的 3 种方式</a>。</p>
<p>创建好之后的项目接口如下：</p>
<p></p>
<h3> 引入依赖</h3>
<p>创建好 Spring Boot 项目之后，需要配置项目 <code>pom.xml</code> 文件，在其中引入 Swagger 的相关依赖。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 构建 Swagger 配置类</h3>
<p>引入依赖后，接下来就是构建 Swagger 的配置类了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 编写接口</h3>
<p>配置好 Swagger 后，在我们的项目中添加一个简单的接口，这里以一个简单的有参和无参接口为例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 查看并测试接口</h3>
<p>完成上述步骤后，我们启动项目，然后在浏览器中访问如下地址，就可以访问我们项目的接口文档了。</p>
<blockquote>
<p><a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener noreferrer">http://localhost:8080/swagger-ui.html</a></p>
</blockquote>
<p>访问如上地址后，如果出现下面的界面，说明我们 Spring Boot 集成 Swagger2 就到此成功了。</p>
<p></p>
<p>点开具体的接口，就会有这个接口的一些详细信息，如下图所示，一般包括：</p>
<ol>
<li><strong>接口请求方式</strong></li>
<li><strong>接口请求路径及描述</strong></li>
<li><strong>接口请求参数</strong></li>
<li><strong>接口响应</strong></li>
</ol>
<p></p>
<p>如果我们要进行简单的测试，则点击上图中右上方的 <code>Try it out</code>，然后我们就可以编辑请求参数的值，编辑完成之后点击下方的 <code>Execute</code> 即可查看接口返回值。</p>
<p></p>
<p>以我给的接口为例，我传入了一个参数 <code>name</code>，然后执行 <code>demo</code> 接口，最后会给我返回 <code>hello,name</code> 的结果，其中 <code>name</code> 是我传入的参数值，这里我传入了村雨遥，所以结果应该会得到 <code>hello,村雨遥</code>，可以看到 Swagger 测试中也给我返回了对应的结果，说明我们的接口测试成功！</p>
<p></p>
<h3> 注意</h3>
<p>如果在整合过程中出现如下错误：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里可能是由于 Spring Boot 版本过高导致，我写作本文时，一开始使用的 <code>SpringBoot 2.6.2</code> 版本，所以出现了该错误，而当我将 <code>SpringBoot</code> 降级为 <code>2.5.6</code> 时，该错误就不再出现。所以如果你也出现了这个问题，也可以尝试降低 <code>SpringBoot</code> 版本来解决。</p>
<h2> 总结</h2>
<p>以上就是本文的所有内容了，主要对 Swagger 进行了简单介绍，并用 Spring Boot 集成 Swagger，同时还进行简单的测试。而关于文章中的示例代码，我已经上传到了 GitCode，如果有需要的朋友，可以自取。</p>
<blockquote>
<p><a href="https://gitcode.net/github_39655029/java-learning-demos" target="_blank" rel="noopener noreferrer">🎉🎉🎉 传送门</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>集成 Swagger3</title>
      <link>https://cunyu1943.site/JavaPark/md/java/springboot/20220105-integrated-swagger3.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/springboot/20220105-integrated-swagger3.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">集成 Swagger3</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 在之前的文章中，我们已经讲了如何利用 Spring Boot 来集成 Swagger2，详情可戳：Spring Boot 集成 Swagger2，构建强大的 API 文档。但其实 Swagger2 中主流的 2.9.2 自 2018 年发布后就已经好久没更新了，而在时隔两年之后的 2020 年，Swagger3 终于发布了。</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Wed, 05 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>在之前的文章中，我们已经讲了如何利用 Spring Boot 来集成 Swagger2，详情可戳：<a href="https://blog.csdn.net/github_39655029/article/details/122336225" title="Spring Boot 集成 Swagger2，构建强大的 API 文档" target="_blank" rel="noopener noreferrer">Spring Boot 集成 Swagger2，构建强大的 API 文档</a>。但其实 Swagger2 中主流的 <code>2.9.2</code> 自 2018 年发布后就已经好久没更新了，而在时隔两年之后的 2020 年，Swagger3 终于发布了。</p>
<p>相比于之前的 Swagger2，Swagger3 无疑新添了更多的特点，而相对集中地，主要集中在如下几点。</p>
<ul>
<li>支持 OpenApi 3.0.3</li>
<li>兼容 Swagger2 的注释，而且进一步丰富了 open API 3.0 的规范</li>
<li>支持 Webflux</li>
</ul>
<p>既然 Swagger3 有了这么多的改变，那用法是不是还和 Swagger2 一样呢？答案是：不一样。</p>
<p>不过虽然两者的使用方式不一样，但是总体流程还是差不多了，只不过有些步骤有所小变动而已，只要你掌握了 Swagger2 的使用方法，那使用 Swagger3 起来就是需要注意小改动就行了。那接下来，我们就来看看，如何利用 Spring Boot 来集成 Swagger3，对我们的 Swagger2 进行一次升级！</p>
<h2> Spring Boot 集成 Swagger</h2>
<h3> 创建 Spring Boot 项目</h3>
<p>同样的，开始之前，我们需要创建一个简单的 Spring Boot 项目，这里不展开讲了，如果你对此还有所疑惑，可以先去熟悉下，这里建议参考我之前写过的一篇文章：<a href="https://cunyu1943.blog.csdn.net/article/details/119618308" title="创建 Spring Boot 项目的 3 种方式" target="_blank" rel="noopener noreferrer">创建 Spring Boot 项目的 3 种方式</a>。</p>
<p>项目创建成功之后，总体结构如下：</p>
<p></p>
<p>这里的 <code>config</code>、<code>controller</code>、<code>entity</code> 模块是我后续加入的，所以不用理会，也就是说你创建好之后的项目是不包含这三个部分的，关于他们的用途，文章后续内容我会讲到。</p>
<h3> 引入依赖</h3>
<p>创建项目后，在 <code>pom.xml</code> 文件中引入 Swagger3 的相关依赖。回忆一下，我们集成 Swagger2 时，引入的依赖如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在 Swagger3 中，我们不需要再引入两个不同的依赖了，我们只需要引入一个依赖就足够，具体引入的依赖如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而这部分，Swagger2 和 Swagger3 就有所不同了，Swagger2 需要添加两项不同依赖，而 Swagger3 只用添加一项依赖就可以了。</p>
<h3> 构建 Swagger 配置类</h3>
<p>为了统一管理 Swagger，这里还是推荐给 Swagger3 添加一个配置类。当然这里也可以根据自己的需求，可要可不要，但总体来说还是建议配置。</p>
<p>另外，在之前集成 Swagger2 的文章中，忘记了给大家说一点。平常在工作中，Swagger 的使用仅限于在开发环境，而在生产环境中，我们是要将其移除的。这里为了灵活管理，推荐大家在项目配置文件 <code>application.yml</code> 中添加关于 Swagger 开关的配置，比如这里我添加的配置如下，<code>true</code> 则代表开启 Swagger，<code>false</code> 则表示关闭 Swagger。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成之后，我们就需要在 Swagger 配置类中获取 Swagger 开关的值了，关于具体用法就可以看下边配置代码。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的配置和 Swagger2 大同小异，这里最大的区别在于加入了从配置文件中获取 Swagger 开关的属性。这里也可以选择添加到 Swagger2 的配置类中，同样通过配置文件来控制是否开启 Swagger2。此外，还有就是 <code>DocumentationType</code> 属性的不同了，Swagger2 中我们使用的是 <code>SWAGGER_2</code>，而在 Swagger3 中，我们使用的则是 <code>OAS_30</code>。其实点进去 <code>DocumentationType</code> 的源码我们就可以发现，Swagger 已经是给我们定义好的，你用的是哪一个版本的 Swagger，那我们使用的属性值应该选择对应版本。三个版本的属性值对应如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 编写实体类</h3>
<p>完成上面的步骤之后，我们的 Swagger 就配置好了，接下来我们就添加一个接口来看看 Swagger3 和 Swagger2 的不同。</p>
<ol>
<li><strong>新建实体类</strong></li>
</ol>
<p>这里我以一个用户类为实例，带有 <code>name</code>、<code>age</code> 两个属性，也就是本文一开始项目结构截图中 <code>entity</code> 包下的内容。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>新建接口</strong></li>
</ol>
<p>这里写了两个接口，一个是直接传参，另一种是通过利用创建的 <code>User</code> 实体类来传输，也就是项目结构中 <code>controller</code> 包中的内容。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 查看并测试接口</h3>
<p>启动我们的项目，然后在浏览器中访问如下地址，就可以访问项目的接口文档了。</p>
<blockquote>
<p><a href="http://localhost:8080/swagger-ui/index.html" target="_blank" rel="noopener noreferrer">http://localhost:8080/swagger-ui/index.html</a></p>
</blockquote>
<p>访问上面的地址后，如果出现下面的界面，则说明集成 Swagger3 就成功了。</p>
<p>这里也要注意一点，Swagger2 中的接口访问地址是：</p>
<blockquote>
<p><a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener noreferrer">http://localhost:8080/swagger-ui.html</a></p>
</blockquote>
<p>这里 Swagger2 和 Swagger3 是不同的，这里大家一定要注意，否则可能你继续拿着 Swagger2 接口访问地址来放到 Swagger3 项目中不适用。</p>
<p></p>
<p>点开具体接口，我们以直接传参的接口来对比 Swagger3 和 Swagger2 的区别。第一张图是在 Swagger3 中，第二张图是在 Swagger2 中。这里可以发现，我们都是传的一个 <code>name</code> 属性，Swagger2 中会把我们接口中参数部分 <code>Parameters</code> 直接标识出来，而 Swagger3 中则不会，这里需要注意。</p>
<ul>
<li>Swagger2 中接口代码</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>Swagger3 中接口代码</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>

<p>此外，我们来看 Swagger3 中的另一个接口，这里我们传递的是一个用户对象，接口中它将我们设置的默认值给传了过来。下图中第一张图为 Swagger3 中的截图，第二张图为 Swagger2 中的截图。同样的，Swagger2 中的参数会在 <code>Parameters</code> 模块标识出来，而 Swagger3 则不会标识。</p>
<p>还有一点值得注意的是，Swagger 中如果传递的部分是对象，那么 Swagger2 会在 <code>Models</code> 部分进行标识，而 Swagger3 中则是变成了 <code>Schemas</code> 部分，这也算是一个小变动吧。</p>


<p>最后，我们同样来进行测试，测试方法同 Swagger2，点击接口右上方的 <code>Try it out</code>，然后编辑参数的值，编辑完成后点击下方的 <code>Execute</code> 即可查看接口调用结果。</p>

<h2> Swagger2 VS Swagger3</h2>
<p>经过上面的步骤，我们就完成了 Spring Boot 集成 Swagger3 的实例测试了，而经过对比，也总结出了 Swagger2 和 Swagger3 的区别主要体现在如下几个方面：</p>
<ol>
<li><strong>所需依赖不同</strong>，Swagger2 需要添加两个依赖，而 Swagger3 则只需要添加一个依赖；</li>
<li><strong>启用 Swagger 的注解不同</strong>，不知道大家有没有发现，无论是 Swagger2 还是 Swagger3 中的配置类，其实都是有一个注解用来启用 Swagger 的，不同之处在于 Swagger2 中用的是 <code>@EnableSwagger2</code>，而 Swagger3 中则用的是 <code>@EnableOpenApi</code>；</li>
<li><strong>文档摘要信息（Docket）文件类型不同</strong>，可以发现在 Swagger 的配置类中，Swagger2 用的是 <code>SWAGGER_2</code>，而 Swagger3 中则用的是 <code>OAS_3</code>；</li>
<li><strong>Swagger UI 访问地址不同</strong>，在 Swagger2 中，如果我们要访问文档地址，需要访问 <code>http://localhost:8080/swagger-ui.html</code>，而在 Swagger3 中，则是访问 <code>http://localhost:8080/swagger-ui/index.html</code>；</li>
</ol>
<h2> 总结</h2>
<p>以上就是本文的所有内容了，主要介绍了如何使用 Spring Boot 集成 Swagger3，并在此过程中对比了 Swagger2 和 Swagger3 的一些区别。总体来讲，Swagger2 向 Swagger3 的升级还是比较平滑的。如果你已经掌握熟练使用 Swagger2，那么向 Swagger3 过度也很简单，只需要注意上一部分中的一些主要区别就可以了。其他的用于描述接口的注解，还是可以按照 Swagger2 的方式使用，毕竟 Swagger3 向下兼容了 Swagger2。</p>
<h2> 代码示例</h2>
<p>最后，关于本文示例的代码，我已经上传至 GitCode，需要的小伙伴可以自取：</p>
<blockquote>
<p>🎉 传送门：<a href="https://gitcode.net/github_39655029/java-learning-demos" target="_blank" rel="noopener noreferrer">https://gitcode.net/github_39655029/java-learning-demos</a></p>
</blockquote>
<p><strong>如果您觉得本文不错，欢迎 <code>Star</code> 支持，您的关注就是我坚持不断更新的动力！</strong></p>
]]></content:encoded>
    </item>
    <item>
      <title>集成 Knife4j</title>
      <link>https://cunyu1943.site/JavaPark/md/java/springboot/20220106-integrated-knife4j.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/springboot/20220106-integrated-knife4j.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">集成 Knife4j</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 之前介绍了如何在 Spring Boot 中集成 Swagger2 和 Swagger3，对于我们日常的接口管理已经够用了。但是作为一个颜值党，无论是 Swagger2 还是 Swagger3，都难以满足我们的审美。而且 Swagger2 和 Swagger3 都已经好久没更新了，更新还是比较慢的。</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Thu, 06 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>之前介绍了如何在 Spring Boot 中集成 Swagger2 和 Swagger3，对于我们日常的接口管理已经够用了。但是作为一个颜值党，无论是 Swagger2 还是 Swagger3，都难以满足我们的审美。而且 Swagger2 和 Swagger3 都已经好久没更新了，更新还是比较慢的。</p>
<p>偶然之间发现了一个国产的接口文档管理工具 <a href="https://doc.xiaominfo.com/knife4j/" target="_blank" rel="noopener noreferrer">Knife4j</a>，它基于 Swagger 而来，但是又对 Swagger 进行了增强，增加两个越来越多的个性化需求，可以说兼具颜值与实力了。今天我们就来看看，如何在 Spring Boot 中集成 Knife4j 这个接口文档管理工具。</p>
<h2> 集成过程</h2>
<h3> 创建 Spring Boot 项目</h3>
<p>既然要在 Spring Boot 中使用 Knife4j，那首先就得创建一个 Spring Boot 项目。当然，我在之前已经写过文章介绍如何创建 Spring Boot 项目了，所以这里不再赘述。如果你还对 Spring Boot 创建方式不太熟悉，可以参考我之前的文章：<a href="https://cunyu1943.github.io/JavaPark/java/spring-boot/the-methods-to-create-springboot-project.html" target="_blank" rel="noopener noreferrer">Spring Boot 基础教程：创建项目的 3 种方式 | JavaPark</a></p>
<h3> 添加依赖</h3>
<p>既然是用 Maven 来管理项目依赖，那我们在项目 <code>pom.xml</code> 中引入 <code>Knife4j</code> 的相关依赖包，引入代码如下。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 配置添加</h3>
<p>接着在项目中创建一个配置包 <code>config</code>，用于配置 Swagger 的配置依赖。在这里可以配置扫描的 <code>controller</code> 所在的包，设置接口文档的标题、描述、作者信息等。</p>
<p>这里其实和 Swagger2 和 Swagger3 很相似，Swagger 也是可以通过配置类来指定这些信息。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 编写 Controller 层</h3>
<p>接着我们编写一个测试的 <code>controller</code>，用于在 Knife4j 中展示用，代码如下。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 启动测试</h3>
<p>然后将项目启动起来，接着到浏览器中去打开 <code>http://localhost:8080/doc.html</code>，就会出现以下的主界面。这里有我们之前在配置类中所设置的一些接口信息，此外，还对接口进行了统计。因为我们代码中只写了一个 <code>POST</code> 的请求，所以这里统计出只有一个 <code>POST</code> 请求。</p>
<p></p>
<p>打开具体接口，这里就有我们接口的请求和响应的一些情况说明。</p>
<p></p>
<p>点击左侧 <code>调试</code> 按钮，我们就可以在 <code>Knife4j</code> 中测试我们的接口。</p>
<p></p>
<p></p>
<h2> 踩过的坑</h2>
<p>当然，如果你按照以上步骤顺利打开了 Knife4j 的文档管理页面，那接下来的内容你大可不必了解。但如果你按照上边步骤搭建过程中也出现了问题，那不妨看看以下是否有你遇到的 <code>Bug</code>。</p>
<h3> 空指针异常</h3>
<p>首先是报空指针异常，报错信息如下。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>经过查询资料可知，这是因为 <code>Springfox</code> 使用的路径匹配是基于 <code>AntPathMatcher</code> 的，但是由于我使用的是 <code>Spring Boot 2.6.x</code> 版本，正好这个版本使用的是 <code>PathPatternMatcher</code>，所以才会出现这个问题。所以这里主要可以通过两种方式来解决。</p>
<p>第一种，无可厚非，就是将我们的 <code>Spring Boot</code> 的版本降低，从 <code>2.6.x</code> 降到 <code>2.5.x</code>，此时就应该是可以了，这里可以自己去试一下。</p>
<p>第二种，既然我们都已经用上 <code>2.6.x</code> 版本了，那我们就是不想降低版本咋整。此时，我们只需要在主程序启动类中加上 <code>@EnableWebMvc</code> 这个注解。然后再次启动程序，你就会发现启动成功了！</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 请求路径未找到</h3>
<p>一山放过一山拦，以为翻过了上面的山，就能成功了。没想到出师不利，这不又遇到了报错请求路径未找到。</p>
<p>当我们成功启动项目后，在浏览器中打开 <code>http://localhost:8080/doc.html</code>，却没想到迎接我们的不是成功界面，而是下面的 <code>Whitelabel Error Page</code>。</p>
<p></p>
<p>然后到 <code>IDEA</code> 中一看日志，程序照常运行，也没报错，但是给我们抛出了一个 <code>WARN</code>，警告信息如下：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是因为我们为了解决上面的 <code>Bug</code> 而使用到了 <code>@EnableWebMvc</code>，由于它实现了 <code>WebMvcConfigurer</code> 接口，所以会导致我们访问识别。</p>
<p>这时候问题就来了，上面又需要这个注解，但是下面这个问题又不需要，那该怎么办呢？</p>
<p>其实很简单，既然我们要保留 <code>@EnableWebMvc</code>，那我们去配置个规则不就好了。</p>
<p>在项目的 <code>config</code> 包下，我们新建一个配置类 <code>WebMvcConfigurer</code> 记成 <code>WebMvcConfigurationSupport</code> 类，接着将 <code>dom.html</code> 过滤掉即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成上述配置后，再去运行项目，再到浏览器中去访问 <code>http://localhost:8080/doc.html</code> 应该就能正常访问 Knife4j 文档管理页面了。</p>
<h2> 总结</h2>
<p>以上就是 Spring Boot 中集成 Knife4j 文档管理工具的内容了，这里主要讲了下如何集成并且进行一个最简单的接口调试，关于更多 Knife4j 的个性化功能，可以去它的官网了解下。</p>
<p>此外，对于文中集成是所遇到的 <code>Bug</code>，如果你没有遇到，那么你应该顺利集成了，如果你也有遇到，那么不妨跟着我去试一下解决的办法。</p>
]]></content:encoded>
    </item>
    <item>
      <title>整合 FreeMarker 实例</title>
      <link>https://cunyu1943.site/JavaPark/md/java/springboot/20220107-integrated-freemarker.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/springboot/20220107-integrated-freemarker.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">整合 FreeMarker 实例</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 在之前的文章Spring Boot 整合 Thymeleaf中，我们学习了如何将模板 Thymeleaf 整合到 Spring Boot 中，那今天我们就来看看，另一个老牌的开源免费模板引擎 - FreeMarker！</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Fri, 07 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>在之前的文章<a href="https://cunyu1943.blog.csdn.net/article/details/107671467" target="_blank" rel="noopener noreferrer">Spring Boot 整合 Thymeleaf</a>中，我们学习了如何将模板 Thymeleaf 整合到 Spring Boot 中，那今天我们就来看看，另一个老牌的开源免费模板引擎 - FreeMarker！</p>
<h2> FreeMarker 简介</h2>
<blockquote>
<p>FreeMarker 是一款模板引擎：即一种基于模板和要改变的数据，并用来生成输出文本(HTML 网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个 Java 类库，是一款程序员可以嵌入他们所开发产品的组件。</p>
</blockquote>
<p>以上就是出自 FreeMarker 的官方定义，我们通过使用 FreeMarker，可以将我们所需的模板何数据渲染成 HTML，从而实现我们想要的效果。通过将模板与数据分开，让分工更加明确，模板方面则专注于如何将数据进行展现，而在数据方面，我们就可以专注于展示何种数据，下图就是我们以上所描述的 FreeMarker 的功能。</p>
<p></p>
<p>那接下来，我们就来看看，如何将 FreeMarker 像 Thymeleaf 一样整合到我们的 Spring Boot 中，让我们的开发更加简单。</p>
<h2> 准备工作</h2>
<h3> 环境准备</h3>
<p>正式开始之前，依然给出本文所基于的环境，避免环境问题可能给大家带来的影响。</p>
<ul>
<li>JDK 17（理论上推荐不低于 1.8 版本）</li>
<li>IDEA</li>
<li>SpringBoot 2.x</li>
</ul>
<h3> 添加 FreeMarker 依赖</h3>
<p>开始之前，我们需要添加 FreeMarker 的相关依赖，同样这里我们可以选择两种方式。一种是在创建项目时就添加上，另一种则是创建项目后在项目 <code>pom.xml</code> 文件中手动添加，接下来我们分别来看看两种不同的方式应该如何添加。如果还不清楚如何创建 Spring Boot 项目，可以参照我之前的一篇文章：<a href="https://cunyu1943.blog.csdn.net/article/details/119618308" target="_blank" rel="noopener noreferrer">创建 Spring Boot 项目的 3 种方式</a>。</p>
<ol>
<li><strong>第一种</strong></li>
</ol>
<p>在使用 IDEA 创建 Spring Boot 新项目时，添加依赖时将模板引擎中的 <code>Apache FreeMarker</code> 勾选上。</p>
<p></p>
<p>2.<strong>第二种</strong></p>
<p>如果在创建时未添加 FreeMarker 模板引擎依赖，或者在项目开始创建之初并未有此需求，但后续过程中又增加了该需求，则此时可以直接在项目 <code>pom.xml</code> 中手动添加 FreeMarker 依赖即可。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 添加 FreeMarker 相关配置</h3>
<p>添加依赖后，我们需要在项目配置文件 <code>application.yml</code> 中添加 FreeMarker 的相关配置。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 编写实体类和 Controller</h2>
<h3> 编写实体类</h3>
<p>创建一个 <code>User</code> 类，并将其各种 <code>setter</code>、<code>getter</code>、构造方法等完成，这里我依然使用了 Lombok 插件，以便简化我们的代码。关于该插件的更多用法，可以参照我之前的文章：<a href="https://blog.csdn.net/github_39655029/article/details/119992626" target="_blank" rel="noopener noreferrer">Lombok 的安装及使用指南</a>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 编写 Controller</h3>
<p>这里我们创建一个 <code>User</code> 对象，然后设置其年龄、Email、姓名等相关信息，然后将其加到属性中，方便传输到前端进行展示。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 数据渲染</h3>
<p>当完成实体类和 Controller 编写后，我们就可以利用模板来进行展示了。我们在项目的 <code>resources/templates</code> 路进行新建一个 <code>index.ftl</code> 文件，注意这里文件名要保持和 Controller 中 <code>index</code> 方法所返回的字符串一致。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 测试</h3>
<p>将我们的项目启动起来，然后在浏览器中访问如下路径：</p>
<blockquote>
<p><a href="http://localhost:8080/index" target="_blank" rel="noopener noreferrer">http://localhost:8080/index</a></p>
</blockquote>
<p>如果显示如下图中的信息，那么就说明我们此次的整合工作顺利完成！</p>
<p></p>
<h2> 总结</h2>
<p>以上就是 Spring Boot 整合 FreeMarker 的具体过程了，可以结合之前的文章：<a href="https://cunyu1943.blog.csdn.net/article/details/107671467" target="_blank" rel="noopener noreferrer">Spring Boot 整合 Thymeleaf 实例</a>共同阅读，对比 Thymeleaf 和 FreeMarker 在整合过程中的一些共同点和不同点，相信你会有更多的收获。</p>
]]></content:encoded>
    </item>
    <item>
      <title>整合 Thymeleaf 实例</title>
      <link>https://cunyu1943.site/JavaPark/md/java/springboot/20220108-integrated-thymeleaf.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/springboot/20220108-integrated-thymeleaf.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">整合 Thymeleaf 实例</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 什么是 Thymeleaf Thymeleaf 是新一代的 Java 模板引擎，类似于 Velocity、FreeMarker 等传统引擎，其语言和 HTML 很接近，而且扩展性更高； Thymeleaf 的主要目的是将优雅的模板引入开发工作流程中，并将 HTML 在浏览器中正确显示。同时能够作为静态引擎，让开发成员之间更方便协作开发； Spring Boot 官方推荐使用模板，而且 Spring Boot 也为 Thymeleaf 提供了完整的自动化 配置解决方案； Thymeleaf 使用教程请戳 Tutorial: Using Thymeleaf，配合 Spring 使用的教程请戳 Tutorial: Thymeleaf + Spring。</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Sat, 08 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 什么是 Thymeleaf</h2>
<ul>
<li>
<p>Thymeleaf 是新一代的 Java 模板引擎，类似于 Velocity、FreeMarker 等传统引擎，其语言和 HTML 很接近，而且扩展性更高；</p>
</li>
<li>
<p>Thymeleaf 的主要目的是将优雅的模板引入开发工作流程中，并将 HTML 在浏览器中正确显示。同时能够作为静态引擎，让开发成员之间更方便协作开发；</p>
</li>
<li>
<p>Spring Boot 官方推荐使用模板，而且 Spring Boot 也为 Thymeleaf 提供了完整的自动化 配置解决方案；</p>
</li>
<li>
<p>Thymeleaf 使用教程请戳 <a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html" target="_blank" rel="noopener noreferrer">Tutorial: Using Thymeleaf</a>，配合 Spring 使用的教程请戳 <a href="https://www.thymeleaf.org/doc/tutorials/3.0/thymeleafspring.html" target="_blank" rel="noopener noreferrer">Tutorial: Thymeleaf + Spring</a>。</p>
</li>
</ul>
<h2> 整合过程</h2>
<h3> 准备过程</h3>
<p>正式开始整合过程之前，这里先给出本文的搭建环境，方便大家进行后续内容的学习。</p>
<ul>
<li>JDK 11（理论上其他版本的 JDK 也是可以的，但是更为推荐 JDK 1.8 及以后的版本）</li>
<li>IDEA（这里没有啥要求，但我个人的话是出新的版本我就会更新，虽然臃肿，但是更新了确实好用 😂）</li>
<li>SpringBoot 2.x（现在主流应该都是 2.x 版本，1.x 的都是老一点的版本了）</li>
</ul>
<h3> 添加 Thymeleaf 依赖</h3>
<p>添加 Thymeleaf 依赖有两种方式：</p>
<ol>
<li><strong>第一种</strong></li>
</ol>
<p>在新建项目时添加，在 <code>Templeate Engines</code> 中勾选 Thymeleaf；</p>

<ol start="2">
<li><strong>第二种</strong></li>
</ol>
<p>对于忘记在新建项目时未添加 Thymeleaf 依赖的项目，可以直接在项目的 <code>pom.xml</code> 中手动添加依赖即可；</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 编写实体类和 Controller</h3>
<ol>
<li>新建实体类 <code>User</code></li>
</ol>
<p>这里因为使用 Lombok，所以省去了各种 <code>setter</code>、<code>getter</code>，同时还省去了各种构造方法和重写 <code>toString()</code> 等方法，大大简化了代码。而我们所要做的，仅仅是在 <code>pom.xml</code> 中添加 Lombok 的依赖，然后在我们的实体类中加入对应的注解即可。</p>
<p>以下是在 <code>pom.xml</code> 中插入 Lombok 依赖的对应代码。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们就可以编写我们的实体类，这里主要用到了 <code>@Data</code>、<code>@Component</code>、<code>@AllArgsConstructor</code> 、<code>NoArgsConstructor</code> 四个注解，其中各个注解的含义如下：</p>
<ul>
<li>
<p><code>@Component</code>：把类实例化到 Spring 容器，相当于在配置文件中配置；</p>
</li>
<li>
<p><code>@Data</code> ：给类的所有属性提供 <code>get</code> 和 <code>set</code> 方法，此外还有 <code>equals、canEqual、hashCode、toString</code> 方法以及 <strong>默认参数为空的构造方法</strong>；</p>
</li>
<li>
<p><code>@AllArgsConstructor</code>：为类提供一个 <strong>全参构造方法</strong>，但此时不再提供默认构造方法；</p>
</li>
<li>
<p><code>@NoArgsConstructor</code>：因为使用了 <code>AllArgsConstructor</code> 会导致类没有默认空参构造方法，所以此时需要它为类提供一个 <strong>无参构造方法</strong>；</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>编写 Controller</li>
</ol>
<p>此时主要需要注意的是 <code>setViewName()</code> 和 <code>addObject()</code>，前者表示方法对应的前端页面，也就是我们模板中对应文件名的 <code>.html</code> 文件，而后者则主要给属性注入值，然后将属性传递到前端模板。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 创建 Thymeleaf 模板</h3>
<p>第上面的代码中，我们设置了跳转的视图为 <code>index</code>，所以我们需要在 <code>src/main/resources/templates</code> 中创建 <code>index.html</code>。</p>
<p></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 测试</h3>
<p>启动项目，然后在浏览器中访问 <code>http://localhost:8080/index</code>，如果出现下图中的信息，说明整合成功。</p>
<p></p>
<h2> 注意事项</h2>
<p>为了方便使用，我们在使用 Thymeleaf 模板时，可以添加一些自己的配置。而添加的位置则是项目的配置文件 <code>application.yml</code>，项目默认配置文件应该是 <code>application.properties</code>，但 SpringBoot 更加推荐使用 yml 来配置，所以我们这里需要手动将其改为 yml 的格式。</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>好了，以上就是我们今天的所有内容了。今天主要介绍了 Themeleaf 的相关简介，然后对利用 SpringBoot 整合 Thymeleaf 的过程进行了描述，最后则是使用 Thymeleaf 中常用的一些相关配置的注意事项。</p>
]]></content:encoded>
    </item>
    <item>
      <title>集成 Spring Security</title>
      <link>https://cunyu1943.site/JavaPark/md/java/springboot/20220109-integrated-security.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/springboot/20220109-integrated-security.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">集成 Spring Security</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 Spring Security 是 Spring 家族中一个强大可定制的身份验证和访问控制框架，和 Shiro 一样，它们都具有认证、授权、加密等用于权限管理的功能。但相比于 Shiro，Spring Security 的功能无疑更加强大。而且作为 Spring 家族中的一份子，配合家族中的其它兄弟 - Spring Boot、Spring Cloud 使用起来更加丝滑。</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Sun, 09 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>Spring Security 是 Spring 家族中一个强大可定制的身份验证和访问控制框架，和 Shiro 一样，它们都具有认证、授权、加密等用于权限管理的功能。但相比于 Shiro，Spring Security 的功能无疑更加强大。而且作为 Spring 家族中的一份子，配合家族中的其它兄弟 - Spring Boot、Spring Cloud 使用起来更加丝滑。</p>
<p>今天就来看看，如何在 Spring Boot 集成 Spring Security，实现最简单的认证授权功能。</p>
<h2> 集成过程</h2>
<p>要在 Spring Boot 集成 Security，其实很简单，可以总结为如下几个步骤：</p>
<ol>
<li>首先是创建一个 Spring Boot 项目。</li>
<li>添加 Spring Security 相关依赖。</li>
</ol>
<h3> 创建 Spring Boot 项目</h3>
<p>这个过程只要你学习过 Spring Boot，那么你肯定是已经很熟悉了，所以在这里我也就不再赘述了。当然，如果你对这个过程还是不太熟悉，那么可以参考我之前的一篇文章：</p>
<blockquote>
<p><a href="/JavaPark/md/java/springboot/20220102-the-methods-to-create-springboot-project.html" target="blank">Spring Boot 基础教程：创建项目的 3 种方式</a></p>
</blockquote>
<h3> 添加相关依赖</h3>
<p>项目创建好之后，一般默认是已经添加了 <code>Web</code> 依赖，这个时候，我们只需要在项目的 <code>pom.xml</code> 文件中添加 Spring Security 的相关依赖即可。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 启动项目</h3>
<p>完成上面步骤的操作后，接下来我们直接启动项目，然后在浏览器中访问以下地址：</p>
<blockquote>
<p><code>http://localhost:8080</code></p>
</blockquote>
<p>不出意外应该会跳出以下的界面，让我们登录。此时你可能会很纳闷，为什么我们只加了个 Spring Security 的依赖，怎么就需要登陆了呢？而且，登录的话，用户名和密码又是多少呢？</p>
<p>再仔细观察浏览器的地址栏，此时我们访问的地址也变了，变成了：</p>
<blockquote>
<p><code>http://localhost:8080/login</code></p>
</blockquote>
<p>这又是怎么一回事呢？</p>
<p>原来这就是 Spring Security 为我们的项目所提供的保护机制。在添加 Spring Security 之后，此时再去访问项目，它就会自动重定向到 Security 所提供的登录页面，也就是下面的界面。</p>
<p></p>
<p>同样的 Spring Security 也为我们所提供了一个默认的用户名，也就是 <code>user</code>，至于密码，这就谁都说不准了。因为它会随着我们项目的每次启动而自动生成，所以每次的登录密码都是不一样的。至于要如何获取，那就得去我们的 IDEA 查看控制台查看日志了。</p>
<p>查看日志我们可以发现如下的一行，其实这就是 Spring Security 所提供的登录密码了。这是一个 <code>UUID</code> 字符串，是 Spring Security 为默认的 <code>user</code> 用户所生成的临时密码。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h3> 修改默认登录用户密码</h3>
<p>虽然 Security 提供了默认的 <code>user</code> 用户，但是大家都知道这是默认的，而且需要每次去日志中找登录密码，那有没有方法可以自定义我们的用户和密码呢？答案是，有的。</p>
<p>Security 为我们提供了配置，我们可以在项目的配置文件 <code>application.yml</code> 中去定义自己的用户名和密码，然后它就会覆盖掉 Security 为我们提供的默认用户和密码。</p>
<p>在项目的配置文件中配置用户和密码，当然，项目生成的默认配置文件是位于 <code>resources</code> 目录下的 <code>application.properties</code>，所以需要将其后缀改成 <code>.yml</code>。关于 Spring Boot 中的这两种配置文件的区别，可以参考我之前的一篇文章：</p>
<blockquote>
<p><a href="/JavaPark/md/java/springboot/20220103-configuration.html" target="blank">Spring Boot 基础教程：配置详解</a></p>
</blockquote>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重启我们的项目，就可以用我们配置的用户和密码来进行登陆了。</p>
<h3> 创建页面</h3>
<p>新建一个 <code>Controller</code> 页面，用于打印最经典的 <code>Hello World!</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新启动项目后，在浏览器中访问以下地址：</p>
<blockquote>
<p><code>http://localhost:8080/hello</code></p>
</blockquote>
<p>然后 Spring Security 就会重定向到 <code>http://localhost:8080/login</code> 页面，此时我们用上面配置的用户名和密码进行登录，登录成功后就会跳转到我们的 <code>/hello</code> 页面了，页面中会打印 <code>Hello World!</code></p>
<p></p>
<h2> 总结</h2>
<p>以上就是 <code>Spring Boot</code> 集成 <code>Spring Security</code> 的实例了，主要演示了最经典的 <code>Hello World</code> 程序。关于更多 <code>Spring Security</code> 的知识，我们后续的文章再见吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>Spring Boot 简介</title>
      <link>https://cunyu1943.site/JavaPark/md/java/springboot3/20230114-first-app.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/springboot3/20230114-first-app.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">Spring Boot 简介</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 简介 Spring Boot 能够帮助开发者创建独立的、可运行的、生产级的基于 Spring 的应用程序。通过基础的 Spring 平台和第三方库的组合，我们就能十分轻松地使用 Spring Boot 进行开发，而这些 Spring Boot 应用只需要简单的配置即可。</description>
      <category>Spring Boot 3 基础教程</category>
      <pubDate>Sun, 09 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 简介</h2>
<p><code>Spring Boot</code> 能够帮助开发者创建独立的、可运行的、生产级的基于 <code>Spring</code> 的应用程序。通过基础的 <code>Spring</code> 平台和第三方库的组合，我们就能十分轻松地使用 <code>Spring Boot</code> 进行开发，而这些 <code>Spring Boot</code> 应用只需要简单的配置即可。</p>
<p>而通过 <code>Spring Boot</code> 创建后的 <code>Java</code> 程序我们既能够通过 <code>java -jar</code> 的方式对进行部署，也可以采取更为传统的部署 <code>war</code> 的方式。</p>
<p><code>Spring Boot</code> 的愿景是做到以下几点：</p>
<ol>
<li>为广大 <code>Spring</code> 开发者提供一个更快、更广泛的入门体验。</li>
<li>开箱即用，能够快速上手。</li>
<li>提供一系列大型项目中常见的非功能性特性，如嵌入式服安全性、健康监测等。</li>
<li>无需 <code>XML</code>&nbsp; 配置</li>
</ol>
<h2> 前言</h2>
<p>Spring Boot 3 已经发布好久了，在网上也看到了不少相关的教程，于是也想着取学习一下，顺便写写相关的内容。</p>
<p>一如既往的，我们从最学习编程最经典的入门程序 <code>Hello World</code> 开始，学习如何用 Spring Boot 3 来创建一个 <code>Hello World</code> 程序。</p>
<p>正式开始之前，既然我们要用 Spring Boot 3，那得先知道使用它的相关前提。要使用 Spring Boot 3，那么我们的 <code>JDK</code> 版本最低必须要 <code>Java 17</code>，同时 <code>Maven</code> 版本最低版本也必须是 <code>3.5+</code>。</p>
]]></content:encoded>
    </item>
    <item>
      <title>简介及入门实例</title>
      <link>https://cunyu1943.site/JavaPark/md/java/springmvc/20220201-intro-and-quick-start.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/springmvc/20220201-intro-and-quick-start.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">简介及入门实例</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 MVC 简介 所谓 MVC（Model、View、Controller），其实是一种软件设计范式，通过将 业务逻辑、数据、显示分离的方法来组织代码，最主要的目的是降低视图和业务逻辑代码之间的双向耦合。其中的各部分如下：</description>
      <category>Spring MVC 指南</category>
      <pubDate>Sun, 16 Jan 2022 20:11:39 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> MVC 简介</h2>
<p>所谓 MVC（Model、View、Controller），其实是一种软件设计范式，通过将 <strong>业务逻辑、数据、显示分离的方法来组织代码，最主要的目的是降低视图和业务逻辑代码之间的双向耦合</strong>。其中的各部分如下：</p>
<ol>
<li>
<p><strong>Model（模型）</strong>：数据模型，用于提供要展示的数据，因此包含数据和行为，现在一般分离为数据访问层（<code>Dao</code>）和服务层（<code>Service</code>）。模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p>
</li>
<li>
<p><strong>View（视图）</strong>：负责模型的展示，一般就是呈现给我们用户看的东西。</p>
</li>
<li>
<p><strong>Controller（控制器）</strong>：接收用户请求，然后委托给模型进行处理（状态改变），处理后再将返回的模型数据反馈给视图，然后由视图负责展示，即 <code>Controller</code> 充当 <code>Model</code> 和 <code>View</code> 之间的信鸽。</p>
</li>
</ol>
<h2> Spring MVC 简介</h2>
<p>Spring MVC 是一个用于构建 Web 应用程序的 Java 框架，遵循 <strong>模型 - 视图 - 控制器</strong> 设计模式。它实现了一个 Spring 核心框架的所有基本功能，如 IoC（控制反转）、DI（依赖注入）等。</p>
<p>Spring MVC 通过使用 <code>DispatcherServlet</code>，使得我们能够方便地在 Spring 框架中使用 MVC ，其中 <code>DispatcherServlet</code> 是一个接收传入请求并将其映射到正确的资源类。</p>
<h2> Spring MVC 结构</h2>
<p></p>
<ul>
<li>
<p><strong>Model</strong>：包含应用程序的数据，数据可以是单一对象，也可以是对象的集合；</p>
</li>
<li>
<p><strong>Controller</strong>：包含应用程序的业务逻辑，通常使用 <code>@Controller</code> 注解将类标记为 Controller.</p>
</li>
<li>
<p><strong>View</strong>：一特定格式提供的信息，通常使用 JSP + JSTL 来创建视图页面，此外，Spring 也支持 Themeleaf 和 FreeMaker 等视图技术；</p>
</li>
<li>
<p><strong>Front Controller</strong>：Spring MVC 中，由 <code>DispatcherServlet</code> 类充当前端控制器，负责管理 Spring MVC 应用程序的流程。</p>
</li>
</ul>
<h2> Spring MVC 工作流程</h2>
<p></p>
<ol>
<li>
<p>如上图所示，首先，传入的请求（<code>request</code>）被工作在 <strong>前端控制器</strong>（<code>front Controller</code>）的 <code>DispatcherServlet</code> 接收并拦截；</p>
</li>
<li>
<p>然后 <code>DispatcherServlet</code> 从 XML 配置文件中获取 <strong>处理器映射器</strong>（<code>Handler Mapping</code>）的条目，处理器根据请求找到对应 <code>Handler</code>， 同时将请求转发给控制器（<code>Controller</code>）；</p>
</li>
<li>
<p>接着 <strong>控制器</strong>（<code>Controller</code>）解析返回一个 <code>ModelAndeView</code> 对象给 <code>DispatcherServlet</code> ；</p>
</li>
<li>
<p>最后 <code>DispatcherServlet</code> 根据控制器（<code>Controller</code>）返回的对象去检查 XML 配置文件中对应的 <strong>视图解析器</strong>（<code>ViewResolver</code>）条目，同时调用指定的视图组件，在前端呈现出视图（<code>View</code>）。</p>
</li>
</ol>
<h2> Spring MVC 的优势</h2>
<ol>
<li>
<p>简化 Web 层的开发，易于维护；</p>
</li>
<li>
<p>天生与 Spring 框架集成；</p>
</li>
<li>
<p>提供强大的约定大于配置的契约式编程支持；</p>
</li>
<li>
<p>易于对 Web 单元测试；</p>
</li>
<li>
<p>支持灵活的 URL 到页面控制器的映射；</p>
</li>
<li>
<p>支持静态资源；</p>
</li>
<li>
<p>支持 RESTful 风格；</p>
</li>
<li>
<p>灵活的数据验证、格式化和数据绑定机制，能使用任何对象进行数据绑定，不必实现特定框架 API；</p>
</li>
<li>
<p>提供强大的 JSP 标签库，简化 JSP 开发；</p>
</li>
<li>
<p>支持灵活的本地化、主题等解析；</p>
</li>
<li>
<p>更加简单的异常处理；</p>
</li>
</ol>
<h2> 如何创建一个 Spring MVC 实例</h2>
<p>上面我们讲了 Spring MVC 的结构、工作流程以及其优缺点，下面我们就来看看，如何创建一个 Spring MVC 实例。</p>
<ol>
<li>首先创建一个普通的 Maven 项目；</li>
</ol>
<p></p>
<p></p>
<p>好了，完成上面两步之后，我们的普通 Maven 项目就创建 OK 了。</p>
<ol start="2">
<li>既然是 Web 项目，那肯定得加入 Web 框架的支持，选中项目后右键，选择 <code>Add Framework Support</code>，然后选中 <code>Web Application</code> 添加即可；</li>
</ol>
<p></p>
<ol start="3">
<li>创建 Maven 项目，并添加 Web 框架之后之后，我们的项目结构如下图：</li>
</ol>
<p></p>
<ol start="4">
<li>接下来，在 <code>pom.xml</code> 中添加相关依赖，一般需要 Junit、Servlet、Spring MVC 等框架的依赖；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，为了避免后面有可能出现的静态资源导出问题，我们也可以在 <code>pom.xml</code> 添加如下配置：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li>接下来，在 <code>web.xml</code> 中注册 <code>DispatcherServlet</code>；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时在 <code>/src/main/resources</code> 目录下新建一个 Spring MVC 配置文件 <code>springmvc-servlet.xml</code> （文件名可以自定义，可以根据自己喜好自定义）；</p>
<p></p>
<ol start="6">
<li>配置 Spring MVC 的配置文件，即上一步中所创建的 <code>springmvc-servlet.xml</code>；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7">
<li>创建控制类 Controller</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8">
<li>创建视图层，在 <code>WEB-INF/jsp</code> 目录下新建 <code>hello.jsp</code>（没有的目录和文件需要自己创建），然后就可以取出 <code>Controller</code> 中 <code>Model</code> 所存放的值或者对象；</li>
</ol>
<div class="language-jsp line-numbers-mode" data-ext="jsp"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="9">
<li>以上步骤都配置好之后，接下来就去配置 Tomcat；</li>
</ol>
<p></p>
<p></p>
<p>填写相关配置，同时点击 <code>Fix</code></p>
<p></p>
<p></p>
<ol start="10">
<li>点击启动 Tomcat，然后在浏览器中访问 <code>localhost:8080/hello</code></li>
</ol>
<p></p>
<h2> 注意事项</h2>
<p>按照上述步骤操作后如果出现访问不了的情况，可以按照如下步骤进行设置：</p>
<ol>
<li>依次进入 <code>Project Structure -&gt; Artifacts</code></li>
</ol>
<p></p>
<ol start="2">
<li>在 <code>WEB-INF</code> 目录新建 <code>lib</code> 目录，然后将所有 <code>Library Files</code> 添加到 <code>lib</code> 目录，然后重启 Tomcat 即可；</li>
</ol>
<p></p>
<h2> 总结</h2>
<p>以上就是 Spring MVC 的相关简介以及如何利用 IDEA 来创建一个 Spring MVC 实例的所有内容了。原创不易，如果你觉得我的文章对你有所帮助，那就帮忙点赞关注一波吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>简介及入门实例</title>
      <link>https://cunyu1943.site/JavaPark/md/java/vue3/20221001-introduction.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/vue3/20221001-introduction.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">简介及入门实例</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 之前已经学习过来 HTML、 CSS 以及 JavaScript 的相关知识，也算是基本了解了关于这前端三件套的一些基本用法。今天就来了解下，当前前端开发中最炙手可热的当红辣子鸡 - Vue。本文主要介绍 Vue 的一些入门知识和最经典的 Vue 入门 Hello World 程序，如果你想了解的是更高级的使用技巧，那么完全可以忽略。</description>
      <category>Vue3 笔记</category>
      <pubDate>Sat, 01 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>之前已经学习过来 <code>HTML</code>、 <code>CSS</code> 以及 <code>JavaScript</code> 的相关知识，也算是基本了解了关于这前端三件套的一些基本用法。今天就来了解下，当前前端开发中最炙手可热的当红辣子鸡 - <code>Vue</code>。本文主要介绍 <code>Vue</code> 的一些入门知识和最经典的 <code>Vue</code> 入门 <code>Hello World</code> 程序，如果你想了解的是更高级的使用技巧，那么完全可以忽略。</p>
<h2> Vue 简介</h2>
<h3> Vue 是什么</h3>
<p><code>Vue</code> 是一套用于构建用户界面的 <strong>渐进式框架</strong>，不同于其他框架， <code>Vue</code> 被设计为可以自底向上逐层应用，核心库只关注视图层，具有易上手，与第三方库整合方便等优点。此外， <code>Vue</code> 还支持多种现代化的工具链以及类库，使得它能够为复杂的单页应用提供驱动。</p>
<h3> Vue 的特点</h3>
<ol>
<li>采用组件化模式，从而提高了代码复用率，更容易维护。</li>
<li>声明式编码，程序员无需直接操作 <code>DOM</code> ，从而提高开发效率。</li>
<li>利用虚拟 <code>DOM</code> + 优秀 <code>Diff</code> 算法，最大化复用 <code>DOM</code> 节点。</li>
</ol>
<h3> Vue 的安装</h3>
<p>Vue 的安装主要有两种方式，一种是通过在文件中直接用 <code>&lt;script&gt;</code> 标签引入的方式，另一种则是则是使用 <code>npm</code> 的方式，接下来我们就来看看两种方式是如何进行安装的。</p>
<p><strong>标签引入的方式</strong></p>
<p>假设我们创建了一个 HTML 文件，那么我们此时只需要引入其中以下两个版本中其中一个就可以了。而两者的区别顾名思义，所谓开发环境版本，就是我们日常开发学习所使用的版本，它包含了完整的警告和提示模式，方便我们定位错误，提高我们的开发效率。而生产环境版本，则是对开发环境进行了精简，剔除了其中的警告，尽可能优化了尺寸和速度，针对上线生产所用，有助于生产环境效率的提升。针对生产环境版本，更加推荐大家链接到一个明确的版本号和构建文件，从而避免新版本对老版本中特性造成破坏，影响用户体验。</p>
<ul>
<li>开发环境版本</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>生产环境版本</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li><strong>npm 安装</strong></li>
</ol>
<p>以上的两种方式更适合于我们日常学习和小型应用开发，而如果我们要使用 Vue 构建大型应用时，官方更加推荐我们使用 NPM 进行安装，它能够更好的配合类似 <code>webpack</code> 、 <code>Rollup</code> 等打包器的使用，而且 Vue 也提供了配套的工具来进行单文件组件的开发，而安装的方式也很简单，只要我们的电脑上安装了 Node.js，那我们就可以通过命令行来进行最新稳定版 Vue 的安装了，安装的命令如下。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h2> Vue 入门实例</h2>
<p>首先，我们创建一个 <code>.html</code> 文件，用于交互。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们引入 <code>Vue3</code> 的相关包，这里引入的方式和之前 <code>JavaScript</code> 中介绍的引入的方式一样，直接在 <code>head</code> 部分进行引入即可。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就是在 <code>body</code> 标签中添加模板用于将数据渲染到 <code>DOM</code> 的系统。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后得到我们的完整文件如下。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将文件用浏览器打开，在页面中应该就会显示如下信息了。</p>
<p></p>
<p>以上就是一个最简单的 <code>Vue</code> 入门小案例，如何在网页中打印 <code>Hello World！</code> 。虽然看起来十分简单，和我们用 <code>HTML</code> 中的字符串模板来实现相同的效果也十分类似，但实际上 <code>Vue</code> 在背后做了许多我们看不见的工作。</p>
<h2> 总结</h2>
<p>以上就是今天的所有内容了，主要从两个方面着手，一方面从 <code>Vue</code> 的定义、特点、安装来对 <code>Vue</code> 进行了介绍，另一方面则用一个最简单经典的 <code>Hello World！</code> 入门小案例来向大家简单介绍下 <code>Vue</code> 的使用方式。</p>
]]></content:encoded>
    </item>
    <item>
      <title>常用指令</title>
      <link>https://cunyu1943.site/JavaPark/md/java/vue3/20221002-common-commands.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/vue3/20221002-common-commands.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">常用指令</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 插值 文本 要进行文本部分替换，可以用 {{}} 将变量元素括起来； &amp;lt;div id = &amp;quot;app&amp;quot;&amp;gt; {{message}} &amp;lt;/div&amp;gt;</description>
      <category>Vue3 笔记</category>
      <pubDate>Sun, 02 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 插值</h2>
<h3> 文本</h3>
<p>要进行文本部分替换，可以用 <code>{{}}</code> 将变量元素括起来；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要进行文本全部替换，则可以用 <code>v-text</code> 来进行，比如下面的“测试”将会被 <code>message</code>的内容所替代；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 原始 HTML</h3>
<p>双大括号会将数据解释为普通文本，但如果我们要插入原始的 HTMl 内容，此时就需要使用 <code>v-html</code> 指令；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 绑定元素属性</h2>
<p>要实现给元素绑定属性，可以使用 <code>v-bind</code> 指令，其完整写法是 <code>v-bind:属性名="表达式"</code>，简写则可以直接省略掉 <code>v-bind</code>，只保留 <code>:属性名="表达式"</code>，但它属于单向绑定；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 条件与循环</h2>
<p>条件指令，也就是我们日常开发中所使用的 <code>if</code>，用 <code>v-if</code> 指令来进行绑定；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，还可以使用 <code>v-else</code> 指令来表示 <code>v-if</code> 的 <code>else</code> 块，它必须紧跟在 <code>v-if</code> 或 <code>v-else-if</code> 元素的后面，否则它将不会被识别；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>循环指令，也就是我们经常用到的 <code>for</code> 循环，用 <code>v-for</code> 指令来进行绑定，根据数据生成列表结构，其语法是 <code>(item, index) in 数据</code>；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 处理用户输入</h2>
<p>要进行用户与应用之间的交互，可以使用 <code>v-on</code> 指令来添加事件监听器，通过它来调用 Vue 实例中定义的方法，此外为了减少开发过程中的代码量，我们还可以使用 <code>@</code> 来替换 <code>v-on</code> ，它俩可以达到同样的效果；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了处理不去处理 DOM 事件细节，而只用纯粹的数据逻辑来进行操作，Vue 中为 <code>v-on</code> 又提供了 <strong>事件修饰符</strong>，常见时间修饰符如下：</p>
<table>
<thead>
<tr>
<th>事件修饰符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.stop</code></td>
<td>表示阻止事件继续传播</td>
</tr>
<tr>
<td><code>.prevent</code></td>
<td>表示时间不再重载</td>
</tr>
<tr>
<td><code>.capture</code></td>
<td>表示使用事件捕获模式</td>
</tr>
<tr>
<td><code>.self</code></td>
<td>表示是当前元素自身时触发处理函数</td>
</tr>
<tr>
<td><code>.once</code></td>
<td>表示事件只触发一次</td>
</tr>
<tr>
<td><code>.passive</code></td>
<td>表示事件立即触发</td>
</tr>
</tbody>
</table>
<p>同时，为了实现表单输入和应用状态之间的双向绑定，我们可以使用 <code>v-model</code> 指令；</p>
<p>通过 <code>v-model</code> 指令，能够便捷的设置和获取表单元素的值，而且绑定的数据会和表单元素值相关联；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 元素的显示与隐藏</h2>
<p>要实现元素的显示与隐藏，我们可以通过 <code>v-show</code> 这个指令，它会根据表达式的真假，来切换元素的显示和隐藏状态。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Axios 简单使用指南</title>
      <link>https://cunyu1943.site/JavaPark/md/java/vue3/20221003-axios-quickstart.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/vue3/20221003-axios-quickstart.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">Axios 简单使用指南</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 概述 什么是 Axios ？ Axios 是一个开源的基于 promise 的 HTTP 请求库，一般常用于浏览器和 node.js 中。它能够在具有相同代码库的浏览器和 nodejs 中同时运行，在服务器侧，它利用服务器端原生的 node.js http 模块，而在客户端侧（一般是浏览器），则使用的是 XMLHttpRequest。</description>
      <category>Vue3 笔记</category>
      <pubDate>Mon, 03 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 概述</h2>
<h3> 什么是 Axios ？</h3>
<p><code>Axios</code> 是一个开源的基于 <code>promise</code> 的 <code>HTTP</code> 请求库，一般常用于浏览器和 <code>node.js</code> 中。它能够在具有相同代码库的浏览器和 <code>nodejs</code> 中同时运行，在服务器侧，它利用服务器端原生的 <code>node.js</code> <code>http</code> 模块，而在客户端侧（一般是浏览器），则使用的是 <code>XMLHttpRequest</code>。</p>
<p>从 <code>Vue 2.0</code> 版本开始，就极力推荐使用 <code>Axios</code> 来进行 <code>ajax</code> 请求，其源码仓库为：</p>
<blockquote>
<p><code>https://github.com/axios/axios</code></p>
</blockquote>
<h3> 特性</h3>
<ul>
<li>从浏览器中创建 <code>XMLHttpRequests</code></li>
<li>从 <code>node.js</code> 创建 <code>http</code> 请求</li>
<li>支持 <code>Promise API</code></li>
<li>拦截请求和响应</li>
<li>转换请求数据和响应数据</li>
<li>取消请求</li>
<li>支持自动转换 <code>JSON</code> 数据</li>
<li>客户端侧支持防御 <code>XSRF</code></li>
</ul>
<h3> Axios 的安装</h3>
<p><code>Axios</code> 安装主要有两种方式，一种是通过引入 <code>CDN</code>，另一种则是通过 <code>npm</code> 进行安装，两中安装的方式介绍如下。</p>
<ol>
<li>使用 CDN</li>
</ol>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>使用 npm</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 支持的浏览器</h3>
<table>
<thead>
<tr>
<th><img src="https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png" alt="Chrome"></th>
<th><img src="https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png" alt="Firefox"></th>
<th><img src="https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png" alt="Safari"></th>
<th><img src="https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png" alt="Opera"></th>
<th><img src="https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png" alt="Edge"></th>
<th><img src="https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png" alt="IE"></th>
</tr>
</thead>
<tbody>
<tr>
<td>Latest ✔</td>
<td>Latest ✔</td>
<td>Latest ✔</td>
<td>Latest ✔</td>
<td>Latest ✔</td>
<td>8+ ✔</td>
</tr>
</tbody>
</table>
<h2> Axios 的使用</h2>
<p><code>Axios</code> 提供了两种不同的方式来发送 <code>HTTP</code> 请求，其中一种是直接通过 <code>axios()</code> 方法，而另一种则是通过 <code>axios</code> 对象提供的跟 <code>HTTP</code> 方法对应起来的方法来发起请求，例如：</p>
<ul>
<li><code>axios.get()</code></li>
<li><code>axios.post()</code></li>
<li><code>axios.update()</code></li>
<li><code>axios.put()</code></li>
<li>……</li>
</ul>
<h3> get 请求</h3>
<ul>
<li>语法</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>实例</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> post 请求</h3>
<ul>
<li>语法：</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>实例</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> put 请求</h3>
<ul>
<li>语法</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>实例</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> delete 请求</h3>
<ul>
<li>语法</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>实例</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>以上就是本文的所有内容了，主要介绍了 <code>Axios</code> 的定义、特性、如何安装以及所支持的浏览器，然后介绍了如何使用 <code>Axios</code> 来模拟发起最常用的 <code>GET</code>、<code>POST</code>、<code>PUT</code> 以及 <code>DELETE</code> 请求。</p>
]]></content:encoded>
      <enclosure url="https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png" type="image/png"/>
    </item>
    <item>
      <title>搭建 Vue + Vite 入门项目</title>
      <link>https://cunyu1943.site/JavaPark/md/java/vue3/20221004-vite-quickstart.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/vue3/20221004-vite-quickstart.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">搭建 Vue + Vite 入门项目</source>
      <description>作者：村雨遥 博客：JavaPark 吾生也有涯，而知也无涯。 前言 虽然市面上有很多的打包工具，例如 webpack、Rollup 以及 Parcel 等。毫无疑问，通过使用这些工具，在很大程度上改善了前端开发者的游戏体验。 但随着业务变得越来越复杂，我们不得构建比之前更大型的应用。此时，所需要处理的代码量也越来越大。这时候，上面提到的打包工具就开始遇到性能瓶颈，我们可能需要很长的时间才能启动开发服务器，这样一来，开发效率就变得越来越低。 针对这一现状，大佬们又构建了一个打包工具 ，也就是今天文章的主角 - Vite。Vite 旨在利用生态系统中的新进展来解决上面的问题，通过将应用中的 依赖 和 源码 相分开，从而缩减开发服务器的启动时间。</description>
      <category>Vue3 笔记</category>
      <pubDate>Tue, 04 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：村雨遥</p>
<p>博客：<a href="https://cunyu1943.github.io/JavaPark" target="_blank" rel="noopener noreferrer">JavaPark</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>虽然市面上有很多的打包工具，例如 <code>webpack</code>、<code>Rollup</code> 以及 <code>Parcel</code> 等。毫无疑问，通过使用这些工具，在很大程度上改善了前端开发者的游戏体验。
但随着业务变得越来越复杂，我们不得构建比之前更大型的应用。此时，所需要处理的代码量也越来越大。这时候，上面提到的打包工具就开始遇到性能瓶颈，我们可能需要很长的时间才能启动开发服务器，这样一来，开发效率就变得越来越低。
针对这一现状，大佬们又构建了一个打包工具 ，也就是今天文章的主角 - <code>Vite</code>。<code>Vite</code> 旨在利用生态系统中的新进展来解决上面的问题，通过将应用中的 <strong>依赖</strong> 和 <strong>源码</strong> 相分开，从而缩减开发服务器的启动时间。</p>
<h2> webpack、Rollup、Vite 的区别</h2>
<p>由于自己更多的是和后端打交道，所以这里对三者的区别介绍仅限于表面，至于更深一层的代码层面的区别，还请各位自行去了解。经过查阅资料，这里简单给出下 <code>webpack</code>、<code>Rollup</code> 以及 <code>Vite</code> 的区别，先说一个总结论：</p>
<blockquote>
<p><strong>webpack</strong> 更适合打包项目，<code>Rollup</code> 更适合打包库，而 <code>Vite</code> 基于 <code>Rollup</code>，实现了热更新的同时也十分适合打包项目。</p>
</blockquote>
<table>
<thead>
<tr>
<th>工具</th>
<th>webpack</th>
<th>Rollup</th>
<th>Vite</th>
</tr>
</thead>
<tbody>
<tr>
<td>区别</td>
<td>1. 支持代码切割，从而实现分包<br>2. 支持 <code>HMR</code>，实现热更新</td>
<td>1. 基于 <code>esm</code> 打包，生成的文件体积更小<br>2. 原生支持 <code>tree-shaking</code></td>
<td>1. 生产环境通过 <code>Rollup</code> 打包生成 <code>esm</code> 模块包，因此打包的体积小<br>2. 生产环境基于浏览器支持 <code>esm</code>，让浏览器解析模块，然后服务器按需编译返回<br>3. 热更新，实现按需编译，不像 <code>webpack</code> 需全部重新编译并更新</td>
</tr>
</tbody>
</table>
<h2> 搭建 Vite 项目</h2>
<p>说完上边的内容之后，接下来就来看看，如何大家我们的第一个 <code>Vite</code> 项目。</p>
<p>需要注意的是，要使用 <code>Vite</code> 的前提是电脑中有 <code>Node.js</code>，而且版本需要 <code>&gt;=12.0.0</code>，至于个别模块可能需要更高版本的 <code>Node.js</code> 才能正常运行，此时就需要注意升级 <code>Node.js</code> 的版本。</p>
<p>如果你不清楚你的电脑中是否安装了 <code>Node.js</code>，那么可以在控制台中使用如下命令进行查询。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>如何还是不太清楚，那么可以参考我之前的一篇文章：</p>
<blockquote>
<p><a href="https://cunyu1943.github.io/JavaPark/md/tools/windows/20220414-nodejs-install" target="_blank" rel="noopener noreferrer">Windows 教程：Node.js 安装教程</a></p>
</blockquote>
<p>初始工作做好之后，我们就可以开始搭建我们的第一个 <code>Vite</code> 项目了。</p>
<p>如果我们只是要构建一个 <code>Vite</code> 项目，那么简单地使用以下命令即可。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后根据提示进行相关设置即可，这里需要注意的是它会让我们选择框架，这就需要根据我们的需求来进行选择了。</p>
<p>比如我们要创建一个基于 <code>Vue</code> 的项目，那么可以选择 <code>Vue</code> 模板，然后再进行下一步。</p>
<p></p>
<p>选择变体，是基于 <code>Vue</code> 还是 <code>Vue-ts</code>。</p>
<p></p>
<p>最后，等待项目创建完毕即可。</p>
<p></p>
<p>然后根据它的提示，依次执行以下三个命令即可。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>接着在浏览器中访问以下地址：</p>
<blockquote>
<p><code>http://localhost:3000</code></p>
</blockquote>
<p>如果一切正常，那么应该就会出现以下的界面了，至此我们的第一个 <code>Vite</code> + <code>Vue</code> 项目就搭建成功了！</p>
<p></p>
<p>当然，除开使用上面的命令来创建之外，我们还可以通过附加的命令选项来执行项目的名称和想要使用的模板。不过这里需要注意，根据你电脑上 <code>npm</code> 版本的不同，需要使用不同的命令。</p>
<p>如果你的 <code>npm</code> 是 <code>6.x</code> 版本，那么要使用以下命令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>npm</code> 版本 <code>7.x</code> 及以上版本，那么则需要使用如下命令，一定不要忘记多出来的 <code>–</code>。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>同样的，我们依次执行提示的三条命令。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>最后，同样在浏览器中访问 <code>http://localhost:3000</code>，不出意外同样可以看到以下的界面。</p>
<p></p>
<h2> 总结</h2>
<p>以上就是本文的所有内容了，主要介绍了 <code>Vite</code> 由来的背景，并简单对比了下 <code>webpack</code>、<code>Rollup</code> 和 <code>Vite</code> 三个打包工具的区别，最后则是利用两种方式来创建了 <code>Vite</code> + <code>Vue</code> 的实例。</p>
]]></content:encoded>
    </item>
    <item>
      <title>HTML 基础标签</title>
      <link>https://cunyu1943.site/JavaPark/md/java/web/20220501-basic-lable.html</link>
      <guid>https://cunyu1943.site/JavaPark/md/java/web/20220501-basic-lable.html</guid>
      <source url="https://cunyu1943.site/JavaPark/rss.xml">HTML 基础标签</source>
      <description>什么是 HTML HTML（Hypertext Markup Language），中文名超文本标记语言，是一种用于结构化 Web 网页及其内容的标记语言。 严格意义上讲，HTML 并不是一门编程语言，而是一种用于定义内容结构的标记语言。它由一系列的元素所构成，通过标签与内容组合得到我们所需效果，使其以某种形式呈现。 HTML 中的基础标签 既然说了 HTML 是由一系列的元素组成，那我们就来看看元素相关的内容。 元素又是由一对标签加上内容所共同构成，以下是一个简单的文本标签示例。 该元素中，主要组成部分如下：</description>
      <category>HTML 教程</category>
      <pubDate>Mon, 25 Apr 2022 16:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 什么是 HTML</h2>
<p>HTML（Hypertext Markup Language），中文名超文本标记语言，是一种用于结构化 Web 网页及其内容的标记语言。</p>
<p>严格意义上讲，HTML 并不是一门编程语言，而是一种用于定义内容结构的标记语言。它由一系列的元素所构成，通过标签与内容组合得到我们所需效果，使其以某种形式呈现。</p>
<h2> HTML 中的基础标签</h2>
<p>既然说了 HTML 是由一系列的元素组成，那我们就来看看元素相关的内容。</p>
<p>元素又是由一对标签加上内容所共同构成，以下是一个简单的文本标签示例。</p>
<p></p>
<p>该元素中，主要组成部分如下：</p>
<ul>
<li><strong>开始标签</strong>：由标签名称，大于号、小于号所组成，表示元素从此处开始生效。</li>
<li><strong>结束标签</strong>：类似于开始标签，只是在标签名之前多了一个斜杠 <code>/</code>，表示元素的结尾。</li>
<li><strong>内容</strong>：元素的内容。</li>
</ul>
<p>以下就来看看，HTML 中的各种常用标签。</p>
<h3> <code>&lt;!DOCTYPE html&gt;</code></h3>
<p>放在 HTML 文件中的首行，主要用于标识文档类型。</p>
<h3> <code>&lt;html&gt;</code></h3>
<p>HTML 文档中的根标签，包含了整个页面的所有内容，其他所有标签都包含在 <code>html</code> 标签中。</p>
<h3> <code>&lt;head&gt;</code></h3>
<p>这个元素中的内容对用户是不可兼得，主要用于设置网页字符编码、CSS 样式、页面描述、搜索关键字等信息。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <code>&lt;body&gt;</code></h3>
<p>网站主体内容，如果想让我们的内容显示在网页中让其他用户在访问该界面时看见，则内容需要写在该标签中，主要包括文本、图形、视频或其他内容。</p>
<p>以下是一个在网页中显示内容的实例。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;title&gt;</code></h3>
<p>网页标题，在 <code>head</code> 标签中设置后，打开网页时将显示为网页标题。</p>
<p>以下是一个实例。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;p&gt;</code></h3>
<p>文本标签，用于定义段落。该标签会自动在其前后创建一些空白，浏览器将自动添加这些空间。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 标题</h3>
<p>此处的标题不同与上边的 <code>title</code> 标签，<code>title</code> 设置的主要是网页标题，二次数的标题主要是是针对 <code>body</code> 标签中的标题。</p>
<p>这里的标题又可以分为 6 级，其对应标签分别是：<code>&lt;h1&gt;</code>、<code>&lt;h2&gt;</code>、<code>&lt;h3&gt;</code>、<code>&lt;h4&gt;</code>、<code>&lt;h5&gt;</code>、<code>&lt;h6&gt;</code>。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;/br&gt;</code></h3>
<p>表示换行，不同于 <code>title</code> 等标签，它是一个单标签，即开始标签和结束标签都是同一个，单词放在标签名之前。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;img&gt;</code></h3>
<p>表示图片标签，通过该属性我们可以在网页中添加一张图片。</p>
<p>此外，<code>img</code> 标签提供 <code>src</code> 属性用于设置图片路径，<code>height</code> 属性设置图片高度，<code>width</code> 属性设置图宽度。为了防止图片失效造成误解，我们还可以给图片添加一个提示，此时使用 <code>alt</code> 属性即可。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;a&gt;</code></h3>
<p>在某一个网页中，我们要通过超链接来跳转到另一个页面，则此时需要用到 <code>&lt;a&gt;</code> 标签，当然该标签中最重要的 <code>href</code> 属性也不能少，它用于指示跳转的目标网页。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 列表</h3>
<p>列表可以分为有序列表和无序列表，其中有序列表是由 <code>ol</code> 标签标识。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>有序列表中，可以在 <code>ol</code> 标签中添加 <code>start</code> 属性，用于表示从第几位开始，<code>type</code> 属性用于标识所要显示的类型。</p>
<table>
<thead>
<tr>
<th>type</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>1</code></td>
<td>显示类型为数字类型</td>
</tr>
<tr>
<td><code>A</code></td>
<td>显示类型为大写字母类型</td>
</tr>
<tr>
<td><code>a</code></td>
<td>显示类型为小写字母类型</td>
</tr>
<tr>
<td><code>I</code></td>
<td>显示类型为大写罗马数字类型</td>
</tr>
<tr>
<td><code>i</code></td>
<td>显示类型为小写罗马数字类型</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>除开有序列表之外，还有无序列表，无序列表以 <code>ul</code> 标识。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>无序列表虽然没有顺序之分，但是同样提供了 <code>type</code> 属性。</p>
<table>
<thead>
<tr>
<th>type</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>disc</code></td>
<td>小圆黑点，默认显示方式</td>
</tr>
<tr>
<td><code>circle</code></td>
<td>空心圆圈</td>
</tr>
<tr>
<td><code>square</code></td>
<td>小黑方形</td>
</tr>
</tbody>
</table>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;b&gt;</code></h3>
<p>要实现对内容加粗，可以使用 <code>&lt;b&gt;</code> 标签。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;u&gt;</code></h3>
<p>有时需要对内容做下划线处理，则可以使用 <code>&lt;u&gt;</code> 标签。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;i&gt;</code></h3>
<p>为了将文本以斜体的方式显示给浏览器，可以使用 <code>&lt;i&gt;</code> 标签。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 上下标</h3>
<p>有时候我们需要在网页中显示数学或者化学公式，那么此时需要用到上下标，其中上标用标签 <code>&lt;sup&gt;</code> 表示，下标用标签 <code>&lt;sub&gt;</code> 表示。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;table&gt;</code></h3>
<p>表格标签 <code>&lt;table&gt;</code> 中又含有多个子标签，常用的子标签有如下。</p>
<ul>
<li><code>th</code>：表头列</li>
<li><code>tr</code>：行</li>
<li><code>td</code>：列</li>
</ul>
<p>同样的，表格标签还提供了以下这些常用的属性，用于给表格增加样式。但现在大多都是用 CSS 来对表格进行修饰，所以这些属性简单了解即可，不用太过深入。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>border</code></td>
<td>表格边框的粗细</td>
</tr>
<tr>
<td><code>width</code></td>
<td>表格的宽度</td>
</tr>
<tr>
<td><code>cellspacing</code></td>
<td>单元格间距</td>
</tr>
<tr>
<td><code>cellpadding</code></td>
<td>单元格填充</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;form&gt;</code></h3>
<p><code>&lt;form&gt;</code> 表示文档中的一个区域，主要包含交互空间，用来向服务器提交信息。<code>&lt;form&gt;</code> 标签通常包含一个或者多个表单标签，常用的表单标签如下：</p>
<table>
<thead>
<tr>
<th>表单标签</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code></td>
<td>输入框</td>
</tr>
<tr>
<td><code>&lt;textarea&gt;</code></td>
<td>文本域</td>
</tr>
<tr>
<td><code>&lt;button&gt;</code></td>
<td>按钮</td>
</tr>
<tr>
<td><code>&lt;select&gt;</code></td>
<td>单选框</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>其中 <code>action</code> 属性用来处理表单提交的 URL，<code>method</code> 属性表示使用何种 HTTP 方式来提交表单，常用的值有 <code>post</code> 和 <code>get</code>。</p>
<h2> 总结</h2>
<p>本文介绍了 HTML 的定义，然后对 HTML 中常用的标签进行了举例学习。</p>
]]></content:encoded>
    </item>
  </channel>
</rss>