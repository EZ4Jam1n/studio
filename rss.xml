<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xsl" href="https://ez4jam1n.site/studio/rss.xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://ez4jam1n.site/studio/rss.xml" rel="self" type="application/rss+xml"/>
    <title>studio</title>
    <link>https://ez4jam1n.site/studio/</link>
    <description>Java 自学指南</description>
    <language>zh-CN</language>
    <pubDate>Mon, 10 Apr 2023 11:26:00 GMT</pubDate>
    <lastBuildDate>Mon, 10 Apr 2023 11:26:00 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>软件设计师</category>
    <category>JavaScript 教程</category>
    <category>Maven 教程</category>
    <category>MyBatis 教程</category>
    <category>MyBatis Plus 教程</category>
    <category>Nginx 教程</category>
    <category>Java 基础教程</category>
    <category>Java 基础实战</category>
    <category>Spring 教程</category>
    <category>Spring Boot 基础教程</category>
    <category>Spring Boot 3 基础教程</category>
    <category>Spring MVC 指南</category>
    <category>Vue3 笔记</category>
    <category>HTML 教程</category>
    <item>
      <title>计算机系统</title>
      <link>https://ez4jam1n.site/studio/md/exam/software-developer/20221113-computer-system.html</link>
      <guid>https://ez4jam1n.site/studio/md/exam/software-developer/20221113-computer-system.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">计算机系统</source>
      <description>CPU 计算机系统硬件组成 计算机系统是由软硬件共同组成，协同运行程序。计算机的基本硬件由 运算器、控制器、存储器、输入设备、输出设备 5 大部件组成。其中，运算器和控制器等部件集成到一起的部分称为中央处理器（CPU）。CPU 是硬件系统的核心，用于加工处理各种数据，能完成各种算术、逻辑运算以及控制功能。 其中，存储器是计算机系统中的记忆设备，分为 内部存储 和 外部存储。内部存储速度快，但容量小，一般用来临时存放程序、数据及中间结果。而外部存储容量大，但速度慢，能长期保存程序和数据。</description>
      <category>软件设计师</category>
      <pubDate>Sun, 13 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> CPU</h2>
<h3> 计算机系统硬件组成</h3>
<p>计算机系统是由软硬件共同组成，协同运行程序。计算机的基本硬件由 <strong>运算器、控制器、存储器、输入设备、输出设备</strong> 5 大部件组成。其中，运算器和控制器等部件集成到一起的部分称为中央处理器（<code>CPU</code>）。<code>CPU</code> 是硬件系统的核心，用于加工处理各种数据，能完成各种算术、逻辑运算以及控制功能。</p>
<p>其中，存储器是计算机系统中的记忆设备，分为 <strong>内部存储</strong> 和 <strong>外部存储</strong>。内部存储速度快，但容量小，一般用来临时存放程序、数据及中间结果。而外部存储容量大，但速度慢，能长期保存程序和数据。</p>
<p>输入和输出设备共称为外部设备，输入设备用于输入原始数据及各种命令，最常见的就是键盘，而输出设备则用于输出计算机运行结果，最常见的就是屏幕。</p>
<h3> CPU 功能</h3>
<p><code>CPU</code> 是计算机系统的核心部件，负责获取程序指令、对指令译码并加工。其功能主要分为以下 4 点：</p>
<ol>
<li><strong>程序控制</strong>：<code>CPU</code> 通过执行指令来控制程序的执行顺序。</li>
<li><strong>操作控制</strong>：一条指令功能的实现需要若干操作信号配合完成，<code>CPU</code> 产生每条指令的操作信号并将操作信号送往对应部件，控制相应部件按指令功能要求进行操作。</li>
<li><strong>时间控制</strong>：指令执行过程中操作信号的出现时间、持续时间以及出现的时间顺序都需要严格控制。</li>
<li><strong>数据处理</strong>：<code>CPU</code> 对数据进行算术和逻辑运算等方式进行加工处理，然后我们就可以利用这些加工后的结果。因此，对数据的加工处理也是 <code>CPU</code> 最根本的任务。</li>
</ol>
<p>除开以上 4 点之外，<code>CPU</code> 还需要对系统内外部的中断（异常）做出响应，进行相应处理。</p>
<h3> CPU 组成</h3>
<p><code>CPU</code> 主要由运算器、控制器、寄存器组以及内部总线等部件组成。</p>
<p></p>
<h2> 运算器</h2>
<p>运算器由 <strong>算术逻辑单元（ALU）</strong>、<strong>累加寄存器</strong> 、<strong>数据缓冲寄存器</strong>、<strong>条件寄存器</strong> 共同组成。它是数据加工处理部件，用于完成计算机的各种算术逻辑运算。相对控制器而言，运算器接受控制器的命令而进行动作，即运算器所进行的全部操作均由控制器发出的控制信号来指挥，因此它是执行部件。</p>
<p>运算器主要功能如下：</p>
<ol>
<li>执行所有算术运算，如加、减、乘、除等。</li>
<li>执行所有的逻辑运算并进行逻辑测试，如与、或、非等。</li>
</ol>
<p>此外，运算器的各组成部件功能如下：</p>
<ol>
<li><strong>算术逻辑单元（ALU）</strong>：负责处理数据，实现对数据的算术逻辑运算。</li>
<li><strong>累加寄存器（AC）</strong>：又叫累加器，是一个通用寄存器。当算术逻辑单元执行算术逻辑运算时，为 <code>ALU</code> 提供一个工作区。如，执行一个甲酸运算器，先将一个加数取出暂存在 <code>AC</code> 中，再从内存储器中取出另一个加数，然后同 <code>AC</code> 的内容相加，并将所得结果送回 <code>AC</code>。运算的结果是放在累加器中的，运算器中至少要有一个累加寄存器。</li>
<li><strong>数据缓存寄存器（DR）</strong>：对内存储器进行读/写时，用 <code>DR</code> 暂存有内存储器读/写的一套指令或一个数据中，将不同时间段内读/写的数据分隔。<code>DR</code> 的主要作用是 <strong>作为 <code>CPU</code> 和内存、外部设备间数据传送的中转站；作为 <code>CPU</code> 和内存、外围设备之间的操作速度上的缓冲；在单累加器结构的运算器中，数据缓冲寄存器还可以兼作为操作数寄存器</strong>。</li>
<li><strong>状态条件寄存器（PSW）</strong>：保存由算术指令和逻辑指令运行或测试的结果建立的各种条件码内容，主要分为状态标志和控制标志。这些标志通常分别由 1 位出饭前保存，保存了当前指令执行完成后的状态。通常来说，一个算术操作产生一个运算结果，而一个逻辑操作产生一个判决。</li>
</ol>
<h2> 控制器</h2>
<p>顾名思义，所谓控制器，就是用来控制整个 <code>CPU</code> 的工作，决定了计算机运行过程的自动化。它不仅要保证程序的正确执行，还要能够处理异常事件。一般包括指令控制逻辑、时序控制逻辑、总线控制逻辑、中断控制逻辑等。</p>
<p>指令控制逻辑要完成<strong>取指令</strong>、<strong>分支指令</strong>和<strong>执行指令</strong>操作，其过程分为<strong>取指令、指令译码、按指令操作码执行、形成下一条指令地址</strong>等步骤。</p>
<ol>
<li><strong>指令寄存器（IR）</strong>：当 <code>CPU</code> 执行一条指令式，先将其从存储器读取到缓冲寄存器中，再送入 <code>IR</code> 暂存，指令译码器根据 <code>IR</code> 内容产生各种未操作指令，控制其他组成部件工作，完成所需功能。</li>
<li><strong>程序计数器（PC）</strong>：<code>PC</code> 具有<strong>寄存信息和计数</strong>两种功能，又叫指令计数器。程序执行分两种情况，一种是顺序执行，一种是转移执行。程序开始执行前，将程序的起始地址送入 <code>PC</code>，该地址在程序加载到内存时确认，因此 <code>PC</code> 的内容即为程序第一条指令的地址。执行指令时，<code>CPU</code> 自动修改 <code>PC</code> 中的内容，一遍使其保持的总是将要执行的下一条指令的地址。由于大多指令都是按顺序执行，所以修改的过程常只是简单地对 <code>PC</code> 加 <code>1</code>。当遇到转移指令时，后继指令的地址根据当前指令的地址加上一个向前或向后转移的位移量得到，或者根据转移指令给出的直接转移的地址得到。</li>
<li><strong>地址寄存器（AR）</strong>：<code>AR</code> 保存当前 <code>CPU</code> 所访问的内存单元的地址。由于内存和 <code>CPU</code> 存在操作速度上的差异，因此需要用 <code>AR</code> 保存地址信息，直到内存中的读/写操作完成。</li>
<li><strong>指令译码器（ID）</strong>：指令包含操作码和地址码，为了能执行任何给定的指令，必须对操作码进行分析，以便识别所完成的操作。指令译码器就是对指令中的操作码字段进行分析解释，识别该指令规定的操作，向操作控制器发出具体的控制信号，控制各部件工作，完成所需功能。</li>
</ol>
<p>总结而言，<strong>指令寄存器（IR）存放的是从内存中获取的指令，类似于中间站，用于存放指令。而程序计数器（PC）则存放的是指令的地址，同时还具有计数的功能。地址寄存器（AR）存放的是 <code>CPU</code> 访问内存单元的地址。指令译码器（ID）就是把操作码解析为对应的指令操作</strong>。</p>
<h2> 计算机中的基本单位</h2>
<table>
<thead>
<tr>
<th>单位</th>
<th>表示</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>比特</td>
<td><code>bit</code></td>
<td>最小的数据单位</td>
</tr>
<tr>
<td>字节</td>
<td><code>Byte</code></td>
<td>最小的存储单位，<code>1 Byte = 8 bit</code></td>
</tr>
<tr>
<td>千字节</td>
<td><code>KB</code></td>
<td><code>1 KB = 1024 Byte</code></td>
</tr>
<tr>
<td>兆字节</td>
<td><code>MB</code></td>
<td><code>1 MB = 1024 KB</code></td>
</tr>
<tr>
<td>吉字节</td>
<td><code>GB</code></td>
<td><code>1 GB = 1024 MB</code></td>
</tr>
<tr>
<td>太字节</td>
<td><code>TB</code></td>
<td><code>1 TB = 1024 GB</code></td>
</tr>
</tbody>
</table>
<h2> 进制转换</h2>
<p>计算机中，常见的数据表示有以下几种：</p>
<ol>
<li>二进制，以 <code>B</code> 标识，由 <code>0</code>、<code>1</code> 组成，满 <code>2</code> 则进 <code>1</code> 位。</li>
<li>十进制，以 <code>D</code> 标识，由 <code>0 ~ 9</code> 组成，满 <code>10</code> 则进 <code>1</code> 位。</li>
<li>八进制，以 <code>O</code> 标识。由 <code>0 ~ 7</code> 组成，满 <code>8</code> 则进 <code>1</code> 位。</li>
<li>十六进制，以 <code>H</code> 标识。由 <code>0 ~ 9</code> 以及 <code>A、B、C、D、E</code> 组成，满 <code>16</code> 则进 <code>1</code> 位。</li>
</ol>
<p>一个十六进制的数要用 <code>4</code> 个二进制的数来表示，而一个八进制需要转成对应 <code>3</code> 个二进制。</p>
<h2> 原码、反码、补码、移码</h2>
<p>计算机中，数值是以机器数的形式来表示的，特点是采用了二进制计数法，数的符号用 <code>0</code> 和 <code>1</code> 表示，小数点则银行，表示不占位置，而机器数所对应的实际数值就叫做数的真值。</p>
<p>机器数又分为<strong>有符号数</strong>和<strong>无符号数</strong>。其中，无符号数对应正数，表示在机器数中没有符号位。对于无符号数，如果约定小数点的位置在机器数的最低位之后，则该数为纯整数。如果约定小数点的位置在机器数的最高位之前，那么这个数是纯小数。对于带符号数，机器数的最高位是表示正、负的符号位，其余位则表示数值。</p>
<p>为了方便运算，带符号的机器数可以采用原码、反码、补码等不同编码方式，而这些编码方式就叫做码制。</p>
<h3> 原码</h3>
<p>原码表示法中，最高位是符号位，其中 <code>0</code> 表示正号，<code>1</code> 表示负号，其余的 <code>n - 1</code> 为则表示数值的绝对值。这里要注意 <code>0</code> 比较特殊，它的原码有两种表示形式：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">+</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">原</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">原</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10000000</span></span></span></span></span></p>
<h3> 反码</h3>
<p>同样的，反码表示中，最高位仍然是符号位，<code>0</code> 表示正号，<code>1</code> 表示负号。如果该数是一个正数，那么它的反码和原码相同。而如果该数是一个负数，那么它的反码则是原码除符号位之外的其他位按位取反。<code>0</code> 的反码也有两种表示形式：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">+</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">反</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></span></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">反</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">11111111</span></span></span></span></span></p>
<h3> 补码</h3>
<p>补码中，最高位为符号位，<code>0</code> 表示正号，<code>1</code> 表示负号。如果一个数是正数，那么它的补码与原码和反码一样。而如果一个数为负数，则补码为反码末位加 <code>1</code>。此时 <code>0</code> 有惟一的编码表示。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">+</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">0</span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">补</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">00000000</span></span></span></span></span></p>
<h3> 移码</h3>
<p>移码的表示与补码有很大关系，它就是将一个数的补码的符号位取反即可。如 <code>+1</code> 的补码为 <code>00000001</code>，那么它的移码为 <code>10000001</code>。</p>
<h3> 注意</h3>
<p>当机器字长为 <code>n</code> 时，此时该机器中各种码制所表示的带符号数的范围如下：</p>
<table>
<thead>
<tr>
<th>码制</th>
<th>定点整数</th>
<th>定点小数</th>
</tr>
</thead>
<tbody>
<tr>
<td>原码</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>反码</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>补码</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
</tr>
<tr>
<td>移码</td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0641em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.138em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></td>
</tr>
</tbody>
</table>
<p>在做相关题目时，可以记住以下要点：<strong>当给定一个数的补码求它的原码时，先将这个数补码的反码求出来，然后再求出它反码的补码，此时得到的就是这个数的原码。</strong></p>
<h2> 浮点数</h2>
<p>当机器字长为 <code>n</code> 时，定点数的补码和移码可以表示为 <code>2^n</code> 个数，而其原码和反码只能表示 <code>2^n - 1</code> 个数（<code>0</code> 的表示占了两个编码）。因此定点数能表示的数值范围较小，运算时很容易越界溢出。而浮点数是小数点范围不固定的数，能表示的范围更大。</p>
<p>浮点表示法中，阶码是带符号的纯整数，而位数是带符号的纯小数。浮点数的表示格式如下：</p>
<p></p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9747em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">E</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span></span></p>
<p>其中 <code>E</code> 称为阶码，<code>F</code> 称为尾数。</p>
<p>一个数的浮点表示不是唯一的。当小数点的位置改变时，阶码也会随之改变，因此一个数可以用多个浮点形式表示。</p>
<p>浮点数所能表示的数值范围主要由阶码决定，而其表示的精度则由尾数决定。为了充分利用尾数来表示更多的有效数字，常采用规格化浮点数。规格化就是将尾数的绝对值限定在 <code>[0.5, 1]</code>。此外，当尾数用补码表示时，需要注意以下问题：</p>
<ol>
<li>若位数 <code>F &gt;= 0</code>，则其规格化的位数形式为 <code>F = 0.1xxx……x</code>，其中 <code>x</code> 既可以为 <code>0</code>，也以为 <code>1</code>，即将尾数限定在 <code>[0.5, 1]</code>。</li>
<li>若尾数 <code>F &lt; 0</code>，则其规格化的尾数形式为 <code>F = 1.0xxx……x</code>，其中 <code>x</code> 可以为 <code>0</code>，也可以为 <code>1</code>，即将限定在 <code>[-1, -0.5]</code>。</li>
</ol>
<p>若浮点数的阶码（包括 <code>1</code> 位阶符）用 <code>R</code> 位的移码表示，尾数（包括 <code>1</code> 位数符）用 <code>M</code> 位的补码表示，则该浮点数的范围为：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.0564em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0564em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9191em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8913em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10903em;">M</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.3064em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:1.0564em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9191em;"><span style="top:-2.931em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p>
<h2> 寻址方式</h2>
<p></p>
<p>常用的寻址方式：</p>
<ol>
<li><strong>立即寻址</strong>：操作数包含在指令中。</li>
<li><strong>直接寻址</strong>：操作数存放于内存单元，指令中直接给出操作数所在存储单元的地址。</li>
<li><strong>寄存器寻址</strong>：操作数放在某一寄存器中，指令中给出存放操作数的寄存器名。</li>
<li><strong>寄存器间接寻址</strong>：操作数存放于内存单元，操作数所在存储单元的地址在某个寄存器中。</li>
<li><strong>间接寻址</strong>：指令中给出操作数地址的地址。</li>
<li><strong>相对寻址</strong>：指令地址码给出的是一个偏移量（可正可负），操作数地址等于本条指令的地址加上该偏移量。</li>
<li><strong>变址寻址</strong>：操作数地址等于变址寄存器的内容加偏移量。</li>
</ol>
<p>寻址速度由高到低：<strong>立即寻址</strong> &gt; <strong>寄存器寻址</strong> &gt; <strong>直接寻址</strong> &gt; <strong>寄存器间接寻址</strong> &gt; <strong>间接寻址</strong></p>
<h2> 校验码</h2>
<p>所谓码距，指的是一个编码系统中任意两个合法编码间至少有多少个二进制位不同。</p>
<h3> 奇偶校验码</h3>
<p>奇偶校验是一种简单有效的校验方法，通过在编码中增加一位校验位来使编码中 <code>1</code> 的个数为奇数（奇校验）或偶数（偶校验），从而使码距变为 <code>2</code>。对于奇校验，可以检测代码中奇数位出错的编码，但不能发现偶数位出错的情况，即当合法编码中的奇数位发生错误时，编码中的 <code>1</code> 变成了 <code>0</code> 或者 <code>0</code> 变成 <code>1</code>，则该编码中 <code>1</code> 的个数的奇偶性就发生了变化，从而可以发现错误。</p>
<p>常见的奇偶校验码有三种：<strong>水平奇偶校验码</strong>、<strong>垂直奇偶校验码</strong>、<strong>水平垂直校验码</strong></p>
<p><strong>注意</strong>：奇偶校验码只能检查错误但是不能纠错，而且奇数校验只能检查出代码奇数个出错的编码，而不能检查出偶数个出错的编码。</p>
<h3> 海明码</h3>
<p>海明码由贝尔实验室的 <em>Richard Hamming</em> 设计，一种通过利用奇偶校验性来检错和纠错的校验方法。海明码的构成方法是在数据位之间的特定位置上插入 <code>k</code> 个校验位，通过扩大码距来实现检错和纠错。</p>
<p>假设数据位为 <code>n</code> 位，校验位为 <code>k</code> 位，则 <code>n</code> 和 <code>k</code> 必须满足以下条件：</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9382em;vertical-align:-0.0391em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></span></p>
<h3> 循环冗余校验码（CRC）</h3>
<p>循环冗余码常用于数据通信领域和磁介质存储系统，利用生成多项式为 <code>k</code> 个数据位产生 <code>r</code> 个校验位来进行编码，其编码长度为 <code>k + r</code>，<code>CRC</code> 的代码格式为：</p>
<p></p>
<p>循环冗余校验码由两部分组成，左边是<strong>信息码（数据）</strong>，右边是<strong>校验码</strong>，如果信息码占 <code>k</code> 位，则校验码占 <code>n - k</code> 位。其中 <code>n</code> 是 <code>CRC</code> 码的字长，所以又叫 <code>(n, k)</code> 码。校验码由信息码产生，校验码位数越多，代码校验能力越强。在求 <code>CRC</code> 编码时，才用的是模 <code>2</code> 运算。模 <code>2</code> 加减运算的规则是按位运算，不发生借位和进位。要注意，当码距为 <code>2</code> 时，<code>CRC</code> 只能检错而不能纠错。</p>
<h2> CISC &amp; RISC</h2>
<table>
<thead>
<tr>
<th></th>
<th>RISC（精简指令集计算机）</th>
<th>CISC（复杂指令集计算机）</th>
</tr>
</thead>
<tbody>
<tr>
<td>指令种类</td>
<td>少、精简</td>
<td>多、复杂</td>
</tr>
<tr>
<td>指令复杂度</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td>指令长度</td>
<td>固定</td>
<td>变化</td>
</tr>
<tr>
<td>寻址方式</td>
<td>少</td>
<td>复杂多样</td>
</tr>
<tr>
<td>译码方式</td>
<td>硬布线控制逻辑（组合逻辑控制器）</td>
<td>微程序控制技术</td>
</tr>
<tr>
<td>通用寄存器数量</td>
<td>多、大量</td>
<td>一般</td>
</tr>
<tr>
<td>流水线技术</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody>
</table>
<h2> 流水线</h2>
<p><strong>吞吐率 = 指令条数 / (一条完整指令的时间 + (n - 1) * 流水线周期)</strong></p>
<p><strong>流水线总共时间 = 一条完整指令的时间 + (n - 1) * 流水线周期</strong></p>
]]></content:encoded>
    </item>
    <item>
      <title>简介</title>
      <link>https://ez4jam1n.site/studio/md/java/js/20220501-introduction.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/js/20220501-introduction.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">简介</source>
      <description>什么是 JavaScript 作为世界上最流行的语言之一，是一种运行在客户端的脚本语言。而所谓脚本语言，就是不需要编译就能运行的编程语言，JavaScript 在运行过程中通过 JS 解释器来逐行解释然后执行。 JavaScript 能做什么？ 最初的时候，JavaScript 被设计出来的初衷是为了实现表单的动态校验，比如密码长度校验、邮箱格式校验等。但渐渐随着 JavaScript 的发展，JavaScript 变得越来越强大，也发展出了许多产物，如 Node.js、Electron、Cordova、Ruff、cocos2d-js。利用这些产物，我们可以用来进行服务器的开发、桌面程序的搭建、APP 的开发、硬件-物联网的控制、游戏开发等等工作。</description>
      <category>JavaScript 教程</category>
      <pubDate>Sun, 01 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 什么是 JavaScript</h2>
<p>作为世界上最流行的语言之一，是一种运行在客户端的脚本语言。而所谓脚本语言，就是不需要编译就能运行的编程语言，JavaScript 在运行过程中通过 JS 解释器来逐行解释然后执行。</p>
<h2> JavaScript 能做什么？</h2>
<p>最初的时候，JavaScript 被设计出来的初衷是为了实现表单的动态校验，比如密码长度校验、邮箱格式校验等。但渐渐随着 JavaScript 的发展，JavaScript 变得越来越强大，也发展出了许多产物，如 <code>Node.js</code>、<code>Electron</code>、<code>Cordova</code>、<code>Ruff</code>、<code>cocos2d-js</code>。利用这些产物，我们可以用来进行服务器的开发、桌面程序的搭建、APP 的开发、硬件-物联网的控制、游戏开发等等工作。</p>
<h2> HTML、CSS、JavaScript 之间的关系</h2>
<p>HTML 和 CSS 不同于 JavaScript，它们都是描述类语言，其中 HTML 主要用于决定网页结构和内容（决定网页上能看到什么），而 CSS 则主要用于定义网页所呈现给用户的模样（决定网页是否美观）。JavaScript 则是专注于实现业务逻辑和页面控制（决定网页提供的功能）。</p>
<p>如果把这三者比作一个王者荣耀中的英雄的话，那 HTML 就相当于原皮的英雄，而 CSS 则是相当于英雄的皮肤，让我们的英雄更帅气，而 JavaScript 则相当于英雄的技能，我们可以通过控制英雄通过技能来实现杀敌清兵的效果。</p>
<h2> 浏览器如何执行 JavaScript</h2>
<p>JavaScript 一般运行在网页中的，所以一般是在浏览器中运行。而浏览器一般分为两部分，一个是<strong>渲染引擎</strong>，另一个则是 <strong>JS 引擎</strong>，两者的功能如下：</p>
<ul>
<li><strong>渲染引擎</strong>：用于解析 HTML 和 CSS 代码，大家一般把它叫做内核，比如 Chrome 浏览器的 Blink，Firefox 浏览器的 Gecko。</li>
<li><strong>JavaScript 引擎</strong>：也叫做 JavaScript 解释器，主要用于读取网页中的 JavaScript 代码，然后对其处理用执行，如 Chrome 浏览器的 V8，Firefox 的 TraceMonkey。</li>
</ul>
<p>所以名义上虽然说是浏览器执行了 JavaScript 代码，但如果看底层的话，却会发现其实 JavaScript 代码是通过浏览器中的 JavaScript 引擎来执行的。JavaScript 引擎在执行代码时会逐行解释源代码，将其转换为机器语言，然后交由计算机执行。也正因为如此，所以将 JavaScript 划分为脚本语言，它会逐行去解释执行，而不是像 HTML、CSS 类似的标记语言。</p>
<h2> JavaScript 的组成</h2>
<p></p>
<ol>
<li><strong>ECMAScript</strong></li>
</ol>
<p>ECMAScript 是由 ECMA 国际进行标准化的一门编程语言，往往被大家称为 JavaScript 或者 JScript，但实际上并不是一个东西，后两者其实是基于 ECMAScript 的实现和扩展。其中，JavaScript 是由网景公司所提出，而 JScript 则是由微软公司所提出。 所以 ECMAScript 更像是一种规范，它规定了 JavaScript 的编程语法和基础核心知识，然后所有的浏览器厂商都需要共同遵守这一套 JavaScript 语法工业标准。</p>
<ol start="2">
<li><strong>DOM</strong></li>
</ol>
<p>DOM（Document Object Model）即文档对象模型，是由 W3C 组织推荐的用于处理可扩展标记语言的<strong>标准编程接口</strong>。通过 DOM 所提供的各种接口，我们就能够轻易地对网页上的各种元素进行操作，如调整位置、大小、颜色等。</p>
<ol start="3">
<li>
<p><strong>BOM</strong></p>
<p>BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容，能够与浏览器进行交互的对象结构。通过使用 BOM，我们就能够十分方便的操作浏览器窗口，如弹出提示框、控制跳转、获取分辨率等操作。</p>
</li>
</ol>
<h2> JavaScript 入门体验</h2>
<p>JavaScript 的书写位置主要有 3 种，分别是行内式、内嵌式和外部式，以下就分别来看看各种方式的写法。</p>
<ol>
<li><strong>行内式</strong></li>
</ol>
<p>首先是行内式，顾名思义，所谓行内式，就是将少量的 JavaScript 代码直接写在 HTML 标签的时间属性中，比如下面的代码。通过点击页面中的按钮，页面就会弹窗。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>行内式的特点就是比较简单，但是也存在很多问题。比如可读性较差，如果需要在 HTML 编写大量 JavaScript 代码时，此时阅读就很不方便。除此之外，JavaScript 和 HTML 中都会使用到引号，如果出现多层引号相互嵌套时，会非常容易混淆，导致代码实现结果出错。所以除非特殊情况，否则一般不推荐使用行内式。</p>
<ol start="2">
<li><strong>内嵌式</strong></li>
</ol>
<p>相比于单行式，内嵌式就更加清晰明了。我们通过将 JavaScript 代码封装到 <code>&lt;script&gt;</code> 标签中，然后就可以实现简单的弹窗功能了。内嵌式的代码可读性更高，也更方便纠错。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="3">
<li><strong>外部式</strong></li>
</ol>
<p>最后一种就是外部式，通过在外部新建一个后缀名为 <code>.js</code> 的文件，然后将 JavaScript 直接写到该文件中，最后在 HTML 页面中通过 <code>&lt;script&gt;</code> 标签的 <code>src</code> 属性引入即可。</p>
<p>外部式的优点是很明显的：</p>
<ul>
<li>首先，可读性提高。JavaScript 代码量较大时，通过放在独立的文件中，排除了 HTML 和 CSS 元素的干扰。</li>
<li>其次，代码复用率提高。假设我们其他业务需要同样的功能，我们只需要将封装好的 <code>.js</code> 文件引用过去即可使用。</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>本文主要从 JavaScript 的组成定义，功能使用，同 HTML 与 CSS 之间的关系以及最简单的入门体验几个方面，对 JavaScript 做了一个简单的介绍。如果你也是刚学习 JavaScript 的新手，那就一起学起来吧。</p>
]]></content:encoded>
    </item>
    <item>
      <title>操作符</title>
      <link>https://ez4jam1n.site/studio/md/java/js/20220504-operator.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/js/20220504-operator.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">操作符</source>
      <description>运算符（operator），也叫做操作符，主要是用于实现赋值、比较以及执行算数运算等功能的符号。在 JavaScript 中，主要有以下几类常见的运算符： 算数运算符 递增递减运算符 比较运算符 逻辑运算符 赋值运算符 以下就分别来看看，这些运算符都是怎么用的。 算数运算符 这个我们应该都不陌生，从小学开始，我们就学习加、减、乘、除、取余等算数运算。而算数运算符也就是供我们算术运算所使用的的符号，主要用来执行两个变量或值的算数运算。</description>
      <category>JavaScript 教程</category>
      <pubDate>Wed, 04 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>运算符（<code>operator</code>），也叫做操作符，主要是用于实现赋值、比较以及执行算数运算等功能的符号。在 JavaScript 中，主要有以下几类常见的运算符：</p>
<ul>
<li>算数运算符</li>
<li>递增递减运算符</li>
<li>比较运算符</li>
<li>逻辑运算符</li>
<li>赋值运算符</li>
</ul>
<p>以下就分别来看看，这些运算符都是怎么用的。</p>
<h2> 算数运算符</h2>
<p>这个我们应该都不陌生，从小学开始，我们就学习加、减、乘、除、取余等算数运算。而算数运算符也就是供我们算术运算所使用的的符号，主要用来执行两个变量或值的算数运算。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">+</span></span></span></span></td>
<td>加</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">−</span></span></span></span></td>
<td>减</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4653em;"></span><span class="mord">∗</span></span></span></span></td>
<td>乘</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">/</span></span></span></span></td>
<td>除</td>
</tr>
<tr>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8056em;vertical-align:-0.0556em;"></span><span class="mord">%</span></span></span></span></td>
<td>取余</td>
</tr>
</tbody>
</table>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>但是在进行算数运算时，特别需要注意的是浮点数的计算，浮点数值的最高精度是 17 位小数，但算数运算时却远不如整数。同时，我们也需要注意，不要用浮点数来直接进行比较。</p>
<h2> 表达式与返回值</h2>
<p>所谓表达式，就由数字、运算符、变量等组成的式子。而且表达式最终能够求得一个结果，而这个返回给我们的值就叫做返回值。</p>
<h2> 递增递减运算符</h2>
<p>如果要实现让一个变量自己加 1，以前的做法是按照如下方式：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但现在可以利用递增计算符（<code>++</code>）来给实现给变量加 1，同样，递增计算符的位置也会对最终的结果造成影响。</p>
<p>如果递增计算符放在变量前面，则该递增计算符又称为前置递增运算符。若递增计算符放在变量后面，则称为后置递增运算符。</p>
<p>同样类比，有递增那就有递减。而且和递增一样，也可以根据递减运算符所放置的位置将其分为前置递减运算符和后置递减运算符。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>前置和后置如果是单独使用，那么它们实现的效果是一样的。而两者的区别在于：</p>
<ul>
<li>使用前置时：先自加/减 1，然后再返回结果。</li>
<li>使用后置式：先返回原值，然后再自加/减 1。</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 比较运算符</h2>
<p>比较运算符又叫做关系运算符，是两个数据之间进行比较时所使用的运算符，通过比较，返回一个布尔值作为比较运算的结果，常见的比较运算符总结见下表。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;</code></td>
<td>小于</td>
</tr>
<tr>
<td><code>&gt;</code></td>
<td>大于</td>
</tr>
<tr>
<td><code>&gt;=</code></td>
<td>大于等于</td>
</tr>
<tr>
<td><code>&lt;=</code></td>
<td>小于等于</td>
</tr>
<tr>
<td><code>==</code></td>
<td>判等，值相等即可</td>
</tr>
<tr>
<td><code>!=</code></td>
<td>不等于</td>
</tr>
<tr>
<td><code>===</code></td>
<td>全等，值和数据类型都一致</td>
</tr>
</tbody>
</table>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>可以注意到 <code>==</code> 和 <code>===</code> 是不一样的，我们在比较时，一定要注意它们之间的区别。</p>
<h2> 逻辑运算符</h2>
<p>逻辑运算符是用来进行布尔值运算的运算符，其最终返回结果也是一个布尔值，常用于条件判断。常见的逻辑运算符见下表。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&amp;</code></td>
<td>与</td>
</tr>
<tr>
<td><code>&amp;&amp;</code></td>
<td>逻辑与</td>
</tr>
<tr>
<td>`</td>
<td>`</td>
</tr>
<tr>
<td>`</td>
<td></td>
</tr>
<tr>
<td><code>!</code></td>
<td>逻辑非</td>
</tr>
</tbody>
</table>
<p>其中 <code>&amp;</code> 和 <code>&amp;&amp;</code> 的区别在于：<code>&amp;</code> 中一旦符号前布尔值为 <code>false</code> 时，还会继续符号后布尔值的运算，然后判定两个布尔值的运算结果为 <code>false</code>。而 <code>&amp;&amp;</code> 一旦符号前布尔值为 <code>false</code>，就不再进行符号后布尔值的运算，直接判定两个布尔值最终结果为 <code>false</code>，这个过程就叫做短路运算。</p>
<p>而 <code>||</code> 表示只要符号前后任一布尔值为 <code>true</code>，则最终结果为 <code>true</code>。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 赋值运算符</h2>
<p>顾名思义，所谓赋值运算符就是用来将数据赋值给变量的运算符，常用的赋值运算符总结如下。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>=</code></td>
<td>直接赋值</td>
</tr>
<tr>
<td><code>+=、-=</code></td>
<td>加、减一个数后赋值</td>
</tr>
<tr>
<td><code>*=、/=、%=</code></td>
<td>乘、除、取余后赋值</td>
</tr>
</tbody>
</table>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 运算符优先级</h2>
<p>运算符的优先级决定了我们表达式中运算执行的先后顺序，优先级越高，则执行顺序越靠前。常见的运算符的优先级分级如下表。总的来说，在开发过程中要尽量避免复杂的表达式，如果实在是要用，也可以多利用小括号来提高代码的可读性，防止因疏忽代码运算执行先后顺序而导致程序结果错误。</p>
<table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
<th>顺序</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>小括号</td>
<td><code>()</code></td>
</tr>
<tr>
<td>2</td>
<td>一元运算符</td>
<td><code>++</code>、<code>--</code>、<code>!</code></td>
</tr>
<tr>
<td>3</td>
<td>算数运算符</td>
<td><code>*</code>、<code>/</code>、<code>%</code>、 <code>+</code>、<code>-</code></td>
</tr>
<tr>
<td>4</td>
<td>关系运算符</td>
<td><code>&gt;</code>、<code>&gt;=</code> 、<code>&lt;</code>、<code>&lt;=</code></td>
</tr>
<tr>
<td>5</td>
<td>相等运算符</td>
<td><code>==</code>、<code>!=</code>、<code>===</code>、<code>!==</code></td>
</tr>
<tr>
<td>6</td>
<td>逻辑运算法</td>
<td>先 <code>&amp;&amp;</code> 后 `</td>
</tr>
<tr>
<td>7</td>
<td>赋值运算符</td>
<td><code>=</code></td>
</tr>
<tr>
<td>8</td>
<td>逗号运算符</td>
<td><code>,</code></td>
</tr>
</tbody>
</table>
<h2> 总结</h2>
<p>本文的主要内容至此就结束了，主要对各种运算符进行了总结以及简单的应用。到这里，我们已经学习了 JavaScript 中的变量、数据类型、运算符、注释、输入输出。到这里我们应该可以根据所需知识写一些小的 demo，接下来就继续去看看流程控制的相关内容吧。</p>
]]></content:encoded>
    </item>
    <item>
      <title>流程控制</title>
      <link>https://ez4jam1n.site/studio/md/java/js/20220505-process-control.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/js/20220505-process-control.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">流程控制</source>
      <description>一个程序中，各个代码之间的执行顺序对于程序结果是会造成影响的。就拿下面简单的例子来说，假如我们拿先使用 num 这个变量然后再定义和先定义变量再使用相比。先使用再定义会报错 undefined，而定义再使用就没有问题。也就是说，代码的先后顺序会对我们的程序结果造成直接影响。 console.log(num); var num = 10;</description>
      <category>JavaScript 教程</category>
      <pubDate>Thu, 05 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>一个程序中，各个代码之间的执行顺序对于程序结果是会造成影响的。就拿下面简单的例子来说，假如我们拿先使用 <code>num</code> 这个变量然后再定义和先定义变量再使用相比。先使用再定义会报错 <code>undefined</code>，而定义再使用就没有问题。也就是说，代码的先后顺序会对我们的程序结果造成直接影响。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而今天要说的流程控制，就是为了解决这个问题。通俗来讲，流程控制就是控制我们的代码按照既定的结构顺序来执行。</p>
<p>而流程控制主要分为三种结构，分别是：</p>
<ul>
<li><strong>顺序结构</strong></li>
<li><strong>分支结构</strong></li>
<li><strong>循环结构</strong></li>
</ul>
<p>这三种结构分别代表了三种代码执行的顺序，用流程图示意如下。</p>
<table>
<thead>
<tr>
<th>顺序结构</th>
<th>分支结构</th>
<th>循环结构</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2> 顺序结构流程控制</h2>
<p>顺序结构是代码中最基本、最简单的流程控制，它没有特定的语法结构，代码会按照<strong>代码位置的先后顺序，依次执行</strong>。基本上程序中的代码都会存在顺序结构。</p>
<h2> 分支结构流程控制</h2>
<p>由上而下执行代码时，根据不同的条件，从而流向不同的代码路径，最终得到不同的结果。JavaScript 中，提供了两种分支结构语句，分别是：</p>
<ul>
<li><code>if</code> 语句</li>
<li><code>swtich</code> 语句</li>
</ul>
<h3> if</h3>
<p><code>if</code> 的语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>if</code> 语法结构中的条件表达式为 <code>true</code>，则执行大括号中的语句，若条件表达式结果为 <code>false</code>，则跳过大括号中的代码，执行大括号之后的代码。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>除开单分支语句 <code>if</code> 之外，JavaScript 也提供了双分支语句 <code>if…else…</code>，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果条件表达式为 <code>true</code>，则执行条件语句 1，若条件表达式为 <code>false</code>，则执行语句 2。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<p>当然，除开单分支和双分支之外，还有多分支语句 <code>if…else…if…</code>，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过多个条件来选择不同的语句执行，从而得到不同的结果。</p>
<h3> 三元表达式</h3>
<p>除了使用 <code>if</code> 来进行条件选择之外我们也可以利用三元表达式来做一些简单的条件选择，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>三元表达式也可以转换为 <code>if</code> 条件分支判断，两者的效果是等价的。比如上面的三元表达式就可以转换为以下 <code>if</code> 条件表达式。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> switch</h3>
<p><code>switch</code> 语句对应于 <code>if</code> 语句中的多分支语句，主要用于基于不同条件来执行不同的代码。如果要针对变量设置一系列的<strong>特定值</strong>的选项时，就可以使用 <code>switch</code>。</p>
<p><code>switch</code> 语法结构如下，通过表达式的值和 <code>case</code> 中的选项值相匹配，如果有对应匹配项，则执行该 <code>case</code> 中的语句，如果没有对应匹配项，则执行 <code>default</code> 中的代码。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> switch 和 <code>if else if</code> 的区别</h3>
<p>一般情况下，两者是可以相互替换的。其中 <code>switch…case</code> 语句通常用于处理 <code>case</code> 是确定值的情况，而 <code>if…else…</code> 语句则更加的灵活，通常用语范围判断。</p>
<p>此外，<code>switch</code> 语句进行条件判断后会直接执行到程序的条件语句，效率更高。而 <code>if…else</code> 语句有多少种情况，就需要判断多少次，较为耗费时间。</p>
<h2> 循环结构流程控制</h2>
<p>实际处理问题时，经常要做许多具有规律性的重复操作，为了更高效的完成这类操作，所以需要重复执行这些语句，而这就是我们程序中所说的循环结构。</p>
<p>在 JavaScript 中，主要有三种类型的循环语句：</p>
<ul>
<li><code>for</code> 循环</li>
<li><code>while</code> 循环</li>
<li><code>do…while</code> 循环</li>
</ul>
<h3> for 循环</h3>
<p>程序中，一组被重复执行的语句被叫做<strong>循环体</strong>，而是否需要继续重复执行，取决于<strong>循环的终止条件</strong>，由循环体和循环终止条件共同组成语句就叫做<strong>循环语句。</strong></p>
<p><code>for</code> 循环主要用于将某些代码循环若干次，通常跟计数有关系，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p><code>for</code> 循环语句的执行顺序可以总结为如下：</p>
<ul>
<li>首先去执行初始化变量语句，该语句在整个 <code>for</code> 循环中只执行一次。</li>
<li>接着去执行条件表达式，若满足条件则执行循环体，如果不满足则退出循环。</li>
<li>执行完循环体之后，最后去执行操作表达式，至此第一轮循环结束。</li>
<li>然后开始第二轮循环，继续执行条件表达式，重复上面的两个步骤直到退出循环。</li>
</ul>
<h3> while 循环</h3>
<p><code>while</code> 语句可以在表达式为真的情况下，循环执行某一段指定的代码，直到不满足表达式时才结束循环，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行时，先判断条件表达式，若结果为 <code>true</code>，则进入循环体执行循环体代码，如果结果为 <code>false</code>，则退出循环，执行 <code>while</code> 循环后边的代码。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码同样可以用于求 <code>1 + 2 + …… + 100</code> 的值，能够达到与 <code>for</code> 循环同样的效果。</p>
<h3> do…while 循环</h3>
<p><code>do…while</code> 其实是 <code>while</code> 循环的一个变体，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行时，无论如何都会先进入循环体执行一次循环体代码，然后再对条件表达式进行判断，如果条件为 <code>true</code>，则继续执行循环体代码，若条件为 <code>false</code>，则退出循环。</p>
<h3> continue 和 break</h3>
<p><code>continue</code> 用于立即<strong>跳出当次循环，继续进入下一次循环</strong>。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>以上实例中，设置了当 <code>i</code> 为 2 时，跳出当次循环，所以程序打印出了 <code>0-5</code> 中除 2 之外的其他元素。</p>
<p><code>break</code> 主要用于立即<strong>跳出整个循环</strong>。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>以上实例设置了当 <code>i</code> 为 2 时跳出整个循环，所以程序只打印出了 0、1，2 及以后的数不再打印。</p>
<h2> 总结</h2>
<p>以上就是关于流程控制中顺序结构、分支结构以及循环结构的相关知识点了，通过学习，你觉得掌握了多少呢，能用所学知识实现一个 9 * 9 乘法表么？想试试么，那就评论区见真章吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>函数</title>
      <link>https://ez4jam1n.site/studio/md/java/js/20220507-function.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/js/20220507-function.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">函数</source>
      <description>函数简介 编程时，可能会定义许多相同或者功能相似的代码，此时我们每需要使用一次，就需要重写编写一次。虽然利用循环结构也能够实现一些简单的重复操作，但是功能较为局限。此时，我们就需要使用到 JavaScript 中的函数。 所谓函数，就是通过将一段可以重复调用的代码块进行封装，从而实现代码的重复利用。 函数使用 了解了函数是个啥，接下来就来看看如何使用函数。 函数使用，主要可以分为两步：声明函数和调用函数。 函数声明</description>
      <category>JavaScript 教程</category>
      <pubDate>Sat, 07 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 函数简介</h2>
<p>编程时，可能会定义许多相同或者功能相似的代码，此时我们每需要使用一次，就需要重写编写一次。虽然利用循环结构也能够实现一些简单的重复操作，但是功能较为局限。此时，我们就需要使用到 JavaScript 中的函数。</p>
<p>所谓函数，就是通过将一段可以重复调用的代码块进行封装，从而实现代码的重复利用。</p>
<h2> 函数使用</h2>
<p>了解了函数是个啥，接下来就来看看如何使用函数。</p>
<p>函数使用，主要可以分为两步：<strong>声明函数</strong>和<strong>调用函数</strong>。</p>
<ul>
<li><strong>函数声明</strong></li>
</ul>
<p>函数声明，也就是说明函数用来干啥的，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>function</code> 是声明函数的关键字，而函数一般是对应某一个功能，所以函数名一般是动词。</p>
<ul>
<li><strong>函数调用</strong></li>
</ul>
<p>既然声明了函数，那就要去调用！调用函数时，通过调用其函数名来执行函数体代码，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下我们在 JavaScript 中定义一个函数，用于求 <code>1 + 2 + … + num</code> 的值。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 函数的参数</h2>
<p>为了让函数能够准确地实现我们的功能，有时候我们需要用到参数。而参数又分为形参和实参，其中，形参位于声明函数的小括号中，而实参位于函数调用的小括号中。</p>
<p>声明带有参数的函数时，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当需要调用函数时，则可以通过以下形式调用。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>函数声明时，在函数名后的小括号中紧跟一些参数，这些参数被叫做<strong>形参</strong>，而在函数调用时，同样需要传递对应的参数，而这些参数就叫做<strong>实参</strong>。两者的区别总结如下：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>形参</strong></td>
<td>形式上的参数，函数定义时传递的参数</td>
</tr>
<tr>
<td><strong>实参</strong></td>
<td>实际上的参数，函数调用时传递的参数，实参是传递给形参的</td>
</tr>
</tbody>
</table>
<p>所以参数的作用在于，在函数内部某些不能固定的值，可以通过参数在调用函数时传递不同的值进行。</p>
<p>假设我们定义一个函数时，传递了不同数量的参数，就可能出现以下情况。</p>
<ul>
<li>实参个数与形参个数相匹配</li>
<li>实参个数多于形参个数</li>
<li>实参个数少于形参个数</li>
</ul>
<p>以下以实例来分别看着三种情况会出现怎样的结果。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>可以看到实参和形参个数匹配时，程序输出了正确的结果，而当实参个数大于形参个数时，程序同样输出了正确的结果。而当实参个数小于形参个数时，程序结果出错。因此，在定义和调用参数时，一定要注意形参和实参的匹配问题，否则可能会导致程序出错。</p>
<h2> 函数返回值</h2>
<p>在调用函数时，我们会希望将函数调用的结果返回到调用者，此时就可以通过关键字 <code>return</code> 语句来实现，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实上面的实例中我已经给出了函数的返回值了，其中 <code>result</code> 就是函数的返回值。实例中将函数的结果进行了返回，所以在调用时直接能够直接进行输出。</p>
<p>当然，不是所有函数都需要返回值，具体是否需要要根据自己的实际需求来编写。</p>
<h2> 作用域</h2>
<p>通常来讲，程序中用到的代码并不是一直有效的，而用于限定这个代码可用范围的就是这段代码的<strong>作用域</strong>。因为作用域的存在，改高了程序逻辑的局部性，增强了可靠性，最大程度上减少了代码中的冲突。</p>
<p>JavaScript 中，主要有三种作用域：</p>
<ul>
<li>全局作用域</li>
<li>局部作用域</li>
<li>块级作用域</li>
</ul>
<ol>
<li><strong>全局作用域</strong></li>
</ol>
<p>顾名思义，全局作用域也就是在整个代码中都有效。作用于所有代码执行的环境。</p>
<ol start="2">
<li><strong>局部作用域</strong></li>
</ol>
<p>局部有效，作用于函数内的代码环境，因为和函数息息相关，所以也叫做函数作用域。</p>
<ol start="3">
<li><strong>块级作用域</strong></li>
</ol>
<p>块级作用域由 <code>{}</code> 所包含，比如 <code>if</code> 和 <code>for</code> 语句中的 <code>{}</code>。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上实例中 <code>num</code> 的作用域是全局作用域，<code>num1</code> 和 <code>num2</code> 的作用域为局部作用域，而 <code>tmp</code> 的作用域则是块级作用域。</p>
<h2> 匿名函数</h2>
<p>所谓匿名函数，其实指的就是没有函数名的函数。其语法结构如下，主要有两种定义的方式。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是一个简单的匿名函数，要注意匿名函数是不能单独使用的，它通常作为立即执行函数的基础。</p>
<p>为了避免全局变量之间的污染，因此我们有时候需要在定义函数时立即执行函数，这时候我们就可以使用到立即执行函数。立即执行函数是基于匿名函数来实现的，也没有函数名，但是他会在定义后立即执行，其语法结构如下。</p>
<p>立即执行函数也有两种形式，第一种是将匿名函数包裹在一个括号运算符中，然后再跟一个括号。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种则是在匿名函数后面跟上一个括号，然后再将整个包裹在一个括号运算符中。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>但是需要注意的是，如果存在多个匿名函数，那它们之间要用 <code>;</code> 分隔开，否则将会导致报错。</p>
<h2> 总结</h2>
<p>以上就是本文的所有内容了，主要讲解了关于函数的简介、使用、参数、返回值、作用域以及常用的匿名函数。其中可能有一些小的知识点没有顾虑到，如果有什么遗漏的地方，大家可以指出来，然后根据大家所提的建议进行文章修改，让内容更加详细。</p>
]]></content:encoded>
    </item>
    <item>
      <title>面向对象</title>
      <link>https://ez4jam1n.site/studio/md/java/js/20220508-oop.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/js/20220508-oop.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">面向对象</source>
      <description>什么是对象 之前学习的数据类型在存储一些复杂的信息时，十分不方便，而且也难以区分。为此，为了更加详细方便的描述某一个事物，因而提出面向对象的概念。 那什么是对象呢？ 所谓对象，也是 JavaScript 中的一种数据类型，可以看做是一系列无序数据的集合。 有了对象，就可以用来描述某一个事物，比如用对象来描述一个人。其中人的一些静态特征比如姓名、年龄、性别、身高、体重我们就可以用数字类型、字符串类型、数组、布尔类型等数据结构来表示，而人的一些动作比如吃喝拉撒啥的，就可以用函数来进行表示。 如何使用对象</description>
      <category>JavaScript 教程</category>
      <pubDate>Sun, 08 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 什么是对象</h2>
<p>之前学习的数据类型在存储一些复杂的信息时，十分不方便，而且也难以区分。为此，为了更加详细方便的描述某一个事物，因而提出面向对象的概念。</p>
<p>那什么是对象呢？</p>
<p>所谓对象，也是 JavaScript 中的一种数据类型，可以看做是一系列无序数据的集合。</p>
<p>有了对象，就可以用来描述某一个事物，比如用对象来描述一个人。其中人的一些静态特征比如姓名、年龄、性别、身高、体重我们就可以用数字类型、字符串类型、数组、布尔类型等数据结构来表示，而人的一些动作比如吃喝拉撒啥的，就可以用函数来进行表示。</p>
<h2> 如何使用对象</h2>
<p>要使用对象之前，我们需要先进行声明，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如要创建一个王者荣耀中的英雄对象，则可以按照如下方式：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那既然创建了一个对象，那对象里边还有各种属性和方法呀。比如英雄的性别、职业、初始血条值、初始魔法值等等，此外，各个英雄还有各自的技能，用于杀敌清兵。</p>
<p>我们将上面的英雄对象添加上属性和方法，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明对象并添加若干属性之后，我们既可以利用 <code>.</code> 或者 <code>[]</code> 来获取对象中属性所对应的值。紧接着上述实例，我们定义了一个英雄对象，并含有姓名、性别、职业、技能等属性，假设我们要获取其中的姓名属性，这可以通过以下两种方式来获得。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除开属性之外我们的英雄还拥有其他行为，比如放各种技能。以下我们就来看看，如何在对象中添加一个方法。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象中的方式是由方法名和函数两部分共同组成，并且中间使用 <code>:</code> 分隔。</p>
<p>当要使用该方法是，就可以通过以下方式来调用。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 操作对象</h2>
<p>对象作为一种无序的数据集合，要对对象进行操作，无非是给对象增加、修改、查询、删除各个属性或方法。</p>
<p>假设我们现在有以下的对象：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol>
<li><strong>增加</strong></li>
</ol>
<p>现在我们要给 <code>hero</code> 属性添加一个新的属性，就可以通过以下的语法形式形式：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="2">
<li><strong>修改</strong></li>
</ol>
<p>如果要修改其中的一个属性或者方法，则可以通过以下的方式：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下为修改属性和方法的实例：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<ol start="3">
<li><strong>查询</strong></li>
</ol>
<p>而如果要查询对象的属性或者方法，则可以使用的方式：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="4">
<li><strong>删除</strong></li>
</ol>
<p>删除对象中的属性，可以通过以下方式：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 遍历对象</h2>
<p>类似于数组，如果我们想要输出数组中的所有元素，我们可以对数组进行遍历。而同样的，对象也可以进行遍历，从而输出对象中所有属性和方法。</p>
<p>但是由于对象是无序的，而且也不像数组一样可以通过 <code>length</code> 属性来确定数组长度，因此要遍历对象，需要用到一个增强型的 <code>for</code> 循环，其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如针对以下对象，要输出对象的属性及其属性值，则可以通过 <code>for…in</code> 的方式。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://img-blog.csdnimg.cn/img_convert/da9f90545e07c54cf7b7cf009b4ae549.png" alt=""></p>
<h2> 内置对象</h2>
<p>所谓内置对象，就是 JavaScript 中内部已经提供的对象，里边包含了各种属性和方法，当我们开发者需要时，就可以直接进行调用而不必去重新创建。</p>
<p>我们常用的有 <code>Math</code> 对象，它提供了一些用于数学运算符的方法，常见方法总结如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>random()</code></td>
<td>生成 0 - 1 之间的随机数，左闭右开，即包括 0 但不包括 1</td>
</tr>
<tr>
<td><code>ceil()</code></td>
<td>向上取整</td>
</tr>
<tr>
<td><code>floor()</code></td>
<td>向下取整</td>
</tr>
<tr>
<td><code>max()</code></td>
<td>求最大值</td>
</tr>
<tr>
<td><code>min()</code></td>
<td>求最小值</td>
</tr>
<tr>
<td><code>pow()</code></td>
<td>幂运算</td>
</tr>
<tr>
<td><code>abs()</code></td>
<td>求绝对值</td>
</tr>
</tbody>
</table>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>通过学习本文，你应该知道什么是对象，怎么使用对象，以及如何操作和遍历对象。除此之外，你还应该知道 JavaScript 中的最常见的内置对象 <code>Math</code>，并学习利用 <code>Math</code> 所提供的常用方法来简化日常开发工作。更多关于 JavaScript 中对象的知识，欢迎留言补充！</p>
]]></content:encoded>
    </item>
    <item>
      <title>DOM 事件</title>
      <link>https://ez4jam1n.site/studio/md/java/js/20220510-dom-event.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/js/20220510-dom-event.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">DOM 事件</source>
      <description>事件 什么是事件 在之前 DOM 的学习中，我们主要学习了如何获取 DOM 元素，并且学会了如何给获取的元素进行属性修改等操作。但这些基本都是静态的修改，并没有接触到一些动作。而今天要学习的事件，其实就是这些动作的总称。 所谓事件，就是在编程时系统内所发生的动作或者发生的事情，比如在网页中点击一个按钮之后，我们就能实现登录或者注册之类的功能。 事件监听 事件监听，就是让程序检测是否有事件产生，一旦有事件触发，就立即调用一个函数做出响应，这个过程就叫做注册事件。其语法结构如下： 元素.addEventListener(&amp;apos;事件&amp;apos;, 要执行的函数);</description>
      <category>JavaScript 教程</category>
      <pubDate>Tue, 10 May 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 事件</h2>
<h3> 什么是事件</h3>
<p>在之前 DOM 的学习中，我们主要学习了如何获取 DOM 元素，并且学会了如何给获取的元素进行属性修改等操作。但这些基本都是静态的修改，并没有接触到一些动作。而今天要学习的事件，其实就是这些动作的总称。</p>
<p>所谓事件，就是在编程时系统内所发生的动作或者发生的事情，比如在网页中点击一个按钮之后，我们就能实现登录或者注册之类的功能。</p>
<h3> 事件监听</h3>
<p>事件监听，就是让程序检测是否有事件产生，一旦有事件触发，就立即调用一个函数做出响应，这个过程就叫做注册事件。其语法结构如下：</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要实现事件监听，要同时包含以下三要素：</p>
<ul>
<li><strong>事件源</strong>：也就是上面语法中所对应的元素，指的是谁发出的事件，也就是网页中哪个 DOM 元素被事件所触发。</li>
<li><strong>事件</strong>：以何种方式触发，比如鼠标单击 <code>click</code>。</li>
<li><strong>事件调用函数</strong>：也就是语法结构中要执行的函数，我们触发事件后，需要去做什么。</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是一个事件监听的实例，通过在网页中点击按钮，就会执行事件调用函数，弹窗显示内容。</p>
<h3> 事件类型</h3>
<p>学习了事件的定义以及如何实现一个最简单的事件监听，接下来就来看看，Web API 中为 DOM 提供的常用事件类型有哪些。</p>
<p>主要有 4 种类型的事件，分为：</p>
<ul>
<li><strong>鼠标事件</strong></li>
<li><strong>焦点事件</strong></li>
<li><strong>键盘事件</strong></li>
<li><strong>文本事件</strong></li>
</ul>
<p>以下就分别来看看这些类型的事件又可以细分为哪些小类。</p>
<ol>
<li><strong>鼠标事件</strong></li>
</ol>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>click</code></td>
<td>鼠标点击</td>
</tr>
<tr>
<td><code>mouseenter</code></td>
<td>鼠标经过</td>
</tr>
<tr>
<td><code>mouseleave</code></td>
<td>鼠标离开</td>
</tr>
</tbody>
</table>
<ol start="2">
<li><strong>焦点事件</strong></li>
</ol>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>focus</code></td>
<td>获得焦点</td>
</tr>
<tr>
<td><code>blur</code></td>
<td>失去焦点</td>
</tr>
</tbody>
</table>
<ol start="3">
<li><strong>键盘触发</strong></li>
</ol>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>keydown</code></td>
<td>键盘按下触发</td>
</tr>
<tr>
<td><code>keyup</code></td>
<td>键盘抬起触发</td>
</tr>
</tbody>
</table>
<ol start="4">
<li><strong>文本事件</strong></li>
</ol>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>input</code></td>
<td>用户输入事件</td>
</tr>
</tbody>
</table>
<h2> 高阶函数</h2>
<p>高阶函数，简单的说可以被理解为函数的高级应用，JavaScript 中函数能够当成值来对待，然后基于这个值来实现函数的高级应用。</p>
<h3> 函数表达式</h3>
<p>函数表达式其实和普通的函数没有本质上的区别，以下是一个函数表达式和一个普通函数。</p>
<ul>
<li>函数表达式</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>普通函数</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在调用时，可以发现调用方式其实都一样，两者最终得到的结果也一致。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 回调函数</h3>
<p>如果有两个函数 A 和 B，假设我们将函数 A 作为参数传递给函数 B，那么我们此时将函数 A 叫做 <strong>回调函数</strong>。总结来说就是如果一个函数被当做参数来传递给另一个函数时，则这个被当做参数的函数就叫做回调函数。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 环境对象</h2>
<p>环境对象是指函数内部特殊的变量 <code>this</code>，它代表着当前函数运行时所处的环境。</p>
<p>JavaScript 中，<code>this</code> 不是固定不变的，它会随着执行环境的变化而变化。<code>this</code> 在不同位置，也有着不同的含义。</p>
<table>
<thead>
<tr>
<th>位置</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>方法中</td>
<td><code>this</code> 表示该方法所属的对象</td>
</tr>
<tr>
<td>单独使用</td>
<td><code>this</code> 表示全局对象</td>
</tr>
<tr>
<td>函数中</td>
<td><code>this</code> 表示全局对象</td>
</tr>
<tr>
<td>事件中</td>
<td><code>this</code> 表示接收事件的元素</td>
</tr>
</tbody>
</table>
<ol>
<li><strong>方法中</strong></li>
</ol>
<p>假设有一个对象，则此时对象方法 <code>info</code> 中的 <code>this</code> 就代表 <code>hero</code> 这个对象。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>单独使用</strong></li>
</ol>
<p>单独使用时，<code>this</code> 指向了全局对象。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="3">
<li><strong>函数中</strong></li>
</ol>
<p>函数中使用 <code>this</code> 时，同样指向全局对象。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>本文主要从什么是事件、如何实现事件监听和常见的事件类型三个方面介绍了关于事件的知识点。此外，从函数表达式和回调函数对函数的高阶用法做了简要介绍。最后则是对使用最多的 <code>this</code> 在不同环境中使用时所代表的一些含义。</p>
]]></content:encoded>
    </item>
    <item>
      <title>JS 教程「11」：DOM 节点</title>
      <link>https://ez4jam1n.site/studio/md/java/js/20220511-dom-node.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/js/20220511-dom-node.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">JS 教程「11」：DOM 节点</source>
      <description>节点操作 什么是节点 前边已经讲了什么是 DOM 树，知道了 DOM 树，那么节点就很简单了。在 DOM 树中，每一个内容我们都可以称为节点。 按照 DOM 树中内容的不同，我们又可以对节点进行分类，主要可以分为以下几类： 元素节点：HTML 页面中的所有标签，比如 body、div 、a、img 等。 属性节点：标签的属性，比如 a 标签中的 href，img 标签中的 src 等。 文本节点：也就是页面中的文本，比如 title 元素中所含文本。</description>
      <category>JavaScript 教程</category>
      <pubDate>Sun, 24 Apr 2022 16:15:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 节点操作</h2>
<h3> 什么是节点</h3>
<p>前边已经讲了什么是 DOM 树，知道了 DOM 树，那么节点就很简单了。在 DOM 树中，每一个内容我们都可以称为节点。</p>
<p>按照 DOM 树中内容的不同，我们又可以对节点进行分类，主要可以分为以下几类：</p>
<ul>
<li><strong>元素节点</strong>：HTML 页面中的所有标签，比如 <code>body</code>、<code>div</code> 、<code>a</code>、<code>img</code> 等。</li>
<li><strong>属性节点</strong>：标签的属性，比如 <code>a</code> 标签中的 <code>href</code>，<code>img</code> 标签中的 <code>src</code> 等。</li>
<li><strong>文本节点</strong>：也就是页面中的文本，比如 <code>title</code> 元素中所含文本。</li>
</ul>
<h3> 查找节点</h3>
<h3> 增加节点</h3>
<h3> 删除节点</h3>
<h2> 时间对象</h2>
<h2> 重绘和回流</h2>
]]></content:encoded>
    </item>
    <item>
      <title>简介，安装及配置</title>
      <link>https://ez4jam1n.site/studio/md/java/maven/20220101-maven-intro-install.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/maven/20220101-maven-intro-install.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">简介，安装及配置</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 在我们之前的开发过程中，往往会遇到以下问题： 一个项目就是一个工程，当项目过大时，难以管理； 项目中的 jar 包（也就是我们的依赖文件），需要我们手动进行移动到 Web 项目的 WEB-INF/lib 目录中； jar 一般是通过下载或其他人打包后获取； 各个 jar 包之间繁琐的依赖关系需要我们自行解决；</description>
      <category>Maven 教程</category>
      <pubDate>Sat, 01 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>在我们之前的开发过程中，往往会遇到以下问题：</p>
<ul>
<li>一个项目就是一个工程，当项目过大时，难以管理；</li>
<li>项目中的 jar 包（也就是我们的依赖文件），需要我们手动进行移动到 Web 项目的 <code>WEB-INF/lib</code> 目录中；</li>
<li>jar 一般是通过下载或其他人打包后获取；</li>
<li>各个 jar 包之间繁琐的依赖关系需要我们自行解决；</li>
</ul>
<p>针对以上的问题，我们提出采用项目管理工具来对我们的项目进行管理，而这就是我们今天所要讲的 Maven。</p>
<p>通过使用 Maven，我们就能将一个大型的项目拆分为多个工程。此外，通过 Maven，我们可以很方便的对各个 jar 包进行统一管理，而且它也能解决各个包之间的依赖关系。</p>
<h2> 什么是 Maven</h2>
<p>Maven 是一个项目管理工具，包含了一个项目对象模型（<code>Project Object Model</code>），反映在配置中就是 <code>pom.xml</code> 文件。其中包含了一个项目的生命周期、一个依赖管理系统，以及定义在项目生命周期阶段的插件（<code>plugin</code>）和目标（<code>goal</code>）。</p>
<p>其中 Maven 最核心的两大概念包括 <strong>依赖管理</strong> 和 <strong>项目构建</strong>。</p>
<ul>
<li><strong>依赖管理</strong>：提供对 <code>jar</code> 的统一管理。（Maven 提供了一个中央仓库，当我们在项目中添加完依赖后，Maven 就会自动去中央仓库中下载相关依赖）。</li>
<li><strong>项目构建</strong>：Maven 提供对项目的编译、测试、打包、部署、上传到私服等。</li>
</ul>
<h2> Maven 安装</h2>
<p>Maven 属于 Java 项目，因此使用 Maven 必须依赖于 JDK。</p>
<p>首先我们要确保我们的电脑上已经安装了 JDK，可以使用如下命令来进行确认。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果出现如下的提示，则说明我们的 JDK 安装成功了（当然，你可能和我安装的不是一个版本，但只要出现下面类似的提示，就代表你也成功了）。</p>
<p></p>
<p>安装好 JDK 之后，然后接下来在安装 Maven，安装过程如下：</p>
<ol>
<li>下载 Maven，下载地址：<a href="https://maven.apache.org/download.cgi%E3%80%82%E5%A6%82%E4%B8%8B%E5%9B%BE%EF%BC%8C%E6%88%91%E4%BB%AC%E5%9C%A8" target="_blank" rel="noopener noreferrer">https://maven.apache.org/download.cgi。如下图，我们在</a> Windows 中一般选择第二项进行下载，而在 macOS 或者 Linux 系统中，则选择第一项进行下载。</li>
</ol>
<p></p>
<ol start="2">
<li>将下载后的压缩包进行解压</li>
</ol>
<p></p>
<ol start="3">
<li>配置环境变量</li>
</ol>
<p>这里需要配置环境变量，一个是新建一个系统变量用于指向 Maven 解压缩后的路径，另一个则是修改 Path 变量环境，新加上一条指向 Maven 的 bin 目录的路径。</p>
<ul>
<li>MAVEN_HOME：即刚才解压缩后 Maven 的存放路径</li>
</ul>
<p></p>
<ul>
<li>Path：<code>%MAVEN_HOME%\bin</code></li>
</ul>
<p></p>
<ol start="4">
<li>校验安装是否成功</li>
</ol>
<p>当我们配置环境变量之后，此时就可以打开一个新的 cmd 窗口，然后利用如下校验命令来测试我们的 Maven 是否安装成功，安装成功则会出现如下提示。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h2> Maven 目录结构</h2>
<p>安装好 Maven 之后，其目录和内容如下，各目录内容如下：</p>
<p></p>
<ul>
<li><strong>bin</strong></li>
</ul>
<p>包含 mvn 运行的脚本，用于配置 Java 命令，准备好 classpath 和相关的 Java 系统属性，然后执行 Java 命令。</p>
<ul>
<li><strong>boot</strong></li>
</ul>
<p>只包含一个文件，是一个类加载器框架，相对于默认的 Java 类加载器，提供了更丰富的语法以方便配置。</p>
<ul>
<li><strong>conf</strong></li>
</ul>
<p>包含 <code>settings.xml</code> ，通过修改该文件，能在机器中全局定制 Maven 的行为。</p>
<ul>
<li><strong>lib</strong></li>
</ul>
<p>包含所有 Maven 运行时所需的 Java 类库，Maven 本身是分模块开发，所以里边有不同模块之类的类库。此外还包含了一些 Maven 用到的第三方依赖。</p>
<h2> Maven 配置</h2>
<h3> 仓库镜像配置</h3>
<p>通常安装好 Maven 之后就可以使用了，但是由于 Maven 的中央仓库服务器位于国外，国内使用网速较慢，所以我们最好将中央仓库换为国内的阿里云镜像。</p>
<p>打开 <code>apache-maven-xxx/conf/</code> 目录下的 <code>settings.xml</code> 文件，然后在 <code>mirrors</code> 节点下加入如下配置：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 本地仓库配置</h3>
<p>安装好 Maven 后，本地仓库默认在 <code>当前用户名/.m2/repository</code> 下，但是这个位置比较隐蔽，所以建议自定义为其他路径：</p>
<p>还是打开 <code>apache-maven-xxx/conf/</code> 目录下的 <code>settings.xml</code> 文件，然后将如下路径修改为自己要设置的本地仓库，比如我的本地仓库路径如下图：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>好了，以上就是关于我们日常项目开发中经常使用的 Maven 的相关知识点了。文章介绍了 Maven 是干什么的，以及我们应该如何安装 Maven 和安装后常见的一些设置，最后则是对 Maven 的目录结构进行详解。而在下一篇博客中，我将讲述 Maven 中最常见的命令，看看大家都是用什么命令来进行工作的吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>常用命令及项目骨架生成</title>
      <link>https://ez4jam1n.site/studio/md/java/maven/20220102-maven-command-skeleton.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/maven/20220102-maven-command-skeleton.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">常用命令及项目骨架生成</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 上一篇文章中我们已经介绍了什么是 Maven，以及如何进行 Maven 的安装，最后还对 Maven 安装后的简单配置进行了讲解。今天我们就主要来看看 Maven 中的核心概念以及 Maven 在日常使用中常用的命令。 Maven 核心</description>
      <category>Maven 教程</category>
      <pubDate>Sun, 02 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>上一篇文章中我们已经介绍了什么是 Maven，以及如何进行 Maven 的安装，最后还对 Maven 安装后的简单配置进行了讲解。今天我们就主要来看看 Maven 中的核心概念以及 Maven 在日常使用中常用的命令。</p>
<h2> Maven 核心</h2>
<h2> 构建</h2>
<p>所谓构建，就是指项目的构建，它是面向过程的，是一系列步骤的总和，主要包括项目代码的编译、运行、测试、打包以及部署等等。而 Maven 所支持的构建主要有如下几种：</p>
<ol>
<li><strong>清理</strong>：删除之前编译产生的文件，为新的代码编译做好准备；</li>
<li><strong>编译</strong>：将源代码编译为执行代码，支持批量编译；</li>
<li><strong>测试</strong>：通过执行测试代码，验证功能是否正常，而且它也是支持批量测试的；</li>
<li><strong>报告</strong>：通过执行测试，生成测试结果的文件；</li>
<li><strong>打包</strong>：讲项目中的 <code>class</code> 文件、配置文件打包到一个压缩文件中。对于一般程序，打包的压缩文件扩展名通常是 <code>.jar</code>，而对于 Web 应用，则起压缩文件扩展名通常是 <code>.war</code>；</li>
<li><strong>安装</strong>：把打包好的文件安装到本地仓库；</li>
<li><strong>部署</strong>：让程序跑起来。</li>
</ol>
<h3> Maven 核心概念</h3>
<ol>
<li><strong>pom</strong>：项目对象模型，Maven 将项目当做一个模型，用于控制 Maven 构建项目的过程，通过它来管理 jar 依赖；</li>
<li><strong>目录结构</strong>：Maven 的目录和文件位置都是约定俗成的；</li>
<li><strong>坐标</strong>：用于表示资源的唯一标识；</li>
<li><strong>依赖管理</strong>：使用 jar 文件来管理项目；</li>
<li><strong>仓库管理</strong>：资源存放的路径；</li>
<li><strong>生命周期</strong>：Maven 工具构建项目的过程；</li>
<li><strong>插件和目标</strong>：执行 Maven 构建是的工具就是插件</li>
<li><strong>继承</strong></li>
<li><strong>聚合</strong></li>
</ol>
<h2> 常用命令</h2>
<p>Maven 中的一些常见命令如下：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>mvn clean</code></td>
<td>清理</td>
<td>用于清理已编译好的文件</td>
</tr>
<tr>
<td><code>mvn compile</code></td>
<td>编译</td>
<td>将 Java 源代码编译成字节码 <code>.class</code> 文件</td>
</tr>
<tr>
<td><code>mvn test</code></td>
<td>测试</td>
<td>项目测试</td>
</tr>
<tr>
<td><code>mvn package</code></td>
<td>打包</td>
<td>根据用户配置，将项目打包为 <code>jar</code> 包或 <code>war</code> 包</td>
</tr>
<tr>
<td><code>mvn install</code></td>
<td>安装</td>
<td>手动向本地仓库安装一个 <code>jar</code></td>
</tr>
<tr>
<td><code>mvn deploy</code></td>
<td>上传</td>
<td>将 <code>jar</code> 上传到私服</td>
</tr>
</tbody>
</table>
<h2> 利用 Archetype 来生成项目骨架</h2>
<p>实际上，为了更快捷的创建 Maven 项目骨架，我们可以使用 maven archetype 来创建，创建过程如下：</p>
<ol>
<li>首先进入你要创建项目骨架的目录，然后执行如下命令：</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>然后会有很长的输出，有多种可用的 Archetype 供你选择，选择你所需要的，然后输入对应编号即可；</li>
</ol>
<p></p>
<ol start="3">
<li>接着会让你输入 <code>groupId</code>、<code>artifactId</code>、<code>version</code>、<code>package</code> 等信息；</li>
</ol>
<p></p>
<ol start="4">
<li>再接着让你确认相关信息；</li>
</ol>
<p></p>
<ol start="5">
<li>最后确认无误后，回车生成即可。</li>
</ol>
<h2> 项目结构</h2>
<p>项目生成后的目录中主要包含如下文件：</p>
<p></p>
<p>其中 <code>src</code> 目录包含了项目的主代码和资源，同时还包括了测试相关的代码以及资源。而 <code>pom.xml</code> 则定义了项目的所有配置。</p>
<p>假设我们有一个 <code>HelloWorld</code> 的项目，我们利用 Maven 来进行管理时，其项目结构大致应该是如下：</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>HelloWorld</code> 是根目录，也就是我们的工程名，而 <code>src</code> 目录下主要是存放源代码，其下有主要分为 <code>java</code> 和 <code>resources</code>，<code>java</code> 目录主要用于存放程序包以及程序包中的 Java 文件，<code>resources</code> 目录则是存放程序中所要使用的配置文件。</p>
<p><code>test</code> 目录结构同 <code>src</code>，只不过顾名思义，这里主要是存放用于测试的代码和配置文件，而且这不是一个必选项，我们可以根据自己的需要进行选择。</p>
<p>最后则是 <code>pom.xml</code>，这个每个 Maven 所管理项目的核心文件，这是必须的，后续的依赖管理等工作都基于此文件来操作。</p>
<p></p>
<p></p>
<h2> 总结</h2>
<p>好了，以上就是 Maven 中的一些常用命令和如何利用 Archetype 来生成项目骨架，以及利用 Maven 所生成的项目的总体结构了。如果你觉得对你有所帮助，还请点赞关注一波哦。今天就到此为止了，下一期我们继续来看如何利用 Maven 进行依赖管理，敬请期待吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>仓库、坐标以及依赖管理</title>
      <link>https://ez4jam1n.site/studio/md/java/maven/20220103-maven-warehouse-dependency.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/maven/20220103-maven-warehouse-dependency.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">仓库、坐标以及依赖管理</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 在我们创建使用 Maven 项目的过程中，当需要用到第三方的插件时，都是通过依赖管理来达成，也就是 Maven 项目中必有的 pom.xml 文件。POM（Project Object Model），即 项目对象模型，其中定义了 Maven 项目的形式。因此，pom.xml 可以看做是 Maven 项目中的导航。</description>
      <category>Maven 教程</category>
      <pubDate>Mon, 03 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>在我们创建使用 Maven 项目的过程中，当需要用到第三方的插件时，都是通过依赖管理来达成，也就是 Maven 项目中必有的 <code>pom.xml</code> 文件。POM（Project Object Model），即 <strong>项目对象模型</strong>，其中定义了 Maven 项目的形式。因此，<code>pom.xml</code> 可以看做是 Maven 项目中的导航。</p>
<h2> Maven 仓库</h2>
<p>所谓仓库，就和我们平常说的粮仓啥的差不多，其实都是用来存放东西的。只不过在 Maven 项目中，仓库使用来存放我们项目所使用的 jar 包以及 Maven 所使用的各种 jar 包的。</p>
<p>而根据仓库存放位置的不同，我们可将其分为 <strong>本地仓库</strong> 和 <strong>远程仓库</strong>。</p>
<p>其中，本地仓库也就是我们个人 PC 中存放 jar 包的文件夹，用于存放 Maven 项目所需的 jar。</p>
<p>而远程仓库则指的是存放在互联网中的仓库，我们可以将其进一步细分为 <strong>中央仓库</strong>、<strong>中央仓库镜像</strong>、<strong>私服</strong>。</p>
<ul>
<li><strong>中央仓库</strong>：全世界最权威的一个仓库，我们所有的开发人员都可以共享使用，地址为：<a href="https://repo.maven.apache.org" target="_blank" rel="noopener noreferrer">https://repo.maven.apache.org</a>。</li>
<li><strong>中央仓库镜像</strong>：顾名思义，它就是中央仓库的一个备份，它分散在各大洲的重要城市，方便各个地方的程序员使用起来更快捷。</li>
<li><strong>私服</strong>：私服则是处于安全考虑，一般搭建在局域网中，仅提供给公司内部人员使用。</li>
</ul>
<p>那我们如何使用仓库呢？或者说一个 Maven 项目从仓库中获取资源的顺序是怎样的呢？</p>
<p>通常来讲，当我们要使用 Maven 仓库中的资源时，是不需要我们去人为干预的。假设我们要使用某一个驱动，我们首先去 <code>pom.xml</code> 中进行配置，接着 Maven 将自动先去检查我们的本地仓库中是否存在该资源，如果没有，那么就到私服中午查找，如果还没有找到，那么就到中央仓库镜像中去查询，最后如果连镜像仓库中也没法找到，那就只有到中央仓库去进行搜索了。</p>
<h2> Maven 坐标</h2>
<p>坐标，其实就相当于我们人的身份证，它是唯一的，用于标识一个项目。一个坐标的组成一般有如下几部分，前三者必须，<code>packaging</code> 可选，<code>classifier</code> 不能直接定义。</p>
<ul>
<li><strong>groupId</strong>：定义 Maven 项目隶属的实际组织，一般约定以创建该项目的组织名称的逆向域名开头。比如说公司的域名是：<a href="http://google.com" target="_blank" rel="noopener noreferrer">google.com</a>，那么我们就可以将 <code>groupId</code> 设置为 <code>com.google</code>。</li>
<li><strong>artifactId</strong>：定义实际项目中的一个 Maven 项目（模块），推荐使用实际项目名作为前缀。</li>
<li><strong>version</strong>：定义 Maven 项目当前所处版本，一般使用三位数字进行标识，如 <code>1.1.1</code>。</li>
<li><strong>packaging</strong>：项目打包方式，可以是 <code>jar</code>、<code>war</code>、<code>rar</code>、<code>ear</code>、<code>pom</code>，默认使用 <code>jar</code>。</li>
<li><strong>classifier</strong>：帮助定义构建输出的一些附属构建，与主构件对应。</li>
<li><strong>dependencies</strong>：添加项目所需的 <code>jar</code> 所对应的 Maven 坐标,，表示我们项目中所需的各种资源说明。</li>
<li><strong>dependency</strong>：<code>dependencies</code> 的一个子标签，一个 <code>dependency</code> 对应一个坐标。</li>
<li><strong>properties</strong>：用于设置属性。</li>
<li><strong>scope</strong>：表示依赖的范围，通常有如下几种：</li>
</ul>
<table>
<thead>
<tr>
<th>依赖范围</th>
<th>编译期有效</th>
<th>测试期有效</th>
<th>运行时有效</th>
<th>打包有效</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>compile</code></td>
<td>😄</td>
<td>😄</td>
<td>😄</td>
<td>😄</td>
</tr>
<tr>
<td><code>test</code></td>
<td>😡</td>
<td>😄</td>
<td>😡</td>
<td>😡</td>
</tr>
<tr>
<td><code>privided</code></td>
<td>😄</td>
<td>😄</td>
<td>😡</td>
<td>😡</td>
</tr>
<tr>
<td><code>runtime</code></td>
<td>😡</td>
<td>😄</td>
<td>😄</td>
<td>😄</td>
</tr>
<tr>
<td><code>system</code></td>
<td>😄</td>
<td>😄</td>
<td>😡</td>
<td>😡</td>
</tr>
</tbody>
</table>
<p>以下就是一个最简单的 Maven 坐标实例：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 依赖冲突</h2>
<h3> 冲突产生原因</h3>
<p>Maven 项目中，通常都会定义血多 <code>dependency</code>，每个 <code>dependency</code> 内部也会定义它的 <code>dependency</code>，而有时各个依赖之间会产生冲突，冲突的原因通常主要是 <strong>由于 <code>jar</code> 包依赖的传递性</strong>，如果在一个项目中同时引入了一个依赖的不同版本，就可能导致依赖冲突。</p>
<h3> 解决冲突的办法</h3>
<p>当冲突产生时，需要如何解决呢？通常我们有两种处理策略：</p>
<ul>
<li><strong>Maven 的默认处理策略</strong>：</li>
</ul>
<ol>
<li><strong>最短路径优先</strong>：对于不同路径长度的 <code>jar</code> 包，优先选择路径更短的生效。</li>
<li><strong>最先声明优先</strong>：当路径一样时，如 <code>A -&gt; B -&gt; C</code> ，<code>E -&gt; F -&gt; C</code>，那么则谁先声明则先选择谁生效。</li>
</ol>
<ul>
<li><strong>移除依赖：用于排除某项依赖的依赖包</strong></li>
</ul>
<p>除开上述策略外，我们也可以手动在 <code>pom.xml</code> 中使用 <code>&lt;exclusion&gt;</code> 标签来排除发生冲突的依赖包，如下面用于排除 <code>spring-core</code> 冲突的例子：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>今天关于 Maven 的仓库和坐标的相关知识，以及 Maven 中依赖产生冲突的原因和如何解决冲突的内容就到此结束了。个人水平有限可能有些遗漏的方面，如果你有更多关于以上方面的知识，欢迎评论交流。既然差不多讲完了 Maven 中的核心知识点，那么下一次我们就来看看怎么使用 Maven 来进行实战吧。</p>
]]></content:encoded>
    </item>
    <item>
      <title>使用 IDEA 创建 Maven 项目</title>
      <link>https://ez4jam1n.site/studio/md/java/maven/20220104-maven-project-with-idea.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/maven/20220104-maven-project-with-idea.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">使用 IDEA 创建 Maven 项目</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 之前我们已经学习过 Maven 是什么，我们可以用它来干什么。接着我们又介绍了如何安装和配置 Maven，再接着，我们又了解了 Maven 中常用的一些命令以及如何利用 Archetype 来生成项目骨架，并对利用 Maven 所生成项目的结构进行了描述。最后则是 Maven 中的一些核心概念和如何进行依赖管理，并说明当依赖产生冲突时，应该如何解决。但以上始终还是停留在概念的阶段，并未进入我们实际的开发中。那么今天的内容就主要来看看，我们如何利用 IDEA 搭配 Maven 来开发一个简单的 Demo。</description>
      <category>Maven 教程</category>
      <pubDate>Tue, 04 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>之前我们已经学习过 Maven 是什么，我们可以用它来干什么。接着我们又介绍了如何安装和配置 Maven，再接着，我们又了解了 Maven 中常用的一些命令以及如何利用 Archetype 来生成项目骨架，并对利用 Maven 所生成项目的结构进行了描述。最后则是 Maven 中的一些核心概念和如何进行依赖管理，并说明当依赖产生冲突时，应该如何解决。但以上始终还是停留在概念的阶段，并未进入我们实际的开发中。那么今天的内容就主要来看看，我们如何利用 IDEA 搭配 Maven 来开发一个简单的 Demo。</p>
<h2> IDEA 中的 Maven 配置</h2>
<p>依次进入 <code>File -&gt; Settings -&gt; Build,Execution,Deployment -&gt; Build Tools -&gt; Maven</code>，IDEA 默认使用它自带的 Maven，我们可以自定义为自己的 Maven，更加方便管理。</p>
<p>这里主要配置的项目有：</p>
<ul>
<li><strong>Maven home directory</strong>：也就是我们 Maven 安装的路径；</li>
<li><strong>User settings file</strong>：Maven 安装路径下配置文件夹中的 <code>settings.xml</code> 所在路径；</li>
<li><strong>Local repository</strong>：也就是我们前边文章中所配置的本地仓库位置。</li>
</ul>
<p>比如我 IDEA 中的 Maven 相关设置就可以参照下图。</p>
<p></p>
<h2> 使用 IDEA 创建 Maven 项目</h2>
<p>接下来我们就来看看如何使用 IDEA 创建 Maven 项目，具体可以分为如下步骤：</p>
<ol>
<li>首先一次进入 <code>File -&gt; New -&gt; Project</code>，然后选择 Maven，表示新建一个 Maven 项目；</li>
</ol>
<p></p>
<ol start="2">
<li>填写相关信息，也就是我们之前所介绍的 Maven 的坐标。这里我们只要提供 GroupId、ArtifactId 以及 Version 这三项就足够了。关于其他的配置，我们可以到后续的 <code>pom.xml</code> 中去进行配置；</li>
</ol>
<p></p>
<ol start="3">
<li>新建项目完成，完成后的项目目录结构如下，基本上也就是之前介绍过的项目结构；</li>
</ol>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="4">
<li>默认生成的 <code>pom.xml</code> 如下。</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li>到上一步之后，一个新的 Maven 项目就完成了，接下来就是去编写业务代码了。</li>
</ol>
<h2> 业务代码编写</h2>
<p>上面已经学会了如何创建一个 Maven 项目，接下来就是编写业务代码了，我们以最经典的 <code>HelloWorld</code> 为例。</p>
<h3> 项目主代码</h3>
<p>项目主代码会打包到最终构件中，默认位于 <code>src/main/java</code> 目录下，我们创建一个 <code>HelloWorld</code> 的主类；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 项目测试代码</h3>
<p>要对主代码进行测试，那么则需要编写测试代码，测试代码默认位于 <code>src/test/java</code> 目录，要对指定主代码进行测试，编写测试代码时要和主代码保持相同的目录结构。如上述主代码位于 <code>com.cunyu.helloworld</code> 包下，那么测试代码也应该位于 <code>com.cunyu.helloworld</code> 包下，只是根目录不同。而要进行测试，通常首选 JUnit 单元测试。所以编写测试代码对主代码进行测试主要有如下步骤。</p>
<ol>
<li>首先在 <code>pom.xml</code> 添加 JUnit 依赖；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>接着编写测试代码；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>经过上边的项目创建以及业务代码编写之后，一个 Maven 版的 <code>Hello World</code> 项目到此就结束了。是不是很简单呢，赶快自己动手试试吧！</p>
<p>创作不易，如果大家觉得我的文章对你所有帮助，那就动动你的小手，帮我点赞关注一波吧。💖💖💖</p>
]]></content:encoded>
    </item>
    <item>
      <title>简介</title>
      <link>https://ez4jam1n.site/studio/md/java/mybatis/20220201-introduction.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/mybatis/20220201-introduction.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">简介</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 什么是持久化 持久化是将程序数据在持久状态和瞬时状态间转换的机制，将数据保存到可永久保存的存储设备中。最常见的就是将内存中的对象存储在数据库中，或者存在磁盘文件、XML 数据文件中等等。其中，文件 IO 属于持久化机制，而 JDBC 也是一种持久化机制。</description>
      <category>MyBatis 教程</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<h3> 什么是持久化</h3>
<p>持久化是<strong>将程序数据在持久状态和瞬时状态间转换的机制</strong>，将数据保存到可永久保存的存储设备中。最常见的就是将内存中的对象存储在数据库中，或者存在磁盘文件、XML 数据文件中等等。其中，文件 IO 属于持久化机制，而 JDBC 也是一种持久化机制。</p>
<h3> 为什么需要持久化</h3>
<p>之所以需要持久化，是由于内存自身缺陷导致。我们知道，内存在遇到某些外界因素影响后会丢失，但是我们的一些数据是绝对不能丢失的，但我们又无法保证不受外界因素影响。同时内存成本较高，比起硬盘、光盘等外存，其价格要高上几个数量级，而且维持成本也较高。在这种情况下，我们不得不寻求另一种方案来存储数据对象，而持久化就是其中的一种选择，我们能够通过持久化将数据缓存到外存，从而降低成本。</p>
<h3> 什么是持久层</h3>
<p>所谓持久层，就是用于完成持久化工作的代码块（dao 层【DAO（Data Access Object）】）。数据持久化通常都是将内存中的数据保存到磁盘中来加以固化，而实现这一过程大多是通过<strong>关系数据库</strong>来完成。而且比起其他部分，该层需要有一个较为清晰和严格的逻辑边界。</p>
<h2> 什么是 MyBatis</h2>
<h3> 为什么不用 JDBC？</h3>
<p>针对数据库操作，Java 其实已经提供了相应的解决方案 -- JDBC。那既然已经有了现成的工具，那为什么还会有 MyBatis 的出现呢？</p>
<p>虽然 JDBC 提供了对数据库操作的解决方案，但是存在着如下问题：</p>
<ol>
<li>
<p>数据库连接的频繁创建和释放造成了一定程度上的资源浪费，从而影响到系统性能，但如果使用数据库连接池就能在一定程度上缓解该问题；</p>
</li>
<li>
<p>SQL 语句在代码中出现，会造成代码不易维护；</p>
</li>
<li>
<p>使用 <code>preparedStatement</code> 向占位符传递参数时存在硬编码，也会进一步加大系统维护的难度；</p>
</li>
<li>
<p>对结果集进行解析时存在硬编码，SQL 变化将导致解析代码改变，系统难以维护，但如果能将数据库记录进行封装成 POJO 对象，解析起来就会方便很多。</p>
</li>
</ol>
<h3> MyBatis 介绍</h3>
<p>MyBatis 是一个持久层框架，是一个半自动化的<strong>ORM 框架</strong>，不仅支持自定义 SQL、存储过程以及高级映射。还简化了 JDBC 代码以及设置参数和获取结果集的工作过程，使得我们只需要通过简单的 XML 或注解配置，就能将原始类型、接口和 Java POJO 映射为数据库中的记录。</p>
<p>通过对 JDBC 操作数据库的过程进行封装，我们只需要关注 SQL 而不用再去处理注册驱动、创建 <code>connection</code>、创建 <code>statement</code>、手动设置参数、结果集检索等复杂的过程代码。</p>
<p>不同于其他的对象关系映射框架，MyBatis 并未将 Java 对象和数据库表关联，而是将 Java 方法与 SQL 语句关联。</p>
<p>总的来讲，MyBatis 有如下优点：</p>
<ul>
<li>
<p><strong>简单易学</strong>：自身小且简单，无任何第三方依赖；</p>
</li>
<li>
<p><strong>灵活</strong>：MyBatis 不会对应用程序或数据库的现有设计强加任何影响，写在 XML 中，便于统一管理和优化；</p>
</li>
<li>
<p><strong>解除 SQL 与代码程序的耦合</strong>：通过提供 DAO 层，将业务逻辑与数据访问逻辑分离，使系统设计更加清晰、易维护、易于单元测试，提高了程序的可维护性；</p>
</li>
<li>
<p><strong>提供 XML 标签，支持编写动态 SQL</strong>；</p>
</li>
<li>
<p>…</p>
</li>
</ul>
<h3> 其他持久层技术</h3>
<p>除开 JDBC 之外，大家可能还了解到了 Hibernate 和 JPA 等持久层技术。相较于 JDBC 这种原始的方式，它们操作起来显得十分方便，开发效率也很高。但是对于程序中较长和较难的复杂 SQL 需求，就需要绕过框架。此外，由于其 SQL 是内部自动生成的，所以如果要对其做特殊优化则不太容易。Hibernate 和 JPA 都是基于全映射的全自动框架，如果 POJO 中存在大量字段，要进行部分映射时就显得比较困难。最后，由于框架内部反射操作过多，导致数据库性能下降，在当前大数据的背景下，显然不能满足我们的要求。</p>
<h2> MyBatis 安装</h2>
<ol>
<li>首先<a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener noreferrer">下载</a>最新版本 MyBatis；</li>
</ol>
<p></p>
<ol start="2">
<li>解压下载好的安装包，将 <code>mybatis-xxx.jar</code> 放到你项目的类路径下（classpath）；</li>
</ol>
<p></p>
<ol start="3">
<li>如果是 Maven 项目，在 <code>pom.xml</code> 中添加如下依赖即可；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>以上就是今天的所有内容了，主要讲了持久化相关的知识，然后对 Mybatis 做了简单的介绍以及我们为什么要用 Mybatis，最后则是如何安装 Mybatis。原创不易，如果你觉得我写的内容对你有所帮助，那就点赞关注吧。</p>
]]></content:encoded>
    </item>
    <item>
      <title>快速入门</title>
      <link>https://ez4jam1n.site/studio/md/java/mybatis/20220202-quick-start.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/mybatis/20220202-quick-start.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">快速入门</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 上一篇文章中我们讲了什么是持久化以及 Mybatis 的相关简介，今天就来看看如何创建一个 Mybatis 入门实例以及如何利用 Mybatis 进行 CRUD。 数据库准备 首先，我们来创建一个数据库，用于后序步骤的使用；</description>
      <category>MyBatis 教程</category>
      <pubDate>Wed, 02 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>上一篇文章中我们讲了什么是持久化以及 Mybatis 的相关简介，今天就来看看如何创建一个 Mybatis 入门实例以及如何利用 Mybatis 进行 CRUD。</p>
<h2> 数据库准备</h2>
<ol>
<li>首先，我们来创建一个数据库，用于后序步骤的使用；</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>接着创建一个表，用于存放数据；</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>向数据库中插入数据</li>
</ol>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 创建 Maven 工程</h2>
<ol>
<li>对于如何创建 Maven 工程，可以参照我之前写的一篇文章：<a href="/studio/md/java/maven/20220104-maven-project-with-idea.html" target="blank">利用 IDEA 搭建一个 Maven 项目 </a></li>
<li>接着在项目的 <code>pom.xml</code> 中添加 MyBatis、MySQL、Junit 以及 Lombok 的依赖，关于更多 Lombok 的使用，可以参考我的另一篇文章：<a href="/studio/md/java/se/20220719-lombok-install-and-usage.html" target="blank">Lombok 安装及使用指南</a></li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 准备工作</h2>
<ol>
<li>编写 MyBatis 核心配置文件，在 <code>main/resources</code> 文件下新建 <code>mybatis-config.xml</code> ，配置数据库。这里主要是配置连接的数据库，数据库连接用户名以及密码。</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>编写 MyBatis 工具类；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>接下来创建实体类，用于映射数据库中的 <code>user</code> 表。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 插入操作 <code>insert</code></h2>
<ol>
<li>首先在 <code>UserMapper</code> 接口中添加对应方法</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>在映射文件 <code>UserMapper.xml</code> 中添加 <code>Insert</code> 语句；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>测试方法中测试；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 查询操作 <code>select</code></h2>
<ol>
<li>在 <code>UserMapper</code> 中添加对应方法：</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>接着在 <code>UserMapper.xml</code> 中添加 <code>Select</code> 语句。其中各属性含义如下：</li>
</ol>
<ul>
<li><strong>id</strong>：对应接口中的 <strong>方法名</strong>；</li>
<li><strong>resultType</strong>：SQL 语句执行的返回值；</li>
</ul>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>在测试类中测试即可；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 修改操作 <code>update</code></h2>
<ol>
<li>在 <code>UserMapper</code> 添加对应接口；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>在 <code>UserMapper.xml</code> 中添加 <code>update</code> 语句；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>测试类中测试；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<h2> 删除操作 <code>delete</code></h2>
<ol>
<li>在 <code>UserMapper</code> 中添加接口；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>在 <code>UserMapper.xml</code> 中添加 <code>delete</code> 语句；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>在测试类中测试；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<h2> 最后</h2>
<p>以上就是我们今天的所有内容了，原创不易，如果你觉得我的文章对你有所帮助，那就帮忙点赞关注吧，我们就下篇文章再见吧 ~</p>
<p>而关于文章中的示例代码，我已经上传到了 Github，如果有需要的朋友，可以自取。</p>
<blockquote>
<p>传送门：<a href="https://github.com/ez4jam1n/java-learning-demos" target="_blank" rel="noopener noreferrer">https://github.com/ez4jam1n/java-learning-demos</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>MyBatis Generator 代码自动生成器</title>
      <link>https://ez4jam1n.site/studio/md/java/mybatis/20220203-mybatis-generator.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/mybatis/20220203-mybatis-generator.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">MyBatis Generator 代码自动生成器</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 在日常开发工作中，我们往往需要自己去构建各种数据表所对应的持久化对象（PO）、用于操作数据库的接口（DAO）以及跟 DAO 所绑定的对应 XML。这都是一些重复性的操作，不需要多大技术含量，这时候我们不禁会去想，有没有一种工具，能够帮助我们去自动生成这些文件呢？答案是：有的！</description>
      <category>MyBatis 教程</category>
      <pubDate>Thu, 03 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>在日常开发工作中，我们往往需要自己去构建各种数据表所对应的持久化对象（PO）、用于操作数据库的接口（DAO）以及跟 DAO 所绑定的对应 XML。这都是一些重复性的操作，不需要多大技术含量，这时候我们不禁会去想，有没有一种工具，能够帮助我们去自动生成这些文件呢？答案是：有的！</p>
<p>本文接下来的内容主要适用于使用 MyBatis 来做持久层框架开发的工作，如果不是使用 MyBatis，那么可能本文不太适合你的开发场景。</p>
<h2> MyBatis Generator 简介</h2>
<p>作为一个基于 MyBatis 的独立工具，MyBatis Generator 能够满足我们以上的要求，能够通过简单的配置去帮我们生成数据表所对应的 PO、DAO、XML 等文件，减去我们手动去生成这些文件的时间，有效提高开发效率。MyBatis Generator 运行方式多样，主要可以通过以下几种方式来运行：</p>
<ol>
<li>命令行</li>
<li>Ant</li>
<li>Maven</li>
<li>Java</li>
<li>Eclipse</li>
</ol>
<p>而我平时主要在 Maven 中配置并使用，所以本文主要基于 Maven 环境来进行讲解。</p>
<h2> 准备工作</h2>
<h3> 引入插件</h3>
<p>既然要使用 MyBatis Generator，那么肯定我们的项目中已经配置了数据库和 MyBatis 的相关依赖，如果还没有配置，那么可以在 <code>pom.xml</code> 文件中进行配置，这里主要以 MySQL 数据库为例。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们继续引入 MyBatis Generator 的相关配置。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 插件配置</h3>
<p>完成上述步骤后，我们只是完成了 MyBatis Generator 的引入工作，要想让它正常工作，我们还需要对它进行配置，而 MyBatis Generator 在 <code>pom.xml</code> 中的主要配置主要有以下几点。</p>
<ol>
<li><strong>代码生成器的配置文件所在路径</strong></li>
</ol>
<p>这里主要配置 MyBatis Generator 配置文件所在路径，一般我们将其放在 <code>resources</code> 路径中，而配置文件的名字则可以自定义，这里我以 <code>mybatis-generator-config.xml</code> 为例，此时需要将如下配置加入到 <code>pom.xml</code> 文件中。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="2">
<li><strong>是否每次新生成后覆盖已生成的文件</strong></li>
</ol>
<p>由于项目需求，假设我们的数据库表中有需要新增新的字段，而我们之前已经使用过 MyBatis Generator 生成过相关文件。此时，如果我们想要将新加的字段加入原来生成的文件中，第一种可以采取手动的方式，将旧文件删除，然后重新生成。第二种则是在 MyBatis Generator 中配置，让每次新生成的文件都直接覆盖掉旧文件。具体配置如下，<code>true</code> 则代表覆盖，<code>false</code> 则代表不覆盖。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过有一点需要注意，就算我们设置了覆盖旧文件，MyBatis Generator 也只会覆盖原来的 PO、DAO 文件，此时 Mapper 不会被覆盖，而是采取追加的方式，从而保证我们自己添加的 sql 语句不会被覆盖掉。</p>
<ol start="3">
<li><strong>数据库驱动依赖</strong></li>
</ol>
<p>虽然在项目的 <code>pom.xml</code> 文件中我们已经配置了数据库的相关依赖，但是在 MyBatis Generator 配置中仍然需要对其进行再次配置。此时，这里有两种方式供我们选择。</p>
<p>第一种是再次在引入数据库依赖，具体配置方式如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种则是利用 Maven 的 <code>includeCompileDependencies</code> 属性。一般来讲，我们的项目中肯定已经引入过数据库的相关依赖了，那我们此时配置 <code>includeCompileDependencies</code> 就好了，具体配置方式如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> MyBatis Generator 配置</h3>
<p>我们在上述步骤中已经引入了 MyBatis Generator，而且也在项目配置文件 <code>pom.xml</code> 中配置了 MyBatis Generator 配置文件所在的路径、是否进行文件覆盖以及数据库依赖配置，接下来就该具体来看看，如何对 MyBatis Generator 进行具体配置，配置我们生成代码中的各种细节。</p>
<ol>
<li><strong>外部配置文件</strong></li>
</ol>
<p>一般我们需要引入外部文件，主要用于配置项目数据库，方便我们后续的设置，而引入外部配置文件的方式也很简单，具体配置如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>context 配置</strong></li>
</ol>
<p>除开外部配置外，<code>context</code> 无疑是 MyBatis Generator 中最重要的配置了。一个 <code>context</code> 配置的具体示例如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中的各个属性含义如下：</p>
<ul>
<li><strong>id</strong>：唯一标识，不可重复，可以根据我们自己的喜好进行自定义。</li>
<li><strong>defaultModelType</strong>：非必填项，有两个值可选，一个是 <code>conditional</code>，也是默认值，另一个值是 <code>flat</code>，也就是我们常用的一个配置，表示数据库中的一张表对应生成一个 PO。</li>
<li><strong>targetRuntime</strong>：非必填项，这里同样有两个值可选，一个是 <code>MyBatis3</code>，一个是 <code>MyBatis3Simple</code>，两者的最主要区别在于不同配置下所生成的 DAO 和 Mapper 会有所不同，后者生成的 DAO 和 Mapper 会少很多，只含有日常最常用的。</li>
</ul>
<p><code>context</code> 除了上面配置的之外，还有许多子元素需要配置，而且这些子元素的配置的个数以及顺序都是规定好的，如果不按照给定的规则进行配置，则会导致错误，常见子元素及个数配置如下（按照规定的顺序进行从上到下排序）：</p>
<table>
<thead>
<tr>
<th>子元素</th>
<th>最少个数</th>
<th>最多个数</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>property</code></td>
<td>0</td>
<td>N</td>
</tr>
<tr>
<td><code>plugin</code></td>
<td>0</td>
<td>N</td>
</tr>
<tr>
<td><code>commentGenerator</code></td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td><code>jdbcConnection</code></td>
<td></td>
<td></td>
</tr>
<tr>
<td><code>javaTypeResolver</code></td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td><code>javaModelGenerator</code></td>
<td>1</td>
<td>N</td>
</tr>
<tr>
<td><code>sqlMapGenerator</code></td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td><code>javaClientGenerator</code></td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td><code>table</code></td>
<td>1</td>
<td>N</td>
</tr>
</tbody>
</table>
<p>接下来依次对各个子元素进行简单的配置讲解。</p>
<h3> context 子元素配置</h3>
<ol>
<li><strong>property</strong></li>
</ol>
<p>如果我们要给我们的所生成文件的编码类型进行设置，则可以在此处进行配置，具体配置如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li><strong>plugin</strong></li>
</ol>
<p>默认生成的 PO 中，只包含了各个各个属性声明以及各个属性所对应的 <code>setter/getter</code>，如果我们想要生成对应 PO 的 <code>equals</code> 和 <code>hashCode</code> 方法，则可以通过配置如下插件来实现。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要生成 <code>toString</code> 方法，则可以使用如下插件：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为模型生成序列化方法，则使用如下插件：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li><strong>commentGenerator</strong></li>
</ol>
<p>该配置主要用于配置生成的注释，默认情况下是会生成注释的，而且会带上时间戳，如果我们不需要这些配置，则可以通过如下配置来清除：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li><strong>jdbcConnection</strong></li>
</ol>
<p>既然要自动生成对应文件，那肯定得链接数据库，所以我们需要对数据库进行配置，上面我们讲过导入外部配置文件，我们可以通过这种方式将数据库的配置定义在外部文件中，然后通过导入该文件进行配置即可，具体可以通过如下具体步骤进行：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li><strong>javaTypeResolver</strong></li>
</ol>
<p>主要用于配置 JDBC 和 Java 中的类型转换规则，如果我们不配置，会采用默认的一套转换规则，而如果我们需要自定义，也只能配置 <code>bigDecimal</code>、<code>NUMERIC</code> 和时间类型，不能去配置其他类型，否则会导致出错，具体配置规则如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>forceBigDecimals</li>
</ul>
<p>该属性默认为 <code>false</code>，此时它会将 JDBC <code>DECIMAL</code> 和 <code>NUMERIC</code> 类型解析为 <code>Integer</code>，若该属性为 <code>true</code>，此时将会把 JDBC <code>DECIMAL</code> 和 <code>NUMERIC</code> 类型解析为 <code>java.math.BigDecimal</code>。</p>
<ul>
<li>useJSR310Types</li>
</ul>
<p>该属性默认为 <code>false</code>，它会将 JDBC 所有的时间类型都解析为 <code>java.util.Date</code>，若该属性为 <code>true</code>，则会按照如下规则进行解析：</p>
<table>
<thead>
<tr>
<th>转换前</th>
<th>转换后</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>DATE</code></td>
<td><code>java.time.LocalDate</code></td>
</tr>
<tr>
<td><code>TIME</code></td>
<td><code>java.time.LocalTime</code></td>
</tr>
<tr>
<td><code>TIMESTAMP</code></td>
<td><code>java.time.LocalDateTime</code></td>
</tr>
<tr>
<td><code>TIME_WITH_TIMEZONE</code></td>
<td><code>java.time.OffsetTime</code></td>
</tr>
<tr>
<td><code>TIMESTAMP_WITH_TIMEZONE</code></td>
<td><code>java.time.OffsetDateTime</code></td>
</tr>
</tbody>
</table>
<ol start="6">
<li><strong>javaModelGenerator</strong></li>
</ol>
<p>这里主要用于配置自动生成的 PO 所在的包路径和项目路径，这里需要根据自己的需求进行配置，这里以我自己的配置为例，比如我的 PO 所在包为 <code>com.ez4jam1n.mybatisgeneratordemo.entity</code>，项目路径为 <code>src/main/java</code>。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7">
<li><strong>sqlMapGenerator</strong></li>
</ol>
<p>配置生成的 <code>Mapper.xml</code> 所存放的路径，比如我们要放在 <code>src/main/resources/mapper</code> 路径下，则配置如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8">
<li><strong>javaClientGenerator</strong></li>
</ol>
<p>配置 <code>Mapper</code> 接口所存放的路径，一般我们都是存放在项目的 <code>mapper</code> 包下，如我的配置为：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="9">
<li><strong>table</strong></li>
</ol>
<p>配置所要自动生成代码的数据库表，这里一张表对应一个 <code>table</code>，如果要生成多张表，则需要配置多个 <code>table</code>，以下为一个具体实例：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>schema</code> 是数据库名，有的数据库需要配置，有的数据库不需要配置，这里需要具体根据你自己所用的数据库来填写，不过建议都填上，方便不同数据库也可以适用。<code>tableName</code> 则对应数据库表名；<code>domainObjectName</code> 对应生成的实体类名，默认可以不用配置，不配置时它将按照帕斯卡命名法将表明转换为类名；而 <code>enableXXXByExample</code> 默认为 <code>true</code>，默认会生成一个 <code>Example</code> 帮助类，不过该配置只有在 <code>targetRuntime="MyBatis3"</code> 时才能生效，当 <code>targetRuntime="MyBatis3Simple"</code> 时，<code>enableXXXByExample</code> 无论如何配置都不起作用。</p>
<h2> 执行生成</h2>
<p>经过上边的配置之后，我们就得到了整体的 MyBatis Generator 配置，完整的配置如下，可以根据自己的需求对其中的配置进行修改后即可使用。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，关于外部文件 <code>generator.properties</code> 的配置具体如下，主要对数据库的相关属性进行配置。</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，当完成所有配置后，就可以利用 Maven 工具来进行代码生成了。具体操作方法如下，点击项目 Maven 配置中的 MyBatis Generator 生成即可。</p>
<p></p>
<h2> 总结</h2>
<p>以上就是利用 Maven 搭配 MyBatis Generator 来配置生成项目 PO、Mapper、XXXMapper.xml 的具体搭建过程了。如果你也刚好有这个需求，那赶紧去试试吧。搭建过程中如果遇到什么问题，欢迎评论区留言交流，我会在看到的第一时间回复。</p>
<p>最后，关于本示例的相关代码，我已经传到了 Github，如果有需要的兄弟，可以自取。</p>
<blockquote>
<p>🎉🎉🎉 传送门 -&gt; <a href="https://github.com/ez4jam1n/java-learning-demos/tree/main/mybatis-generator-demo" target="_blank" rel="noopener noreferrer">mybatis-generator-demo</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>简介及入门实例</title>
      <link>https://ez4jam1n.site/studio/md/java/mybatisplus/20220201-intro-and-quick-start.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/mybatisplus/20220201-intro-and-quick-start.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">简介及入门实例</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 最开始，要在 Java 中使用数据库时，需要使用 JDBC，创建 Connection、ResultSet 等，然后我们又对 JDBC 的操作进行了封装，创建了许多类似于 DBUtil 等工具类。再慢慢的，出现了一系列持久层的框架：Hibernate、JPA，Mybatis 等。各个框架的特点如下：</description>
      <category>MyBatis Plus 教程</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>最开始，要在 Java 中使用数据库时，需要使用 JDBC，创建 <code>Connection</code>、<code>ResultSet</code> 等，然后我们又对 JDBC 的操作进行了封装，创建了许多类似于 <code>DBUtil</code> 等工具类。再慢慢的，出现了一系列持久层的框架：Hibernate、JPA，Mybatis 等。各个框架的特点如下：</p>
<ul>
<li>
<p><strong>Hibernate</strong>：一个全自动的 ORM 框架，实现了数据库中表和 Java 对象的映射，通过调用 Java 对象的方法，我们就可以实现数据库表中数据的操作。而且通过该框架，我们能够不用修改代码就访问到不同的数据库。</p>
</li>
<li>
<p><strong>JPA</strong>：这是一种规范，定义了访问数据库的各种操作，定义了一致的方法来操作数据库。</p>
</li>
<li>
<p><strong>Mybatis</strong>：需要编写 XML 配置文件，我们需要在 XML 编写 SQL 语句来访问数据库，而且一切操作都需要通过 XML 来完成。而针对单表的 CRUD，也需要使用 XML 文件才能够完成。这样一来对我们开发人员的要求就提高了，我们需要特别熟悉 SQL 语言才能够完成。</p>
</li>
</ul>
<p>其实利用 Mybatis 来进行持久层的开发已经大大减少了工作人员的工作量了，但它的使用还是需要一定的门槛的。Mybatis-Plus 的出现，进一步降低了这道槛。那我们今天就来看看，Mybatis-Plus 到底是如何进一步实现 Mybatis 的增强的。</p>
<h2> Mybatis-Plus 简介</h2>
<h3> 什么是 MyBatis-Plus</h3>
<p>Mybatis-Plus：为简化开发而生</p>
<p>MyBatis-Plus（简称 MP）是一个基于 MyBatis 的增强工具，它对 Mybatis 的基础功能进行了增强，但未做任何改变。使得我们可以可以在 Mybatis 开发的项目上直接进行升级为 Mybatis-plus，正如它对自己的定位，它能够帮助我们进一步简化开发过程，提高开发效率。</p>
<p>Mybatis-Plus 其实可以看作是对 Mybatis 的再一次封装，升级之后，对于单表的 CRUD 操作，调用 Mybatis-Plus 所提供的 API 就能够轻松实现，此外还提供了各种查询方式、分页等行为。最最重要的，开发人员还不用去编写 XML，这就大大降低了开发难度</p>
<p>其官方主页为：<a href="https://mp.baomidou.com" target="_blank" rel="noopener noreferrer">https://mp.baomidou.com</a>。</p>
<h3> Mybatis-Plus 的特点</h3>
<ol>
<li>
<p><strong>无侵入，损耗小</strong></p>
</li>
<li>
<p><strong>强大的 CURD 操作</strong></p>
</li>
<li>
<p><strong>支持 Lambda 形式调用</strong></p>
</li>
<li>
<p><strong>支持主键自动生成</strong></p>
</li>
<li>
<p><strong>支持自定义全局通用模式</strong></p>
</li>
<li>
<p><strong>支持 ActiveRecord 模式</strong></p>
</li>
<li>
<p><strong>内置代码生成器、分页插件、性能分析器和全局拦截插件</strong></p>
</li>
<li>
<p>……</p>
</li>
</ol>
<h3> Mybatis-Plus 结构</h3>
<p></p>
<h2> 快速入门示例</h2>
<h3> 数据库准备</h3>
<p>我们依旧沿用官方文档中提供的实例来进行，那么我们首先来创建一个数据库并进入：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后创建一个员工表，主要有 <code>id</code>、<code>name</code>、<code>sex</code>、<code>email</code> 四大属性。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后插入部分数据：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> SpringBoot 项目</h3>
<p>这里我利用的是 IDEA 创建的一个 SpringBoot 项目，创建后，主要需要注意的有以下几点。</p>
<ol>
<li><strong>添加依赖</strong></li>
</ol>
<p>除开创建 SpringBoot 项目所需的必要依赖之外，我们还需要引入 MP 和 MySQL 的依赖。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li><strong>数据库配置</strong></li>
</ol>
<p>依赖添加完成之后，到配置文件 <code>application.yml</code> 中去添加数据库的相关配置（<strong>注意</strong>：官方创建的配置文件是 <code>application.properties</code>，我们需要手动把它的后缀名改成 <code>.yml</code>）。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li><strong>项目整体结构</strong></li>
</ol>
<p>项目创建完成后，我们最终的项目目录结构如下图所示：</p>
<p></p>
<h3> 编码</h3>
<p>完成数据库准备工作和建立 SpringBoot 项目之后，接下来的工作就是编码了。</p>
<ol>
<li><strong>实体类编写</strong></li>
</ol>
<p>实体类也就对应我们刚才所建立的数据表 <code>employee</code>。因为这里使用了 Lombok 插件，所以可以看到在类上多了一个 <code>@Data</code> 的注解，但是少了 <code>getter、setter</code> 方法，实现了代码的简洁化，大家如果还不知道这个插件，可以去了解下，后续我可能也会写一篇关于这个插件的文章，可以关注一下。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li><strong>Mapper 接口编写</strong></li>
</ol>
<p>这里 <code>EmployeeMapper</code> 继承自 MP 中 <code>BaseMapper</code>，它里边已经提供了许多方法，可以供我们使用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以下是 <code>BaseMapper</code> 中所提供的一些方法，通过继承该接口，我们就可以不用编写 <code>mapper.xml</code> 也可以获得 CRUD 功能了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li><strong>添加包扫描</strong></li>
</ol>
<p>Mapper 建立完成之后，我们需要去启动类种添加包扫描的注解 <code>@MapperScan()</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li><strong>测试</strong></li>
</ol>
<p>好了，完成上面的步骤之后，我们就可以去测试接口了。去测试的主程序 <code>EmployeeApplicationTests</code> 中，添加如下代码进行接口测试。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>可以看到执行我们测试代码后测试成功了，说明接口是没问题的。</p>
<p>这里需要注意的是 <code>Assert.assertEquals(3, employees.size());</code> 这句代码，这里我们引入了 <code>Junit</code> 测试模块，所以需要记得在 <code>pom.xml</code> 中添加相关依赖，更多关于 <code>Junit</code> 测试相关的信息，可以参考我之前写的一篇文章：<a href="https://benjam1n.eu.org/md/java/se/20220718-test-with-junit" target="_blank" rel="noopener noreferrer">抛弃传统注释测试，拥抱 Junit 单元测试</a>。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>今天的文章到此就结束了，主要介绍了 Mybatis-Plus 的一些相关简介，然后就是利用 Mybatis-Plus 来进行我们的一个实例操作了。</p>
<p>最后，创作不易，如果本文对你有所帮助，还请各位小伙伴可以 <strong>一键三连</strong>。感谢大家的支持，我们下期文章再见！</p>
]]></content:encoded>
    </item>
    <item>
      <title>日志配置及常用 CRUD</title>
      <link>https://ez4jam1n.site/studio/md/java/mybatisplus/20220202-log-and-common-crud.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/mybatisplus/20220202-log-and-common-crud.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">日志配置及常用 CRUD</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 上一篇文章中我们讲了 Mybatis-Plus 的定义以及相关特点，并从零开始编写了一个 SpringBoot + Mybatis-Plus 的实例。今天我们就来看看，如何利用 MP 来实现对数据库的增删改查。 日志配置</description>
      <category>MyBatis Plus 教程</category>
      <pubDate>Wed, 02 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>上一篇文章中我们讲了 Mybatis-Plus 的定义以及相关特点，并从零开始编写了一个 SpringBoot + Mybatis-Plus 的实例。今天我们就来看看，如何利用 MP 来实现对数据库的增删改查。</p>
<h2> 日志配置</h2>
<p>使用 MP 时，默认是不打印任何 SQL 语句的。而为了方便日常开发工作的调试，我们需要联合控制台和各种数据可视化工具进行语句的拼接检查，因此我们利用 MP 自带的日志功能，在控制台输出我们的 SQL 语句，从而方便我们调试。</p>
<p>在配置文件 <code>application.yml</code> （IDEA 默认生成的配置文件为 <code>application.properties</code>）中，加入一下配置，这样 MP 就会在控制台中打印完整带参数的 SQL 语句，方便我们查看。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> Mapper CRUD 使用方法</h2>
<p>首先我们来看 <code>Mapper</code> 层 CRUD 涉及的一些方法，<code>Mapper</code> 层主要继承自 <code>BaseMapper</code> 接口，里边实现了各种用于操作数据库的增删改查的方法，以下我们就来看看日常我们常用的一些方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> insert 操作</h3>
<p>首先是插入数据，<code>insert</code> 方法中，传入我们所要插入数据库的实体对象作为参数即可。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>插入实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>数据插入后的数据库</strong></li>
</ul>
<p></p>
<h3> select 操作</h3>
<p>相比于插入数据操作，查询数据的方法就要更多，而且还能实现批量查询和条件查询。</p>
<ol>
<li><strong>根据主键查询</strong></li>
</ol>
<p>将所要查询数据的主键作为参数传入我们的 <code>selectById</code> 方法中，即可实现。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ol start="2">
<li><strong>根据主键批量查询</strong></li>
</ol>
<p>上一个方法每次只能查询一条记录，如果我们想要查询多条数据记录，那么就可以将要查询数据的主键列表传入 <code>selectBatchIds</code> 方法即可。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>批量查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ol start="3">
<li><strong>根据多条件查询</strong></li>
</ol>
<p>除开支持主键查询外，MP 还支持条件查询，只要将我们的条件传入 <code>Map</code> 列表中，然后将其作为 <code>selectByMap</code> 方法的参数即可，其中传入 <code>Map</code> 的 <code>key</code> 对应我们数据库中的字段，而 <code>value</code> 则对应字段的值。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>条件查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<h3> update 操作</h3>
<p>更新操作，主要是根据我们数据库的主键进行查询，将对应主键的实体对象传入 <code>updateById</code> 方法即可。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>更新实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>数据更新后的数据库</strong></li>
</ul>
<p></p>
<h3> delete 操作</h3>
<p>删除操作，既可以根据主键删除一条记录，也能根据主键列表实现批量删除，还能根据条件来进行删除。</p>
<ol>
<li><strong>根据主键删除一条数据</strong></li>
</ol>
<p>将所要删除记录的主键作为参数传入 <code>deleteById</code> 方法即可。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>删除实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>删除数据后的数据库</strong></li>
</ul>
<p></p>
<ol start="2">
<li><strong>根据条件删除</strong></li>
</ol>
<p>根据条件删除同样是讲条件传入 <code>Map</code> 中，然后将 <code>Map</code> 作为参数传入 <code>deleteByMap</code> 方法，其中 <code>key</code> 对应数据库中的字段，<code>value</code> 对应字段的值。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>删除实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>删除数据后的数据库</strong></li>
</ul>
<p></p>
<ol start="3">
<li><strong>根据主键批量删除</strong></li>
</ol>
<p>将要删除记录的主键传入集合中，然后将集合作为 <code>deleteBatchIds</code> 方法的参数即可。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>批量删除实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>删除数据后的数据库</strong></li>
</ul>
<p></p>
<h2> Service CRUD 接口</h2>
<p><code>Service</code> 层继承自 <code>IService</code> 接口，其中的方法和 <code>Mapper</code> 层中所提供的方法功能是一致的，除了方法名有所不同外，其他基本类似，但 <code>Service</code> 层中提供了更为丰富的方法，两者的继承结构如下图所示。</p>
<p></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Save</h3>
<ol>
<li><strong>插入一条记录</strong></li>
</ol>
<p>功能同 <code>Mapper</code> 层中的 <code>insert</code> 方法，只不过方法名不同。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>插入实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>插入数据后的数据库</strong></li>
</ul>
<p></p>
<ol start="2">
<li><strong>批量插入</strong></li>
</ol>
<p>这里就和 <code>Mapper</code> 层中所有区别，<code>Mapper</code> 层中只支持单次插入，而 <code>Service</code> 层中支持批量插入，而传入的参数就是我们所要传入实体的集合，而且还可以分批次插入和统一插入。</p>
<p>2.1 <strong>统一插入</strong></p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>插入实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>统一插入后的数据库</strong></li>
</ul>
<p></p>
<p>2.2 <strong>分批次插入</strong></p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>分批次插入实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>分批次插入后的数据库</strong></li>
</ul>
<p></p>
<h3> SaveOrUpdate</h3>
<ol>
<li><strong>单条修改插入</strong></li>
</ol>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>单条修改插入实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>修改插入后的数据库</strong></li>
</ul>
<p></p>
<ol start="2">
<li><strong>批量修改插入</strong></li>
</ol>
<p>2.1 <strong>统一插入</strong></p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>统一插入实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>统一插入数据后的数据库</strong></li>
</ul>
<p></p>
<p>2.2 <strong>分批次插入</strong></p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>方法实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>分批次插入数据后的数据库</strong></li>
</ul>
<p></p>
<h3> Remove</h3>
<ol>
<li><strong>根据 ID 删除</strong></li>
</ol>
<ul>
<li><strong>方法实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>删除实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<p></p>
<ol start="2">
<li><strong>根据条件删除</strong></li>
</ol>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>按条件删除实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>按条件删除后的数据库</strong></li>
</ul>
<p></p>
<ol start="3">
<li><strong>根据 ID 批量删除</strong></li>
</ol>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>批量删除实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>批量删除后的数据库</strong></li>
</ul>
<p></p>
<h3> Update</h3>
<ol>
<li><strong>根据 ID 选择修改</strong></li>
</ol>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>根据 ID 修改实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>更新后的数据库</strong></li>
</ul>
<p></p>
<ol start="2">
<li><strong>根据 ID 批量更新</strong></li>
</ol>
<p>2.1 <strong>统一更新</strong></p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>批量更新实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>批量更新后的数据库</strong></li>
</ul>
<p></p>
<p>2.2 <strong>分批次更新</strong></p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>分批次更新实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ul>
<li><strong>分批次更新后的数据库</strong></li>
</ul>
<p></p>
<h3> Get</h3>
<ol>
<li><strong>根据 ID 查询</strong></li>
</ol>
<p>将所要查询记录的 <code>id</code> 作为参数，然后将查询到的实体返回。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<h3> List</h3>
<ol>
<li><strong>查询所有</strong></li>
</ol>
<p>查询所有记录，然后返回到一个集合中。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ol start="2">
<li><strong>根据 ID 批量查询</strong></li>
</ol>
<p>讲所要查询的记录 <code>id</code> 传入集合，然后座位方法参数，最后返回查询到的结果到一个集合中。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>批量查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ol start="3">
<li><strong>根据条件查询</strong></li>
</ol>
<p>条件传入 <code>Map</code> 集合，<code>key</code> 对应字段，<code>value</code> 对应值，然后返回集合。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>根据条件查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ol start="4">
<li><strong>查询所有列表</strong></li>
</ol>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<ol start="5">
<li><strong>查询所有记录</strong></li>
</ol>
<p>用于查询所有数据记录，并将其返回到一个集合中。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>查询实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<h3> Count</h3>
<ol>
<li><strong>查询记录总数</strong></li>
</ol>
<p>用于统计数据控中的记录总条数，方法返回记录条数。</p>
<ul>
<li><strong>方法声明</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>查询记录总数实例</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>测试结果</strong></li>
</ul>
<p></p>
<h2> 总结</h2>
<p>好了，以上就是关于 Mybatis-Plus 的日志配置以及如何进行 CRUD 的相关内容了，这里 CRUD 主要又分为 Mapper 层和 Service 层，我们可以根据自己的需要进行选择。当然，在我们日常使用中，常常都是两个接口一起使用，关于更多 MP 的使用技巧，我们下期文章再见！</p>
]]></content:encoded>
    </item>
    <item>
      <title>目录结构与运行原理</title>
      <link>https://ez4jam1n.site/studio/md/java/nginx/20220827-structure.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/nginx/20220827-structure.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">目录结构与运行原理</source>
      <description>目录</description>
      <category>Nginx 教程</category>
      <pubDate>Sat, 27 Aug 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 目录</h2>
]]></content:encoded>
    </item>
    <item>
      <title>Nginx 简介与安装</title>
      <link>https://ez4jam1n.site/studio/md/java/nginx/20220901-intro-install.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/nginx/20220901-intro-install.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">Nginx 简介与安装</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 简介 什么是 Nginx Nginx 是一个跨平台、轻量级、高性能的 HTTP 和反向代理 web 服务器，而且同时也提供了 IMAP/POP3/SMTP 服务。Nginx 最高能够支持高到 50000 个并发连接数的相应，在最高并发连接的情况下，可以作为 Apache 服务的一个替代品。</description>
      <category>Nginx 教程</category>
      <pubDate>Thu, 01 Sep 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 简介</h2>
<h3> 什么是 Nginx</h3>
<p><code>Nginx</code> 是一个跨平台、轻量级、高性能的 <code>HTTP</code> 和反向代理 <code>web</code> 服务器，而且同时也提供了 <code>IMAP/POP3/SMTP</code> 服务。<code>Nginx</code> 最高能够支持高到 50000 个并发连接数的相应，在最高并发连接的情况下，可以作为 <code>Apache</code> 服务的一个替代品。</p>
<p><code>Nginx</code> 作为负载均衡服务，既可以在内部直接支持 <code>Redis</code> 和 <code>PHP</code> 程序对外进行服务，也可以作为支持 <code>HTTP</code> 代理服务对外进行支持。<code>Nginx</code> 是基于 C 语言来进行开发的，所以无论是系统资源开销还是 CPU 使用率都较低，也因此 <code>Nginx</code> 性能较强。</p>
<h3> Nginx 的版本</h3>
<p>常用版本主要分为四大阵营：</p>
<ol>
<li><code>Nginx</code> 开源版</li>
<li><code>Nginx plus</code> 商业版</li>
<li><code>Openresty</code></li>
<li><code>Tengine</code></li>
</ol>
<h2> 下载</h2>
<p>上一节中我们讲了 <code>Nginx</code> 的一些简单知识，接下来就来看看，如何在我们的服务器中安装 <code>Nginx</code>。下文中，我们均以 <code>Nginx</code> 开源版做示范。</p>
<p>前往 <code>Nginx</code> 官方地址下载对应的版本，因为这里主要是在服务器中安装，所以是以 <code>Linux（Centos）</code> 版本来演示。</p>
<blockquote>
<p><a href="http://nginx.org/en/download.html" target="_blank" rel="noopener noreferrer">http://nginx.org/en/download.html</a></p>
</blockquote>
<p></p>
<h2> 编译安装与依赖检查</h2>
<p>将下载后的 <code>Nginx</code> 压缩包进行解压，解压命令如下。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>
进入解压缩后的 <code>Nginx</code> 所在文件夹，然后执行 <code>configure</code> 脚本，这时候就会检查安装 <code>Nginx</code> 所需的依赖，这里可能会因为你的服务器中没有事先安装所需依赖而导致报错。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>这里例举几个安装时可能会遇到的错误：</p>
<ol>
<li><strong>C 编译器缺失</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要解决这个错误，只需要安装 <code>gcc</code> 编译器即可。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li><strong>PCRE Library 缺失</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同样，为了解决这个这个问题，需要安装 <code>pcre-devel</code>。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li><strong>zlib Library 缺失</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解决方法，安装 <code>zlib</code> 库。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<p>如果出现以上的提示信息，则说明可以进行下一步，此时直接执行编译安装命令。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<h2> Nginx 启停</h2>
<p>如果顺利执行完 <code>configure</code> 脚本，则会在服务器终端打印出以上 <code>Nginx</code> 相关的配置。</p>
<p>进入 <code>Nginx</code> 安装后的目录 <code>/usr/local/nginx/sbin</code>，然后利用以下命令来进行 <code>Nginx</code> 的启动。</p>
<ol>
<li><strong>启动</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<p>然后在浏览器中访问服务器的 <code>IP</code> 地址，如果出现以下界面，则说明我们的 <code>Nginx</code> 安装并启动成功了！</p>
<p></p>
<ol start="2">
<li><strong>快速停止</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>停止后，再到浏览器中去访问服务器地址，就会出现以下情况。</p>
<p></p>
<ol start="3">
<li><strong>关闭前完成已接受的连接请求</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4">
<li><strong>重新加载配置</strong></li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过这种方式，可以实现 <code>Nginx</code> 的无感重启。也就是说，当我们需要修改 <code>Nginx</code> 的配置时，不希望通过停止 <code>Nginx</code> 然后再启动的方式，此时就可以通过这个命令来实现。</p>
<h2> 防火墙</h2>
<h3> 关闭防火墙</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 禁止防火墙开机启动</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 放行端口</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 重启防火墙</h3>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 安装为系统服务</h2>
<ol>
<li><strong>添加系统服务</strong></li>
</ol>
<p>在 <code>/usr/lib/systemd/system</code> 目录下新增一个文件，命名为 <code>nginx.service</code>，然后将以下内容添加到该文件中。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>重载系统服务</strong></li>
</ol>
<p>接着执行以下命令重新加载系统服务。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3">
<li><strong>启停 Nginx</strong></li>
</ol>
<p>接着就可以分别利用下面的命令来启动和关停 <code>Nginx</code> 服务了。</p>
<ul>
<li>启动</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>关停</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>查看当前状态</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>以上就是 <code>Nginx</code> 的简介和如何在 Linux 中安装 <code>Nginx</code> 的相关内容了，如果您觉得本文对您有所帮助，那就来个一键三连支持吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>Java 简介</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220701-intro-to-java.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220701-intro-to-java.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">Java 简介</source>
      <description>作者：benjamin 博客：studio 原文：https://mp.weixin.qq.com/s/aGz8CBOK5mW8xjAlstlMQw 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Fri, 01 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/aGz8CBOK5mW8xjAlstlMQw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/aGz8CBOK5mW8xjAlstlMQw</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 1. 前言</h2>
<p>既然要学习一门技术，那么就先来了解下它的历史，我们为什么要使用它，以及我们能用它来干啥。</p>
<h2> 2. 历史背景</h2>
<p>1990 年代初，<code>Sun</code> 公司的詹姆斯·高斯林等人为了实现电视机、电话、闹钟等家用电器的控制和通信，开发了一套用于设置在家用电器等小型系统中的编程语言。在当时，这门语言被命名为 <code>Oka</code>。但由于市场需求不高，所以该计划被逐渐放弃。</p>
<p>随着 1990 年代互联网的发展，<code>Sun</code> 公司发现 <code>Oka</code> 语言在互联网中的应用前景广泛。于是决定对 <code>Oka</code> 进行改造，并在 1995 年 5 月以 <code>Java</code> 的名义正式发布。</p>
<p>随着互联网的迅猛发展，Java 也得以逐渐成为重要的网络编程语言，詹姆斯·高斯林也被大家公认为 Java 之父。</p>
<p>到了 2009 年， <code>Sun</code> 公司被 <code>Oracle</code> 公司所收购，自此 <code>Java</code> 成为 <code>Oracle</code> 公司的一大产品直至今日。</p>
<p>以下是截止到本文写作时间（2022 年 7 月 23 日）<code>Java</code> 的历史年表，累计经过了 18 次主要版本更新，目前来到了 <code>Java SE</code> 18。而 <code>Java SE</code> 19 早期预览版也已经流出，根据官方给出的发布时间表，大概会在 9 月份发布 Java SE 19 的 <code>GA</code> 版本。不过虽然 <code>Java</code> 已经经历了这么多版本的更新，但国内目前用的最多的应该还是 Java 1.8 版本。而出于对稳定性的考虑，企业开发更喜欢 <code>LTS</code> 版本，这也是为什么至今 Java 1.8 还占有如此高的市场比例。</p>
<table>
<thead>
<tr>
<th style="text-align:center">版本</th>
<th style="text-align:center">发布日期</th>
<th style="text-align:center">主要事件</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">JDK Beta</td>
<td style="text-align:center">1995</td>
<td style="text-align:center">Java 语言发布，用 Java 实现的浏览器和 Java Applet 被大量应用</td>
</tr>
<tr>
<td style="text-align:center">JDK 1.0</td>
<td style="text-align:center">1996 年 1 月</td>
<td style="text-align:center">奠定了 JDK、JRE、JVM 的体系结构</td>
</tr>
<tr>
<td style="text-align:center">JDK 1.1</td>
<td style="text-align:center">1997 年 2 月</td>
<td style="text-align:center">加入 JIT，提升 JDK 效率</td>
</tr>
<tr>
<td style="text-align:center">J2SE 1.2</td>
<td style="text-align:center">1998 年 12 月</td>
<td style="text-align:center">确立 J2SE、J2EE、J2ME 产品结构</td>
</tr>
<tr>
<td style="text-align:center">J2SE 1.3</td>
<td style="text-align:center">2000 年 5 月</td>
<td style="text-align:center">内置 HotSpot JVM</td>
</tr>
<tr>
<td style="text-align:center">J2SE 1.4</td>
<td style="text-align:center">2002 年 2 月</td>
<td style="text-align:center">XML 处理、断言、支持正则表达式</td>
</tr>
<tr>
<td style="text-align:center">J2SE 5.0</td>
<td style="text-align:center">2004 年 9 月</td>
<td style="text-align:center">静态导入、泛型、for-each 循环、自动拆，装箱、枚举、可变参数</td>
</tr>
<tr>
<td style="text-align:center">Java SE 6</td>
<td style="text-align:center">2006 年 12 月</td>
<td style="text-align:center">提供动态语言支持、同步垃圾回收</td>
</tr>
<tr>
<td style="text-align:center">Java SE 7</td>
<td style="text-align:center">2011 年 7 月</td>
<td style="text-align:center">字符串的 switch 语句、多异常捕抓</td>
</tr>
<tr>
<td style="text-align:center">Java SE 8 (LTS)</td>
<td style="text-align:center">2014 年 3 月</td>
<td style="text-align:center">Lambda 表达式</td>
</tr>
<tr>
<td style="text-align:center">Java SE 9</td>
<td style="text-align:center">2017 年 9 月</td>
<td style="text-align:center">轻量级 json API、垃圾收集机制更新</td>
</tr>
<tr>
<td style="text-align:center">Java SE 10</td>
<td style="text-align:center">2018 年 3 月</td>
<td style="text-align:center">局部变量类型推断，Java 后续版本快速迭代更新</td>
</tr>
<tr>
<td style="text-align:center">Java SE 11 (LTS)</td>
<td style="text-align:center">2018 年 9 月</td>
<td style="text-align:center">常用类增强，Java 11 是继 Java 8 之后的首个长期支持本版</td>
</tr>
<tr>
<td style="text-align:center">Java SE 12</td>
<td style="text-align:center">2019 年 3 月</td>
<td style="text-align:center">switch 表达式增强</td>
</tr>
<tr>
<td style="text-align:center">Java SE 13</td>
<td style="text-align:center">2019 年 9 月</td>
<td style="text-align:center">文本块支持</td>
</tr>
<tr>
<td style="text-align:center">Java SE 14</td>
<td style="text-align:center">2020 年 3 月</td>
<td style="text-align:center"><code>instanceof</code> 支持模式匹配</td>
</tr>
<tr>
<td style="text-align:center">Java SE 15</td>
<td style="text-align:center">2020 年 9 月</td>
<td style="text-align:center"><code>EdDSA</code> 数字签名算法、 密封类、隐藏类</td>
</tr>
<tr>
<td style="text-align:center">Java SE 16</td>
<td style="text-align:center">2021 年 3 月</td>
<td style="text-align:center">启用 C++ 14 语言特性、Vector API</td>
</tr>
<tr>
<td style="text-align:center"><strong>Java SE 17 (LTS)</strong></td>
<td style="text-align:center">2021 年 9 月</td>
<td style="text-align:center">恢复总是严格的浮点语义、增强型伪随机数生成器</td>
</tr>
<tr>
<td style="text-align:center">Java SE 18</td>
<td style="text-align:center">2022 年 3 月</td>
<td style="text-align:center">默认 UTF-8 编码、代码片段、简单的网络服务器</td>
</tr>
</tbody>
</table>
<h2> 3. 为什么使用 Java</h2>
<p>既然编程语言有那么多，那我们为什么要使用 Java 语言呢？以下就来看看 Java 被广泛使用的几个原因。</p>
<ol>
<li><strong>世界范围内流行，国内使用最为广泛的编程语言之一。</strong></li>
</ol>
<p>以下是截止 2022 年 7 月 TIOBE 统计的编程语言排行榜，可以看到 Java 处于前三的位置。而从历年编程语言所占市场份额趋势图也可以看出，Java 虽然没有一直独占鳌头，但绝大数时间都是占据领先地位。</p>
<p>
</p>
<ol start="2">
<li><strong>移植性高</strong></li>
</ol>
<p>由于 Java 中 JVM 的特性，所以能够做到一次编译，随处运行，其移植性也就更高。</p>
<ol start="3">
<li><strong>开发社区完善</strong></li>
</ol>
<p>社区完善也是 Java 为什么使用多的原因，各种封装 API，比起 C、C++ 语言使用起来更加方便。虽然 <code>Python</code> 的封装程度更高，但是其效率比起 <code>Java</code> 却打了折扣。毕竟封装程度和效率是成反比的，<code>Java</code> 兼具了效率高和使用方便的特点，所以更受人们青睐。</p>
<h2> 4. Java 能做什么</h2>
<p>Java 应用广泛，在我们日常中就能经常见到由 Java 所开发的程序。常见的的应用应用领域如下：</p>
<ol>
<li><strong>桌面 GUI 应用开发</strong></li>
<li><strong>服务器系统</strong></li>
<li><strong>企业级应用开发</strong></li>
<li><strong>大数据开发</strong></li>
<li><strong>移动应用开发</strong></li>
<li><strong>游戏开发</strong></li>
<li>……</li>
</ol>
<h2> 5. Java 技术体系</h2>
<p>根据传统意义上 Sun 官方定义， Java 技术体系的组成主要就是我们常说的 JDK，即以下三部分：</p>
<ol>
<li><strong>Java 程序设计语言</strong></li>
<li><strong>Java 虚拟机</strong></li>
<li><strong>Java API 类库</strong></li>
</ol>
<p></p>
<p>同时，Java 技术体系又可以主要分为以下 3 个平台。</p>
<ol>
<li><strong>Java SE</strong></li>
</ol>
<p>Java Standard Edition，即 Java 标准版。主要是 Java 技术的核心和基础，要想学好 Java，那么首先你得掌握好这部分。主要运行在桌面级应用，如 Windows 应用程序。</p>
<ol start="2">
<li><strong>Java EE</strong></li>
</ol>
<p>Java Enterprise Editon，即 Java 企业版。从它的名字就不难看出，这是 Java 针对企业级应用开发所提供的一套解决方案，主要用于架设高性能企业网站。</p>
<ol start="3">
<li><strong>Java ME</strong></li>
</ol>
<p>Java Micro Edition，即 Java 小型版。主要是 Java 针对移动设备应用所提供的一套解决方案，主要运行在手机、pad 等移动端。</p>
<p></p>
<h2> 6. 总结</h2>
<p>本文主要从 Java 历史背景、选择 Java 的理由、Java 能做什么、Java 技术体系等 4 方面对 Java 语言做了一个简单介绍。接下来的文章我们就来看看，如何搭建 Java 的开发环境以及实现一个简单的入门程序。</p>
]]></content:encoded>
    </item>
    <item>
      <title>开发环境搭建及入门程序</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220702-jdk-install-and-hello-world.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220702-jdk-install-and-hello-world.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">开发环境搭建及入门程序</source>
      <description>作者：benjamin 博客：studio 原文：https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Sat, 02 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>作为一个入门的学习者，要进行 Java 开发，那怎么能少得了 JDK 呢，本文就先来看看如何安装并配置 JDK，为后续的学习做好铺垫。</p>
<h2> 下载并安装 JDK</h2>
<p>什么是 JDK 呢？JDK（Java Development Kit）即 Java 开发者工具包，使我们学习 Java 语言必须安装的一个工具。</p>
<p>这里主要以 Windows 和 macOS 系统中 JDK 的安装为例，一来因为考虑到大家用的最多的还是 Windows 和 macOS 系统，二来则是因为手边没有安装 Linux 图形化系统。如果恰好你使用的是 Linux 系统，那么推荐你参考一下其他的资料，同样你也可以参考我的另一篇文章：<a href="https://ez4jam1n.blog.csdn.net/article/details/105648148" target="_blank" rel="noopener noreferrer">手把手带你玩转 Ubuntu</a>。</p>
<h3> Windows</h3>
<h4> 安装</h4>
<ol>
<li>首先进入 <a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener noreferrer">Oracle 官网</a>，然后找到自己想要的 JDK 版本，这边以 JDK 11 为例；</li>
</ol>
<p></p>
<ol start="2">
<li>点击 JDK Download 后，它会跳转到具体下载页面，然后根据自己的系统来进行选择，此处以 Windows 10 64 位为例；</li>
</ol>
<p></p>
<ol start="3">
<li>点击最后的连接后，它会让你同意协议，勾选同意，然后登陆你的 Oracle 账户即可开始下载，若是没有 Oracle 账户，点击下面的创建一个即可；</li>
</ol>
<p></p>
<p></p>
<ol start="4">
<li>下载完成后，进行安装即可，安装流程和我们平常安装软件的一样，就再赘述，需要注意的是要记住如下的安装路径，因为一般我们都不会安装到默认路径，所以一定要记住你所安装到的路径，这关系到后续的配置步骤；</li>
</ol>
<p></p>
<h4> 配置 JDK</h4>
<p>好了，经过上面的配置，我们的 JDK 就已经安装好了，但是这个使用你是用不了的，我们还需要进一步的配置；</p>
<p>打开系统属性来进行环境变量配置，打开系统属性并进行配置的方式如下：</p>
<ol>
<li><strong>Windows + R</strong> 快捷键组合唤醒 Windows 运行窗口，然后输入 <code>sysdm.cpl</code>，紧接着回车即可，一般会打开如下界面，然后点击最上方的 <strong>高级</strong>；</li>
</ol>
<p></p>
<ol start="2">
<li>点击高级后，就会打开如下界面，然后打开环境变量；</li>
</ol>
<p></p>
<ol start="3">
<li>新建环境变量 <strong>JAVA_HOME</strong>，然后变量值填入刚才安装 JDK 的路径（刚才提醒过要记住！）；</li>
</ol>
<p></p>
<ol start="4">
<li>编辑 <strong>Path</strong> 环境变量，然后新建一个变量值，填入如下内容：<code>%JAVA_HOME%\bin</code>；</li>
</ol>
<p></p>
<ol start="5">
<li>各种确定，然后突出系统属性即可，到这一步，理论上我们的 JDK 就安装并配置成功了，接下来我们就去确认一下到底安装好了没；</li>
</ol>
<h4> 验证 JDK</h4>
<p>按照上述步骤操作完成之后，接下来就是验证了，一般我们可以通过如下三个命令来进行验证；</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开命令控制台（<strong>Windows + R，然后输入 cmd 回车</strong>），然后输入如上三个命令，如果安装成功，一般是会出现如下内容的；</p>
<p></p>
<p></p>
<p></p>
<h3> macOS</h3>
<h4> 安装</h4>
<ol>
<li>首先去 <a href="https://www.oracle.com/java/technologies/javase-jdk11-downloads.html" target="_blank" rel="noopener noreferrer">官网下载</a> 对应安装包；</li>
</ol>
<p></p>
<ol start="2">
<li>
<p>接受相关协议并登录下载；</p>
</li>
<li>
<p>双击下载好的 <code>.dmg</code> 安装包，然后开始安装；</p>
</li>
</ol>
<p></p>
<ol start="4">
<li>安装过程中会让你输入密码，也就是你本机的密码。</li>
</ol>
<p></p>
<ol start="5">
<li>安装成功；</li>
</ol>
<p></p>
<h4> 验证</h4>
<p>不同于 Windows，macOS 下不用再去配置了，它会给你自动配置好，我们只需要去验证即可；</p>
<ol>
<li>查看 JDK 版本；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<ol start="2">
<li>编译命令；</li>
</ol>
<p></p>
<ol start="3">
<li>运行命令；</li>
</ol>
<p></p>
<h3> 安装目录详解</h3>
<p>安装好 <code>JDK</code> 之后，打开安装路径，通常情况下会有如下的目录结构：</p>
<table>
<thead>
<tr>
<th>目录</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>bin</code></td>
<td>用于存放各种工具命令，比如我们最常用额 <code>javac</code>、<code>java</code> 等</td>
</tr>
<tr>
<td><code>lib</code></td>
<td>存放工具的一些补充 <code>jar</code> 包</td>
</tr>
<tr>
<td><code>conf</code></td>
<td>存放相关配置文件</td>
</tr>
<tr>
<td><code>include</code></td>
<td>存放一些平台特定的头文件，比如 <code>Windows</code>、<code>macOS</code>、<code>Linux</code> 平台下这里的头文件是有所不同的</td>
</tr>
<tr>
<td><code>legal</code></td>
<td>存放各模块的授权文件</td>
</tr>
<tr>
<td><code>jmods</code></td>
<td>存放各种模块</td>
</tr>
</tbody>
</table>
<h2> 你的第一个 Java 程序：HelloWorld</h2>
<p>好了，经过上面的安装配置，我们就可以开始我们的第一个 Java 程序编写了。</p>
<p>要开发一个 Java 程序，主要分成 3 个步骤：</p>
<ol>
<li><strong>编写代码</strong></li>
<li><strong>编译代码</strong></li>
<li><strong>运行代码</strong></li>
</ol>
<p></p>
<p>我们不需要任何的基础，只需要按照上面的步骤配置好 JDK 之后，然后以上三个步骤逐一来进行就可以了。下面就来进行具体实践：</p>
<ol>
<li>打开编辑器（推荐 <code>VS Code</code>），如果没有，记事本也成，然后写入如下内容，然后保存为 <code>Main.java</code>，这里文件名一定要是 <code>Main</code>，文件后缀名为 <code>.java</code>。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>打开控制命令台，然后进入上述文件存放的路径，使用如下命令进行编译，然后会生成一个 <code>Main.class</code> 文件；</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<p></p>
<ol start="3">
<li>运行，使用如下命令进行运行，然后就可以看到打印出的最终结果了！</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h2> 知识点说明</h2>
<p>我们的 Hello World 是打印出来了，但是你肯定对里边的代码很感兴趣，这一节就主要针对我们的 Hello World 程序进行说明；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完整的程序代码如上：</p>
<ul>
<li><code>public</code>：权限修饰符，表示这一个可以公开访问的类，类似的还有 <code>protected、default、private</code>，后续学习过程中再一一介绍；</li>
<li><code>class</code>：Java 关键字，表示这是一个类；</li>
<li><code>Main</code>： 表示我们的类名，在保存时文件一定要和它同名，否则你的程序是编译不了的。你可以试试，如果把我们上面的 <code>Main.java</code> 改成其他名字，你看看是不是还能编译成功呢？</li>
<li><code>public static void main(String[] args){}</code>：主方法，这是我们以后最常接触到的一个方法，每个主类当中都必须有一个 <code>main</code> 方法；</li>
<li><code>System.out.println("Hello World!")</code>：控制台输出语句，执行该语句会在控制台中输出字符串，字符串要用双引号 <code>""</code> 括起来，你可以把其中的 <code>Hello Wolrd!</code> 换成你想要打印的内容试试看。</li>
</ul>
<h2> 总结</h2>
<p>好了，今天的内容到此就结束了，主要介绍了如何在 Windows 和 macOS 中安装 JDK，具体过程可以总结如下：</p>
<ul>
<li>安装</li>
<li>配置</li>
<li>验证</li>
</ul>
<p>然后编写了我们的第一个 <code>Hello World</code> 程序，并利用安装好的的 JDK 对其进行编译和运行。最后，则是对我们的 <code>Hello World</code> 程序中的相关知识进行了介绍。</p>
]]></content:encoded>
    </item>
    <item>
      <title>利用 IDEA 进行 Java 开发</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220703-learn-java-with-idea.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220703-learn-java-with-idea.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">利用 IDEA 进行 Java 开发</source>
      <description>作者：benjamin 博客：studio 原文：https://mp.weixin.qq.com/s/Pkf1WTj-x6JH4Jo8mOr8SQ 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Sun, 03 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/Pkf1WTj-x6JH4Jo8mOr8SQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Pkf1WTj-x6JH4Jo8mOr8SQ</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>上一篇中，我们讲了 <a href="https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ" target="_blank" rel="noopener noreferrer">如何搭建 Java 开发环境</a>。不过既然确定了要从事 Java 开发，那怎么能少得了一个趁手的 IDE 呢。正所谓工欲善其事。必先利其器，一个趁手的 IDE 就像电视剧里的神兵利器，能让我们功力大增，大大提高我们的效率。</p>
<p>但是目前市场上那么多的 IDE，有 Eclipse、IntelliJ IDEA、NetBeans …… 我们究竟该选择哪一个呢？既然做不了决定，那我就替你选择吧！要是都没接触过，那就直接 IDEA 吧，要是你之前是个 Eclipse 的忠实粉丝，也推荐你用一下 IDEA 试试，你只需要把 IDEA 的快捷键方式设置为 Eclipse 方式即可，相信过了一开始的阵痛期之后，就会喜欢上 IDEA 这一神器。那接下来，我们就来进行 IDEA 的安装工作！</p>
<h2> 安装前的准备工作</h2>
<p>开始安装之前，我们需要进行一些准备，首先是<strong>社区版和旗舰版该选谁</strong>，接着是<strong>软硬件的支持</strong>。</p>
<h3> 旗舰版 VS 社区版</h3>
<p>对于旗舰版和社区版，我从官网给出的对比从而摘选了如下图所示的区别。可以看出旗舰版无论在 <strong>语言支持、框架支持、Build 工具、部署工具、版本控制</strong> 等多方面都比社区版更加强大，但是最大的区别也是我们最为关心的一点：<strong>旗舰版收费，而社区版免费</strong>， 所以可以根据自己的需求进行选择。</p>
<p></p>
<h3> 软件</h3>
<ul>
<li>IntelliJ IDEA 安装包，下载地址：<a href="https://www.jetbrains.com/idea/download/%EF%BC%8C%E9%80%89%E6%8B%A9%E8%87%AA%E5%B7%B1%E7%B3%BB%E7%BB%9F%E5%AF%B9%E5%BA%94%E5%AE%89%E8%A3%85%E5%8C%85%E5%8D%B3%E5%8F%AF%E3%80%82" target="_blank" rel="noopener noreferrer">https://www.jetbrains.com/idea/download/，选择自己系统对应安装包即可。</a></li>
</ul>
<h3> 硬件</h3>
<table>
<thead>
<tr>
<th>配置项目</th>
<th style="text-align:left">最低配置</th>
<th>推荐配置</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>内存</strong></td>
<td style="text-align:left">2G +</td>
<td>8 G +</td>
</tr>
<tr>
<td><strong>硬盘</strong></td>
<td style="text-align:left">2.5 GB + 1 GB 缓存</td>
<td>至少 5GB+ 空间的 SSD</td>
</tr>
<tr>
<td><strong>显示器</strong></td>
<td style="text-align:left">1024 x 768</td>
<td>1920×1080</td>
</tr>
<tr>
<td><strong>操作系统</strong></td>
<td style="text-align:left">官方放出的 64 位操作系统：<br>1. Windows 8 +<br>2. macOS 10.13 +<br>3. Linux 的 Gnome、KDE、Unity 桌面环境的支持<br>4. 预览版系统可能支持不好</td>
<td>最新的 64 位 Windows、macOS、Linux 系统</td>
</tr>
</tbody>
</table>
<h2> 安装工作</h2>
<h3> Ubuntu</h3>
<h4> 安装</h4>
<ol>
<li>下载安装包，根据自己的需求选择旗舰版或是社区版</li>
</ol>
<p></p>
<ol start="2">
<li>将下载好的安装包 <code>ideaIU-2020.1.1.tar.gz</code> 移动到平时存放软件的目录下进行解压缩</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<p></p>
<ol start="3">
<li>进入解压后的 <code>bin</code> 目录，然后在终端启动如下命令即可：</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<ol start="4">
<li>进入初始化启动后的设置即可。</li>
</ol>
<p>首先是 UI 主题选择，根据自己的喜好选择 Light 还是 Darcula 模式；</p>
<p></p>
<p>接着是否创建启动器脚本，同时选择自己的脚本保存目录</p>
<p></p>
<p>接着选择自己想要的插件和禁用无关插件，根据自己的需求安装即可，如果不知道怎么选择，默认即可。</p>
<p></p>
<p>选择额外的插件支持，按需安装，默认不勾选，后续也可以自行安装。</p>
<p></p>
<h4> 卸载</h4>
<p>Linux 下卸载只需要将对应目录（即刚才解压后的目录）删除即可。</p>
<h3> Windows</h3>
<h4> 安装</h4>
<p>安装过程和 Ubuntu 大致相同，只是 Windows 中的安装包是可执行文件，只需要双击进行安装即可，然后后面选择自己的安装路径即可，安装好之后的设置和 Ubuntu 一致。</p>
<h4> 卸载</h4>
<p>进入 Windows 设置，然后进入应用，然后搜索 IDEA，选择卸载即可。</p>
<p></p>
<h3> macOS</h3>
<h4> 安装</h4>
<ol>
<li>首先去 <a href="https://www.jetbrains.com/idea/download/#section=mac" target="_blank" rel="noopener noreferrer">官网下载</a> 对应安装包；</li>
</ol>
<p></p>
<ol start="2">
<li>然后双击下载好的 <code>.dmg</code> 安装包，等待验证后拖拽到 <code>Applications</code> 即可；</li>
</ol>
<p></p>
<ol start="3">
<li>安装成功，打开的主页面如下图所示；</li>
</ol>
<p></p>
<h4> 卸载</h4>
<p>打开访达中的 <strong>应用程序</strong>，然后找到 IDEA，将其拖到 <strong>🗑️ 废纸篓</strong> 即可，也可以单击鼠标右键，然后 <strong>移到废纸篓</strong>；</p>
<p></p>
<h2> 创建 Java 项目</h2>
<p><a href="https://mp.weixin.qq.com/s/geOWlAwVMhtmmIMvFvjSpQ" target="_blank" rel="noopener noreferrer">上一篇</a> 文章中，我们介绍了如何利用编辑器写我们的 <code>Hello World</code>，接下来就讲讲如何利用 IDEA 来创建并书写我们的 <code>Hello World</code> 程序。</p>
<ol>
<li>依次进入 <code>File -&gt; New -&gt; Project</code>，然后选择左侧 Java，配置项目 JDK；</li>
</ol>
<p></p>
<ol start="2">
<li>下一步之后，如果勾选上面的选项，就会从模板创建一个项目（一般都是 <code>HelloWorld</code>），不勾选就是一个空项目，看自己选择；</li>
</ol>
<p></p>
<ol start="3">
<li>再接下来，就是设置项目名以及项目存储目录了；</li>
</ol>
<p></p>
<ol start="4">
<li>最后点击完成，我们的普通 Java 项目就创建成功了；</li>
</ol>
<p></p>
<ol start="5">
<li>项目创建成功了，我们在项目 <code>src</code> 目录上右键新建一个 Java 类文件。注意，一般来讲，我们倾向于把类的命名方式定义为首字母大写的驼峰命名法。然后填入如下代码，一个 简单的 <code>HelloWorld</code> 就完成了；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="6">
<li>最后运行我们刚才写的代码，可以看到输出了 <code>Hello World</code>，和我们在上一篇文章中通过控制台打印出的一样！</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 总结</h2>
<p>今天的内容就到此为止了，主要介绍了 IDEA 的不同版本之间的区别，以及 IDEA 在不同系统中的安装和卸载工作，最后则是给大家演示了如何利用 IDEA 创建一个项目，编写我们最简单的 <code>Hello World!</code> 程序。</p>
<p>这里如果您想了解 IDEA 的更多使用技巧，可以关注一下，后边我会抽空写一个完整的教程系列，敬请期待吧！您要是等不及了，那就加我微信来催我更文吧！</p>
<blockquote>
<p>最后，针对更多 IntelliJ IDEA 的使用，我特地写了一篇文章，赶紧去看看吧！</p>
<p>-&gt; <a href="https://benjam1n.eu.org/md/dev-tools/idea" target="_blank" rel="noopener noreferrer">传送门</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>变量与数据类型</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220704-variable-and-datatype.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220704-variable-and-datatype.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">变量与数据类型</source>
      <description>作者：benjamin 博客：studio 原文：https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Mon, 04 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前情回顾</h2>
<p>在之前的文章中，我们已经介绍了如何搭建 Java 开发环境以及如何使用 IDEA，现在就开始正式学习 Java 语言的相关语法吧！😎</p>
<p>本期内容预告如下：</p>
<ol>
<li><strong>变量</strong></li>
<li><strong>数据类型</strong></li>
<li><strong>变量作用域</strong></li>
<li><strong>常量</strong></li>
</ol>
<p>本文将主要从以上四个方面出发，带领大家来看一下 Java 中的变量和数据类型。</p>
<h2> 变量</h2>
<h3> 什么是变量？</h3>
<p>所谓变量，就是用来命名一个数据的标识符，其定义格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中数据类型是用于限制存储数据的形式，后面会讲到 Java 中的常见数据类型；变量名称是用于代表变量的一个符号，就好比我们每个人的名字；初始值则代表该变量存储时的初始数据。</p>
<p>在 Java 中，变量主要分为两种：</p>
<ul>
<li><strong>基本类型的变量</strong></li>
<li><strong>引用类型的变量</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>int</code> 是基本数据类型，表示这是一个整型数；而 <code>String</code> 则是引用类型，表示这是一个引用类型；</p>
<p><code>id</code> 和 <code>name</code> 则是标识符，也就是我们所说的 <strong>变量</strong>；</p>
<p><code>=</code> 则是赋值操作符，而 <code>1</code> 则是基本类型的值，<code>benjamin</code> 则是引用类型的值；</p>
<h3> 变量的特点</h3>
<p>在使用变量时，需要注意以下的几个问题。</p>
<ol>
<li>变量一定要先声明然后再使用。</li>
<li>声明一个变量的类型后，不能用它来存储其类型的数据。</li>
<li>变量定义时可以不赋初始值，但是在使用时必须赋值。</li>
<li>变量是有使用范围的，在同一使用范围内，不能重复定义同一个变量。</li>
<li>变量最重要的一个特点就是可以重新赋值。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 变量命名规则</h3>
<p>变量命名也是一门学问，并不是我们想怎么命名就怎么命名，日常开发中最常见的变量命名规则主要有如下几条：</p>
<ol>
<li><strong>强制</strong>：变量命名只能使用 <strong>字母（大小写均可）、数字、$、_</strong>；</li>
<li><strong>强制</strong>：变量名不能使用关键字（就是 Java 中内置的一些关键字，如 <code>int、for、long…</code>）；</li>
<li><strong>强制</strong>：变量第一个字符不能使用数字，只能用字母、<code>$</code>、<code>_</code>；</li>
<li>更多命名规则推荐参考阿里巴巴推出的《Java 开发手册》，下载链接：<a href="https://github.com/ez4jam1n/ebooks" target="_blank" rel="noopener noreferrer">https://github.com/ez4jam1n/ebooks</a></li>
</ol>
<h3> 常见关键字</h3>
<p>这是一种事先定义好的，有特定意义的标识符，也叫做保留字。对于 Java 编译器有着特殊意义，用来表示一种数据类型，或者表示程序的结构等。此外，关键字不能用作变量名、方法名、类名、包名和参数名。常见的关键字可以分为如下几类，具体的关键字如下图所示：</p>
<ul>
<li><strong>访问控制类</strong></li>
<li><strong>类、方法及变量修饰符类</strong></li>
<li><strong>程序控制类</strong></li>
<li><strong>错误处理</strong></li>
<li><strong>包相关</strong></li>
<li><strong>基本类型</strong></li>
<li><strong>变量引用</strong></li>
<li><strong>保留字</strong></li>
</ul>
<!-- ![](https://img-blog.csdnimg.cn/9f8fed4aeeda4dea9d1de0ff7677ca4a.png) -->
<p></p>
<h2> 数据类型</h2>
<h3> 基本数据类型</h3>
<p>Java 中，共有 8 种基本数据类型，由 Java 语言预定好的，每个数据类型都属于关键字，而且每种基本变量都有其对应的封装类，这 8 种基本数据类型分别是：</p>
<ul>
<li><strong>整型（4 种）</strong></li>
<li><strong>浮点型（2 种）</strong></li>
<li><strong>字符型（1 种）</strong></li>
<li><strong>布尔型（1 种）</strong></li>
</ul>
<p>下面的表就是 Java 中 8 大数据类型所占的内存空间，对应封装类，数据表示范围以及默认值的一下相关情况。</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>bit</th>
<th>字节</th>
<th>封装类</th>
<th>数据范围</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>byte</code></td>
<td>8</td>
<td>1</td>
<td><code>Byte</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">7</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>short</code></td>
<td>16</td>
<td>2</td>
<td><code>Short</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">15</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>char</code></td>
<td>16</td>
<td>2</td>
<td><code>Character</code></td>
<td><code>\u0000</code> ~ <code>\uffff</code>（<span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">65535</span></span></span></span>）</td>
<td><code>u0000</code></td>
</tr>
<tr>
<td><code>int</code></td>
<td>32</td>
<td>4</td>
<td><code>Integer</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">31</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0</code></td>
</tr>
<tr>
<td><code>long</code></td>
<td>64</td>
<td>8</td>
<td><code>Long</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord">−</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">63</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span></td>
<td><code>0L</code></td>
</tr>
<tr>
<td><code>float</code></td>
<td>32</td>
<td>4</td>
<td><code>Float</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1.4</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">45</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">3.4</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">38</span></span></span></span></span></span></span></span></span></span></span></span></td>
<td><code>0.0f</code></td>
</tr>
<tr>
<td><code>double</code></td>
<td>64</td>
<td>8</td>
<td><code>Double</code></td>
<td><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">4.9</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">324</span></span></span></span></span></span></span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1.8</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">308</span></span></span></span></span></span></span></span></span></span></span></span></td>
<td><code>0.0D</code></td>
</tr>
<tr>
<td><code>boolean</code></td>
<td>1</td>
<td>不确定</td>
<td><code>Boolean</code></td>
<td><code>true</code> 或 <code>false</code></td>
<td><code>false</code></td>
</tr>
</tbody>
</table>
<p><strong>注意：</strong></p>
<ol>
<li><code>boolean</code> 一般用 1 <code>bit</code> 来存储，但是具体大小并未规定，JVM 在编译期将 <code>boolean</code> 类型转换为 <code>int</code>，此时 1 代表 <code>true</code>，<code>0</code> 代表 <code>false</code>。此外，JVM 还指出 <code>boolean</code> 数组，但底层是通过 <code>byte</code> 数组来实现。</li>
<li>使用 <code>long</code> 类型时，需要在后边加上 <code>L/l</code>，否则将其作为整型解析，可能会导致越界.</li>
<li>浮点数如果没有明确指定 <code>float</code> 还是 <code>double</code>，统一按 <code>double</code> 处理。</li>
<li><code>char</code> 是用 <strong>单引号 <code>''</code></strong> 将内容括起来，<strong>只能存放一个字符</strong>，相当于一个整型值（ASCII 值），能够参加表达式运算；而 <code>String</code> 是用 <strong>双引号 <code>""</code></strong> 将内容括起来，代表的是一个地址值。</li>
<li>Java 在内存中是采用 Unicode 表示，所以无论是一个中文字符还是英文字符，都能用 <code>char</code> 来表示。</li>
</ol>
<p>那么如何个一个基本类型变量赋值呢？</p>
<p>在 Java 中，基本数据类型属于 Java 的一种内置的特殊数据类型，不属于任何类，所以可以直接对其进行赋值；给基本类型的变量赋值的方式就叫做 <strong>字面值</strong>；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3> 引用数据类型</h3>
<h4> 常见引用数据类型</h4>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>数组</td>
<td><code>null</code></td>
</tr>
<tr>
<td>类</td>
<td><code>null</code></td>
</tr>
<tr>
<td>接口</td>
<td><code>null</code></td>
</tr>
</tbody>
</table>
<p>而对于引用数据类型，我们经常是需要 <code>new</code> 关键字来进行赋值，但是引用类型中的 <strong>接口是不能被实例化的，我们需要对其进行实现</strong>；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> String</h4>
<p>对于引用数据类型中的 <code>String</code>，我们需要特别关注。</p>
<p><code>String</code> 不同于 <code>char</code>，它属于引用类型，而 <code>char</code> 属于基本数据类型。用双引号 <code>""</code> 括起来表示字符串，一个字符串能够保存 0 个到任意个字符，它一旦创建就不能被改变。</p>
<p>而针对字符串，如果我们要打印一些特殊的字符，比如字符串本来就包含 <code>"</code>，那么这个时候就需要借助于转义字符 <code>\</code>，最常见的转义字符主要有：</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\"</code></td>
<td>字符 <code>"</code></td>
</tr>
<tr>
<td><code>\'</code></td>
<td>字符 <code>'</code></td>
</tr>
<tr>
<td><code>\\</code></td>
<td>字符 <code>\</code></td>
</tr>
<tr>
<td><code>\n</code></td>
<td>换行符</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>制表符 <code>Tab</code></td>
</tr>
<tr>
<td><code>\r</code></td>
<td>回车符</td>
</tr>
</tbody>
</table>
<blockquote>
<p>那多个字符串之间或者字符串和其他类型数据之间，该如何进行连接呢？</p>
</blockquote>
<p>Java 编译器中，对于字符串和其他数据类型之间，可以使用 <code>+</code> 进行连接，编译器会自动将其他数据类型自动转换为字符串，然后再进行连接；</p>
<blockquote>
<p><code>String</code> 既然是不可变，那有什么优点呢？</p>
</blockquote>
<ol>
<li><strong>用于缓存 <code>hash</code> 值</strong></li>
</ol>
<p>由于 <code>String</code> 的 <code>hash</code> 值被频繁使用，它的不可变性使得 <code>hash</code> 值也不可变，此时只需要进行一次计算；</p>
<ol start="2">
<li><strong>字符串常量池（String Pool）的需要</strong></li>
</ol>
<p>如果一个 <code>String</code> 对象已经被创建过，那么就会优先从字符串常量池中获取其引用，其不可变性确保了不同引用指向同一 <code>String</code> 对象；</p>
<ol start="3">
<li><strong>安全性</strong></li>
</ol>
<p>我们经常用 <code>String</code> 作为我们方法的参数，其不变性能够保证参数不可变；</p>
<ol start="4">
<li><strong>线程安全</strong></li>
</ol>
<p><code>String</code> 的不可变性让它天生 <strong>具备线程安全</strong>，能够在多个线程中方便使用而不用考虑线程安全问题。</p>
<blockquote>
<p><code>String、StringBuilder、StringBuffer</code> 对比，该如何选择？</p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th>可变性</th>
<th>线程安全</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>String</code></td>
<td>不可变</td>
<td>安全</td>
<td>操作少量的数据</td>
</tr>
<tr>
<td><code>StringBuffer</code></td>
<td>可变</td>
<td>安全，内部使用 <code>synchronized</code> 进行同步</td>
<td>多线程操作字符串缓冲区下操作大量数据</td>
</tr>
<tr>
<td><code>StringBuilder</code></td>
<td>可变</td>
<td>不安全</td>
<td>单线程操作字符串缓冲区下操作大量数据，性能高于 <code>StringBuffer</code></td>
</tr>
</tbody>
</table>
<blockquote>
<p>通过 <code>new String(“xxx”)</code> 创建字符串的两种情况？</p>
</blockquote>
<p>使用 <code>new</code> 的方式创建字符串对象，会有两种不同的情况：</p>
<ol>
<li><strong>String Pool 中不存在 “xxx”</strong></li>
</ol>
<p>此时会创建两个字符串对象，“xxx” 属于字符串字面量，因此在编译期会在 String Pool 中创建一个字符串对象，用于指向该字符串的字面量 “xxx”；然后 <code>new</code> 会在堆中创建一个字符串对象。</p>
<p></p>
<ol start="2">
<li><strong>String Pool 中存在 “xxx”</strong></li>
</ol>
<p>此时只需要创建一个字符串对象，由于 String Pool 中已经存在指向 “xxx” 的对象，所以直接在堆中创建一个字符串对象。</p>
<p></p>
<h3> 数据类型转换</h3>
<p>对于基本数据类型，不同类型之间是可以相互转换的，但是需要满足一定的条件；</p>
<blockquote>
<p><strong>从小到大自动转，从大到小强制转</strong>。</p>
</blockquote>
<p>即就是，对于低精度的数据类型，如果要转换为高精度的数据类型，直接将低精度的值赋给高精度的值即可；</p>
<p>但对于高精度的数据类型，如果想要转换为低精度的数据类型，则需要采用 <strong>强制转换</strong> 的手段，但此时需要承担精度丢失的风险，就像从一个大杯子往一个小杯子里倒水，你要做好小杯子可能装不下溢出的情况；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 隐式转换（自动类型转换）</h4>
<p>当满足如下条件时，如果将一种类型的数据赋值给另一种数据类型变量时，将执行自动类型转换：</p>
<blockquote>
<ol>
<li>两种数据类型彼此兼容；</li>
<li>目标数据类型的取值范围大于源数据类型；</li>
</ol>
</blockquote>
<p>一般而言，隐式转换的规则是从低级类型数据转换为高级类型数据，对应规则如下：</p>
<blockquote>
<ul>
<li><strong>数值类型</strong>：<code>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</code></li>
<li><strong>字符类型转整型</strong>：<code>char -&gt; int</code></li>
</ul>
</blockquote>
<h4> 显式转换（强制类型转换）</h4>
<p>那既然满足上述两个条件时会发生隐式转换，那不满足我们又想进行数据类型转换时，我们该怎么办呢？</p>
<p>这个时候就需要我们的 <strong>显式转换</strong> 登场了，其语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们举个例子来说下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**注意：**强制转换可能会导致精度丢失，所以一般情况下尽量能不用就不用。</p>
<h4> 常见数据类型转换方法</h4>
<ol>
<li><strong>字符串与其他类型之间的转换</strong></li>
</ol>
<ul>
<li><strong>其他类型 -&gt; 字符串</strong></li>
</ul>
<blockquote>
<ol>
<li>调用类的串转换方法：<code>X.toString()</code>；</li>
<li>自动转换：<code>"" + X</code>；</li>
<li>利用 <code>String</code> 的方法：<code>String.valueOf(X)</code>；</li>
</ol>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>字符串 - &gt; 其他类型</strong></li>
</ul>
<ol>
<li>调用 <code>parseXXX</code> 方法，比如 <code>parseLong、parseFloat、parseDouble...</code>；</li>
<li>先调用 <code>valueOf()</code>，方法，然后再调用 <code>xxxValue()</code> 方法；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>int、float、double</strong> 之间的转换</li>
</ol>
<ul>
<li><code>float -&gt; double</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>double -&gt; float</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>double -&gt; int</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>int -&gt; double</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2> 变量作用域</h2>
<p>我们已经学会了如何定义变量，也知道了使用各种数据类型来定义变量。但是还有一点不知道大家有没有注意到，如果我们的定义变量在不同的位置，其作用是不是相同的呢？</p>
<p>这就涉及到变量的作用域，一般根据其作用域的不同，可以分为：</p>
<ul>
<li><strong>成员变量</strong>：定义在方法体和语句块外，不属于任何一个方法，能在整个类中起作用；</li>
<li><strong>局部变量</strong>：定义在方法或方法体中的变量，作用域是其所在的代码块；</li>
</ul>
<h3> 成员变量</h3>
<p>成员变量又可以分为 <strong>全局变量（又叫实例变量）</strong> 和 <strong>静态变量（也叫类变量）</strong>，两者的区别如下：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>修饰符</th>
<th>访问方式</th>
<th>生命周期</th>
</tr>
</thead>
<tbody>
<tr>
<td>全局变量</td>
<td>无</td>
<td>对象名.变量名</td>
<td>一旦对象被引用，则实例变量就存在</td>
</tr>
<tr>
<td>静态变量</td>
<td><code>static</code></td>
<td>类名.变量名</td>
<td>同类共生死，只有当类被 GC 回收时才会被销毁</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 局部变量</h3>
<p>成员变量指定义在方法或方法体中的变量，作用域是其所在的代码块，可以分为如下三种：</p>
<ul>
<li>形参</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>方法内定义</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>代码块定义</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 常量</h2>
<h3> 简介</h3>
<p>既然有变量，那就有与之相对的常量（也就是值是固定的，不能再变）。</p>
<p>常量又叫做字面常量，是通过数据直接来表示的，在程序运行过程中不能发生改变。通常我们把 Java 中用 <code>final</code> 关键字所修饰的成员变量叫做常量，它的值一旦给定就无法再进行改变！</p>
<h3> 分类</h3>
<p>Java 中使用 <code>final</code> 关键字来声明常量，其语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常量可以分为如下 3 种类型：</p>
<ul>
<li><strong>静态常量</strong>：<code>final</code> 之前用 <code>public staic</code> 修饰，表示该常量的作用域是全局的，我们不用创建对象就能够访问它。</li>
<li><strong>成员常量</strong>：类似于成员变量，但是最大的不同在于它不能被修改。</li>
<li><strong>局部常量</strong>：作用类似于局部变量，不同之处也在于不能修改。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>PS：<code>final</code> 修饰变量后，该变量则变为常量。而 <code>final</code> 也还可以用来修饰类和方法，修饰方法时，表示这个方法不能被重写（但可以重载）；修饰类时，则表明该类无法被继承。这些东西这时候你可能会觉得很陌生，不过等我们后续学习了面向对象之后，你就会发现其实很简单。</p>
<h2> 总结</h2>
<p>以上就是本期文章的所有内容了，集中介绍了 Java 中的变量、数据类型、变量作用域以及常量等主要知识点。内容虽然蛮多的，但如果大家能够静下心来慢慢学习，掌握起来还是不难的。</p>
<p>最后，码字不易，如果觉得本文对您有所帮助，可以点赞关注，帮忙分享一波哦！🙏</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/ez4jam1n/ez4jam1n@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
      <enclosure url="https://img-blog.csdnimg.cn/9f8fed4aeeda4dea9d1de0ff7677ca4a.png" type="image/png"/>
    </item>
    <item>
      <title>常用进制转换</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220705-binary-convert.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220705-binary-convert.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">常用进制转换</source>
      <description>作者：benjamin 博客：studio 原文：https://mp.weixin.qq.com/s/2f_dODoVco-tSS66lF0U5A 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Tue, 05 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/2f_dODoVco-tSS66lF0U5A" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/2f_dODoVco-tSS66lF0U5A</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>所谓进制转换，就是人们利用符号来计数的方法。进制转换由一组数码符号和两个基本因素“基数”和“位权”所构成。其中<strong>基数</strong>是指进位计数制中所采用的数码的个数，逢 <code>n</code> 进 1 中的 <code>n</code> 就是基数。而<strong>位权</strong>则指的是进位制中每一个固定位置所对应的单位制，而每一种进制中的某一个数的每位上都有一个权值 <code>m</code>，而且权值是位数减一，比如个位上的数的权值为 <code>0</code>（位数 1 - 1 = 0），而十位的权值为 <code>1</code>（位数 2 - 1 = 1）。</p>
<p>在 Java 学习中，我们难免会和各种进制打交道。今天就来看看，在 Java 中最常用的几个进制的相关概念，以及如何利用 Java 来实现他们之间的相互转换！</p>
<h2> 二进制</h2>
<p>二进制是计算机中采用最广泛的一种数制，用 0 和 1 两个数码来表示，其进位规则是逢二进一，而借位规则则是借一当二。</p>
<p>如果要将二进制转换为十进制，则采用 <strong>按权展开求和</strong>方法，其步骤是先将二进制的数写成加权系数展开式，然后再更具十进制的加法规则进行求和。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1011</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9474em;vertical-align:-0.0833em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8641em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">11</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<h2> 十进制</h2>
<p>而一个十进制数要转换为二进制数，则需要将整数和小数部分分别转换，最后再进行组合。其中，整数部分采用<strong>除二取余，逆序排序</strong>的方法。具体方法是用 2 来整除一个十进制数，从而得到一个商和余数；然后再用 2 去除以商，从而又得到一个商和余数，重复这个步骤，直到最后得到的商小于 1 时为止。最后把按照得到余数的先后顺序，逆序依次排列，得到的数即为这个十进制数的二进制表示。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">15</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1111</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p></p>
<p>小数部分则不同于整数部分，小数部分要使用<strong>乘 2 取整法</strong>，即用十进制的小数部分乘以 2，然后取结果的整数部分，然后再用剩下的小数重复刚才的步骤，直到最后剩余的小数为 0 时停止。最后将每次得到的整数部分按照先后顺序正序排列，从而得到对应的二进制表示。</p>
<p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0.25</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0.01</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p></p>
<h2> 八进制</h2>
<p>所谓八进制，就是每 3 位二进制作为一个单元，其中最小的数是 0，最大的数是 7，一共 8 个数字。</p>
<p>要将二进制的数转换为八进制，需要将 3 个连续的数拼成一组，然后再独立转成八进制中的数字。</p>
<p>例如，二进制的 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">111101011110</span></span></span></span> 可以转换为八进制中的 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">7536</span></span></span></span>。</p>
<p></p>
<h2> 十六进制</h2>
<p>所谓十六进制，就是每 4 位二进制作为一个单元，其中最小数是 0，最大数是 15，一共 16 个数字，分别用 0 ~ 9、A、B、C、D、E、F 表示。</p>
<p>要将二进制转换为十六进制，需要将 4 个连续的数拼成一组，然后再独立转换为十六进制中对应的数字。</p>
<p>例如，二进制的 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1111100111010111</span></span></span></span> 可以转换为十六进制中的 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mord">9</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord">7</span></span></span></span>。</p>
<p></p>
<h2> 常用进制转换</h2>
<p>当然，Java 中也已经将常用的进制转换方法封装好了，我们只需要调用对应方法即可。</p>
<table>
<thead>
<tr>
<th>转换</th>
<th>方法</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>十进制 -&gt; 二进制</td>
<td><code>Integer.toBinary(int num)</code></td>
<td>二进制字符串</td>
</tr>
<tr>
<td>十进制 -&gt; 八进制</td>
<td><code>Integer.toOctalString(int num)</code></td>
<td>八进制字符串</td>
</tr>
<tr>
<td>十进制 -&gt; 十六进制</td>
<td><code>Integer.toHexString(int num)</code></td>
<td>十六进制字符串</td>
</tr>
<tr>
<td>十进制 -&gt; N 进制</td>
<td><code>Integer.toString(int num, int N)</code></td>
<td>N 进制字符串</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>相反的，如果我们要将一个 <code>N</code> 进制的字符串 <code>str</code> 转换为十进制数，那么可以使用以下方法。</p>
<table>
<thead>
<tr>
<th>转换</th>
<th>方法</th>
<th>返回</th>
</tr>
</thead>
<tbody>
<tr>
<td>N 进制 -&gt; 十进制</td>
<td><code>Integer.parseInt(String str, int N)</code></td>
<td>十进制数</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>以上就是有关二进制、十进制、八进制、十六进制相关的知识点了。此外还介绍了 Java 中如何进行十进制向其他进制的转换方法，以及如何将其他进制转换为十进制。如果你刚好这些内容对你有所帮助，那就来个一键三连吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>操作符</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220706-operator.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220706-operator.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">操作符</source>
      <description>作者：benjamin 博客：studio 原文：https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Wed, 06 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p><a href="https://mp.weixin.qq.com/s/Yz41IdWSNTgqgj0R-Ffgqw" target="_blank" rel="noopener noreferrer">之前的文章</a> 中介绍了 Java 变量和数据类型，那么如何对他们进行运算呢？这就要用到运算符的相关知识点了。所谓运算符，就是指 Java 中对变量或者字面量进行操作的符号。下面就来具体看看，常用的操作符。</p>
<p>本文主要内容预告如下：</p>
<ul>
<li><strong>算术运算符</strong></li>
<li><strong>关系运算符</strong></li>
<li><strong>位运算符</strong></li>
<li><strong>逻辑运算符</strong></li>
<li><strong>赋值运算符</strong></li>
<li><strong>条件运算符</strong></li>
</ul>
<p>好了，话不多说，开始正式内容吧！</p>
<h2> 算术运算符</h2>
<p>常见的算术运算符主要有下表中的几种，主要是针对整型和浮点类型的运算。</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>+</code></td>
<td style="text-align:left">加法 - 相加运算符两侧的值</td>
</tr>
<tr>
<td style="text-align:left"><code>-</code></td>
<td style="text-align:left">减法 - 左操作数减去右操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>*</code></td>
<td style="text-align:left">乘法 - 相乘操作符两侧的值</td>
</tr>
<tr>
<td style="text-align:left"><code>/</code></td>
<td style="text-align:left">除法 - 左操作数除以右操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>％</code></td>
<td style="text-align:left">取余 - 左操作数除以右操作数的余数</td>
</tr>
<tr>
<td style="text-align:left"><code>++</code></td>
<td style="text-align:left">自增: 操作数的值增加1</td>
</tr>
<tr>
<td style="text-align:left"><code>--</code></td>
<td style="text-align:left">自减: 操作数的值减少1</td>
</tr>
</tbody>
</table>
<p><strong>注意</strong>：<code>++</code> 和 <code>--</code> 可以放在操作数之前，也可以放在操作数之后；<strong>位于操作数之前时，先自增/减，再赋值；位于操作数之后，先赋值，再自增/减</strong>；总结起来就是<strong>符号在前就先加/减，符号在后就后加/减</strong>。</p>
<p>以下是部分算术运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>这里不难看出，无论是 <code>++</code> 还是 <code>--</code>，当它们单独写一行时，不管是放在变量前边还是后边，其最终结果都是一样的。但如果将它们参与运算，此时的效果就不一样了，这里需要注意。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码中，先进行了 <code>b = a</code> 的赋值操作，所以此时 <code>b</code> 的值是 <code>10</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而此时，先要对 <code>a</code> 进行加一的操作之后，再将 <code>a</code> 的值赋予 <code>b</code>，所以此时 <code>b</code> 的值为 <code>11</code>。</p>
<h2> 关系运算符</h2>
<p>关系运算符主要是指两个数据间的关系，两者之间的比较结果用逻辑值来表示，常用来比较判断两个变量或常量的大小。常见的关系运算符及含义如下表：</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>==</code></td>
<td style="text-align:left">检查如果两个操作数的值是否相等，如果相等则条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>!=</code></td>
<td style="text-align:left">检查如果两个操作数的值是否相等，如果值不相等则条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt; </code></td>
<td style="text-align:left">检查左操作数的值是否大于右操作数的值，如果是那么条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt; </code></td>
<td style="text-align:left">检查左操作数的值是否小于右操作数的值，如果是那么条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;=</code></td>
<td style="text-align:left">检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;=</code></td>
<td style="text-align:left">检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真</td>
</tr>
</tbody>
</table>
<p>以下是部分关系运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 位运算符</h2>
<p>位运算符主要用来对操作数二进制的位进行运算，其运算结果是整型的。常见的位运算符及功能描述如下表所示：</p>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>＆</code></td>
<td>如果相对应位都是 1，则结果为 1，否则为 0</td>
</tr>
<tr>
<td><code>|</code></td>
<td>如果相对应位都是 0，则结果为 0，否则为 1</td>
</tr>
<tr>
<td><code>^</code></td>
<td>如果相对应位值相同，则结果为 0，否则为 1</td>
</tr>
<tr>
<td><code>〜</code></td>
<td>按位取反运算符翻转操作数的每一位，即 0 变成 1，1 变成 0</td>
</tr>
<tr>
<td><code>&lt;&lt;</code></td>
<td>按位左移运算符。左操作数按位左移右操作数指定的位数</td>
</tr>
<tr>
<td><code>&gt;&gt;</code></td>
<td>按位右移运算符。左操作数按位右移右操作数指定的位数</td>
</tr>
<tr>
<td><code>&gt;&gt;&gt;</code></td>
<td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充</td>
</tr>
</tbody>
</table>
<p>以下是部分位运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 逻辑运算符</h2>
<p>逻辑运算符通过将关系表达式连接起来，从而组成一个复杂的逻辑表达式，从而判断程序中的表达式是否成立，其结果返回 <code>true</code> 或 <code>false</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>&amp;&amp;</code></td>
<td style="text-align:left">称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真</td>
</tr>
<tr>
<td style="text-align:left"><code>||</code></td>
<td style="text-align:left">称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真</td>
</tr>
<tr>
<td style="text-align:left"><code>!</code></td>
<td style="text-align:left">称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为 <code>true</code>，则逻辑非运算符将得到 <code>false</code></td>
</tr>
</tbody>
</table>
<p>以下是逻辑运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 赋值运算符</h2>
<p>赋值运算符表示一个动作，将其右侧的值送到左侧的变量中。常见的赋值运算符及含义如下表所示：</p>
<table>
<thead>
<tr>
<th style="text-align:left">操作符</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>=</code></td>
<td style="text-align:left">简单的赋值运算符，将右操作数的值赋给左侧操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>+=</code></td>
<td style="text-align:left">加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>-=</code></td>
<td style="text-align:left">减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>*=</code></td>
<td style="text-align:left">乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>/=</code></td>
<td style="text-align:left">除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>％=</code></td>
<td style="text-align:left">取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>
</tr>
<tr>
<td style="text-align:left"><code>&lt;&lt; =</code></td>
<td style="text-align:left">左移位赋值运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>&gt;&gt;=</code></td>
<td style="text-align:left">右移位赋值运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>＆=</code></td>
<td style="text-align:left">按位与赋值运算符</td>
</tr>
<tr>
<td style="text-align:left"><code>^=</code></td>
<td style="text-align:left">按位异或赋值操作符</td>
</tr>
<tr>
<td style="text-align:left"><code>|=</code></td>
<td style="text-align:left">按位或赋值操作符</td>
</tr>
</tbody>
</table>
<p>以下是部分赋值运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 条件运算符（? :）</h2>
<p>也叫作三元运算符，共有 3 个操作数，且需要判断布尔表达式的值，常用来取代某个 <code>if-else</code> 语句。其语法结构如下所示：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下是条件运算符的示例以及运行结果：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> instanceof</h2>
<p>用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型），其语法结构如下。该知识点涉及到类与对象，此处就不做展开，等到后边学习类与对象之后，就能理解了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 运算符优先级</h2>
<p>运算符有很多，如果我们将多个运算符组合在一起，那它们又该先计算哪一个，然后再计算哪一个呢？其实就像我们日常排队一样，运算符也是有优先级的。
常用运算符的优先级如下表所示，在我们使用时，如果涉及到一个表达式中含有多个运算符，一定要注意运算符的优先级。当然了，让我们背下来这些也是挺难的。不过不要紧，我们只需要学会灵活运用 <code>()</code> 就好了。我们可以利用 <code>()</code> 将需要先计算的表达式括起来，然后再去进行下一步的运算。</p>
<table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><code>.</code>、<code>()</code>、<code>{}</code></td>
</tr>
<tr>
<td>2</td>
<td><code>!</code>、<code>~</code>、<code>++</code>、<code>--</code></td>
</tr>
<tr>
<td>3</td>
<td><code>*</code>、<code>/</code>、<code>%</code></td>
</tr>
<tr>
<td>4</td>
<td><code>+</code>、<code>-</code></td>
</tr>
<tr>
<td>5</td>
<td><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></td>
</tr>
<tr>
<td>6</td>
<td><code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>instanceof</code></td>
</tr>
<tr>
<td>7</td>
<td><code>==</code>、<code>!=</code></td>
</tr>
<tr>
<td>8</td>
<td><code>&amp;</code></td>
</tr>
<tr>
<td>9</td>
<td><code>^</code></td>
</tr>
<tr>
<td>10</td>
<td><code>|</code></td>
</tr>
<tr>
<td>11</td>
<td><code>&amp;&amp;</code></td>
</tr>
<tr>
<td>12</td>
<td><code>||</code></td>
</tr>
<tr>
<td>13</td>
<td><code>?:</code></td>
</tr>
<tr>
<td>14</td>
<td><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code>、<code>&amp;=</code></td>
</tr>
</tbody>
</table>
<h2> equals() 和 ==</h2>
<ul>
<li><code>==</code></li>
</ul>
<p>基本数据类型用 <code>==</code> 比较的是值，而 用于引用数据类型时判断两个对象的内存地址是否相等，即两对象是否是同一个对象；</p>
<blockquote>
<p>本质来讲，由于 Java 中只有值传递，所以不管是基本数据类型还是引用数据类型，比较的其实都是值，只不过引用类型变量存的值是对象的地址；</p>
</blockquote>
<ul>
<li><code>equals()</code></li>
</ul>
<p>作用也是判断两个对象是否相等，但是 <strong>不能用于基本数据类型变量的比较</strong>。存在于 <code>Object()</code> 类中，所以所有类都具有 <code>equals()</code> 方法存在两种使用情况：</p>
<ol>
<li><strong>类未覆盖 <code>equals()</code> 方法</strong>：此时通过 <code>equals()</code> 比较该类的两个对象时，等价于 <code>==</code> 比较这两个对象，默认使用  <code>Object</code> 类中的 <code>equals()</code> 方法；</li>
<li><strong>类覆盖了 <code>equals()</code> 方法</strong>：一旦覆盖了该方法，则用来比较两个对象的内容是否相等，如我们常用的 <code>String、BitSet、Data、File</code> 就覆盖了 <code>equals()</code> 方法；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>好了，以上就是有关操作符系列的相关知识点了。老规矩，如果您觉得对您有所帮助，那就点个赞吧 🥳.</p>
<p>对于文中所遗漏或者存在错误的知识点，也欢迎大家评论指正呀！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/ez4jam1n/ez4jam1n@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>流程控制</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220707-control-process.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220707-control-process.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">流程控制</source>
      <description>作者：benjamin 博客：studio 原文：https://mp.weixin.qq.com/s/3WU5l37DpPkR6o7CnFiStA 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Thu, 07 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/3WU5l37DpPkR6o7CnFiStA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/3WU5l37DpPkR6o7CnFiStA</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>我们在 <a href="https://mp.weixin.qq.com/s/49KRDz8bpcGdPlU15OJD0g" target="_blank" rel="noopener noreferrer">上一篇文章</a> 中讲了各种操作符的使用技巧，接上一篇文章中的内容，本次文章主要将流程控制，文章主要内容安排如下：</p>
<ul>
<li><strong>输入输出</strong></li>
<li><strong>顺序结构</strong></li>
<li><strong>分支结构</strong></li>
<li><strong>循环结构</strong></li>
</ul>
<h2> 输入输出</h2>
<p>之前的学习中，我们会发现都是通过定义变量并赋初值的方式来得到一个实现固定好值得变量。加入我们现在不想再以这种方式获取变量值，而想要直接控制变量值，又该怎么做呢？这就涉及到 Java 中的输入输出相关知识了，以下就先来看看，如何实现从控制台输入，并从控制台输出吧。</p>
<h3> 输入</h3>
<p>先来看一个实例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>要实现从控制台输入并读取到我们的程序中时，需要借助 <code>Scanner</code> 类，它属于标准输入流，其步骤总结如下：</p>
<ol>
<li>首先，需要导入 <code>Scanner</code> 类。即 <code>import java.util.Scanner</code>，其中 <code>import</code> 表示导入某个类，并且只能放在程序的开头。</li>
<li>然后创建 <code>Scanner</code> 对象。这里需要注意，创建时需要传入 <code>System.in</code>，表示标准输入流，与之对应的 <code>System.out</code> 则代表标准输出流。</li>
<li>最后就是读取用户输入即可。这里读取时，调用不同的方法 <code>Scanner</code> 会自动转换数据类型，不用我们去进行手动转换。</li>
</ol>
<p>从控制台获取不同类型的输入，其常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>boolean</code></td>
<td><code>hasNext()</code></td>
<td>如果还有输入，则返回 <code>true</code>，否则返回 <code>false</code></td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>next()</code></td>
<td>返回输入的字符串，以空格为分隔符</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>nextLine()</code></td>
<td>返回输入的字符串，以换行为分隔符</td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>nextInt()</code></td>
<td>输入整型数</td>
</tr>
<tr>
<td><code>long</code></td>
<td><code>nextLong()</code></td>
<td>输入长整型数</td>
</tr>
<tr>
<td><code>float</code></td>
<td><code>nextFloat()</code></td>
<td>输入单精度数</td>
</tr>
<tr>
<td><code>double</code></td>
<td><code>nextDouble</code></td>
<td>输入双精度数</td>
</tr>
</tbody>
</table>
<p>这里值得注意的是 <code>next()</code> 和 <code>nextLine</code> 两个方法，虽然他们的作用都是用于获取输入的 <code>String</code> 类型的内容，但是它们具体的处理机制又会有所区别。
针对 <code>next()</code> 而言，它会自动消除有效字符前的空格，从而只返回输入的字符，得到的字符串都不会带有空格。也就是说，当使用 <code>next()</code> 时，如果遇到空格，此时就会停止录入，只录入空格前的内容，而空格后的内容则会保留到缓冲区。除了空格之外，<code>next()</code> 也会对制表符和换行符采用同样的处理方式。
而对 <code>nextLine()</code> 来说，它会返回换行符之前的所有内容，甚至是带空格的字符串。</p>
<p>因此，在使用时一定要注意它们之间的区别，合理搭配使用，从而得到自己想要的结果。</p>
<h3> 输出</h3>
<p>其实从一开始的 <code>hello world</code> 到目前的代码中，我们已经接触过输出了，也就是我们的 <code>System.out.println()</code>。</p>
<p>其中 <code>println</code> 表示输出并换行，如果我们不想换行，则使用 <code>print</code> 就可以了。</p>
<p>通过上述方式所输出的内容都是挤在一起的，十分不方便我们阅读。为了更加清晰的打印出我们所需要的结果，可以使用格式化输出。</p>
<p>要使用格式化输出，需要使用 <code>System.out.printf()</code> 或者 <code>System.out.format()</code> 搭配占位符，然后在后面的参数格式化成指定格式即可，两者达成的效果是等价的。常见的占位符如下：</p>
<table>
<thead>
<tr>
<th>占位符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>%d</code></td>
<td>格式化输出整数</td>
</tr>
<tr>
<td><code>%f</code></td>
<td>格式化输出浮点数</td>
</tr>
<tr>
<td><code>%s</code></td>
<td>格式化输出字符串</td>
</tr>
<tr>
<td><code>%x</code></td>
<td>格式化输出十六进制整数</td>
</tr>
<tr>
<td><code>%e</code></td>
<td>格式化输出科学计数法表示的浮点数</td>
</tr>
</tbody>
</table>
<p>此外，我们还可以使用各种转义字符来使得我们的输出更为简洁，常见的转义字符及意义如下表所示。</p>
<table>
<thead>
<tr>
<th>转义字符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>\n</code></td>
<td>换行</td>
</tr>
<tr>
<td><code>\t</code></td>
<td>水平制表符</td>
</tr>
<tr>
<td><code>\\</code></td>
<td>表示一个反斜杠</td>
</tr>
<tr>
<td><code>\'</code></td>
<td>表示一个单引号</td>
</tr>
<tr>
<td><code>\"</code></td>
<td>表示一个双引号</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 顺序结构</h2>
<p></p>
<p>顺序结构如上图所示，它可以说是最简单的，只需要按照解决问题的顺序写出对应的语句即可，其执行顺序是自上而下，依次执行的。就类似于我们求解一道数学题，你得根据题意一步一步来，直至解出最后的答案。</p>
<h2> 分支结构</h2>
<p>
上图是分支结构，顺序结构虽然能够处理计算、输出等问题，当遇到需要判断选择时，顺序结构已经不能很好的解决了，此时就需要使用分支结构。
Java 中，分支结构相关的语句主要涉及到 <code>if</code> 和 <code>switch</code> 相关，下面就分别来看一下。</p>
<h3> if</h3>
<ol>
<li><strong>单次判断</strong></li>
</ol>
<p>当我们只进行一次判断时，可以使用一个 <code>if</code> 语句包含一个条件表达式，其语法格式如下；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其执行逻辑如下图所示，如果条件表达式的值为 <code>true</code>，则执行 <code>if</code> 语句块中的执行语句，否则就执行 <code>if</code> 语句块后边的代码；</p>
<p></p>
<ol start="2">
<li><strong>多次判断</strong></li>
</ol>
<p>要进行多次判断时，可以使用 <code>if…else</code> 的形式，其语法格式如下；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其执行逻辑如下图所示，如果条件表达式 1 为 <code>true</code>，则执行执行语句 1，否则接着判断条件表达式 2，若为 <code>true</code>，则执行执行语句 2，以此类推，直到完成最后一个条件表达式的判断。</p>
<p></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> switch</h3>
<p>当我们需要使用 <code>if</code> 进行判断时，难免显得有些繁琐。此时，我们就可以使用 <code>switch</code> 来进行替代，通过判断一个变量所属范围，从而划分出不同的分支。</p>
<p><code>switch</code> 分支的语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过判断表达式的值，然后执行对应值下的执行语句，而 <code>default</code> 下的执行语句表示如果 <code>switch</code> 表达式未匹配到对应的值时所执行的语句；</p>
<p>一个 <code>switch</code> 的实例如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上面的形式之外，也可以使用以下形式：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在使用 <code>switch</code> 分支语法时，需要遵循一定的规则：</p>
<ol>
<li><code>switch</code> 中的变量类型可以是：<code>byte</code>、<code>short</code>、<code>int</code>、<code>char</code>、<code>String</code> （自 JDK 1.7 开始）；</li>
<li><code>switch</code> 语句根据表达式的结果跳转到对应的 <code>case</code> 结果，然后执行其后跟着的语句，直到遇到 <code>break</code> 才结束执行；</li>
<li>默认情况下，一般都会跟着一个 <code>default</code> 的分支，用于未匹配到对应情况时的执行情况；</li>
</ol>
<h2> 循环结构</h2>
<p>
上图为循环结构示意，让程序中遇到需要反复执行某一个功能时，我们发现顺序结构以及分支结构实现起来都太过于繁琐，于是又提出了循环结构的相关概念。
通过循环结构，我们就可以通过判断循环语句，然后判断是否进入循环体。Java 中，循环结构主要涉及的语句有 <code>while</code>、<code>for</code>、<code>continue</code>、<code>break</code> 等。</p>
<h3> while</h3>
<p>假设我们现在有一个题目，需要你计算 <code>1 + 2 + 3 + …… + 50</code> 的结果，你会怎么办呢？</p>
<p>这么写么：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这么写就太麻烦了，计算到 50 的值就已经很多了，假如有 1000,10000 甚至更大，那我们岂不是写个好久才能写完。这个时候我们就得找找有没有简单的方法，能够只写几句就实现相同的效果呢？答案是：Yes，这就是我们这一小节将要讲到的循环。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>从上面的实例，利用 <code>while</code> 循环，我们就能轻易达成循环的效果。其语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要表达式为 <code>true</code>，就会不断循环执行其中的执行语句，直到表达式为 <code>false</code>，此时便跳出循环，不再执行其中的执行语句。</p>
<p>除开上面的形式之外，还有另一种 <code>while</code> 形式：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两者的最大区别在于：<code>do……while</code> 无论 <code>表达式</code> 是否为 <code>true</code>，都至少会执行一次。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>观察以上两个实例，在 <code>while</code> 程序中，我们定义 <code>num = 10</code>，然后假设 <code>num &lt;= 9</code> 时就进入循环体，而 <span class="katex"><span class="katex-mathml"></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6835em;vertical-align:-0.0391em;"></span><span class="mord">10</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9</span></span></span></span>，所以不进入循环体，直接打印 <code>sum</code> 的值为 <code>0</code>。而在 <code>do…while</code> 程序中，我们同样定义 <code>num = 10</code>，然后假设 <code>num &lt; 10</code> 时继续循环，很明显不满足该情况，理应跳出循环，打印出 <code>sum</code> 的值为 <code>10</code>，说明此时还是进行了一次循环。</p>
<p>因此，当我们需要在 <code>while</code> 和 <code>do……while</code> 之间做出选择时，如果我们最少需要进行一次循环，则选择 <code>do……while</code>，其他情况下选用两者都可以。</p>
<h3> for</h3>
<ul>
<li><strong>普通 for 循环</strong></li>
</ul>
<p>除开 <code>while</code> 和 <code>do……while</code> 之外，我们还有 <code>for</code> 循环来达成同样的结果，只是表达方法不一样。同样以上面计算 <code>1 + 2 + …… + 50</code> 为例，可以写成如下的形式：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p><code>for</code> 循环的语法形式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>for</code> 循环的执行步骤如下：</p>
<ol>
<li>首先执行初始条件，可以声明一种类型，但可以初始化一个或多个循环控制变量，甚至可以放空。</li>
<li>接着判断终止条件，如果为 <code>true</code>，则进入循环体执行循环语句；如果为 <code>false</code>，则终止循环，执行循环体后面的语句。</li>
<li>一次循环完成后，执行更新语句来更新循环控制变量。</li>
<li>最后再次判断终止条件，循环以上三个步骤。</li>
</ol>
<p><code>for</code> 和 <code>while</code> 最大的区别就在于 <code>for</code> 循环一般都是事先知道需要循环的次数的，而 <code>while</code> 循环则不需要。</p>
<ul>
<li><strong>增强 for 循环</strong></li>
</ul>
<p>自 Java 5 后，引入了一种增强型 <code>for</code> 循环，主要用于数字遍历，其语法格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>其中，声明语句一般是声明一个同数组数据类型相同的局部变量，而表达式则是要访问的数组名或者返回值是数组的方法。</p>
<h3> for 和 while 的区别</h3>
<p>经过上面的学习，我们可以发现，基本能用 <code>for</code> 循环的，都能将其改写成 <code>while</code> 循环。而使用 <code>while</code> 循环的，也可以在一定程度上改写成 <code>for</code> 循环。两者的运行规则都是一样的，那针对什么场景该使用 <code>for</code>，什么场景又该使用 <code>while</code> 呢？</p>
<p>通常，如果我们知道循环的次数或者循环的范围，那么我们优先使用 <code>for</code> 循环。如果不知道循环的次数和范围，而只知道循环的结束条件，那么此时优先使用 <code>while</code> 循环。</p>
<h3> continue &amp; break</h3>
<h3> break</h3>
<p>主要用在循环语句或者 <code>switch</code> 语句中，表示跳出最里层的循环，然后继续执行该循环下的语句。</p>
<p><code>break</code> 在 <code>switch</code> 语句中的用法已经见识过了，我们就来看看它在循环中的应用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>观察结果可知，当 <code>i == 5</code> 时，我们执行了 <code>break</code> 语句，此时就直接跳出了 <code>for</code> 循环，而不再进行下一次的循环。</p>
<h3> continue</h3>
<p><code>continue</code> 也同样是应用在循环控制结构中，主要是让程序跳出当次循环，进而进入下一次循环的迭代。</p>
<p>在 <code>for</code> 循环中，执行 <code>continue</code> 语句后，直接跳转到更新语句，而不再执行 <code>continue</code> 后的语句。而在 <code>while</code> 或 <code>do……while</code> 循环中，执行 <code>continue</code> 语句后，直接跳转到表达式的判断。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>观察上述结果可知，当 <code>i == 5</code> 时，我们执行了 <code>continue</code> 语句，此时便跳出了当次循环，不再进行后边的打印语句，然后继续下一次的循环，所以最终打印的结果没有 5.</p>
<h2> 总结</h2>
<p>今天的内容到此就结束了，老规矩，如果大家觉得有用的话，就给个点赞关注吧！</p>
<p>其次就是对于文中遗漏或者存在欠缺的知识点，还请大家不吝赐教，在评论区指出来！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/ez4jam1n/ez4jam1n@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>面向对象的 3、5 知识点</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220709-oop-1.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220709-oop-1.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">面向对象的 3、5 知识点</source>
      <description>作者：benjamin 博客：studio 原文：https://mp.weixin.qq.com/s/Z4F7tsjLkPbTGy4_gJPQTw 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Sat, 09 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/Z4F7tsjLkPbTGy4_gJPQTw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/Z4F7tsjLkPbTGy4_gJPQTw</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>前面已经讲了 Java 的一些环境搭建、IDE 使用、变量及数据类型、操作符、控制流程以及数组操作，今天就来看看 Java 里边的一个核心思想 - <strong>面向对象编程</strong>。</p>
<h2> 什么是面向对象？</h2>
<p>所谓面向对象，是一种通过对象的方式，将现实中的事物映射到计算机模型的一种编程方法。</p>
<p>对象的含义指的是具体的某一个事物，即我们在现实生活中能够看得见摸得着的。在面向对象程序设计中，对象指的是计算机系统中的某一个成分，主要有两层含义。一个是指 <strong>数据</strong>，另一个则是 <strong>动作</strong>。即对象是两者的结合体，通过对象不仅能够进行操作，还能对操作的结果进行记录。</p>
<p>在这之前，另一种编程方式是 <strong>面向过程</strong>，用一个具体的例子来讲，可以描述成下面这样：</p>
<blockquote>
<p>假如有一天你很想吃酸菜鱼，那么你该怎么办呢？下面就以面向对象和面向过程给你两个选择，让你决定来选哪一个！</p>
<ol>
<li><strong>面向对象</strong>：打开手机，打开外卖软件，搜索酸菜鱼，然后下单，等着外卖送到家就行！</li>
<li><strong>面向过程</strong>：先去买菜，鱼、酸菜、调料……，然后回家杀鱼、切酸菜、切调料……，再接着开始炒，最后做好盛到盘子里！</li>
</ol>
</blockquote>
<p>对比可以发现两者的优缺点：</p>
<ul>
<li><strong>面向过程</strong>
<ul>
<li><strong>优点</strong>：性能好；以例子来说自己做比起点外卖，经济又实惠，还吃得放心。</li>
<li><strong>缺点</strong>：不易维护、不易复用、不易扩展；以例子来讲，要是我们自己做，临时又想吃其他的菜，又得跑去买材料啥的，麻烦！但外卖就不一样了，直接打开手机再点就是。</li>
</ul>
</li>
<li><strong>面向对象</strong>
<ul>
<li><strong>优点</strong>：易维护、易复用、易扩展，也就是面向过程的缺点。</li>
<li><strong>缺点</strong>：性能较差；比起自己做，点外卖成本啥的可能就比较高了。</li>
</ul>
</li>
</ul>
<h2> 面向对象的 5 大原则</h2>
<ol>
<li><strong>单一职责原则 SRP</strong></li>
</ol>
<p>又称为单一功能原则，它规定了一个类应该只有一个发生变化的原因。也就是说类的功能要单一，不能太复杂。</p>
<p>举个例子来说，学校里边有学生、老师、管理员，如果将这些人统一封装在一个类中，那么到时候难以对他们的身份作区分，那么此时按照 SRP 原则，我们就可以将他们各自分为一个类，从而方便管理。</p>
<ol start="2">
<li><strong>开放封闭原则 OCP</strong></li>
</ol>
<p>指一个模块对于扩展是开放的，但对于修改则是封闭的。也就是说可以增加功能，但是不能修改功能。</p>
<p>也就是说，一个类可以进行扩展（添加属性或者方法），但是对于类中已有的属性和方法，不要修改它们。</p>
<ol start="3">
<li><strong>里氏替换原则 LSP</strong></li>
</ol>
<p>指子类能够替换父类出现在父类能够出现的任何地方。</p>
<p>假设有两个类 <code>Father</code> 和 <code>Child</code>，其中 <code>Father</code> 是 <code>Child</code> 的父类，那么在进行调用时，<code>Father</code> 类可以引用 <code>Child</code> 类，反之却不行。</p>
<ol start="4">
<li><strong>依赖倒置原则 DIP</strong></li>
</ol>
<p>高层次的模块不应该依赖于低层次的模块，而应该都依赖于抽象。抽象不应该依赖于具体实现，但具体实现应该依赖于抽象。</p>
<p>也就是说，我们可以将同类事物的共性抽取出来，将其作为这一类事物的“高层次模块”，然后由“低层次模块”来继承或者实现“高层次模块”。</p>
<ol start="5">
<li><strong>接口分离原则 ISP</strong></li>
</ol>
<p>指设计时可以采用多个与特定客户类相关的接口，而不是采用一个通用的接口。</p>
<h2> 面向对象的 3 大特性</h2>
<h3> 封装</h3>
<p>利用抽象数据类型把数据和方法封装在一起，然后共同构成一个相互关联的对象。从而隐藏对象的属性和实现细节，只对外提供访问的接口，提高代码的复用性和安全性。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于以上的 <code>Hero</code> 类，它封装了 <code>name</code> 、<code>skill</code> 等属性，如果我们想要获取 <code>Hero</code> 的 <code>name</code> 和 <code>skill</code> 属性值，那么就只能通过 <code>get()</code> 方法来获取，而如果我们想要改变这两个属性值，也只能通过 <code>set()</code> 方法来进行设置。</p>
<p>封装时，需要注意其原则，对象代码表什么，就封装对应的数据，并提供数据所对应的行为。</p>
<h3> 继承</h3>
<p>定义父类之后，子类可以从基础类进行继承，这样一来，子类就可以获得父类中非 <code>private</code> 的属性和方法，从而提高了代码的复用性。</p>
<p>继承实现了 <code>IS-A</code> 关系，假设我们现在有一个类 <code>Shooter</code> 继承自 <code>Hero</code>，那么此时我们就可以定义一个父类引用，然后将该引用指向它的子类对象。</p>
<p><code>Java</code> 中提供了一个关键字 <code>extends</code>，从而让一个类和另一个类建立起继承关系，其格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，被继承的类叫做父类（也叫超类或基类），如上述代码中的 <code>Hero</code>，另外一个类则叫做子类（也叫派生类），比如上面的 <code>Shooter</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是要注意一点：<strong>在 Java 中，类只能单继承</strong>。</p>
<h3> 多态</h3>
<p>所谓多态，就是同类型的对象，表现出的不同形态，表现形式为：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>指的是父类或者接口定义的引用变量可以指向子类或具体实现类的实例对象，提高程序的扩展性。</p>
<p>多态又可以分为编译时多态和运行时多态，其中，编译时多态是指方法的重载，而运行时多态则指的是程序中定义的对象引用所指向的具体类型在运行期间才能确定下来。</p>
<p>要确定一个多态是编译时还是运行时多态，可以通过以下三个条件来区分：</p>
<ul>
<li><strong>继承</strong></li>
<li><strong>覆盖（重写）</strong></li>
<li><strong>向上转型</strong></li>
</ul>
<p>如果同时满足以上三个条件，那么此时多态是运行时多态。</p>
<p>多态中，调用成员变量和成员方法时，遵循以下原则。</p>
<ol>
<li><strong>调用成员变量：编译看左边，运行也看左边</strong>：指 <code>javac</code>&nbsp; 编译时，会看左边的父类中是否有该变量，如果有则编译成功，如果没有就会编译失败。而用 <code>java</code>&nbsp; 运行代码时，实际获取的成员变量是父类中的值。</li>
<li><strong>调用成员方法：编译看左边，运行看右边</strong>：指 <code>javac</code> 编译时，会看左边的父类中是否有该方法，如果有则编译成功，如果没有就会编译失败。而用 <code>java</code> 运行代码时，实际调用的是子类中的方法。</li>
</ol>
<h2> 总结</h2>
<p>以上就是关于面向对象编程思想的一些简单知识介绍了，主要讲了面向对象的概念，面向对象的 3 大特性以及面向对象的 5 大原则。如果觉得本文对你有所帮助，那就来个一键三连再走吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>类的相关知识</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220710-oop-2.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220710-oop-2.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">类的相关知识</source>
      <description>作者：benjamin 博客：studio 原文：https://mp.weixin.qq.com/s/1BPFnyNuC3fdYBVxP7J3VA 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Sun, 10 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/1BPFnyNuC3fdYBVxP7J3VA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/1BPFnyNuC3fdYBVxP7J3VA</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>学习了面向对象编程的思想，今天就来看看面向对象编程思想在 Java 中的体现 - 类。以及有关类的相关知识，比如属性、方法、引用等。</p>
<h2> 类与对象</h2>
<p>以我们日常生活为例，我们现在很多人都养宠物，而宠物 <strong>都有一些共同状态</strong>，比如名字、毛色、年龄…… 这样一来我们就可以设计一个叫做<strong>类</strong>的东西，用来 <strong>代表宠物</strong> 这一类事物。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了这个类之后，它就相当于我们的一个模板，根据这个模板我们就能够创建一个个具体的宠物，而这些宠物，就叫做 <strong>对象</strong>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结起来，类就是对对象所共有特征的描述，而对象则是真实存在的具体实例。在 Java 中，必须先设计类，然后才能创建并使用对象。</p>
<h2> 属性</h2>
<p>每个宠物都有自己的名字、毛色和年龄等一系列状态，而这些状态就叫做一个类的<strong>属性</strong>。而属性的类型既可以是基本类型（比如上述例子中的 <code>int</code>），也可以是引用类型（上述例子中的 <code>String</code>）。而在 Java 语言中，这些属性就叫做成员变量。成员变量的命名虽然没有强制规定，但是一般都是有一套大家通用的命名方法，即：</p>
<blockquote>
<p>若成员变量是一个单词组成，那么一般都是小写。</p>
<p>若成员变量是多个单词组成，那么则采用驼峰法。</p>
<p>关于更多的命名规定，推荐参考阿里巴巴出品的 《Java 开发手册》，下载地址：<a href="https://github.com/ez4jam1n/ebooks" target="_blank" rel="noopener noreferrer">https://github.com/ez4jam1n/ebooks</a></p>
</blockquote>
<p>成员变量的完整定义格式语如下，一般来说无需指定初始化值，它是存在默认值的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>数据类型</th>
<th>明细</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>基本类型</td>
<td><code>byte</code>、<code>short</code>、<code>char</code>、<code>int</code>、<code>long</code></td>
<td>0</td>
</tr>
<tr>
<td>基本类型</td>
<td><code>float</code>、<code>double</code></td>
<td>0.0</td>
</tr>
<tr>
<td>基本类型</td>
<td><code>boolean</code></td>
<td><code>false</code></td>
</tr>
<tr>
<td>引用类型</td>
<td>类、接口、数组、<code>String</code></td>
<td><code>null</code></td>
</tr>
</tbody>
</table>
<p>要访问属性，通常需要先创建一个对象，然后通过<strong>对象名.成员变量</strong>的方式来进行访问。</p>
<h2> 方法</h2>
<h3> 方法的定义</h3>
<p>而除开属性之后，每个对象还能够有许多其他的功能，就像宠物都能吃东西、会叫……，那么这些他们能够做的事情，在类里边就可以用 <strong>方法</strong> 来进行表示。所谓方法就是程序中最小的执行单元，一般用于封装重复且具有独立功能的代码，从而提高代码的复用性和可维护性。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法的定义格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，修饰符主要有以下 4 种不同的访问权限：</p>
<ol>
<li><code>default</code>：默认什么都不写的情况，表示在同一个包内可见，主要用于修饰类、接口、变量、方法。</li>
<li><code>private</code>：表示在同一类中可见，常用于修饰变量和方法，但要注意，它不能用来修饰类（外部类）。</li>
<li><code>protected</code>：表示对同一个包内的类和所有子类可见，常用于修饰变量、方法，同样的，它也不能修饰类（外部类）。</li>
<li><code>public</code>：表示对所有类可见，常用于修饰类、接口、变量、方法。</li>
</ol>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>当前类</th>
<th>同一包内</th>
<th>子类（同一包）</th>
<th>子类（不同包）</th>
<th>其他包</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>private</code></td>
<td>✅</td>
<td>❎</td>
<td>❎</td>
<td>❎</td>
<td>❎</td>
</tr>
<tr>
<td><code>default</code></td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❎</td>
<td>❎</td>
</tr>
<tr>
<td><code>protected</code></td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>❎</td>
</tr>
<tr>
<td><code>public</code></td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
<td>✅</td>
</tr>
</tbody>
</table>
<p>同样的，和属性一样，如果要调用一个方法，那么也需要先创建一个 Java 对象，然后通过**对象名.方法名(……)**的形式调用。</p>
<h3> 方法的分类</h3>
<p>而对于方法，也有需要注意的几点：</p>
<ol>
<li>方法是可以有返回值的，如果要返回对应值，则其返回值的类型要与返回值相对于，对于不需要返回值的方法，则将其返回类型设置为 <code>void</code>；</li>
<li>方法是可以有参数的，我们上述例子的方法中都是不带参数的，但如果我们有需要，就可以加上自己需要的参数，但此时注意要带上参数的类型；</li>
</ol>
<p>总结起来，可以分为如下四种方法：</p>
<ol>
<li><strong>无参无返回值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>无参有返回值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><strong>有参无返回值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li><strong>有参有返回值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而对于方法命名的方式，也是有一定讲究的。因为一般而言方法都是一个类的动作行为，所以 <strong>一般都是以动词开头，而如果有多个单词组合，则除开第一个单词全部小写之外，后面每个单词的第一个字母都要使用大写</strong>。</p>
<p>注意到这里有个关键字 <code>return</code>，它主要用于设置方法的返回。</p>
<p>如果一个方法没有返回值，那么此时可以省略不写，一旦书写，那么就代表着该方法结束。比如，以下这个方法的两种书写方式最终效果都是一样的。</p>
<ul>
<li>带 <code>return</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>不带 <code>return</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而如果一个方法有返回值，那么此时 <code>return</code> 就必须写，它表示结束方法并返回结果。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 重写与重载</h3>
<p>此外，既然提到了方法，那肯定少不了重写和重载了，下面就来看看重写和重载之间的区别。</p>
<ol>
<li><strong>重写</strong></li>
</ol>
<p>所谓重写，其实就是子类对父类中允许访问的方法的实现过程进行加工重新编写，是面向对象编程中多态性的体现，通常发生在父类和子类之间。</p>
<p>重写时，方法的参数和返回值都不能改变。通过重写，子类可以根据自己的需要，从而去重新定义区别于父类的行为。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>重载</strong></li>
</ol>
<p>而重载则是让类以统一的方式来处理不同类型数据的一种方式。一个类中存在多个同名方法，但他们具有不同的参数个数或者类型。</p>
<p>简单来说，就是在 Java 的一个类中，我们可以创建多个相同名字的方法，但是这些方法之间的参数和返回值有所不同。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 参数传递机制</h3>
<p>了解参数传递前，先来了解下形参和实参的相关概念。</p>
<p><strong>实参</strong>，指在调用时所传递给方法的参数，可以是常量、变量、表达式、函数等。无论实参是何种类型的值，在进行方法调用时，都必须有确定的值，从而将这些值传递给形参。</p>
<p><strong>形参</strong>，在方法定义时，<code>()</code> 中所声明的参数，目的是用来接收调用方法时传入的参数。不是实际存在的变量，所以又叫做虚拟变量。</p>
<p>Java 中，方法的参数传递都是通过<strong>值传递</strong>的机制来实现的。所谓值传递，就是在传输实参给方法的形参时，并非传输的是实参变量本身，而是通过传输实参变量中所存储的值。</p>
<p>但是要注意区分的是，Java 中的<strong>基本数据类型的参数传输的是存储的数据值</strong>，而<strong>引用类型的参数传输的是存储的地址值</strong>。</p>
<h2> 构造方法</h2>
<p>上面我们说了实例（也就是对象）和属性，那么当我们创建一个实例的时候，通常我们想要把它的属性也给它设置好。为了实现这一功能，这时候我们可以添加方法，从而达到这一目的，以上述设置宠物的年龄为例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以发现通过上述调用方法的方式是可以完成这一目的的，但假设我们需要设置的属性很多，此时要全部设置属性值时就需要调用许多次 <code>setter</code> 方法，一旦遗漏一个，则实例内部状态就紊乱了。那我们就想了，有没有一种简单点的方法，能够让我们在创建实例对象的同时就把内部属性初始化了呢？</p>
<p>答案是：Yes！🎉🎉🎉</p>
<p>这时候我们就可以用到一类特殊的方法 - <strong>构造方法</strong>，所谓构造方法，就是定义在类中可以用来初始化一个类的对象，并返回对象的地址，以下就来看看这个构造方法的特殊之处。构造方法的格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实在上面我们创建实例的时候就已经调用了构造方法了，只不过它是没有带任何参数的构造方法。以上述动物类 <code>Pet</code> 为实例，我们来看看如何编写它的构造方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上我们只是给出了无参的构造方法和带了所有属性的构造方法，除了上面的两个构造方法之外，我们还可以根据需要创建带有部分属性的构造方法。</p>
<p>其中，无参构造方法（默认存在）在初始化对象时，成员变量的数据均采用的默认值，而有参构造方法在初始化对象时，同时可以接收参数来给对象赋值。</p>
<p>经过对比可以发现，相比于普通的方法，构造方法有着明显的特点：</p>
<ol>
<li><strong>没有返回值</strong>：是的，无论是带参还是不带参的构造函数，它们都是没有返回值的，而它也是 <strong>每个类默认的构造方法</strong>。</li>
<li><strong>方法名同类名一样</strong>：必须确保构造方法的名字和类名一致，否则它就不是构造方法了。</li>
</ol>
<p>有了构造方法之后，我们创建实例时就可以直接给它初始化了，而不用再去麻烦地调用各个 <code>setter</code> 方法来初始化实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🎈 Tips：对于实例的属性值，在未经构造方法初始化时，各数据类型都有默认值，整型默认值为 <code>0</code>，浮点型默认值为 <code>0.0</code>，布尔类型默认值为 <code>false</code>，引用类型默认值为 <code>null</code>。</p>
<h2> 引用</h2>
<p>既然知道了什么是面向对象以及面向对象中的一些关键知识点如对象、属性、方法的概念，那我们就趁热来看看啥是引用。</p>
<p>所谓引用，其实在之前学习的时候就已经涉及到了。你是否还记得 <code>String</code> 这个特殊的数据类型，其实在我们创建一个 <code>String</code> 对象时，也就创建了一个引用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 <code>str</code> 既是一个变量，也是一个引用，指向一个值为 <code>"benjamin"</code> 的 <code>String</code> 对象，后续如果我们要访问这个 <code>String</code> 对象，就需要使用 <code>str</code> 这个引用来代表它。</p>
<p></p>
<p>以上我们说的是一个引用指向一个对象，但是我们也可以用多个引用指向同一个对象。就好比你家买了一辆车，不仅你可以开，你老婆也可以开，你爸妈也可以开。而这时候的车就好比一个“对象”，而使用它的人就是多个“引用”。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> JavaBean</h2>
<p><code>JavaBean</code> 也可以称为实体类，其对象可以用在程序中封装数据。对于一个标准的 <code>JavaBean</code>，定义时需要满足以下要求：</p>
<ul>
<li>成员变量均使用 <code>private</code> 修饰。</li>
<li>提供成员变量所对应的 <code>getXxx()/setXxx()</code> 方法。</li>
<li>必须提供一个标准的无参构造器，而有参构造器则是可写可不写。</li>
</ul>
<h2> 总结</h2>
<p>今天的内容就到此结束了，主要对面向对象中的类、对象、属性、方法、构造方法以及引用做了介绍，关于更多面向对象的知识，我们下一篇文章再见！</p>
]]></content:encoded>
    </item>
    <item>
      <title>包和 jar 文件的创建</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220711-oop-3.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220711-oop-3.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">包和 jar 文件的创建</source>
      <description>作者：benjamin 博客：studio 原文：https://mp.weixin.qq.com/s/l4O4bhDMgHamQ5DVPcqUYA 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Mon, 11 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/l4O4bhDMgHamQ5DVPcqUYA" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/l4O4bhDMgHamQ5DVPcqUYA</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>在之前的文章中，讲到了面向的 3 大特性（<strong>封装、继承、多态</strong>）和面向对象设计的 5 大原则（SRP、OCP、LSP、DIP、ISP）。此外，我们还讲了如何创建一个类，并且在创建类后如何构造一个对象。然后还介绍了类中的属性和方法，并对构造方法和引用也做了简单的讲解。</p>
<p>有了上面的基础之后，今天我们来继续学习面向对象的相关知识，主要内容预告如下：</p>
<ul>
<li><strong>包</strong></li>
<li><strong>注释</strong></li>
<li><strong>jar 文件的创建</strong></li>
</ul>
<h2> 包</h2>
<p>假设现在有这么一种情况，诸葛亮、周瑜、曹操共同开发一款程序。其中，周瑜和曹操均在自己代码模块中写了一个 <code>PublicUtil</code> 类，现在诸葛亮要调用周瑜和曹操模块中代码，需要同时用到他们中的 <code>PublicUtil</code> 类，这时候就犯难了，诸葛亮在他的代码中使用 <code>PublicUtil</code> 类时，该怎么区分是调用周瑜的，还是调用的曹操的呢？</p>
<p>针对这个问题，开发 Java 的前辈们当然也想到了。于是，他们在 Java 中定义了一种名字空间，也就是我们今天要讲的包：<code>package</code>。通过使用包机制，就十分容易区别类名的命名空间了。</p>
<p>一般包名的规则为：公司域名反写 + 包的作用，而且全部都要用英文小写。</p>
<p>假设曹操的 <code>PublicUtil</code> 类代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>周瑜的 <code>PublicUtil</code> 类代码如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，如果诸葛亮要同时使用他们俩代码中的 <code>PublicUtil</code> 类，此时就可以通过引入他们俩的包，然后通过使用 <code>包名.类名</code> 的引用方式来进行区分即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码中的 <code>import</code> 你可能也在其他代码中见到过，但你不知道啥作用。其实它就是为了包的使用而生，如果我要使用另一个人的包，那该怎么做呢？其实很简单，只需要在程序中使用关键字 <code>import</code> 即可完成包的导入。</p>
<p>通过使用包，可以达到以下的作用：</p>
<ol>
<li>将功能类似或或相关的类以及接口组织放在同一个包中，方便类的查找与使用。</li>
<li>包也像文件夹一样，采用了树形目录的存储方式。同一个包中的类名不同，不同包中的类名可以相同。当同时调用两个不同包中的同一类名的类时，通过加上完整的包名就可以加以区分，从而避免类名冲突。</li>
<li>同时包也限定了访问权限，只有拥有包访问权限的类才能间接去访问包中的类。</li>
</ol>
<h2> 注释</h2>
<p>所谓注释，就是写在程序里边对代码进行结束说明的文字，既方便自己也方便他人查看，更快理解程序含义。而且注释是不影响程序的执行的，在我们对 Java 源代码进行编译后，字节码文件中不含源代码中的注释内容。</p>
<p>在 Java 中，通常支持三种注释方式，它们分别是：</p>
<ul>
<li><code>//</code>：单行注释</li>
<li><code>/* */</code>：多行注释</li>
<li><code>/** */</code>：文档注释</li>
</ul>
<h3> 单行注释</h3>
<p>单行注释是以双斜杠 <code>//</code> 来标识，表示只注释当前行内容，一般用在需要注释的内容较少的地方，以下就是一个单行注释的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 多行注释</h3>
<p>通常我们把要注释的内容放在 <code>/*</code> 和 <code>*/</code> 之间，表示在两者之间的内容都是我们的注释内容，以下是一个多行注释的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 文档注释</h3>
<p>文档注释和多行注释很像，它是将我们所需要注释的内容包含在 <code>/**</code> 和 <code>*/</code> 之间。而文档注释和其他两种注释最大的区别就在于：我们可以利用 <code>javadoc</code> 工具来提取文档注释，然后生成一个 HTML 文档，类似于 Java 官网所提供的 API 文档，以下是一个文档注释的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们通过终端，使用 <code>javadoc</code> 命令就可以为上述文件生成一个 HTML 文档。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而文档注释相比于其他两种注释，也有更多值得注意的地方，下面就分别来看看需要留意的地方。</p>
<ol>
<li><strong>常用文档注释分类</strong></li>
</ol>
<ul>
<li><strong>类注释</strong></li>
</ul>
<p>顾名思义，所谓类注释，就是针对整个类的说明，它必须放在 <code>import</code> 之后，但又必须放在类定义之前。以下是一个类注释的实例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要注意的是，在 <code>/**</code> 和 <code>*/</code> 之间的其他行注释，<code>*</code> 是可有可无的，之所以加上，更大情况出于美观的考虑，上面的实例写成如下样式也是合法的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>方法注释</strong></li>
</ul>
<p>同样的，方法注释也就是针对类中方法的注释，它必须放在所描述的方法之前。而一般情况下，除开说明该方法的功能之外，我们经常使用如下标记来对方法进行注释。</p>
<table>
<thead>
<tr>
<th>标记</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@param variable description</code></td>
<td>用于介绍当前方法的参数，可以占据多行</td>
</tr>
<tr>
<td><code>@return description</code></td>
<td>用于描述当前方法的返回值，可以跨多行</td>
</tr>
<tr>
<td><code>@throws class description</code></td>
<td>用于表示该方法有可能抛出的异常</td>
</tr>
</tbody>
</table>
<p>以下就是一个方法注释的实例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>字段注释</strong></li>
</ul>
<p>字段注释顾名思义，也就是对于类中字段的说明，用于描述字段的含义，以下是一个字段注释的例子。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，如果你不喜欢把一个字段的注释分成多行的话，也可以写成以下格式。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两种方式都是可以的，也没有优劣之分，可以根据自己的风格来选择。但是在 IntelliJ IDEA 等 IDE 中，如果对代码进行格式化，IDEA 会将第二种方式格式化成第一种方式，这一点需要注意。</p>
<ol start="2">
<li><strong>如何提取文档注释</strong></li>
</ol>
<p>假设有以下一段代码，我们需要生成关于代码的文档说明。那么就可以使用 JDK 中所提供的 <code>javadoc</code> 命令来提取代码的文档注释。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后利用以下命令就可以生成我们的文档注释。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上命令的意思就是，对名为 <code>HelloWorld.java</code> 的提取其中的文档注释，并将输出的文件放在 <code>helloworld</code> 文件夹下，并且在文档中包含程序作者和版本，编码方式为 <code>UTF-8</code>。</p>
<p></p>
<p>生成的文件列表详情见下图，打开其中的 <code>index.html</code> 就可以查看提取的文档注释。</p>
<p></p>
<p></p>
<h2> jar 文件的创建</h2>
<p>其实关于这个，我在之前的文章也写过。不过我是利用 IntelliJ IDEA 来对进行代码的打包，如果感兴趣，可以点击下方传送门去看看。</p>
<blockquote>
<p><a href="https://benjam1n.eu.org/dev-tools/idea/java-quick-start-with-idea" title="如何利用 IntelliJ IDEA 创建 Java 入门应用" target="_blank" rel="noopener noreferrer">如何利用 IntelliJ IDEA 创建 Java 入门应用</a></p>
</blockquote>
<p>不过那是借助工具来生成的，今天我们来看看如何利用 JDK 所提供的命令行工具，来创建一个能打印出 <code>Hello World!</code> 的 <code>jar</code> 包。</p>
<p>同样的，我们仍然是需要先准备一个能输出 <code>Hello World!</code> 的 Java 源代码，命名为 <code>HelloWorld.java</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着，利用 <code>javac</code> 命令对该文件进行编译，然后会生成 <code>HelloWorld.class</code> 字节码文件。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，利用 <code>jar</code> 命令来对生成的字节码文件进行打包。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 <code>c</code> 表示创建一个新 <code>jar</code> 包，<code>v</code> 表示创建过程中打印创建过程中的信息，<code>f</code> 则表示对新生成的 <code>jar</code> 命名。</p>
<p>最后，利用以下命令来运行 <code>jar</code> 包。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不过并不会顺利出现我们想要的结果，此时会报错 <code>hello.jar</code> 中没有主清单属性。这是因为我们还没有在 <code>MENIFEST.MF</code> 文件中添加 <code>Main-Class</code> 属性。
</p>
<p>用压缩软件打开刚创建的 <code>hello.jar</code>，里边除了 <code>HelloWorld.class</code> 文件之外，还会多一个 <code>META-INF</code> 文件夹，里边还有一个 <code>MENIFEST.MF</code> 文件，此时我们只需要用编辑器打开该文件，然后在文件中加入以下代码。（<strong>记得添加之后要保证整个文件最后保留一行空行</strong>）</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<p>添加完成之后，再次运行 <code>java -jar hello.jar</code> ，就可以成功在控制台打印 <code>Hello World!</code> 了。</p>
<h2> 总结</h2>
<p>以上就是今天博客的所有内容了，如果您觉得本文不错，那就来个一键三连吧，您的关注就是我坚持的不懈动力！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/ez4jam1n/ez4jam1n@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>成员变量、实例变量、静态变量、局部变量</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220712-all-kinds-of-variable.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220712-all-kinds-of-variable.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">成员变量、实例变量、静态变量、局部变量</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 学习 Java 的过程中，一开始很容易被这些各种变量绕晕，这篇博客主要介绍了这几种变量之间的关系和区别。 实例 package com.cunyu.demo public class Demo { private String name; //成员变量、实例变量 private int age; //成员变量、实例变量 private int ID; //成员变量、实例变量 public static final String school = &amp;quot;卡塞尔学院&amp;quot;; //成员变量、静态变量(类变量) public static String level = &amp;quot;SSS&amp;quot;; //成员变量、静态变量(类变量) public int getAge() { return age; } public int getId() { return ID; } public String getName() { return name; } public void setAge(int age) { this.age = age; } public void setId(int ID) { this.ID = ID; } public void setName(String name) { this.name = name; } public void study(){ String subject1 = &amp;quot;屠龙&amp;quot;; //局部变量 String subject2 = &amp;quot;炼金术&amp;quot;; //局部变量 System.out.println(&amp;quot;学习科目： &amp;quot; + subject1 + &amp;quot;、&amp;quot; + subject2); } public static void main(String[] args) { Demo demo = new Demo(); demo.setAge(23); demo.setId(14000001); demo.setName(&amp;quot;楚子航&amp;quot;); System.out.println(&amp;quot;ID: &amp;quot; + demo.getId() + &amp;quot;Age: &amp;quot; + demo.getAge() + &amp;quot;Name: &amp;quot; + demo.getName()); System.out.print(&amp;quot;主修科目： &amp;quot;); demo.study(); System.out.println(&amp;quot;学院：&amp;quot; + Demo.school); System.out.println(&amp;quot;等级：&amp;quot; + Demo.level); } }</description>
      <category>Java 基础教程</category>
      <pubDate>Tue, 12 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>学习 Java 的过程中，一开始很容易被这些各种变量绕晕，这篇博客主要介绍了这几种变量之间的关系和区别。</p>
<h2> 实例</h2>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 各变量联系与区别</h2>
<h3> 成员变量</h3>
<p>作用范围是整个类，相当于 C 语言中的全局变量，定义在方法体和语句块之外，一般定义在类的声明之下；成员变量包括实例变量和静态变量(类变量)。</p>
<h3> 实例变量</h3>
<p>独立于与方法之外的变量，无 <code>static</code> 修饰，声明在一个类中，但在方法、构造方法和语句块之外，数值型变量默认值为 0，布尔型默认值为 <code>false</code>，引用类型默认值为 <code>null</code>。</p>
<h3> 静态变量(类变量)</h3>
<p>独立于方法之外的变量，用 <code>static</code> 修饰，默认值与实例变量相似，一个类中只有一份，属于对象共有，存储在静态存储区，经常被声明为常量，调用一般是类名.静态变量名，也可以用对象名.静态变量名调用。</p>
<h3> 局部变量</h3>
<p>类的方法中的变量，访问修饰符不能用于局部变量，声明在方法、构造方法或语句块中，在栈上分配，无默认值，必须经初始化。</p>
<h3> 成员变量 VS 局部变量</h3>
<table>
<thead>
<tr>
<th>区别</th>
<th>成员变量</th>
<th>局部变量</th>
</tr>
</thead>
<tbody>
<tr>
<td>类中位置不同</td>
<td>类中、方法外</td>
<td>方法中</td>
</tr>
<tr>
<td>初始化值不同</td>
<td>有初始值，无需初始化</td>
<td>无默认值，使用前需完成赋值</td>
</tr>
<tr>
<td>内存位置不同</td>
<td>堆内存</td>
<td>栈内存</td>
</tr>
<tr>
<td>生命周期不同</td>
<td>随对象创建而存在，随对象的消失而消失</td>
<td>随方法的调用而存在，随方法的运行结束而消失</td>
</tr>
<tr>
<td>作用域</td>
<td></td>
<td>所属大括号</td>
</tr>
</tbody>
</table>
<h2> 总结</h2>
<p>以上就是关于 Java 编程中，静态变量、类变量、实例变量、局部变量以及成员变量之间的相关区别了。读完本文，你是否对这几个变量之间能进行一定程度上的区分了呢？</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/ez4jam1n/ez4jam1n@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>String 详解</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220713-string.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220713-string.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">String 详解</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 概述 String 类代表字符串，定义的变量可以用来指向字符串对象，然后操作该字符串，同时还提供了许多用于操作字符串的功能。Java 中，所有的字符串都用双引号 &amp;quot;&amp;quot; 括起来。 此外，String 是不可变的字符串类型，它的对象一旦创建，就不能够再被更改。</description>
      <category>Java 基础教程</category>
      <pubDate>Wed, 13 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 概述</h2>
<p><code>String</code> 类代表字符串，定义的变量可以用来指向字符串对象，然后操作该字符串，同时还提供了许多用于操作字符串的功能。Java 中，所有的字符串都用双引号 <code>""</code> 括起来。</p>
<p>此外，<code>String</code> 是不可变的字符串类型，它的对象一旦创建，就不能够再被更改。</p>
<p>但在实际使用过程中，给我们的实际观感可能会觉得 <code>String</code> 是可变的，但实际上 <code>String</code> 每次的修改都是产生并指向了新的字符串对象，原来的字符串对象实际上是没有改变的。</p>
<h2> 创建对象的两种方式</h2>
<ol>
<li>直接赋值</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>通过构造方法创建</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><table>
<thead>
<tr>
<th>构造方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public String()</code></td>
<td>创建一个不含任何内容的空白字符串对象</td>
</tr>
<tr>
<td><code>public String(String original)</code></td>
<td>根据传入的字符串内容来创建字符串对象</td>
</tr>
<tr>
<td><code>public String(char[] chs)</code></td>
<td>根据字符串数组的内容来创建字符串对象</td>
</tr>
<tr>
<td><code>public String(bytes[] chs)</code></td>
<td>根据字节数组的内容来创建字符串对象</td>
</tr>
</tbody>
</table>
<p>两者的区别在于，利用 <code>""</code> 方式所给出的字符串对象，存储在字符串常量池中，而且相同内容只会在其中存储一份。但是通过构造方法 <code>new</code> 对象，每次 <code>new</code> 都会产生一个新对象，它们是存放在堆内存中的。</p>
<p>这里要注意，任何类型的数据与字符串相加时，得到的会是一个字符串。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 字符串常用 API</h2>
<h3> public boolean equals(Object anotherObject)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>将此字符串与指定对象比较，只关心字符串内容是否一致。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> public boolean equalsIgnoreCase(String anotherString)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>将此字符串与指定对象进行比较，忽略大小写比较字符串内容是否一致。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> public int length()</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>求字符串长度。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> public char charAt(int index)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>获取某个索引位置处的字符。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> public char[] toCharArray()</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>字符串转换为字符串数组。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> public String substring(int beginIndex, int endIndex)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>根据开始和结束索引进行截取得到新的子串（左闭右开）。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> public String replace(CharSequence target, CharSequence replacement)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>使用新值将字符串中的旧值替换得到新字符串。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> public String[] split(String regex)</h3>
<ol>
<li><strong>功能</strong></li>
</ol>
<p>通过正则规则切割字符串，得到字符串数组。</p>
<ol start="2">
<li><strong>示例</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> StringBuilder</h2>
<p><code>StringBuilder</code> 可以看做一个容器，创建后其中的内容可变，主要是为了提高字符串 <code>String</code> 的操作效率。</p>
<h3> 构造方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public StringBuilder()</code></td>
<td>创建一个不含任何内容的空白可变字符串对象</td>
</tr>
<tr>
<td><code>public StringBuilder(String str)</code></td>
<td>根据字符串内容，创建可变字符串对象</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 常用方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public int length()</code></td>
<td>返回字符串长度</td>
</tr>
<tr>
<td><code>public String toString()</code></td>
<td>将 <code>StringBuilder</code> 转换为 <code>String</code></td>
</tr>
<tr>
<td><code>public StringBuilder append(Object obj)</code></td>
<td>添加数据并返回对象本身</td>
</tr>
<tr>
<td><code>public StringBuilder reverse()</code></td>
<td>反转容器中的内容</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> StringJoiner</h2>
<p>类似于 <code>StringBuilder</code>，都可以把它们看做是一个容器，而且它们里面的内容还是可变的，而它的出现也是为了提高操作字符串的效率。</p>
<h3> 构造方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public StringJoiner(间隔符)</code></td>
<td>创建一个 <code>StringJoiner</code> 对象并指定拼接时的间隔符</td>
</tr>
<tr>
<td><code>public StringJoiner(间隔符, 开始符号, 结束符号)</code></td>
<td>创建一个 <code>StringJoiner</code> 对象并指定拼接时的间隔符、开始符号、结束符号</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 常用方法</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public StringJoiner add(Object obj)</code></td>
<td>添加数据后返回对象本身</td>
</tr>
<tr>
<td><code>public int length()</code></td>
<td>返回字符串长度</td>
</tr>
<tr>
<td><code>public String toString()</code></td>
<td>将 <code>StringJoiner</code> 转换为 <code>String</code></td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>以上就是关于 <code>Java</code> 中字符串的相关知识点了，主要介绍了 <code>String</code> 类创建对象的两种方式以及常用 <code>API</code>。此外，为了提高字符串的操作效率，还了解 <code>StringBuilder</code> 和 <code>StringJoiner</code> 的构造方法以及常用方法，方便后续编程中使用。</p>
]]></content:encoded>
    </item>
    <item>
      <title>ArrayList 详解</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220714-arraylist.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220714-arraylist.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">ArrayList 详解</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 概述 ArrayList 代表的是集合类，集合是一种容器，类似于数组。不同的是数组一旦定义后，其类型和长度就固定了，但集合的大小却是动态变化的，而且其中的元素类型也是动态的。 因此，数组更适合数据个数和类型确定的场景，而集合则更适合数据个数不确定，且需要做增删元素的场景。</description>
      <category>Java 基础教程</category>
      <pubDate>Thu, 14 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 概述</h2>
<p><code>ArrayList</code> 代表的是集合类，集合是一种容器，类似于数组。不同的是数组一旦定义后，其类型和长度就固定了，但集合的大小却是动态变化的，而且其中的元素类型也是动态的。</p>
<p>因此，数组更适合数据个数和类型确定的场景，而集合则更适合数据个数不确定，且需要做增删元素的场景。</p>
<h2> 泛型支持</h2>
<p><code>ArrayList&lt;E&gt;</code> 实际上就是一个泛型类，能够在编译阶段约束集合对象只能操作某种数据类型。而且这里的数据类型只能是引用类型，而不能是基本数据类型。</p>
<table>
<thead>
<tr>
<th>正确</th>
<th>错误</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;;</code></td>
<td><code>ArrayList&lt;int&gt; list = new ArrayList&lt;&gt;;</code></td>
</tr>
</tbody>
</table>
<h2> 构造方法</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public ArrayList()</code></td>
<td>创建一个初始容量为 10 的空列表</td>
</tr>
<tr>
<td><code>public ArrayList(int initialCapacity)</code></td>
<td>创建一个指定容量的空列表</td>
</tr>
<tr>
<td><code>public ArrayList(Collection&lt;? extends E&gt; c)</code></td>
<td>创建一个包含指定集合中元素的列表</td>
</tr>
</tbody>
</table>
<h2> 常用方法</h2>
<h3> 元素个数</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public int size()</code></td>
<td>返回集合中的元素个数</td>
</tr>
</tbody>
</table>
<h3> 元素获取</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public E get(int index)</code></td>
<td>获取索引位置为 <code>index</code> 的元素</td>
</tr>
</tbody>
</table>
<h3> 元素新增</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void add(int index, E element)</code></td>
<td>在指定索引位置 <code>index</code> 新增元素 <code>element</code></td>
</tr>
<tr>
<td><code>boolean add(E element)</code></td>
<td>在列表末尾新增一个元素 <code>element</code></td>
</tr>
</tbody>
</table>
<h3> 元素删除</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public E remove(int index)</code></td>
<td>删除指定索引处的元素并返回被删除的元素</td>
</tr>
<tr>
<td><code>public boolean remove(Object obj)</code></td>
<td>删除指定元素并返回是否删除成功</td>
</tr>
</tbody>
</table>
<h3> 元素修改</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>public E set(int index, E element)</code></td>
<td>修改指定索引处的元素，返回被修改的元素</td>
</tr>
</tbody>
</table>
<h3> 元素遍历</h3>
<ol>
<li><strong>for 循环</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>增强 for 循环</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><strong>迭代器</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>本文主要讲解了 <code>ArrayList</code> 的定义、泛型支持、构造方法以及常用方法等。主要针对的是日常中的使用，更多关于 <code>ArrayList</code>&nbsp; 底层原理的一些知识，抽个时间再聊吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>输入输出流</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220715-in-out-stream.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220715-in-out-stream.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">输入输出流</source>
      <description>作者：benjamin 博客：studio 原文：https://mp.weixin.qq.com/s/I8UJKtTtdqcbbxcTx_dVzg 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Fri, 15 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/I8UJKtTtdqcbbxcTx_dVzg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/I8UJKtTtdqcbbxcTx_dVzg</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>我们日常开发过程中，有许多方面都涉及到 IO 流，比如上传下载、传输、设计模式等等。而所有的一切都是基于 IO 流来进行，所以今天就来看看 Java 中 IO 流的相关知识点。</p>
<p>本文主要内容安排如下：</p>
<ul>
<li><strong>文件对象</strong></li>
<li><strong>流简介</strong></li>
<li><strong>字节流</strong></li>
<li><strong>字符流</strong></li>
</ul>
<h2> 文件对象</h2>
<h3> 文件路径</h3>
<p>Java 标准库 <code>java.io</code> 提供了 <code>File</code> 对象用于操作文件和目录，也就是说我们的文件和目录都是可以通过 <code>File</code> 封装成对象的。构造 <code>File</code> 对象时，需要传入我们的文件或目录的路径名，常用的构造方法如下：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>File(String pathName)</code></td>
<td>通过将给定路径名字符串转换为抽象路径名来创建新实例</td>
</tr>
<tr>
<td><code>File(String parent, String child)</code></td>
<td>从父路径名字符串和子路径名字符串创建新实例</td>
</tr>
<tr>
<td><code>File(File parent, String child)</code></td>
<td>从父抽象路径名和子路径名字符串创建新实例</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>对于我们传入文件的路径，既可以使用绝对路径，也可以使用相对路径。</p>
<ul>
<li><strong>相对路径</strong>：以当前文件所在位置为参考，然后建立出另一个文件所在位置路径。我们最常用的有 <code>.</code> 和 <code>..</code>，前者表示当前目录，而后者则表示当前目录的上一级目录。假设我们当前目录为 <code>/home/ez4jam1n/data</code>，则 <code>.</code> 仍然表示该目录，而 <code>..</code> 则表示 <code>/home/ez4jam1n</code> 目录。</li>
<li><strong>绝对路径</strong>：又可以分为 <strong>本地绝对路径</strong> 和 <strong>网络绝对路径</strong>。本地绝对路径以根目录为参考，指文件在硬盘中真实存在的路径，比如在 Windows 系统，我们的一个绝对路径是 <code>D:\\Softwares\\Typora\\Typora.exe</code>，而在类 <code>Unix</code> 系统中则为 <code>/home/ez4jam1n/IO.md</code>，此时需要注意平台间的分隔符是不一样的，但为了同一，推荐同一写成 <code>/</code>，这样程序在不同系统中迁移时也不会出现问题。而网络绝对位置则指带有网址的路径，比如 <code>https://ez4jam1n.site/index.html</code>。</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 文件和目录操作</h3>
<h4> 创建与删除</h4>
<p>既然拿到了 <code>File</code> 对象，接下来就是通过操作该对象来进行创建和删除文件或目录了，以下是一些 <code>File</code> 类常用的创建和删除方法。</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>boolean</code></td>
<td><code>createNewFile()</code></td>
<td>当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件；存在时，则创建失败</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>mkdir()</code></td>
<td>创建由此抽象路径名命名的目录</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>mkdirs()</code></td>
<td>创建由此抽象路径名命名的多级目录，包括任何必需但不存在的父目录</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>delete()</code></td>
<td>删除由此抽象路径名命名的文件或目录，删除目录的前提是该目录必须为空</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p><strong>注意</strong>：</p>
<ul>
<li>
<p>创建文件时，调用的是 <code>createNewFile()</code> 方法，而创建目录时调用的是 <code>mkdir()</code> 或者 <code>mkdirs()</code> 方法。我们在调用时要注意区分，否则就算你的路径是文件，当调用了创建目录的方法后它也会创建成目录而非文件。对应的，就算你给定的路径是目录，当调用创建文件的方法后它也会创建成文件而非目录。</p>
</li>
<li>
<p>删除目录时，若目录中有内容（目录、文件），则 <strong>不能直接删除</strong>，而是应该先删除目录中的内容，然后才能删除目录；</p>
</li>
</ul>
<h4> 相关属性</h4>
<p>获取到 <code>File</code> 对象后，我们可以对其相关属性进行判断，常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>long</code></td>
<td><code>length()</code></td>
<td>该抽象路径名表示的文件的所占字节大小</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>canRead()</code></td>
<td>该抽象路径名表示的文件是否可读</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>canWrite()</code></td>
<td>该抽象路径名表示的文件是否可写</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>canExecute()</code></td>
<td>该抽象路径名表示的文件是否可执行</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h4> 判断和获取</h4>
<p>获取到 <code>File</code> 对象后，我们既可以用它来表示文件，也可以用来表示目录。而对于文件和目录的判断和获取功能，可以使用如下常用的方法：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>boolean</code></td>
<td><code>isFile()</code></td>
<td>测试此抽象路径名表示的文件是否为普通文件</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>isDirectory()</code></td>
<td>测试此抽象路径名表示的文件是否为目录</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>exists()</code></td>
<td>测试此抽象路径名表示的文件或目录是否存在</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>getPath()</code></td>
<td>将抽象路径转换为路径字符串</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>getAbsolutePath()</code></td>
<td>返回此抽象路径名的绝对路径名字符串</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>getName()</code></td>
<td>返回由此抽象路径名表示的文件或目录的名称</td>
</tr>
<tr>
<td><code>String[]</code></td>
<td><code>list()</code></td>
<td>返回字符串数组，表示该抽象路径名表示目录下的文件和目录</td>
</tr>
<tr>
<td><code>File[]</code></td>
<td><code>listFiles()</code></td>
<td>返回抽象路径名数组，表示该抽象路径名表示目录下的文件</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 练习</h3>
<p>假设我们要遍历 Windows 下 C 盘的 Windows 目录，并且列出其中文件名和文件大小，而不用列出目录名，我们可以利用如下代码来实现：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 流</h2>
<h3> 什么是流</h3>
<p>所谓流，就是一系列数据的组合。当我们需要进行数据交互的时候，比如在服务器和客户端之间进行数据交互时，我们此时就可以使用 Java 中的流来实现。Java 中，数据的输入和输出都是以流的形式来进行的。根据数据流方向的不同，我们可以将其分为：<strong>输入流</strong>、<strong>输出流</strong>。而根据处理的数据单位不同，可分为：<strong>字节流</strong>、<strong>字符流</strong>。两者的关系可以描述为下表：</p>
<table>
<thead>
<tr>
<th></th>
<th>字节流</th>
<th>字符流</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>输入流</strong></td>
<td><code>InputStream</code></td>
<td><code>Reader</code></td>
</tr>
<tr>
<td><strong>输出流</strong></td>
<td><code>OutputStream</code></td>
<td><code>Writer</code></td>
</tr>
</tbody>
</table>
<p>而对于字节流和字符流的选用原则，我们建议遵循如下规则：<strong>如果数据能够通过 Windows 自带笔记本软件打开并且能够读懂其中的内容，则选用字符流，否则选择字节流。而如果我们也不知道应该使用何种类型的流，则默认使用字节流</strong>。</p>
<p>下图描述了字节流和字符流的类层次图，注意：<strong>无论是字节流还是字符流，其子类名都是以其父类名作为子类名的后缀的</strong>。</p>
<p></p>
<h3> InputStream</h3>
<p></p>
<p>注意，<code>InputStream</code> 并非是并不是一个接口，而是所有字节输入流所有类的父类。下面我们主要以 <code>FileInputStream</code> 来举例，所谓 <code>FileInputStream</code>，就是从文件流中读取数据，然后将数据从文件中读取到内存，常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>int</code></td>
<td><code>available()</code></td>
<td>返回该输入流中可以读取的字节数的估计值</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>close()</code></td>
<td>关闭输入流并释放相关资源</td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>read(bytep[] b)</code></td>
<td>从输入流读取一些字节数，并将其存储到缓冲区 b</td>
</tr>
</tbody>
</table>
<p>下面是一个从文件中读取数据到内存中的实例，文件内容如下：</p>
<p></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> OutputStream</h3>
<p></p>
<p><code>OutputStream</code> 并非是并不是一个接口，而是所有输出字节流的所有类的父类。下面我们主要以 <code>FileOutputStream</code> 来举例，所谓 <code>FileOutputStream</code>，就是从内存中读取数据，然后将数据从内存存放到文件中，常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void</code></td>
<td><code>write(byte[] b)</code></td>
<td>将 <code>b.length</code> 个字节从指定字节数组写入此文件输出流</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>close()</code></td>
<td>关闭文件输出流并释放相关资源</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<p>需要注意的点：</p>
<ul>
<li>字节流写入数据时如何实现换行？</li>
</ul>
<p>写入换行的转义字符的字节数组即可，但是需要注意，不同系统下换行的转义字符不同，Windows 下为 <code>\r\n</code>，macOS 下为 <code>\r</code>，而 Linux 下为 <code>\m</code>。</p>
<ul>
<li>字节流写入数据时如何实现追加？</li>
</ul>
<p>调用 <code>public FileOutputStream(String name, boolean append)</code> 这个构造方法即可，当 <code>append</code> 为 <code>true</code> 时，表示追加，默认情况下是 <code>false</code>，表示不追加。</p>
<h3> 字符串中的编解码问题</h3>
<h4> 编码</h4>
<ul>
<li><code>byte[] getBytes()</code>：使用平台默认字符集将该字符串编码成一系列字节，然后将结果存储到新的字节数组中；</li>
<li><code>byte[] getBytes(String charsetName)</code>：使用指定字符集将该字符串编码为一系列字节，然后将结果存储到新的字节数组中；</li>
</ul>
<h4> 解码</h4>
<ul>
<li><code>String(byte[] bytes)</code>：使用平台默认字符集解码指定的字节数来构造新的字符串；</li>
<li><code>String(byte[] bytes, String charsetName)</code>：通过指定的字符集解码指定的字节数组来构造新的字符串；</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> Writer</h3>
<p></p>
<p>当我们要写入基于字符的数据到数据源中时，需要使用写入器 <code>Writer</code>. 以其中的 <code>FileWriter</code> 具体展开，其常用方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void</code></td>
<td><code>close()</code></td>
<td>先刷新再关闭流，不能再写数据</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>flush()</code></td>
<td>刷新流，可以继续写数据</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>newLine()</code></td>
<td>写入行分隔符</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>write()</code></td>
<td>写入字符或字符串</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> Reader</h3>
<p></p>
<p>当我们要从数据源读取基于字符的数据时，需要使用读取器 <code>Reader</code>. 我们以 <code>FileReader</code> 实践，其常用的方法有：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void</code></td>
<td><code>close()</code></td>
<td>关闭流并释放相关资源</td>
</tr>
<tr>
<td><code>int</code></td>
<td><code>read()</code></td>
<td>读取一个字符</td>
</tr>
<tr>
<td><code>String</code></td>
<td><code>readLine()</code></td>
<td>读一行文字</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><code>ready()</code></td>
<td>获取该流是否准备好被读取</td>
</tr>
</tbody>
</table>
<p>我们以从文件中读取内容为例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>好了，关于 IO 流的知识点到此就结束了，赶紧学起来！如果你觉得本文对你有所帮助，那就点赞关注一波吧！</p>
<p>对于文中遗漏或者错误的知识点，欢迎大家评论留言，咱们评论区见！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/ez4jam1n/ez4jam1n@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>反射机制详解</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220716-reflection.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220716-reflection.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">反射机制详解</source>
      <description>作者：benjamin 博客：studio 原文：https://mp.weixin.qq.com/s/f0sJpAhgI6B7oirsJfv9jQ 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Sat, 16 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/f0sJpAhgI6B7oirsJfv9jQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/f0sJpAhgI6B7oirsJfv9jQ</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 反射概述</h2>
<h3> 什么是反射</h3>
<p>将类的各个组成部分封装为其他对象的过程就叫做 <strong>反射</strong>，其中 <strong>组成部分</strong> 指的是我们类的 <strong>成员变量（Field）</strong>、<strong>构造方法（Constructor）</strong>、<strong>成员方法（Method）</strong>。</p>
<h3> 使用反射的优缺点</h3>
<ul>
<li>
<p><strong>优点</strong></p>
<ol>
<li>在 <strong>程序运行过程中</strong> 可以操作类对象，增加了程序的灵活性；</li>
<li>解耦，从而提高程序的可扩展性，提高代码的复用率，方便外部调用；</li>
<li>对于任何一个类，当知道它的类名后，就能够知道这个类的所有属性和方法；而对于任何一个对象，都能够调用它的一个任意方法。</li>
</ol>
</li>
<li>
<p><strong>缺点</strong></p>
<ol>
<li><strong>性能问题</strong>：Java 反射中包含了一些动态类型，JVM 无法对这些动态代码进行优化，因此通过反射来操作的方式要比正常操作效率更低。</li>
<li><strong>安全问题</strong>：使用反射时要求程序必须在一个没有安全限制的环境中运行，如果程序有安全限制，就不能使用反射。</li>
<li><strong>程序健壮性</strong>：反射允许代码执行一些平常不被允许的操作，破坏了程序结构的抽象性，导致平台发生变化时抽象的逻辑结构无法被识别。</li>
</ol>
</li>
</ul>
<h2> Class 对象的获取及使用</h2>
<h3> 获取 Class 对象的方式</h3>
<ol>
<li><code>Class.forName("全类名")</code></li>
</ol>
<p>源代码阶段，它能将字节码文件加载进内存中，然后返回 <code>Class</code> 对象，多用于 <strong>配置文件</strong> 中，将类名定义在配置文件中，通过读取配置文件来加载类。</p>
<ol start="2">
<li><code>类名.class</code></li>
</ol>
<p>类对象阶段，通过类名的 <code>class</code> 属性来获取，多用于 <strong>参数的传递</strong>。</p>
<ol start="3">
<li><code>对象.getClass()</code></li>
</ol>
<p>运行时阶段，<code>getClass()</code> 定义在 <code>Object</code> 类中，表明所有类都能使用该方法，多用于 <strong>对象的获取字节码</strong> 的方式。</p>
<p>我们首先定义一个 <code>Person</code> 类，用于后续反射功能的测试；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义好 <code>Person</code> 类之后，我们尝试用 3 种不同的方式来获取 <code>Class</code> 对象，并比较它们是否相同。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>上述代码中，会发现最后输出的比较结果返回的是两个 <code>true</code>，说明通过上述三种方式获取的 <code>Class</code> 对象都是同一个，<strong>同一个字节码文件（<code>*.class</code>）在一次运行过程中只会被加载一次</strong>。</p>
<h3> Class 对象的使用</h3>
<h4> 获取成员变量</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Field[] getFields()</code></td>
<td>返回包含一个数组 <code>Field</code>对象反射由此表示的类或接口的所有可访问的公共字段类对象</td>
</tr>
<tr>
<td><code>Field getField(String name)</code></td>
<td>返回一个 <code>Field</code>对象，它反映此表示的类或接口的指定公共成员字段类对象</td>
</tr>
<tr>
<td><code>Field[] getDeclaredFields()</code></td>
<td>返回的数组 <code>Field</code>对象反映此表示的类或接口声明的所有字段类对象</td>
</tr>
<tr>
<td><code>Field getDeclaredField(String name)</code></td>
<td>返回一个 <code>Field</code>对象，它反映此表示的类或接口的指定已声明字段类对象</td>
</tr>
</tbody>
</table>
<ul>
<li><code>Field[] getFields()</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>回顾下我们的 <code>Person</code> 类，可以发现 <code>id</code>、<code>grade</code> 成员变量都是被 <code>public</code> 所修饰的，说明该方法是用于获取类中所有被 <code>public</code> 所修饰的成员变量（<strong>包括父类</strong>）。</p>
<ul>
<li><code>Field getField(String name)</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<p>从上面的结果分析可知，该方法只能用于获取类中指定名称的 <code>public</code> 所修饰的成员变量，对于 <code>protected</code>、<code>private</code> 所修饰的成员变量，该方法是无法获取的（<strong>包括父类</strong>）。而获取或设置成员变量值时，可以通过 <code>get/set</code> 方法来操作，具体操作方法如下。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><code>Field[] getDeclaredFields()</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>观察上面的结果可知，该方法可用于获取所有的成员变量，不用考虑修饰符的限制（<strong>不包括父类</strong>）。</p>
<ul>
<li><code>Field getDeclaredField(String name)</code></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>观察上面的结果可知，该方法可用于获取指定的成员变量，不用考虑成员变量修饰符的限制（<strong>不包括父类</strong>）。但是在利用 <code>set</code>、<code>get</code> 方法来获取和设置 <code>private</code>、<code>protected</code> 修饰的成员变量时，需要利用 <code>setAccessible()</code> 来忽略访问全新啊修饰符的安全检查，否则程序将会报错。</p>
<h4> 获取构造方法</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Constructor&lt;?&gt;[] getConstructors()</code></td>
<td>返回包含一个数组 <code>Constructor</code>对象反射由此表示的类的所有公共构造类对象</td>
</tr>
<tr>
<td><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</code></td>
<td>返回一个 <code>Constructor</code> 对象，该对象反映 <code>Constructor</code>对象表示的类的指定的公共类函数</td>
</tr>
<tr>
<td><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></td>
<td>返回一个反映 <code>Constructor</code> 对象表示的类声明的所有 <code>Constructor</code> 对象的数组类</td>
</tr>
<tr>
<td><code>Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)</code></td>
<td>返回一个 <code>Constructor</code> 对象，该对象反映 <code>Constructor</code> 对象表示的类或接口的指定类函数</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ul>
<li>
<p><code>Constructor&lt;?&gt;[] getConstructors()</code></p>
<p>类似于通过 <code>Class</code> 实例来获取成员变量，该方法用于获取所有 <code>public</code> 所修饰的构造方法（<strong>包括父类</strong>）；</p>
</li>
<li>
<p><code>Constructor&lt;T&gt; getConstructor(类&lt;?&gt;... parameterTypes)</code></p>
</li>
</ul>
<p>该方法用于获取某一指定参数类型后的 <code>public</code> 所修饰的构造方法（<strong>包括父类</strong>）；</p>
<ul>
<li><code>Constructor&lt;?&gt;[] getDeclaredConstructors()</code></li>
</ul>
<p>该方法用于获取所有 <code>public</code> 所修饰的构造方法（<strong>不包括父类</strong>）；</p>
<ul>
<li><code>Constructor&lt;T&gt; getDeclaredConstructor(类&lt;?&gt;... parameterTypes)</code></li>
</ul>
<p>该方法用于获取某一指定参数类型后的 <code>public</code> 所修饰的构造方法（<strong>不包括父类</strong>）；</p>
<p>而获取到构造方法之后，我们就可以利用 <code>newInstance()</code> 方法来创建类的实例。特殊的，如果我们的构造方法是无参的，此时则可以直接利用 <code>Class.newInstance()</code> 来构造实例。</p>
<h4> 获取成员方法</h4>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>Method[] getMethods()</code></td>
<td>返回包含一个数组 方法对象反射由此表示的类或接口的所有公共方法 类对象，包括那些由类或接口和那些从超类和超接口继承的声明</td>
</tr>
<tr>
<td><code>Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</code></td>
<td>返回一个方法对象，它反映此表示的类或接口的指定公共成员方法 类对象</td>
</tr>
<tr>
<td><code>Method[] getDeclaredMethods()</code></td>
<td>返回包含一个数组方法对象反射的类或接口的所有声明的方法，通过此表示 类对象，包括公共，保护，默认（包）访问和私有方法，但不包括继承的方法</td>
</tr>
<tr>
<td><code>Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)</code></td>
<td>返回一个方法对象，它反映此表示的类或接口的指定声明的方法类对象</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ul>
<li><code>Method[] getMethods()</code></li>
</ul>
<p>用于获取当前类的所有 <code>public</code> 所修饰的成员方法（<strong>包括父类</strong>）。</p>
<ul>
<li><code>Method getMethod(String name, 类&lt;?&gt;... parameterTypes)</code></li>
</ul>
<p>用于获取当前类的某一个指定名称 <code>public</code> 所修饰的成员方法（<strong>包括父类</strong>）。</p>
<ul>
<li><code>Method[] getDeclaredMethods()</code></li>
</ul>
<p>用于获取当前类的所有 <code>public</code> 所修饰的成员方法（<strong>不包括父类</strong>）。</p>
<ul>
<li><code>Method getDeclaredMethod(String name, 类&lt;?&gt;... parameterTypes)</code></li>
</ul>
<p>用于获取当前类的某一个指定名称 <code>public</code> 所修饰的成员方法（<strong>不包括父类</strong>）。</p>
<p>而当我们获取到类的成员方法后，如果要执行某一个方法，可以使用 <code>invoke()</code> 方法来执行该方法。</p>
<h4> 获取类名</h4>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ul>
<li><code>String getName()</code></li>
</ul>
<p>从上述程序的结果可知，当我们获取到 <code>Class</code> 对象之后，如果不知道类的全名，就可以使用 <code>getName()</code> 来获取该类的全名。</p>
<h2> 反射实例</h2>
<p>假设我们有如下需求：在不改变类的代码的前提下，我们能够创建任意类的对象，并执行其中的方法。</p>
<p>此时，我们可以通过 <strong>配置文件 + 反射</strong> 的方式来实现这一效果，而这也就是我们现在所用框架中的基础，当我们使用反射后，只需要通过修改配置文件中的内容就能够不用去改代码就实现对应的功能。</p>
<p>假设我们有两个类，一个 <code>Student</code>，一个 <code>Teacher</code>，两者的定义如下；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要实现我们的需求，通常需要如下步骤：</p>
<ol>
<li>将要创建对象的全类名和要执行的方法都配置在配置文件中；</li>
</ol>
<p>定义的配置文件 <code>prop.properties</code> ，其中主要内容包括 <code>className</code> 和 <code>methodName</code> 两个属性，分别代表类的全类名和要调用方法的名字。一个具体实例如下，分别代表名为 <code>Student</code> 的类和名为 <code>study</code> 的方法。</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>然后在主方法中加载读取配置文件；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>利用反射技术将类加载到内存中；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>接着利用 <code>newInstance()</code> 方法创建对象；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li>最后则是利用 <code>invoke()</code> 方法来执行方法；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将整个流程汇总起来就是：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，我们只需要改动配置文件 <code>prop.properties</code> 中的配置即可输出不同结果；</p>
<p></p>
<p></p>
<h2> 总结</h2>
<p>好了，感谢耐心看到这里的各位。如果您觉得本文对您有所帮助，那就给我点个赞吧！</p>
<p>最后，对于文中知识点有错误或欠缺的地方，还请大家见谅，欢迎大家评论留言给我指正~</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/ez4jam1n/ez4jam1n@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>JDBC 入门指南</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220717-jdbc-introduction.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220717-jdbc-introduction.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">JDBC 入门指南</source>
      <description>作者：benjamin 博客：studio 原文：https://mp.weixin.qq.com/s/DOXFxk5dk9WBfAVK0UJUng 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Sun, 17 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/DOXFxk5dk9WBfAVK0UJUng" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/DOXFxk5dk9WBfAVK0UJUng</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>在我们日常使用的 APP 或网站中，往往需要存取数据，比如在微信中，需要存储我们的用户名、手机号、用户密码…… 等一系列信息。依靠之前所学习的 Java 相关知识已经无法满足这一需求。现在的应用程序中最基本、应用最广的也就是关系型数据库，如 MySQL。Java 语言中为了实现与关系型数据库的通信，制定了标准的访问接口，即 JDBC（Java Database Connectivity）。本文主要介绍在 Java 中使用 JDBC 的相关知识，主要内容如下：</p>
<ul>
<li><strong>JDBC 简介</strong></li>
<li><strong>数据的增删改查</strong></li>
<li><strong>事务</strong></li>
<li><strong>连接池</strong></li>
</ul>
<h2> JDBC 简介</h2>
<p>JDBC（Java Database Connectivity），即 Java 数据库连接。是 Java 语言中用于规范客户端程序如何来访问数据库的应用程序接口，它是面向关系型数据库的，提供了查询和更新数据库中数据的方法。</p>
<p>本文以 MySQL 来演示如何使用 JDBC，所以需要事先在你的机器上准备好 MySQL，而且最好是懂一些 MySQL 的使用。</p>
<p>首先我们需要建立 MySQL 与 Java 程序间的联系，所以需要事先好 mysql-connector-java 这个第三方包，下载地址：<a href="https://downloads.mysql.com/archives/c-j/" target="_blank" rel="noopener noreferrer">https://downloads.mysql.com/archives/c-j/</a></p>
<h3> 导入驱动包</h3>
<p>以在 IDEA 中导入 jar 包为例，当我们建立好项目后，导包过程如下：</p>
<ol>
<li>首先依次打开 <code>File -&gt; Project Structure -&gt; Modules -&gt; Dependencies</code>；</li>
</ol>
<p></p>
<ol start="2">
<li>然后点击 <code>+</code> 号，选择 <code>1 JARs or Directories</code>，找到你下载好的 jar 包导入；</li>
</ol>
<p></p>
<ol start="3">
<li>导入成功，点击 <code>OK</code> 即可；</li>
</ol>
<p></p>
<p></p>
<h3> 初始化并建立连接</h3>
<p>导入我们的 jar 包之后，就需要进行初始化工作。新建一个类，用于初始化并连接。先将驱动类加载到 JVM 中，加载过程中会执行其中的静态初始化块，从而完成驱动的初始化工作。然后建立数据库与程序之间的连接，此时需要提供数据库的 IP 地址、端口号、数据库名、编码方式、用户名、用户密码等信息。</p>
<p>首先，我们在数据库中建立一个表 <code>student</code>，建表语句如下，用于后续实践。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p></p>
<p>创建好数据库及表之后，我们就可以进行初始化和连接工作了，这里的步骤主要分为如下几步：</p>
<ol>
<li>首先需要加载驱动，主要是利用 <code>Class.forName()</code> 将驱动类加载到 JVM；</li>
<li>建立程序和数据库之间的连接，主要是创建 <code>Connection</code> 对象；</li>
<li>接着是创建用于执行 SQL 语句的 <code>Statement</code> 对象；</li>
<li>最后则是关闭连接从而释放资源，先关闭 <code>Statement</code> ，再关闭 <code>Connection</code> ；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>对于上述关闭 <code>Connection</code> 和 <code>Statement</code> 的方式，可能略显繁琐，为了进一步简化，可以使用 <code>try-with-source</code> 的方式自动关闭，简化后的代码如下；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JDBC 增删改查</h2>
<p>当我们初始化并建立 JDBC 连接之后，我们就可以对数据库进行 CRUD （增加、查询、更新、删除）等操作。</p>
<p>在正式开始 CRUD 前，我们最好先了解下 MySQL 中的数据类型在 Java 中所对应的数据类型，以便后续操作数据。一般来讲，两者中的数据类型对应关系如下表所示。</p>
<table>
<thead>
<tr>
<th>SQL 中的数据类型</th>
<th>对应的 Java 数据类型</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>BIT</code>、<code>BOOL</code></td>
<td><code>boolean</code></td>
</tr>
<tr>
<td><code>INTEGER</code></td>
<td><code>int</code></td>
</tr>
<tr>
<td><code>BIGINT</code></td>
<td><code>long</code></td>
</tr>
<tr>
<td><code>REAL</code></td>
<td><code>float</code></td>
</tr>
<tr>
<td><code>FLOAT</code>、 <code>DOUBLE</code></td>
<td><code>double</code></td>
</tr>
<tr>
<td><code>CHAR</code>、 <code>VARCHAR</code></td>
<td><code>String</code></td>
</tr>
<tr>
<td><code>DECIMAL</code></td>
<td><code>BigDecimal</code></td>
</tr>
<tr>
<td><code>DATE</code></td>
<td><code>java.sql.Date</code>、<code>LocalDate</code></td>
</tr>
<tr>
<td><code>TIME</code></td>
<td><code>java.sql.Time</code>、 <code>LocalTime</code></td>
</tr>
</tbody>
</table>
<p>此外，虽然我们在 JDBC 的简介部分在初始化和建立连接时使用的是用 <code>Statement</code> 来创建一个对象并用于后续操作，但是在实际使用过程中时，SQL 参数基本都是从方法参数传入的，这时使用 <code>Statement</code> 就十分容易引起 SQL 注入，为了解决这一问题，大牛们提出了如下两个办法：</p>
<ol>
<li>对字符串中的参数进行转义，然后利用转义后的参数来进行操作。但是转义十分麻烦，而且一使用 SQL，我们就必须增加转义代码。</li>
<li>利用 <code>PreparedStatement</code>，它利用 <code>?</code> 作为占位符，将数据联通 SQL 本身传递给数据库，从而保证每次传给数据库的 SQL 语句都是保持一致的，每次变动的只是占位符中的数据不同。通过使用 <code>PreparedStatement</code>，我们就能够 <strong>完全避免 SQL 注入 问题</strong>。</li>
</ol>
<p>针对后续利用 JDBC 操作数据库的过程，为了尽量避免 SQL 注入问题，我们优先采用 <code>PreparedStatement</code> 而非 <code>Statement</code>.</p>
<h3> 查询数据</h3>
<p>首先，我们来进行查询操作。进行查询时，可以总结为如下几个步骤：</p>
<ol>
<li>通过创建一个 <code>Connection</code> 对象从而建立连接；</li>
<li>然后利用 <code>prepareStatement()</code> 方法创建一个 <code>PreparedStatement</code> 对象并传入 SQL 语句，用于执行查询操作；</li>
<li>接着执行 <code>PreparedStatement</code> 对象所提供的 <code>executeQuery()</code> 方法，获取查询结果并返回到一个 <code>ResultSet</code> 结果集中；</li>
<li>最后则是利用 <code>ResultSet</code> 对象的 <code>next()</code> 方法去读取我们所查询返回的结果；</li>
</ol>
<blockquote>
<p>需要注意的地方：</p>
<ol>
<li>如果你不是利用 <code>try-with-source</code> 的方式，那么一定要记得在使用完连接之后记得释放资源；</li>
<li>结果集 <code>ResultSet</code> 中，索引位置是从 <code>1</code> 开始的，而不是从 <code>0</code> 开始，这一点要特别注意！</li>
</ol>
</blockquote>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 增加数据</h3>
<p>即插入一条新记录，和查询语句很像，但是区别在于最后 <code>PreparedStatement</code> 对象执行的不是 <code>executeQuery()</code>，而是 <code>executeUpdate()</code>. 插入记录的步骤总结如下：</p>
<ol>
<li>创建 <code>Connection</code> 对象从而建立连接；</li>
<li>利用 <code>prepareStatement()</code> 方法创建一个 <code>PreparedStatement</code> 对象并传入 SQL 语句，用于执行插入操作；</li>
<li>然后依次设置占位符所代表的值；</li>
<li>执行 <code>PreparedStatement</code> 对象所提供的 <code>executeUpdate()</code> 方法，此时返回的是一个 <code>int</code> 类型的数，表示插入记录的条数；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新增数据后，接着查询数据，得到如下结果，可以看到我们新插入的数据成功加入到了数据库中！</p>
<p></p>
<h3> 删除数据</h3>
<p>删除数据和新增数据的方式基本一样，两者最大的区别在于 SQL 语句的不同，删除操作利用的是 <code>DELETE</code> 语句，能一次删除若干列。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除数据后，接着查询数据，得到如下结果，可以看到 <code>id = 101</code> 的数据列已经被删除了，说明我们删除数据成功了！</p>
<p></p>
<h3> 修改数据</h3>
<p>修改数据的方式同删除数据和新增数据基本一致，最大的区别在于 SQL 语句的不同，修改操作利用的是 <code>UPDATE</code> 语句，能一次更新若干列。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改数据后，接着查询数据，得到如下结果，可以看到 <code>id = 201</code> 对应的数据列中，<code>name</code> 从小黄变成了benjamin，说明数据更新成功。</p>
<p></p>
<h3> 注意</h3>
<p>当我们的数据库表设置自增主键后，在新增数据时无需指定主键也会自动更新。但是在获取自增主键的值时，不能先插入再查询，否则可能会导致冲突。要正确获取自增主键，需要在创建 <code>PreparedStatement</code> 时，指定一个标志位 <code>RETURN_GENERATED_KEYS</code>，用于表示 JDBC 驱动必须返回插入的自增主键。</p>
<p>假设我们创建表时，设置了自增长的键：</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时无论是 <code>executeQuery()</code> 还是 <code>execureUpdate()</code> 都不会返回这个自增长的 <code>id</code>，所以需要在创建 <code>PreparedStatement</code> 对象时加入 <code>Statement.RETURN_GENERATED_KEYS</code> 参数以确保会返回自增长 ID，然后通过 <code>getGeneratedKeys</code> 获取该字段；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> JDBC 工具类</h3>
<p>观察上面的代码，我们可以注意到每次都需要注册驱动、传递参数，关闭连接等操作，为了提高工具通用性，我们利用配置文件来配置数据库相关信息，然后创建一个 JDBC 工具类来简化上述操作。</p>
<ol>
<li>首先在 <code>src</code> 目录下创建一个配置文件 <code>jdbc.properties</code>，并且填入数据库的相关信息；</li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>创建工具类</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> JDBC 事务</h2>
<h3> 事务 4 大特性</h3>
<p>事务是一个不可分割的数据库操作序列，也是数据库并发控制的基本单位，其执行结果必须使数据库从一种一致性状态切换到另一中一致性状态。事务是逻辑上的一组操作，要么都执行，要么都不执行。事务能够在数据库提交工作时确保要么所有修改都保存，要么所有修改都不保存。<strong>即事务是逻辑上的一组操作，要么都执行，要么都不执行</strong>。</p>
<ol>
<li><strong>原子性（Atomicity）</strong></li>
</ol>
<p>原子性是整个数据库事务中不可分割的工作单位，只有事务中的所有的数据库操作都执行成功，才代表整个事务成功，如果其中任一环节执行失败，那么就算已经执行成功的 SQL 语句也必须撤销，回滚到事务执行前的状态。即原子性能够保证 <strong>动作要么全部完成，要么完全不起作用。</strong> <strong>即事务是最小的执行单位，不允许分割</strong>。</p>
<ol start="2">
<li><strong>一致性（Consistency）</strong></li>
</ol>
<p>指事务将数据库从一种一致性状态变为另一种一致性状态。在事务开始前后，数据库的完整性约束未被破坏。<strong>在事务执行前后，数据能够保持一致，多个事务对统一数据读取的结果相同</strong>。</p>
<ol start="3">
<li><strong>隔离性（Isolation）</strong></li>
</ol>
<p>并发访问数据库时，隔离性要求每个读写事务对其他事务的操作对象能够相互分离，即一个用户的事务不被其他事务所干扰，各并发事务间数据库是独立的；</p>
<ol start="4">
<li><strong>持久性（Durability）</strong></li>
</ol>
<p>表示事务一旦被提交，其结果就是永久性的，它对数据库中数据的改变是持久的，即便数据库发生故障也不应该对其产生影响；</p>
<h3> 脏读、幻读 &amp; 不可重复读</h3>
<p>了解事务隔离级别之前，先来看看这几个读的概念：</p>
<ol>
<li><strong>脏读（Dirty Read）</strong></li>
</ol>
<p>表示某一事务已经更新了一份数据，另一个事务在此时读取了同一份数据。当前一个事务撤销操作后，就会导致后一个事务所读取的数据不正确。</p>
<ol start="2">
<li><strong>幻读（Phantom Read）</strong></li>
</ol>
<p>在一个事务的两次查询中数据量不一致，假如有一个事务查询了几列数据，同时另一个事务中在此时查询了新的数据，则查询事务在后续查询中，就会发现数据比最开始的查询数据更丰富。</p>
<ol start="3">
<li><strong>不可重复读（Non-repeatable Read）</strong></li>
</ol>
<p>一个事务中两次查询数据不一致，有可能是因为两次查询过程中插入了一个更新原有数据的事务。</p>
<p><strong>注意：不可重复读和幻读的区别在于：</strong></p>
<blockquote>
<p><strong>不可重复读的重点在于修改，</strong> 比如多次读取一条记录发现其中某些列的值被修改，而 <strong>幻读的重点在于新增或删除</strong>，比如多次读取一条记录发现记录增多或减少了。</p>
</blockquote>
<h3> 隔离级别</h3>
<p>SQL 标准定义了 4 个隔离级别，隔离级别从低到高分别是：</p>
<ol>
<li><strong>READ-UNCOMMITTED（读取未提交）</strong></li>
</ol>
<p>最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能导致脏读、幻读或不可重复读</strong>。</p>
<ol start="2">
<li><strong>READ-COMMITTED（读取已提交）</strong></li>
</ol>
<p>允许读取并发事务已经提交的数据，<strong>能够阻止脏读，但可能导致幻读或不可重复读</strong>。</p>
<ol start="3">
<li><strong>REPEATABLE-READ（可重复读）</strong></li>
</ol>
<p>对同一字段的多次读取结果时一致的，除非数据是被本身事务自己所修改，<strong>能够阻止脏读和不可重复读，但可能导致幻读</strong>。</p>
<ol start="4">
<li><strong>SERIALIZABLE（可串行化）</strong></li>
</ol>
<p>最高的隔离级别，完全服从 ACID 的隔离级别，所有事务依次逐个执行，这样事务之间就完全不可能产生干扰，<strong>能够防止脏读、幻读以及不可重复读</strong>。</p>
<p>以下是 SQL 隔离级别和各种读之间的关系：</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>READ-UNCOMMITTED</code></td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>READ-COMMITTED</code></td>
<td>❌</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td><code>REPEATABLE-READ</code></td>
<td>❌</td>
<td>❌</td>
<td>✔</td>
</tr>
<tr>
<td><code>SERIALIZABLE</code></td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
</tbody>
</table>
<h3> 实例</h3>
<p>关于回滚，主要涉及 <code>Connection</code> 对象，常用的三个方法如下：</p>
<table>
<thead>
<tr>
<th>返回值</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>void</code></td>
<td><code>setAutoCommit(boolean autoCommit)</code></td>
<td>设定连接的自动提交模式，<code>true</code> 表示自动提交，<code>false</code> 表示手动提交</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>commit()</code></td>
<td>使上次提交/回滚以来所做的所有更改成为永久更改，并释放此 <code>Connection</code> 对象当前持有的所有数据库锁</td>
</tr>
<tr>
<td><code>void</code></td>
<td><code>rollback()</code></td>
<td>撤销当前十五中所做的所有更改，并释放此 <code>Connection</code> 对象当前持有的所有数据库锁</td>
</tr>
</tbody>
</table>
<p>以下是一个回滚实例，我们当我们第一次插入一条数据时，由于是新数据，所以不会报错，但是如果我们执行一次程序之后再次执行，此时按理来说就会报错，因为插入的数据重复，这时候利用事务就可以十分方便的解决这个问题，我们设置插入出错就回滚到未出错之前的状态，这样就能保证插入数据不会报错了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上述回滚的方式外，JDBC 还支持设置保存点的方式，我们可以使用事务回滚到指定的保存点，主要涉及的方法如下：</p>
<ul>
<li><code>setSavepoint(String savePointName)</code>：创建新的保存点，返回一个 <code>SavePoint</code> 对象；</li>
<li><code>rollback(String savePointName)</code>：回滚到指定保存点；</li>
</ul>
<h2> 连接池</h2>
<h3> 简介</h3>
<p>当我们使用多线程时，每个线程如果都需要连接数据库来执行 SQL 语句，那么每个线程都得创建一个连接，然后在使用之后关闭。这个创建和关闭连接的过程是十分耗时的，一旦多线程并发时，就容易导致系统卡顿。针对这一问题，提出使用数据库连接池。数据库连接池，其实就相当于一个集合，是一个存放数据库连接的容器。当我们的系统初始化好之后，集合就被创建，集合中会申请一些连接对象，当用户来访问数据库时，从集合中获取连接对象，一旦用户访问完毕，就将连接对象返还给容器。</p>
<p>使用数据库连接池的优点：一来是节约资源，二来提高了用户访问的效率。</p>
<h3> 常用数据库连接池</h3>
<h4> C3P0</h4>
<ol>
<li>导包</li>
</ol>
<p>首先需要导包，先去下载 C3P0 对象的 jar 包，下载地址：<a href="https://sourceforge.net/projects/c3p0/%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B0%86%E5%85%B6%E4%B8%AD%E7%9A%84%E5%A6%82%E4%B8%8B%E4%B8%A4%E4%B8%AA%E5%8C%85%E5%AF%BC%E5%85%A5%EF%BC%9B" target="_blank" rel="noopener noreferrer">https://sourceforge.net/projects/c3p0/，然后将其中的如下两个包导入；</a></p>
<p></p>
<ol start="2">
<li>定义配置文件</li>
</ol>
<p>创建 C3P0 对应的配置文件，注意：配置文件一般放在 <code>src</code> 路径下，而且文件的名称要必须为以下其中的一个：</p>
<ul>
<li><code>c3p0.properties</code></li>
<li><code>c3p0-config.xml</code></li>
</ul>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>
<p>创建连接池对象</p>
</li>
<li>
<p>获取连接对象</p>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h4> Druid</h4>
<ol>
<li>导包</li>
</ol>
<p>导入 Druid 的 jar 包，下载地址：<a href="https://repo1.maven.org/maven2/com/alibaba/druid/" target="_blank" rel="noopener noreferrer">https://repo1.maven.org/maven2/com/alibaba/druid/</a></p>
<ol start="2">
<li>定义配置文件</li>
</ol>
<p>配置文件名称无要求，但是后缀名为 <code>.properties</code>，而且可以存放在任意目录下；</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>加载配置文件</li>
<li>创建连接池对象</li>
<li>获取连接对象</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>今天的内容到此就结束了，老规矩，点赞关注走一波 🧐。</p>
<p>对于文中有错或遗漏的地方，还烦请各位大佬在评论区指出来。我是benjamin，一个技术栈主要为 Java 的菜鸟程序员，关注我，一起学习成长吧！</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/ez4jam1n/ez4jam1n@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>是时候拥抱 Junit 单元测试了</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220718-test-with-junit.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220718-test-with-junit.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">是时候拥抱 Junit 单元测试了</source>
      <description>作者：benjamin 博客：studio 原文：https://mp.weixin.qq.com/s/_FWd0Bj3DlbCReex6pqJKQ 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Mon, 18 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/_FWd0Bj3DlbCReex6pqJKQ" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/_FWd0Bj3DlbCReex6pqJKQ</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 何为测试</h2>
<p>在计算机领域中，所谓测试，描述的是一种用来鉴定软件正确性、完整性和质量的过程。而软件测试又一般可以分为黑盒测试和白盒测试，两者的相关定义如下。</p>
<h3> 黑盒测试</h3>
<blockquote>
<p>黑盒测试（<code>black-box testing</code>），也称黑箱测试，是软件测试方法，测试应用程序的功能，而不是其内部结构或运作。测试者不需具备应用程序的代码、内部结构和编程语言的专门知识。测试者只需知道什么是系统应该做的事，即当键入一个特定的输入，可得到一定的输出。测试案例是依应用系统应该做的功能，照规范、规格或要求等设计。测试者选择有效输入和无效输入来验证是否正确的输出。</p>
</blockquote>
<p>黑盒测试方法可适合大部分的软件测试，例如集成测试（<code>integration testing</code>）以及系统测试（<code>system testing</code>）。</p>
<h3> 白盒测试</h3>
<blockquote>
<p>白盒测试（<code>white-box testing</code>），又称透明盒测试 <code>glass box testing</code>、结构测试 <code>structural testing</code> 等）是一个测试软件的方法，测试应用程序的内部结构或运作，而不是测试应用程序的功能（即黑盒测试）。在白盒测试时，以编程语言的角度来设计测试案例。测试者输入资料验证资料流在程序中的流动路径，并确定适当的输出，类似测试电路中的节点。</p>
</blockquote>
<p>白盒测试可以应用于单元测试（<code>unit testing</code>）、集成测试（<code>integration testing</code>）和系统的软件测试流程，可测试在集成过程中每一单元之间的路径，或者主系统跟子系统中的测试。尽管这种测试的方法可以发现许多的错误或问题，它可能无法检测未使用部分的规范。</p>
<p>介绍一下黑白盒测试，主要是为了大家有一个概念，明白两者之间的区别，关于更多测试的内容，这里就不展开讲了，毕竟我们的重点是 JUnit。</p>
<h2> JUnit 简介</h2>
<h3> 什么是 JUnit</h3>
<blockquote>
<p>官网：<a href="https://junit.org/" target="_blank" rel="noopener noreferrer">https://junit.org/</a></p>
</blockquote>
<p>JUnit 是一个编写可重复测试的简单框架，是单元测试框架 xUnit 的一个实例，属于白盒测试。</p>
<p>针对 Java 语言而言，程序中最小的功能单元是方法，因此，对 Java 程序进行单元测试就是针对单个 Java 方法的测试。</p>
<p>在我们简单的小程序中，平常测试使用的方法是在主类中创建对象，然后调用对应方法。但是这样一来存在两个缺点：</p>
<ol>
<li>不能将测试代码和业务代码分离；</li>
<li>未打印出测试结果和期望结果；</li>
</ol>
<p>因此此时我们就需要一种新的测试框架来帮助我们编写测试，而 JUnit 则是专门针对 Java 而设计的一种标准单元测试框架。作为一个 Java 开发者，学习 JUnit 来进行测试是必备技能。</p>
<h3> 如何安装 JUnit</h3>
<ul>
<li><strong>本地安装</strong></li>
</ul>
<p>对于这种方法，我们只需要去下载 JUnit 最新的包，当前有 Junit4 和 Junit5 两个版本，可以根据自己的需要进行选择然后导入我们 IDE 的依赖文件即可，依赖文件下载地址如下：</p>
<blockquote>
<p>JUnit4：<a href="https://github.com/junit-team/junit4/releases/" target="_blank" rel="noopener noreferrer">https://github.com/junit-team/junit4/releases/</a></p>
<p>JUnit5：<a href="https://github.com/junit-team/junit5/releases/" target="_blank" rel="noopener noreferrer">https://github.com/junit-team/junit5/releases/</a></p>
</blockquote>
<p>以 IDEA 为例，依次打开 <code>File -&gt; Project Structure -&gt; Project Settings -&gt; Modules -&gt; Dependencies -&gt; 点击 + -&gt; Library... -&gt; Java</code>，最后找到下载的 JUnit 文件即可；</p>

<ul>
<li><strong>Maven 安装</strong></li>
</ul>
<p>当使用 Maven 之后，我们就能十分简单地安装 JUnit 了，只需要在项目的 <code>pom.xml</code> 配置文件中导入依赖即可；</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 使用 Junit 进行单元测试</h3>
<p>首先我们需要有一个主类，然后基于该类来进行测试，这里我们以简单的运算器为例；</p>
<p>创建一个简易计算机类 <code>Calc</code>，然后包括加法 <code>add</code> 和减法 <code>sub</code> 两个方法；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义好上述主类之后，我们来进行测试，测试步骤如下；</p>
<ol>
<li><strong>定义测试类</strong></li>
</ol>
<p>定义测试类时，我们推荐定义类名时就是 <strong>主类 Test</strong> 的形式，比如我们上面的类为 <code>Calc</code>，我们要对其进行测试，则测试类的类名为 <code>CalcTest</code>；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>定义测试方法</strong></li>
</ol>
<p>测试类定义好之后，我们就可以定义测试方法了，而定义测试方法时，我们也有几点建议；</p>
<ul>
<li>测试方法名是在主类方法名前加上 <code>test</code>，比如我们上边的方法为 <code>add</code>，则我们对应的测试方法名为 <code>testAdd</code>；</li>
<li>针对测试方法的返回值，因为我们只需要在方法内给出结果即可，不用再供其他人调用，所以建议返回值设置为 <code>void</code>；</li>
<li>针对测试方法的参数列表，由于我们主要还是针对传统建类调用方法测试的方法，所以此时最好是保持参数列表为空；</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<code>@Test</code> 为注解，用来注释一个普通的方法为一条测试用例。<code>assertEquals</code> 方法用于断言两个值是否相等。</p>
<p>如果测试成功，则在 IDE 中会出现如下提示。</p>
<p></p>
<p>一般来讲，测试成功一般是绿色，而测试失败则是红色。</p>
<ul>
<li>测试成功的界面</li>
</ul>
<p></p>
<ul>
<li>测试失败的界面</li>
</ul>
<p></p>
<p>总结起来，我们针对一个方法的具体测试的步骤如下：</p>
<ol>
<li>首先是创建被测试类的对象；</li>
<li>然后调用被测试的方法；</li>
<li>最后加入断言，判断调用方法得到结果和实际的结果之间是否相同；</li>
</ol>
<h2> JUnit 常用注解</h2>
<p>由于现在主要用到的有 Junit4 和 Junit5 两个版本，而两者之间也是存在一些区别的，所以在这里给出两者中常用注解的一些差异。</p>
<p>下表中，给出了 Junit4 和 Junit5 中所共有功能的对应注解：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Junit4 注解</th>
<th>Junit5 注解</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>@Test</code></td>
<td><code>@Test</code></td>
<td style="text-align:left">标识一条测试用例</td>
</tr>
<tr>
<td style="text-align:center"><code>@Ignore</code></td>
<td><code>@Disable</code></td>
<td style="text-align:left">忽略的测试用例</td>
</tr>
<tr>
<td style="text-align:center"><code>@Before</code></td>
<td><code>@BeforeEach</code></td>
<td style="text-align:left">每一个测试方法之前运行</td>
</tr>
<tr>
<td style="text-align:center"><code>@After</code></td>
<td><code>@AfterEach</code></td>
<td style="text-align:left">每一个测试方法之后运行</td>
</tr>
<tr>
<td style="text-align:center"><code>@BefreClass</code></td>
<td><code>@BeforeAll</code></td>
<td style="text-align:left">所有测试开始之前运行</td>
</tr>
<tr>
<td style="text-align:center"><code>@AfterClass</code></td>
<td><code>@AfterAll</code></td>
<td style="text-align:left">所有测试结果之后运行</td>
</tr>
<tr>
<td style="text-align:center"><code>@Category</code></td>
<td><code>@Tag</code></td>
<td style="text-align:left">标记和过滤</td>
</tr>
</tbody>
</table>
<p>而相对于 Junit4，Junit5 也有做出升级，其特有的一些注解如下：</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>@TestFactory</code></td>
<td>测试工厂进行动态测试</td>
</tr>
<tr>
<td><code>@Nested</code></td>
<td>嵌套测试</td>
</tr>
<tr>
<td><code>@ExtendWith</code></td>
<td>注册自定义扩展</td>
</tr>
</tbody>
</table>
<h2> 常用断言方法</h2>
<p>而在测试中，我们经常用到断言方法。这些断言方法都来自于由继承了 <code>java.lang.Object</code> 的 <code>Assert</code> 类，用于提供编写测试。</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>void assertArrayEquals([String message],expected array, result array)</code></td>
<td style="text-align:left">断言预期数组和结果数组相等</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertEquals([String message],expected value, actual value)</code></td>
<td style="text-align:left">断言两个值是否相等。类似于字符串比较使用的 <code>equals()</code> 方法</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertNotEquals(String message], first, second)</code></td>
<td style="text-align:left">查看两个对象是否不相等</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertNull(String message], object)</code></td>
<td style="text-align:left">查看对象是否为空</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertNotNull(String message], object)</code></td>
<td style="text-align:left">查看对象是否不为空</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertSame(String message], expected, actual)</code></td>
<td style="text-align:left">查看两个对象的引用是否相等。类似于使用 <code>==</code> 比较两个对象</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertNotSame(String message], unexpected, actual)</code></td>
<td style="text-align:left">查看两个对象的引用是否不相等。类似于使用 <code>!=</code> 比较两个对象</td>
</tr>
<tr>
<td style="text-align:left"><code>void assertTrue(String message], boolean condition)</code></td>
<td style="text-align:left">查看运行结果是否为 <code>true</code></td>
</tr>
<tr>
<td style="text-align:left"><code>void assertFalse([String message], boolean condition)</code></td>
<td style="text-align:left">查看运行结果是否为 <code>false</code></td>
</tr>
<tr>
<td style="text-align:left"><code>void assertThat([String message], actual, matcher)</code></td>
<td style="text-align:left">查看实际值是否满足指定的条件</td>
</tr>
<tr>
<td style="text-align:left"><code>fail()</code></td>
<td style="text-align:left">让测试失败</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>好了，以上就是有关单元测试 Junit 的简单使用指南了。虽说大家现在还是有很多人在使用 Junit4，但如果你之前并未接触过 Junit，个人建议那就直接学习 Junit5 吧。当然了，Junit4 了解也是很有必要的，毕竟技多不压身，多一份技能少求人嘛。</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/ez4jam1n/ez4jam1n@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Lombok 安装及使用指南</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220719-lombok-install-and-usage.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220719-lombok-install-and-usage.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">Lombok 安装及使用指南</source>
      <description>作者：benjamin 博客：studio 原文：https://mp.weixin.qq.com/s/t4h5VRfbYqNIRZVlMaqPEg 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Tue, 19 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/t4h5VRfbYqNIRZVlMaqPEg" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/t4h5VRfbYqNIRZVlMaqPEg</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 简介</h2>
<p>为了减少写一些 <code>get/set/toString</code> 方法，让项目代码更加整洁，提高开发效率，发现大家都开始采用 Lombok 这个工具。Lombok 是一个 Java 类库，它会自动插入编辑器和构建工具，用于帮助开发人员消除 Java 中冗长样板代码。而我们开发人员所要做的，仅仅是添加几个 Lombok 中的注解，就可以替换掉原来的多行 <code>get/set/toString</code> 方法代码，既简洁也易于维护。下面我们就来看看，如何安装并使用这一工具。</p>
<h2> 安装 Lombok</h2>
<p>日常开发中，相信大多数人现在使用的都是 IDEA 这个 Java 神器了，如果你还在使用 Eclipse 或者 MyEclipse 等工具，那强烈推荐你去体验一把 IDEA，相信你一用上它就会爱上它的强大！下面我就以在 IDEA 中使用 Lombok 为例，看看如何安装并使用它。</p>
<p>在先前 IDEA 的版本中，Lombok 是需要通过插件来安装的，安装方法如下：依次进入<code>File -&gt; Settings -&gt; Plugins</code>，然后搜索 Lombok ，最后进行安装即可。而在新版本的 IDEA 中，Lombok 已经被集成到 IDEA 中，我们不用再去安装它就可以直接使用，可以说是十分方便了。</p>
<ul>
<li>老版本 IDEA 安装 Lombok</li>
</ul>

<ul>
<li>新版本中集成了 Lombok</li>
</ul>

<p>以上就是 Lombok 的安装过程了，是不是十分简单？那接下来我们就来看看，如何在我们的项目中使用 Lombok！</p>
<h2> Lombok 使用</h2>
<p>现在大家进行项目管理时用的工具大多应该都是 Maven，所以我们直接在需要使用 Lombok 的项目中加入 Lombok 编译支持，也就是在 <code>pom.xml</code> 文件中加入以下依赖。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导入相关依赖之后，接下来就是具体使用过程了。</p>
<h3> 具体使用</h3>
<p>在需要的实体类中引入相关注解即可，只不过注解不同它们所对应的功能也不同，而且同一个注解可能在不同位置的功能也不一样。如下图；</p>
<p></p>
<h3> 常用注解</h3>
<h4> @Data</h4>
<p>注解在 <strong>类</strong> 上：给类的所有属性提供 <code>get</code> 和 <code>set</code> 方法，此外还有 <code>equals、canEqual、hashCode、toString</code> 方法以及 <strong>默认参数为空的构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Setter</h4>
<p>注解在 <strong>类</strong> 上：为该类所有属性均提供 <code>set</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解在 <strong>属性</strong> 上：为该属性提供 <code>set</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Getter</h4>
<p>注解在 <strong>类</strong> 上：为该类所有属性均提供 <code>get</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解在 <strong>属性</strong> 上：为该属性提供 <code>get</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @ToString</h4>
<p>注解在 <strong>类</strong> 上：生成所有参数的 <code>toString()</code> 方法，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Value</h4>
<p>注解在 <strong>类</strong> 上：生成 <code>get</code> 方法，以及 <code>equals、hashCode、toString</code> 方法，同时提供 <strong>含所有参数的构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @AllArgsConstructor</h4>
<p>注解在 <strong>类</strong> 上：为类提供一个 <strong>全参构造方法</strong>，但此时不再提供默认构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @NoArgsConstructor</h4>
<p>注解在 <strong>类</strong> 上：为类提供一个 <strong>无参构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @RequiredArgsConstructor</h4>
<p>注解在 <strong>类</strong> 上：使用类中所有带 <code>@NonNull</code> 注解的或带有 <code>final</code> 修饰的成员变量生成对应构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @NonNull</h4>
<p>注解在 <strong>属性</strong> 上，自动生成一个关于该参数的非空检查，若参数为 <code>null</code>，则抛出一个空指针异常，同时提供 <strong>默认构造方法</strong>，具体用法可以参照上面的例子；</p>
<h4> @EqualsAndHashCode</h4>
<p>注解在 <strong>类</strong> 上，生成 <code>equals、canEquals、hasnCode</code> 方法，同时会生成默认构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Cleanup</h4>
<p>注解在 <strong>局部变量</strong> 前，保证该变量代表的资源使用后自动关闭，默认调用资源的 <code>close()</code> 方法，若该资源有其它关闭方法，可用 <code>@Cleanup("方法名")</code> 来指定要调用的方法，同时提供 默认构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Synchronized</h4>
<p>注解在 <strong>类方法 或 实例方法</strong>：效果与 <code>synchronized</code> 关键字相同，区别在于锁对象不同，对于类方法和实例方法，<code>synchronized</code> 关键字的锁对象分别是 <strong>类的</strong> <code>**class**</code> <strong>对象和</strong> <code>**this**</code> <strong>对象</strong>，而 <code>@Synchronized</code> 的锁对象分别是 <strong>私有静态</strong> <code>**final**</code> <strong>对象</strong> <code>**lock**</code> <strong>和 私有</strong> <code>**final**</code> <strong>对象</strong> <code>**lock**</code>，也可以自己指定锁对象，同时提供默认构造方法；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @SneakyThrows</h4>
<p>注解在 <strong>方法</strong> 上：将方法中的代码用 <code>try-catch</code> 语句包裹，捕获异常并在 <code>catch</code> 中用 <code>Lombok.sneakyThrow(e)</code> 将异常抛出，还可以用 <code>@SneakyThrows(Exception.class)</code> 的形式指定抛出异常类型，同时提供 <strong>默认构造方法</strong>；</p>
<ul>
<li><strong>使用前</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>使用后</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> @Log</h4>
<p>注解在 <strong>类</strong> 上：主要用于我们记录日志信息，同时提供 <strong>默认构造方法</strong>。它封装了多个主流 <code>Log</code> 库，主要有如下几个；</p>
<ul>
<li>
<p><code>@Log</code></p>
</li>
<li>
<p><code>@Slf4j</code></p>
</li>
<li>
<p><code>Log4j</code></p>
</li>
<li>
<p><code>Log4j2</code></p>
</li>
</ul>
<h2> 总结</h2>
<p>以上就是关于 Lombok 的相关使用小技巧了，如果你还没有使用过它，那就赶紧去试试吧！</p>
<p>最后，创作不易，如果你觉得我的文章对你有所帮助，那就来个一键三连吧！</p>
<h2> 参考资料</h2>
<ol>
<li><a href="https://projectlombok.org/features/all" target="_blank" rel="noopener noreferrer">https://projectlombok.org/features/all</a></li>
</ol>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/ez4jam1n/ez4jam1n@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>Fastjson V2 简单使用手册</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220720-fastjson2-quickstart.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220720-fastjson2-quickstart.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">Fastjson V2 简单使用手册</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 在日常 Java 企业级开发中，可能避不开 JSON 这个格式。 JSON 源于 1999 年的 JS 语言规范 ECMA262 的一个子集，然后又在 2003 年作为一种数据格式 ECMA404 发布，到了 2006 年，又作为 rfc4627 发布。直到现在，JSON 的应用已经十分广泛了。</description>
      <category>Java 基础教程</category>
      <pubDate>Wed, 20 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>在日常 Java 企业级开发中，可能避不开 <code>JSON</code> 这个格式。 <code>JSON</code> 源于 1999 年的 <code>JS</code> 语言规范 <code>ECMA262</code> 的一个子集，然后又在 2003 年作为一种数据格式 <code>ECMA404</code> 发布，到了 2006 年，又作为 <code>rfc4627</code> 发布。直到现在，<code>JSON</code> 的应用已经十分广泛了。</p>
<p><code>JSON</code> 基于纯文本，所以阅读起来也十分轻松，而且规范简单，容易处理，能够做到开箱即用，最最重要的是，<code>JSON</code> 和平台无关，所以能够作为不同系统间的传输格式协议。</p>
<p><code>JSON</code> 有 7 大基本数值，分别是：<code>false</code>、<code>null</code>、<code>true</code>、<code>object</code>、<code>array</code>、<code>number</code>、<code>string</code>。其结构也非常简单，只有两种结构：一个是 <strong>数组</strong>，一个是<strong>对象中的键值对集合</strong>。其中，对象用 <code>{}</code> 来表示，其内部是 <code>key:value</code> 形式，而数组则是用 <code>[]</code> 来表示，不同值之间用逗号 <code>,</code> 分隔。</p>
<p>以下就是一个 <code>JSON</code> 的简单示例：</p>
<div class="language-json line-numbers-mode" data-ext="json"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在 Java 中，主流的 <code>JSON</code> 库只要有以下三个：</p>
<ol>
<li><code>Fastjson</code>：国内阿里巴巴公司所开发的 <code>JSON</code> 库，性能出众且快速。</li>
<li><code>Jackson</code>：<code>Spring</code> 默认的 <code>JSON</code> 库，社区十分活跃，更新迭代快。</li>
<li><code>Gson</code>：谷歌出品的 <code>JSON</code> 库，算是目前来说功能最全的 <code>JSON</code> 库了。</li>
</ol>
<p>得益于 <code>Fastjson</code> 的超高性能，国内的大部分公司都选择了阿里出品的 <code>Fastjson</code> 作为处理 <code>JSON</code> 的工具库。本文就来看看，<code>Fastjson</code> 的一些常用的使用技巧。</p>
<h2> 使用技巧</h2>
<p>首先，我们创建一个 <code>Maven</code> 项目，用来演示 <code>Fastjson</code> 的使用，也方便我们管理依赖。同时，这里选择 <code>Fastjson v2</code> 来作为今天的演示主角。</p>
<p>当然，首要的工作就是创建一个 <code>Maven</code> 项目，如果你还有点摸不着头脑，那可以移步先去看看前备知识：</p>
<blockquote>
<p><a href="https://benjam1n.eu.org/md/java/maven/20220104-maven-project-with-idea" target="_blank" rel="noopener noreferrer">Maven 教程：使用 IDEA 创建 Maven 项目</a></p>
</blockquote>
<p>当我们创建完成一个 <code>Maven</code> 项目之后，首要的工作就是在项目的 <code>pom.xml</code> 中添加 <code>Fastjson V2</code> 的依赖。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们创建一个 <code>Hero</code> 类，方便后续过程中的使用。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> Java 对象序列化为 JSON</h3>
<p>在我们的主类中创建一个 <code>Hero</code> 对象，然后利用 <code>toJSONString()</code> 方法将其转换为 <code>JSON</code> 字符串，可以看到结果正确转换了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> JSON 解析为 Java 对象</h3>
<p>假设有一个 <code>JSON</code> 字符串，我们想将其转换为 Java 对象，则可以使用 <code>parseObject()</code> 方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> JSON 解析为 JSONObject</h3>
<p>将 <code>JSON</code> 解析为 <code>JSONObject</code> 的方法和将 <code>JSON</code> 转换为 Java 对象的方法类似，但是少了一个参数，这里需要注意。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> JSON 解析为 JSONArray</h3>
<p>要将 <code>JSON</code> 解析为 <code>JSONArray</code>，此时可以使用 <code>parseArray()</code> 方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 总结</h2>
<p>以上就是日常开发中常见的 4 种其他格式和 <code>JSON</code> 格式之间的转换过程了，其中，最常用的应该莫过于 <code>JSON</code> 和 Java 对象之间的相互转换了，一定要熟练掌握！关于 <code>Fastjson V2</code> 的简单使用就介绍到这里了，关于更多 <code>Fastjson V2</code> 的高级使用技巧，等待我们后续文章再见吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>深入浅出 Java 注解</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20220721-annotations.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20220721-annotations.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">深入浅出 Java 注解</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 注解简介 所谓注解，其实就像一种拥有特定作用的注释，自 JDK1.5 及之后版本所引入的特性，它是放在 Java 源码的类、方法、字段、参数前的一种用作标注的“元数据”，与类、接口、枚举处于同一个层次中。 通过其作用的不同，我们常常将注解分为如下 3 类：</description>
      <category>Java 基础教程</category>
      <pubDate>Thu, 21 Jul 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 注解简介</h2>
<p>所谓注解，其实就像一种拥有特定作用的注释，自 JDK1.5 及之后版本所引入的特性，它是放在 Java 源码的类、方法、字段、参数前的一种用作标注的“元数据”，与类、接口、枚举处于同一个层次中。</p>
<p>通过其作用的不同，我们常常将注解分为如下 3 类：</p>
<ol>
<li><strong>编写文档</strong>：通过代码中标识的注解生成对应文档（即类似于 Java doc 的文档）；</li>
<li><strong>代码分析</strong>：通过代码中标识的注解对代码进行分析（使用反射）；</li>
<li><strong>编译检查</strong>：通过代码中标识的注解让编译器能实现基本的编译检查（<code>@Override</code>）；</li>
</ol>
<h2> 常用的预定义注解</h2>
<h3> <code>@Override</code></h3>
<p>一般是用在方法上，表示重写该父类的方法，比如我们使用最多的 <code>toString()</code> 方法，它是 <code>Object</code> 类的一个方法，而我们的写的类都是继承自 <code>Object</code> 类，所以我们自定义的所有类都是有 <code>toString()</code> 方法的。但是如果我们自定义类中的方法在父类中没有，则不能使用该注解，否则会导致无法编译通过。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>@Deprecated</code></h3>
<p>一般用在方法之前，表示该方法已经过期，不建议再继续使用（但是仍然有效，只不过可能有更新的版本，推荐使用更新的版本）。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>@SuppressWarnings</code></h3>
<p>表示忽略警告信息，常用的值以及含义如下表：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>deprecation</code></td>
<td>使用了不赞成使用的类或方法时的警告</td>
</tr>
<tr>
<td><code>unchecked</code></td>
<td>使用了未经检查的转换时的警告</td>
</tr>
<tr>
<td><code>fallthrough</code></td>
<td>当 <code>switch</code> 程序块直接通往下一种情况而没有 <code>break</code> 时的警告</td>
</tr>
<tr>
<td><code>path</code></td>
<td>在类路径、源文件路径等中有不存在的路径时的警告</td>
</tr>
<tr>
<td><code>serial</code></td>
<td>当在可序列化的类上缺少 <code>serialVersionUID</code> 定义时的警告</td>
</tr>
<tr>
<td><code>finally</code></td>
<td>任何 <code>finally</code> 子句不能正常完成时的警告</td>
</tr>
<tr>
<td><code>rawtypes</code></td>
<td>泛型类型未指明</td>
</tr>
<tr>
<td><code>unused</code></td>
<td>引用定义了，但是没有被使用</td>
</tr>
<tr>
<td><code>all</code></td>
<td>关闭以上所有情况的警告</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> 自定义注解</h2>
<h3> 格式</h3>
<p>我们可以使用 <code>@interface</code> 来自定义注解，其格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个简单的示例如下，其中 <code>AnnoDemo</code> 代表着我们自定义注解的名称，而 <code>name()</code>、<code>age()</code>、<code>score()</code> 则分别表示自定义注解的三个属性，而且我们利用关键字 <code>default</code> 对每个属性都赋予了默认值。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 原理</h3>
<p>注解本质上相当于一个接口，它默认继承自 <code>java.lang.annotation.Annotation</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 参数</h3>
<p>注解的参数类似于无参的方法，通常我们推荐用 <code>default</code> 来设定一个默认值，对于方法的基本要求通常有如下几点：</p>
<ol>
<li>方法的返回值类型不可以是 <code>void</code>；</li>
<li>如果定义了方法，那么在使用时需要给方法进行赋值，赋值的规则如下：
<ol>
<li>若定义方法时，使用了关键字 <code>default</code> 对方法赋予了默认初始值，那么在使用注解时，可以不用对方法进行再次赋值；</li>
<li>若只有一个方法需要赋值，且方法名为 <code>value</code>，那么此时 <code>value</code> 可以省略，直接定义值即可；</li>
<li>数组赋值时，值需要用大括号 <code>{}</code> 包裹，若数组中只有一个值，那么此时 <code>{}</code> 可以省略；</li>
</ol>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上述例子中，<code>name()</code>、<code>age()</code>、<code>score()</code> 就是我们自定义注解的参数。而当我们要是用该注解时，则通过如下方式来对参数进行赋值。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 元注解</h2>
<h3> 定义</h3>
<p>所谓元注解(<code>meta annotation</code>)，就是可以用来修饰其他注解的注解。</p>
<h3> 常用的元注解</h3>
<ol>
<li><code>@Target</code></li>
</ol>
<p>描述注解所修饰的对象范围，其取值主要有如下几种：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ElementType.TYPE</code></td>
<td>表示可以作用于类或接口</td>
</tr>
<tr>
<td><code>ElementType.FIELD</code></td>
<td>表示可以作用于成员变量</td>
</tr>
<tr>
<td><code>ElementType.METHOD</code></td>
<td>表示可以作用于方法</td>
</tr>
<tr>
<td><code>ElementType.CONSTRUCTOR</code></td>
<td>表示可以作用于构造方法</td>
</tr>
<tr>
<td><code>ElementType.PARAMETER</code></td>
<td>表示可以作用于方法的参数</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><code>@Retention</code></li>
</ol>
<p>用于约束注解的生命周期，其取值如下：</p>
<table>
<thead>
<tr>
<th>值</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>RetentionPolicy.SOURCE</code></td>
<td style="text-align:left">表示在源代码文件中有效，注解将被编译器丢弃（注解信息仅保留在源码中，源码经编译后注解信息丢失，不再保留到字节码文件中）</td>
</tr>
<tr>
<td><code>RetentionPolicy.CLASS</code></td>
<td style="text-align:left">表示在字节码文件中有效，注解在字节码文件中可用，但会被 JVM 丢弃</td>
</tr>
<tr>
<td><code>RetentionPolicy.RUNTIME</code></td>
<td style="text-align:left">表示在运行时有效，此时可以通过反射机制来读取注解的信息</td>
</tr>
</tbody>
</table>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><code>@Documented</code></li>
</ol>
<p>描述其他类型的注解是否被抽取到 API 文档中。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li><code>@Inherited</code></li>
</ol>
<p>这是一个标记注解，描述某个注解能够被子类继承，但是该元注解只适合已经配置了 <code>@Target(ElementType.TYPE)</code> 类型的自定义注解，而且仅针对于类的继承，而对于接口的继承则无效。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li><code>@Repeatable</code></li>
</ol>
<p>该注解是从 JDK1.8 新引入的元注解，表示在同一位置能够重复相同的注解。在没有该注解之前，我们一般是无法在同一类型上使用相同注解的，但引入该注解后，我们就可以在同一类型上使用相同注解。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>利用 <code>@Repeatable</code> 配置自定义注解之后，我们就可以在某个类型声明处添加多个我们自定义的注解了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>总结上述的知识点，我们将自定义注解的过程归纳为如下 3 步。</p>
<ol>
<li><strong>定义一个注解</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>添加参数并设置默认值</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li><strong>利用元注解来配置我们的自定义注解</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际应用过程中，利用元注解配置自定义注解时，必须设置 <code>@Target</code> 和 <code>@Retention</code> 两个元注解，而且 <code>@Retention</code> 的值通常是设置为 <code>RetentionPolicy.RUNTIME</code>。</p>
<p>好了，以上就是我们注解的相关概念以及自定义注解所需要的掌握的一些知识点了，如果你觉得对你有所帮助，那就来一波点赞关注吧！
<strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/ez4jam1n/ez4jam1n@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>流程控制知识大闯关</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20221127-loop-in-action.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20221127-loop-in-action.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">流程控制知识大闯关</source>
      <description>作者：benjamin 博客：studio 原文：https://mp.weixin.qq.com/s/K4aL8o_ND7R_W0mooNhusw 吾生也有涯，而知也无涯。</description>
      <category>Java 基础教程</category>
      <pubDate>Sun, 27 Nov 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<p>原文：<a href="https://mp.weixin.qq.com/s/K4aL8o_ND7R_W0mooNhusw" target="_blank" rel="noopener noreferrer">https://mp.weixin.qq.com/s/K4aL8o_ND7R_W0mooNhusw</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>既然已经学习了 <code>Java</code> 中的流程控制，接下来就来实际操作下，利用我们所学知识来解决实际的问题。</p>
<p>光学是没有用的，只有不断实践才能了解其中的真正含义。</p>
<h2> 闯关</h2>
<h3> 第一关：打印折纸的次数</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>已知世界上最高的山峰是珠穆朗玛峰，它的高度是 <code>8844.43</code> 米，假设有一张足够大的纸，其厚度为 <code>0.1</code> 毫米，那么请问我要折叠多少次，才能将这张纸折成珠穆朗玛峰的高度？</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">折叠次数</th>
<th style="text-align:center">厚度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>1</code></td>
<td style="text-align:center"><code>0.1</code></td>
</tr>
<tr>
<td style="text-align:center"><code>2</code></td>
<td style="text-align:center"><code>0.2</code></td>
</tr>
<tr>
<td style="text-align:center"><code>3</code></td>
<td style="text-align:center"><code>0.4</code></td>
</tr>
<tr>
<td style="text-align:center"><code>4</code></td>
<td style="text-align:center"><code>0.8</code></td>
</tr>
<tr>
<td style="text-align:center"><code>……</code></td>
<td style="text-align:center"><code>……</code></td>
</tr>
</tbody>
</table>
<p>可以发现，纸张初始厚度为 <code>0.1</code> 毫米，而每次折叠之后，折叠后的纸张厚度都是未折叠前的 <code>2</code> 倍。而同时，我们事先是不清楚具体要叠多少次的，所以我们选择 <code>while</code> 来进行循环。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第二关：回文数</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>假设给你一个整数 <code>x</code>，如果这个数是回文数，打印 <code>true</code>，否则打印 <code>false</code>。</p>
<p>回文数：指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>既然回文数的定义是正序和倒序读都是一样，那么我们就把这个数逆转，然后比较逆转的数和原来的数是否相等，如果相等，那么说明这个数是一个回文数，否则它就不是一个回文数。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第三关：求商和余数</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>给定两个整数，分别是被除数和除数，然后在不使用乘法、除法和 <code>%</code> 运算符的情况下，求出商和余数。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>平时如果要求两数的商，那么可以使用 <code>/</code>，而要求两数的余数则可以使用 <code>%</code>。但现在已经规定不能使用这两个运算符，那么就只想另想办法。</p>
<p>我们知道，其实乘除法归根结底还是加减法的简化，所以我们可以利用减法来实现求两数的商和余数。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第四关：逢七必过</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>游戏规则：从任意一个数字开始报数，当要报的数字是包含 <code>7</code> 或 <code>7</code> 的倍数时，都要说：过。</p>
<p>打印出 <code>1 - 100</code> 之间的满足逢七必过规则的数据。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>当一个数是 <code>7</code> 的倍数，那么这个数除以 <code>7</code> 的余数为 <code>0</code>。而如果这个数包含 <code>7</code>，那么这个数的个位或者十位是 <code>7</code>。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第五关：平方根</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>输入一个大于等于 <code>2</code> 的整数，计算并返回这个数的平方根，结果只保留整数部分。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>求一个数的平方根，通过遍历的方式，如果在不大于所给数的范围之内存在一个数的平方等于所给数，那么范围内的这个数就是所给数的平方根。而如果范围内存在一个数的平方刚好大于所给数，那么比这个数小 <code>1</code> 的数一定是所给数的平方根的整数部分，也就是我们所求的结果。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第六关：判断一个数是否为质数</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>从键盘输入一个正整数，判断该数是否为质数。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>所谓质数，就是指这个数只能被 <code>1</code> 和它本身整除，要注意 <code>1</code> 既不是质数也不是合数。</p>
<p>此时通过遍历，如果 <code>1</code> 到它之间存在一个数能被所给数整除，那么说明说给数不是一个质数。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 第七关：猜数小游戏</h3>
<ol>
<li><strong>题目</strong></li>
</ol>
<p>系统随机给出一个 <code>1 - 100</code> 之间的整数，然后用程序实现才出这个数字是多少。</p>
<ol start="2">
<li><strong>解析</strong></li>
</ol>
<p>随机数需要用 <code>Random</code> 包，然后就是通过比较输入的数和生成的随机数大小，直到最后猜中。</p>
<ol start="3">
<li><strong>实现</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>以上就是关于流程控制中关于 <code>for</code>、<code>while</code> 的知识测验了，你闯过了几关呢？</p>
<p>最后，文中所有代码已上传到 <code>Gitee</code>，有需要的朋友可以自取。</p>
<blockquote>
<p>传送门：<a href="https://gitee.com/ez4jam1n/java-in-practice" target="_blank" rel="noopener noreferrer">https://gitee.com/ez4jam1n/java-in-practice</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>static 和 final 小课堂</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20221203-oop-advance.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20221203-oop-advance.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">static 和 final 小课堂</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 学习了面向对象的一些知识点后，在看别人的代码中经常会看到 static 和 final 两个关键字，那你知道它俩都是做什么用的么，使用的时候需要注意啥呢？ 今天的内容就来一起了解下，static 和 final 关键字的使用。</description>
      <category>Java 基础教程</category>
      <pubDate>Sat, 03 Dec 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>学习了面向对象的一些知识点后，在看别人的代码中经常会看到 <code>static</code> 和 <code>final</code> 两个关键字，那你知道它俩都是做什么用的么，使用的时候需要注意啥呢？</p>
<p>今天的内容就来一起了解下，<code>static</code> 和 <code>final</code> 关键字的使用。</p>
<h2> static</h2>
<p>静态的意思，是 <code>Java</code> 中常用的修饰符，既可以用它来修饰成员变量，也可以用它来修饰成员方法。</p>
<h3> 静态变量</h3>
<p>静态变量就是用 <code>static</code> 来修饰的成员变量，最重要的特点就是一个类中的静态变量被类中的所有对象所共享。它不属于任何一个对象，而是属于类。其生命周期同类一样，共生共存，是优先于对象的。</p>
<p>和成员变量不同的是，成员变量只能通过新建对象，然后用对象名来进行调用。而静态变量不仅仅可以用这种方式，还可以直接通过类名来进行调用，而这也是更为推荐的方式。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol>
<li><strong>成员变量调用</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>静态变量调用</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 静态方法</h3>
<p>静态方法就是类中用 <code>static</code> 来修饰的成员方法，一般用来修饰公共的工具类或者测试类。</p>
<p>同样的，静态方法既可以用通过新建对象，然后用对象名来调用的方式，也可以直接通过类名来调用的方式，这也是更为推荐的方式。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 注意</h3>
<p>使用 <code>static</code> 修饰方法或变量后，需要注意以下的小细节。</p>
<ul>
<li>一个静态方法中<strong>只能</strong>访问静态变量和其他的静态方法。而不能访问非静态的变量和方法。</li>
<li>但一个非静态方法一方面既可以访问静态变量，也可以访问非静态变量；另一方面，也既可以访问静态方法，也可以访问非静态方法。</li>
<li>不同于成员方法，静态方式中是不存在 <code>this</code> 关键字的。</li>
</ul>
<h3> 静态代码块</h3>
<p>在代码中用 <code>static{}</code> 包裹起来的代码叫做静态代码块，它会随着类的加载而加载，而且会自动触发，只执行一次，一般用来对一些数据初始化。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> final</h2>
<h3> 修饰变量</h3>
<p>用 <code>final</code> 修饰的变量叫做常量，说明它只能被赋值一次。</p>
<p>实际开发中，一般用常量来作为系统的配置信息，一方面既方便维护，另一方面又可以提高代码可读性。</p>
<p>对常量进行命名时，一般遵循以下的规范：</p>
<ul>
<li>如果是单个单词，那么将它全部大写即可。</li>
<li>如果是多个单词，那么将每个单词都大写，并且单词之间用下划线 <code>_</code> 隔开。</li>
</ul>
<p>此外，对于修饰的变量的类型不同，含义也是不一样的。</p>
<p>如果修饰的变量是一个基本类型，那么表示的是该变量存储的<strong>数据值</strong>不可改变。而如果修饰的变量是一个引用类型，则表示该变量存储的<strong>地址值</strong>不能改变，但是对象内部是可以发生变化的。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 修饰方法</h3>
<p>说明该方法是最终方法，不能再被重写。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 修饰类</h3>
<p>说明这个类时最终类，不能够再被继承。也就是说，如果一个类被 <code>final</code> 所修饰，那么这个类不能作为其他任意类的福来。如果试图对一个用 <code>final</code> 修饰的类进行继承，则在编译期间可能会发生错误。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>今天的内容到此就结束了，首先介绍了 <code>static</code> 用来修饰符变量和方法的应用场景，还额外补充了静态代码块相关的知识点。另外，我们也对 <code>final</code> 用来修饰变量、方法和类时的场景进行了回顾。</p>
<p>码字不易，如果本文对你所有帮助，那就来个一键三连吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>抽象、接口和内部类</title>
      <link>https://ez4jam1n.site/studio/md/java/se/20221211-abstract.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se/20221211-abstract.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">抽象、接口和内部类</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 抽象方法 定义 所谓抽象方法，就是将公共的行为（方法）抽取到一个父类后，由于每个子类中执行的内容是不一致的，所以父类中无法确认具体的方法体，此时就可以将该方法定义为抽象方法。 格式 要定义一个抽象方法，那么需要遵循以下的格式，要注意，抽象方法一般都是没有定义</description>
      <category>Java 基础教程</category>
      <pubDate>Sun, 11 Dec 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 抽象方法</h2>
<h3> 定义</h3>
<p>所谓抽象方法，就是将公共的行为（方法）抽取到一个父类后，由于每个子类中执行的内容是不一致的，所以父类中无法确认具体的方法体，此时就可以将该方法定义为抽象方法。</p>
<h3> 格式</h3>
<p>要定义一个抽象方法，那么需要遵循以下的格式，要注意，抽象方法一般都是没有定义</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下是一个抽象方法定义的具体实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2> 抽象类</h2>
<h3> 定义</h3>
<p>知道了什么是抽象方法，那么抽象类就很简单了，如果我们发现一个类中存在着抽象方法，那么这个类一定要声明为抽象类。</p>
<h3> 格式</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 注意</h3>
<ol>
<li>抽象类不能实例化。</li>
<li>抽象类中不一定有抽象方法，但有抽象方法的类一定是抽象类。</li>
<li>抽象类中可以有构造方法。</li>
<li>如果一个类的父类是抽象类，那么这个类要么是抽象类，要么重写父类中所有的抽象方法。</li>
</ol>
<h3> 作用</h3>
<p>在抽取共性是，如果无法确定方法体，此时就可以将该方法定义为抽象方法。然后强制让子类按照某种格式重写。</p>
<h2> 接口</h2>
<h3> 定义</h3>
<p>接口是一种规则，是对行为的抽象。</p>
<h3> 格式</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 注意</h3>
<ol>
<li>接口和抽象类一样，不能被实例化。</li>
<li>接口和类之间是实现关系，通过关键字 <code>implements</code> 表示，实现格式为:</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>如果一个类实现了某个接口，那么这个类要么是抽象类，要么就得重写接口中所有的抽象方法。</li>
<li>不同于类单继承的特点，一个类是可以实现多个接口的。</li>
</ol>
<h3> 成员的特点</h3>
<ol>
<li><strong>成员变量</strong></li>
</ol>
<p>接口中，成员变量只能是常量，默认修饰符为 <code>public static final</code>。</p>
<ol start="2">
<li><strong>构造方法</strong></li>
</ol>
<p>接口中不存在构造方法。</p>
<ol start="3">
<li><strong>成员方法</strong></li>
</ol>
<p><code>JDK 7</code> 之前，只能是抽象方法，其默认修饰符为 <code>public abstract</code>。<code>JDK 8</code> 时，能够定义有方法体的方法，<code>JDK 9</code> 中，有带来了可以定义私有方法的特性。</p>
<h3> 默认方法</h3>
<p>自 <code>JDK 8</code> 之后，就允许在接口中定义默认方法，但是需要使用关键字 <code>default</code> 来修饰，从而解决接口升级的问题。</p>
<p>接口中的<strong>默认方法</strong>的定义格式为：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用默认方法时，需要注意：</p>
<ul>
<li>接口中的默认方法不是抽象方法，所以没有要求强制被重写。但如果要重写默认方法，重写时就需要去掉默认方法的关键字 <code>default</code>。</li>
<li>默认方法中的权限空置房 <code>public</code> 可以省略不写，但关键字 <code>default</code> 不能省略。</li>
<li>如果一个类实现了多个接口，而且着多个接口中还存在着重名的默认方法，那么该类就必须对重名的默认方法进行重写。</li>
</ul>
<p>以下是一个存在重名默认方法必须重写的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 静态方法</h3>
<p>除了默认方法，<code>JDK 8</code> 以后还可以在接口中定义静态方法，此时需要用关键字 <code>static</code> 修饰。</p>
<p>接口中<strong>静态方法</strong>的定义格式为：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在接口中使用静态方法时，需要注意：</p>
<ul>
<li>静态方法只能通过接口名调用，不能通过实现接口的类名或者对象名来调用。</li>
<li>权限控制符 <code>public</code> 可以省略，但关键字 <code>static</code> 不能省略。</li>
</ul>
<p>以下是一个在接口中定义静态方法和调用接口中静态方法的实例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 私有方法</h3>
<p>除了上述的静态方法和默认方法之外，<code>JDK 9</code> 中又引入接口中定义私有方法的特性。</p>
<p>其中，接口中定义私有方法的格式如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>两者的区别在于：静态的私有方法（带关键字 <code>static</code>）是为接口中的静态方法服务，而非静态的私有方法（不带关键字 <code>static</code>） 则是为接口中的默认方法服务。</p>
<p>以下是在接口中定义私有方法的实例：</p>
<ol>
<li><strong>私有方法</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>静态私有方法</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 接口和类之间的关系</h3>
<ol>
<li><strong>类和类的关系</strong></li>
</ol>
<p>类与类之间只能存在继承关系，且只限于单继承，不能多继承，但是可以多层继承。</p>
<ol start="2">
<li><strong>类和接口的关系</strong></li>
</ol>
<p>类和接口之间是实现关系，既可以单实现，也可以多实现，还能在继承一个类的同时实现多个接口。</p>
<ol start="3">
<li><strong>接口和接口的关系</strong></li>
</ol>
<p>接口之间是继承关系，但不同于类和类之间的关系，接口之间既可以单继承，也可以多继承。</p>
<h2> 内部类</h2>
<h3> 定义</h3>
<p>顾名思义，所谓内部类就是定义在类中的类。比如说在 <code>A</code> 类的内部定义了一个 <code>B</code> 类，那么我们就说 <code>B</code> 是内部类。其中 <code>B</code> 类表示的是 <code>A</code> 类的一部分，而且 <code>B</code> 类单独存在时没有任何意义。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 特点</h3>
<p>如果一个类中定义了一个内部类，那么这个内部类就能够直接访问外部类的所有成员，包括私有成员。</p>
<p>但是，如果一个外部类要访问内部类的成员，那么此时就必须创建对象。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 分类</h3>
<p><code>Java</code> 中，内部类主要分为以下四种：</p>
<ol>
<li><strong>成员内部类</strong></li>
<li><strong>静态内部类</strong></li>
<li><strong>局部内部类</strong></li>
<li><strong>匿名内部类</strong></li>
</ol>
<h4> 成员内部类</h4>
<p>写在成员位置，属于外部类的成员，其中成员内部类也能够被常用的修饰符 <code>public、private、protected、static</code> 等所修饰。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要想获取成员内部类对象，可以通过以下两种方式：</p>
<ol>
<li>在外部类中编写方法，然后对外提供内部类的对象。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>直接创建，创建格式为：<code>外部类名.内部类名 对象名 = 外部类对象.内部类对象</code>。</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 静态内部类</h4>
<p>静态内部类就是用关键字 <code>static</code> 修饰的内部类。静态内只能访问外部类中的静态变量和静态方法，如果要访问非静态的变量和方法就需要创建对象。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建静态内部类对象的格式为：<code>外部类名.内部类对象名 = new 外部类名.内部类名();</code></p>
<p>调用非静态方法的格式：先创建对象，然后用对象调用。</p>
<p>调用静态方法的格式：<code>外部类名.内部类名.方法名();</code></p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 局部内部类</h4>
<p>如果一个类被定义在方法中，那么这个类就叫做局部内部类。外界是无法直接使用局部内部类，需要在方法内部创建对象并使用。同时，这个内部类既可以访问外部类的成员，也可以访问方法中的局部变量。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 匿名内部类</h4>
<p>匿名内部类就是没有名字的内部类，也正因为名字，所以匿名内部类只能使用一次。而且使用匿名内部类还有个前提条件：必须继承一个父类或者实现一个接口。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>学生成绩管理系统</title>
      <link>https://ez4jam1n.site/studio/md/java/se-in-action/20220301-score-management.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se-in-action/20220301-score-management.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">学生成绩管理系统</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 对于计算机专业的学生来讲，一定对于学生成绩管理系统课程设计十分印象深刻。设计、上机、编码、写报告、答辩等一系列流程，虽然很简单，但也可以综合运用我们所学的一些知识了。 今天就来复习以下这个课题，用 Java SE 来实现该课题，也算是补上当初上课的时候没有好好写的遗憾吧。</description>
      <category>Java 基础实战</category>
      <pubDate>Tue, 01 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>对于计算机专业的学生来讲，一定对于学生成绩管理系统课程设计十分印象深刻。设计、上机、编码、写报告、答辩等一系列流程，虽然很简单，但也可以综合运用我们所学的一些知识了。</p>
<p>今天就来复习以下这个课题，用 Java SE 来实现该课题，也算是补上当初上课的时候没有好好写的遗憾吧。</p>
<p>虽然很简单，但是对于刚涉足编程学习的人来讲，还是有一定难度的，既要考虑界面打印，也要考虑条件判断、循环语句、输入输出控制等等技巧，所以在这里简单地实现一下，方便给初学的小伙伴们一个参考（对于我的界面比较丑的问题，就不要过于纠结了，下去可以自己调整 😂，我们只关注功能实现 🤣）。</p>
<p>对于学生成绩管理系统，主要可以分为如下几个功能：</p>
<ol>
<li>录入学生成绩</li>
<li>统计学生成绩</li>
<li>查找学生成绩</li>
<li>修改学生成绩</li>
<li>删除学生成绩</li>
<li>按平均分排序</li>
<li>显示所有成绩</li>
<li>退出管理系统</li>
</ol>
<p></p>
<p>进入系统之后，我们应该有系统菜单，然后根据提示选择我们所要进行的操作。</p>
<p></p>
<ul>
<li><strong>录入学生成绩</strong></li>
</ul>
<p>该功能是每次录入学生的成绩信息，或者在当前数据的基础上添加录入新的学生成绩信息；</p>
<p></p>
<ul>
<li><strong>统计学生成绩</strong></li>
</ul>
<p>主要是对学生的成绩进行统计，然后输出平均分，并打印出对应信息；</p>
<p></p>
<ul>
<li><strong>查找学生成绩</strong></li>
</ul>
<p>根据输入的学号来查找对应学生的相关成绩信息；</p>
<p></p>
<ul>
<li><strong>修改学生成绩</strong></li>
</ul>
<p>根据输入的学号来对对应学生的成绩进行修改；</p>
<p></p>
<ul>
<li><strong>删除学生成绩</strong></li>
</ul>
<p>根据输入的学生学号，删除对应学生的成绩信息；</p>
<p></p>
<ul>
<li><strong>按平均分排序</strong></li>
</ul>
<p>按照平均分降序排序；</p>
<p></p>
<ul>
<li><strong>显示所有成绩</strong></li>
</ul>
<p>便利所有学生成绩，然后打印出来；</p>
<p></p>
<ul>
<li><strong>退出管理系统</strong></li>
</ul>
<p>退出菜单；</p>
<p></p>
<ul>
<li><strong>注意</strong></li>
</ul>
<p>鉴于大家的留言说经常会报错找不到对应类，所以在这里也给出这个程序的包结构如下图所示。</p>
<p></p>
<h2> 功能设计与实现</h2>
<h3> 主界面</h3>
<p>主要是打印出来系统功能的选择菜单，然后根据我们的输入进入不同的子功能模块；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 主类设计</h3>
<p>系统主要是针对学生成绩信息管理的，所以我们设计一个学生类，包括一系列属性（也就是简单的个人信息和各科成绩）；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 录入学生成绩</h3>
<p>首先录入学号，判断是否可用，不可用则重新输入，可用则输入其他信息；</p>
<p>然后将信息赋值到学生对象，最后将该学生对象加入集合就可以了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 统计学生成绩</h3>
<p>主要实现对于各学生平均成绩的统计，然后打印出信息；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 查找学生成绩</h3>
<p>先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生成绩信息并打印；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 修改学生成绩</h3>
<p>先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生，然后对其成绩信息进行修改，但不修改个人其他信息；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 删除学生成绩</h3>
<p>先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生，然后将其从集合中删除即可；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 按平均分排序</h3>
<p>先判断是否有数据，有数据再进行后续操作。然后对集合中的学生的平均成绩进行排序，然后依次从高到低打印出学生信息；</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 显示所有成绩</h3>
<p>先判断是否有数据，有数据再进行后续操作。遍历学生对象集合，然后打印出各个学生的成绩信息。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总程序</h2>
<p>将上述所有模块整合之后，我们得到最终的程序；</p>
<ol>
<li><strong>Manager.java</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>Student.java</strong></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>虽然功能比较简陋，但还是需要一定时间来完成的。此外，本设计只是针对一次运行过程，一旦程序终止，录入的数据就无法保存了，这一点需要注意。后续考虑加入文件写入或者数据库的方式来实现该课程设计，以保存我们所录入的数据。</p>
]]></content:encoded>
    </item>
    <item>
      <title>点菜系统</title>
      <link>https://ez4jam1n.site/studio/md/java/se-in-action/20220302-order-system.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se-in-action/20220302-order-system.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">点菜系统</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 继上次写了一个 Java SE 版本的 学生成绩管理系统 之后，发现大家反响还不错，所以今天我有带来了差不多一样的点菜系统，希望利用我们所学的 Java SE 知识，实现我们的点菜系统。</description>
      <category>Java 基础实战</category>
      <pubDate>Wed, 02 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>继上次写了一个 Java SE 版本的 <a href="/studio/md/java/se-in-action/20220301-score-management.html" target="blank">学生成绩管理系统</a> 之后，发现大家反响还不错，所以今天我有带来了差不多一样的点菜系统，希望利用我们所学的 Java SE 知识，实现我们的点菜系统。</p>
<p>而在上次文章的评论中，我也看到了大家的一些建议，可能没有及时回复大家，但是在这次文章中，我会尽量满足大家提的一些好的建议，向着更好的方向前进！</p>
<h2> 需求分析</h2>
<p>此次可以，我们需要设计一个点菜系统，我们就需要对我们的系统进行分析，面向的对象是谁？对象常用的操作又有哪些？</p>
<p>既然是点菜系统，那我们的餐馆一般都是有一个固定的菜单，然后面向的对象一般都是顾客，顾客可以通过这个菜单进行点菜、删除菜，查看已经点过的菜，以及最后用完餐后的结账。</p>
<p>因此，对于点菜系统，主要所需功能如下：</p>
<ol>
<li><strong>初始化菜单</strong></li>
<li><strong>点菜</strong></li>
<li><strong>移除已点的菜</strong></li>
<li><strong>查看已点的菜</strong></li>
<li><strong>结账</strong></li>
<li><strong>退出系统</strong></li>
</ol>
<p></p>
<h2> 功能预览</h2>
<h3> 系统菜单</h3>
<p>进入我们的点菜系统之后，一般都是有系统菜单的，用于提示我们进行下一步的操作。</p>
<p></p>
<h3> 点菜</h3>
<p>根据系统菜单进入点菜功能后，输入菜品序号进行点菜以及返回上一级菜单。</p>
<p></p>
<h3> 查看已点菜品</h3>
<p>假设我们点完菜之后，要确认下有没有点重复的菜，此时就可以查看已点菜品。</p>
<p></p>
<p>当然，上图是我们已经点过菜才会出现菜品，如果我们还没有点过菜，那么系统则会提示还未点菜。</p>
<p></p>
<h3> 删除菜品</h3>
<p>假设我们不小心点了重复的菜，那该怎么办呢？不用担心，我们直接选择删除菜品功能，然后删除对应重复菜品即可。</p>
<p></p>
<p>同样的，加入我们还未点菜就进入删除菜品功能，系统也会给出提示。</p>
<p></p>
<h3> 结账</h3>
<p>当我们用完餐之后，接下来就是结账了。此时只要进入我们的结账选项，系统就会打印出本次所消费的所有金额。</p>
<p></p>
<p>同样的，加入我们还未点菜就进入结账功能，系统也会给出提示。</p>
<p></p>
<h3> 退出系统</h3>
<p>当我们输入选择为 0 时，表示我们退出系统。</p>
<p></p>
<h2> 功能实现</h2>
<h3> 主界面</h3>
<p>系统主界面，主要是打印出功能选择菜单，然后根据我们的输入选择不同的子功能。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 主类设计</h3>
<p>主要涉及的菜品，于是定义一个菜品类，主要包括序号、菜品名、菜品单价三个属性。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 功能接口</h3>
<p>上次的文章中，读者建议我把各个功能独立出接口，然后再实现，所以这里先将各个功能的接口给出来。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 初始化菜单</h3>
<p>一般餐馆都是提供的固定的菜单，所以这里没有给出管理菜单的功能，直接进行初始化后给出各个菜品，将其存入列表中。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 展示菜品列表</h3>
<p>初始化菜单后，把整个菜单展示给顾客看。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 展示已点菜品</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 移除菜品</h3>
<p>找到对应序号对应的菜品，然后将其移除。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 结账</h3>
<p>先判断是否点菜，如果没有则提示，若已经点过餐，则直接结账。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总程序</h2>
<p>好了，实现以上各个模块功能之后，将其整合到一起，就得到我们最后的总体程序。</p>
<p>各部分的代码都已经贴出来的，不过为了大家更方便，我这这里给出总程序结构。</p>
<p></p>
<p>所有代码均位于 <code>com.cunyu</code> 包下，然后分别是实体类 <code>Dish</code>、接口类 <code>DishInterface</code> 以及主程序 <code>DishApp</code>。</p>
<h2> 总结</h2>
<p>好了，以上就是我们点菜系统的实现了。如果你对 Java SE 部分的知识掌握较好的话，这一定不是啥难事，毕竟是个十分简单的控制台程序，主要语法熟悉，稍微理理逻辑即可。</p>
<p>好了，今天的内容就到此结束了，如果你有什么好的建议，欢迎留言交流。</p>
<p>最后的最后，贴出本设计的 Github 仓库地址：<a href="https://github.com/ez4jam1n/java-in-actions" target="_blank" rel="noopener noreferrer">https://github.com/ez4jam1n/java-in-actions</a></p>
<p>有需要的童鞋可以自取，当然了，也希望大家给我一个 ⭐ <strong>star</strong>，满足一下我这个菜鸟的虚荣心呀 ~ ❤️❤️❤️</p>
]]></content:encoded>
    </item>
    <item>
      <title>手撸记账本</title>
      <link>https://ez4jam1n.site/studio/md/java/se-in-action/20220303-tally-book.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se-in-action/20220303-tally-book.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">手撸记账本</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 之前已经写过关于 学生成绩管理系统 以及 点菜系统 的文章，大家如果感兴趣，可以点击各自的传送门去看看呀！</description>
      <category>Java 基础实战</category>
      <pubDate>Thu, 03 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>之前已经写过关于 <a href="/studio/md/java/se-in-action/20220301-score-management.html" target="blank">学生成绩管理系统</a> 以及 <a href="/studio/md/java/se-in-action/20220302-order-system.html" target="blank">点菜系统</a> 的文章，大家如果感兴趣，可以点击各自的传送门去看看呀！</p>
<p>接下来开始我们今天的正题，我们日常生活中，想必有很多人都有记账的习惯，那今天，我们就来看看，如何设计并实现一个记账本。</p>
<h2> 需求分析</h2>
<p>打开我们手机里的记账本，可以发现主要提供如下几个功能：</p>
<ol>
<li>
<p><strong>添加账目</strong></p>
</li>
<li>
<p><strong>删除账目</strong></p>
</li>
<li>
<p><strong>修改账目</strong></p>
</li>
<li>
<p><strong>查询账目</strong></p>
</li>
</ol>
<ul>
<li>
<ul>
<li>查询所有账目</li>
<li>按时间区间查询</li>
</ul>
</li>
<li>
<ul>
<li>按账目类型查询</li>
</ul>
</li>
</ul>
<ol>
<li><strong>退出记账本</strong></li>
</ol>
<p></p>
<h2> 功能预览及代码实现</h2>
<h3> 主菜单</h3>
<p>主菜单中，主要用于打印提示我们进行选择，然后根据我们的输入再进入不同的子功能模块中。</p>
<ul>
<li>预览</li>
</ul>
<p></p>
<ul>
<li>代码实现</li>
</ul>
<p>代码实现很简单，只需要打印出提示信息即可，之后后续输入以及进入不同子功能模块，我们可以使用 <code>switch</code> 来进行选择。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 添加账目</h3>
<p>当我们需要添加一笔新的账目时，此时就可以进入 <strong>添加账目</strong> 子模块，这里的功能主要是根据我们自己输入的 ID、类别、账户、类型、金额、时间以及备注将其添加到我们的总账目列表中进行汇总。</p>
<ul>
<li>预览</li>
</ul>
<p></p>
<ul>
<li>代码实现</li>
</ul>
<p>要实现添加功能也很简单，根据我们的输入，我们利用账目类的构造函数创建一个对象，然后将其加入总账目列表当中就可以了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 删除账目</h3>
<p>假如我们的账目要公开给别人看，而自己有的账目又不想让别人看到，咋办呢？很简单！我们只需要将这笔账目干掉即可！这里我们只要输入我们所要删除的账单 ID，然后将其从总账目列表中删除即可。</p>
<ul>
<li>预览</li>
</ul>
<p></p>
<ul>
<li>代码实现</li>
</ul>
<p>要删除我们的账目，只需要根据我们输入的账单 id，找到对应 id 的账目，然后将其删除即可，这里之所以没有使用 <code>remove(index)</code> 的方式，是因为我们的 id 是自己输入的，这其实是不规则的，如果我们使用 <code>remove(index)</code> 的方式，就有可能导致越界的问题。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 修改账目</h3>
<p>我们偷偷拿了私房钱买了猛男必备显卡（RTX 3090）想趁空了打打游戏，遇到老婆查账时，这时候可不能慌，我们只需要把账单偷梁换柱，改换成其他东西就可以，而且此事神不知鬼不觉，美滋滋呀！</p>
<ul>
<li>预览</li>
</ul>
<p></p>
<ul>
<li>代码实现</li>
</ul>
<p>利用代码实现也很简单，找到对应 ID 的账单，然后重新输入账单各个细节进行修改即可！</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 查询账目</h3>
<p>查询账目这里，我们又分为 3 个不同的功能，既可以查看所有账单，也可以根据我们所输入的时间区间进行筛选，最后，还能够根据我们的输入查询出收入和支出的详细情况。</p>
<h4> 查询所有账目</h4>
<ul>
<li>预览</li>
</ul>
<p></p>
<ul>
<li>代码实现</li>
</ul>
<p>查询所有账单很简单，只需要遍历我们总账单列表即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 按时间区间查询</h4>
<ul>
<li>预览</li>
</ul>
<p></p>
<ul>
<li>代码实现</li>
</ul>
<p>按照时间跨度来查询稍微要麻烦一些，这里要处理两个输入，一个是开始时间，一个是结束时间，我们需要将账单的时间和这两个时间进行比较，筛选出介于这两者之间的账单。所以这里要涉及到 <code>Date</code> 类，然后就是如何从总账单列表中过滤出满足时间跨度的账单。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4> 按类型查询</h4>
<ul>
<li>预览</li>
</ul>
<p></p>
<ul>
<li>代码实现</li>
</ul>
<p>这里按类型查询其实就是在查询所有账单的基础上加上一个限制条件，只要其类型等于我们的输入即可，这里我写了两种筛选的方法。一种是直接使用 <code>if</code> 语句进行过滤，而另一种则是同按时间跨度一样使用集合的 <code>Stream</code> 流来进行过滤。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 退出系统</h3>
<ul>
<li>预览</li>
</ul>
<p></p>
<ul>
<li>代码实现</li>
</ul>
<p>在主菜单中，我们已经设置了一个标志位 <code>flag</code>，当 <code>flag</code> 为 <code>true</code> 时，我们每完成一项功能则循环打印主菜单在控制台中，而如果我们想要退出系统，只需要将标志位 <code>flag</code> 设置为 <code>false</code> 即可，此时不满足 <code>while</code> 循环的条件，所以跳出循环，因此退出系统的关键在于标志位状态的转换。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 整体程序</h2>
<p>将各个子模块功能实现之后，剩下的就是整合工作了，最后得到我们最后的总体程序结构如下，主要代码均位于 <code>com.cunyu</code> 包下，然后分别是：</p>
<ul>
<li>
<p>实体类 <code>Bill</code></p>
</li>
<li>
<p>接口类 <code>IBill</code></p>
</li>
<li>
<p>主程序 <code>MainApp</code></p>
</li>
</ul>
<p></p>
<h2> 总结</h2>
<p>好了，以上就是我们简单的记账本的实现了。实现的功能比较简陋，程序的健壮性也不够强，还有很大的优化空间。大家如果感兴趣或者有优化的地方，欢迎到本设计的 Github 仓库地址：<a href="https://github.com/ez4jam1n/java-in-actions" target="_blank" rel="noopener noreferrer">https://github.com/ez4jam1n/java-in-actions</a> 提交 issue。当然了，如果你只是需要用来简单的做个示例，也可以自取。</p>
<p>最后，如果本文对大家有用的话，希望给我一个 ⭐ <strong>star</strong>，满足一下我的虚荣心呀 ~ 🙊🙊🙊</p>
]]></content:encoded>
    </item>
    <item>
      <title>MySQL + MyBatis 版学生成绩管理系统</title>
      <link>https://ez4jam1n.site/studio/md/java/se-in-action/20220304-mysql-mybatis-score-management.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/se-in-action/20220304-mysql-mybatis-score-management.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">MySQL + MyBatis 版学生成绩管理系统</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 之前写了一篇文章，是关于 Java SE 版本的学生成绩管理系统，发现反响还不错。同时也有不少小伙伴通过评论或者私信的方式问过有没有和数据库交互版本的学生成绩管理系统，然后自己也把这件事儿列入了自己的计划。害，都怪自己懒，所以一直拖到了现在。不过终究是逼迫自己完成了，也算是给私信和评论的小伙伴们一个交代吧。</description>
      <category>Java 基础实战</category>
      <pubDate>Fri, 04 Mar 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>之前写了一篇文章，是关于 <a href="https://ez4jam1n.github.io/posts/cc1bbc33/" title="Java SE 版本的学生成绩管理系统" target="_blank" rel="noopener noreferrer">Java SE 版本的学生成绩管理系统</a>，发现反响还不错。同时也有不少小伙伴通过评论或者私信的方式问过有没有和数据库交互版本的学生成绩管理系统，然后自己也把这件事儿列入了自己的计划。害，都怪自己懒，所以一直拖到了现在。不过终究是逼迫自己完成了，也算是给私信和评论的小伙伴们一个交代吧。</p>
<p>同样的，本次和数据交互版本的学生成绩管理系统具有增删改查成绩等功能。不过相比于之前 SE 版本的功能做了点精简，少了两个小的功能点。因此此次版本的学生成绩管理系统主要分为如下功能：</p>
<ol>
<li><strong>录入学生成绩</strong></li>
<li><strong>查询单个学生成绩</strong></li>
<li><strong>查询所有学生成绩</strong></li>
<li><strong>更新学生成绩</strong></li>
<li><strong>删除学生成绩</strong></li>
<li><strong>退出管理系统</strong></li>
</ol>
<p></p>
<h2> 系统演示</h2>
<ol>
<li><strong>主菜单</strong></li>
</ol>
<p>将我们的系统运行起来之后，应该有对应的系统菜单，然后可以根据我们的输入进行不同的操作。</p>
<p></p>
<ol start="2">
<li><strong>录入学生成绩</strong></li>
</ol>
<p>进入录入学习成绩菜单后，会提示我们依次录入学号、年级、姓名、高数、英语、体育、Java、C++、政治、算法等科目的成绩，录入成功后进行下一次功能选择。</p>
<p></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ac9e88ea870cb767ad3c2a6bf1524a92.png" alt="录入成绩结果"></p>
<ol start="3">
<li><strong>查找单个学生成绩</strong></li>
</ol>
<p>该功能主要通过我们所输入的学生学号，然后查询对应学号学生的成绩，如果查到则进行打印，如果没查到就进行提示。但无论是查询到成绩与否，都会进入下一次的功能选择。</p>
<p></p>
<ol start="4">
<li><strong>查询所有学生成绩</strong></li>
</ol>
<p>该功能可以查询当前数据库中的所有成绩，无论是否查询到成绩与否，都将进入下一次的功能选择。</p>
<p></p>
<p></p>
<ol start="5">
<li><strong>更新学生成绩</strong></li>
</ol>
<p>该功能通过输入对应学号，然后如果找到对应学号的学生，则重新依次输入各科成绩，然后对数据库中的成绩进行更新。如果没有找到对应学号的学生，则进行提示。</p>
<p></p>
<p></p>
<ol start="6">
<li><strong>删除学生成绩</strong></li>
</ol>
<p>该功能通过对应学号，然后删除对应学号的学生成绩，如果没有对应学号的学生，则进行提示。</p>
<p></p>
<p></p>
<h2> 功能设计与实现</h2>
<p>与 SE 项目不同的是，本系统需要与数据库进行交互，所以这里选择使用 MyBatis 作为数据库交互框架。接下来我就对本系统的搭建过程做一个记录，留给有需要的小伙伴。</p>
<h3> 环境搭建</h3>
<p>本项目主要采用 Maven 来构造，而 IDE 则用的是最新版的 IntelliJ IDEA。所以首要工作就是搭建一个 Maven 工程，因为之前我已经写过相关的文章了，所以这里就不再啰嗦了，如果你还对创建 Maven 工程不太熟悉，可以参考：👉 <a href="https://benjam1n.eu.org/md/java/maven/20220104-maven-project-with-idea" target="_blank" rel="noopener noreferrer">如何使用 IDEA 创建 Maven 项目</a>。</p>
<h3> POM 文件</h3>
<p>要实现本项目，主要需要以下依赖，所以我们需要在项目的 <code>pom.xml</code> 文件引入对应依赖。</p>
<ul>
<li><strong>MyBatis</strong></li>
<li><strong>Lombok</strong></li>
<li><strong>MySQL 驱动</strong></li>
</ul>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里你可能对 Lombok 比较陌生，它主要是为了简化我们的代码而使用，所以也推荐大家了解下。对于 Lombok 的简单使用，我之前特意写了一篇相关文章，如果有感兴趣的小伙伴，可以去了解一下。传送门 👇：</p>
<blockquote>
<p><a href="https://benjam1n.eu.org/md/java/se/20220719-lombok-install-and-usage" target="_blank" rel="noopener noreferrer">Lombok 安装及使用指南</a></p>
</blockquote>
<h3> 数据库准备</h3>
<p>既然要把数据存入数据库，那肯定得准备下数据库。关于数据库的安装以及环境搭建，可以去网上找个教程看一下，我这里的话只提供创建表的数据脚本。</p>
<div class="language-sql line-numbers-mode" data-ext="sql"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> MyBatis 配置</h3>
<p>既然要使用 MyBatis，那肯定少不了对它配置一番。这里呢，主要需要配置 MyBatis 的核心配置文件以及设置一个工具类。然后添加对数据库进行增删改查的接口，方便后边使用。如果你对 MyBatis 不是很熟悉，建议先去了解下，关于更多 MyBatis 的使用方法，可以参考我之前写的一些文章：<a href="https://ez4jam1n.github.io/MyBatis-%E4%B8%93%E6%A0%8F/" title="MyBatis 专栏" target="_blank" rel="noopener noreferrer">MyBatis 专栏</a>。</p>
<ol>
<li><strong>MyBatis 配置文件</strong></li>
</ol>
<p>在项目的 <code>main/resources</code> 文件夹下创建一个文件，命名为 <code>mybatis-config.xml</code>，在这里主要是配置数据库连接。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>MyBatis 工具类</strong></li>
</ol>
<p>为了方便后续各个方法的调用，推荐大家先配置一个 MyBatis 的工具类，免去一些重复建立连接操作。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>
<h3> <strong>设计接口</strong></h3>
</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li><strong>映射 SQL 文件</strong></li>
</ol>
<p>记得上面 MyBatis 配置中的 XML 存放路径么，那就是我们用来映射 SQL 的文件。一般我们是在 <code>resource</code> 下新建一个 <code>mapper</code> 目录，然后在 <code>mapper</code> 目录中创建用于映射接口的 SQL 文件。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 主类设计</h3>
<p>系统主要是针对学生成绩信息管理，所以主要涉及的是一个学生类。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 主界面</h3>
<p>主界面主要是打印出系统功能菜单，然后根据我们的指令进入不同的子功能模块。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 录入学生成绩</h3>
<p>首先录入学号，判断是否可用，不可用则重新输入，可用则继续输入后续其他信息。</p>
<p>然后将信息赋值到学生对象，最后将该学生对象插入数据库就可以了。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 查询单个学生成绩</h3>
<p>先判断数据库中是否有数据，有数据则进行后续操作。通过对输入的学号进行查询，从数据库中找到对应学号的学生成绩。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 查询所有学生成绩</h3>
<p>先判断是否有数据，有数据再进行后续操作。从数据库中查询所有数据，接着打印各个学生的成绩信息即可。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 修改学生成绩</h3>
<p>先判断是否有数据，有数据再进行后续操作。通过对输入的学号进行匹配，找到对应学号的学生，然后对其成绩信息进行修改，但不修改个人其他信息。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 删除学生成绩</h3>
<p>先判断是否有数据，有数据再进行后续操作。然后通过对输入的学号进行匹配，找到对应学号的学生，然后将其从数据库中删除即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>以上就是关于本次数据库版本学生成绩管理系统的相关设计的所有内容了，相信读到这里的小伙伴应该也能够顺利完成本次的课程设计了。如果还是对其中的一些细节不理解，欢迎评论或者关注私信我。</p>
<h2> 代码实例</h2>
<p>最后，关于本文示例的代码，我已经上传到了 GitCode ，需要的小伙伴可以自取！</p>
<blockquote>
<p>🏳️‍🌈 传送门：<a href="https://gitcode.net/github_39655029/java-learning-demos" target="_blank" rel="noopener noreferrer">https://gitcode.net/github_39655029/java-learning-demos</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>简介</title>
      <link>https://ez4jam1n.site/studio/md/java/spring/20220201-spring-intro.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/spring/20220201-spring-intro.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">简介</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 为了解决我们开发者在 J2EE 开发时所遇到的众多问题，Rob Johnson 等人发起了 Spring 框架项目。Spring 是一个开源的 J2EE 应用程序框架，是针对 Bean 的生命周期进行管理的轻量级容器。它既可以单独用于构建程序，也能和当前众多的 Web 框架进行组合使用，能够十分方便的降低当前企业应用开发的复杂性。既然 Spring 如此强大，那我们今天就来探究一下 Spring 的内容。</description>
      <category>Spring 教程</category>
      <pubDate>Tue, 01 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>为了解决我们开发者在 J2EE 开发时所遇到的众多问题，Rob Johnson 等人发起了 Spring 框架项目。Spring 是一个开源的 J2EE 应用程序框架，是针对 Bean 的生命周期进行管理的轻量级容器。它既可以单独用于构建程序，也能和当前众多的 Web 框架进行组合使用，能够十分方便的降低当前企业应用开发的复杂性。既然 Spring 如此强大，那我们今天就来探究一下 Spring 的内容。</p>
<h2> Spring 概览</h2>
<p>Spring 其实是一个很大的范围概称，包含着许多分支，在正式了解 Spring 之前，我们先来看看 Spring 家族中的主要分支。</p>
<h3> Spring FrameWok</h3>
<p>Spring 领域中其他一切的基础，提供了 <strong>核心容器和依赖注入框架</strong>，还提供了一些基本数据持久性支持，特别是基于模板的 JDBC 文件。</p>
<h3> Spring Boot</h3>
<p>Spring Boot 不仅提供了 <strong>启动依赖和自动配置</strong>，还提供了如下的其他特性：</p>
<ol>
<li>
<p>Actuator 提供了对应用程序内部工作方式的运行时监控，包括端点、线程 dump 信息、应用程序健康状况和应用程序可用的环境属性。</p>
</li>
<li>
<p>灵活的环境属性规范。</p>
</li>
<li>
<p>核心框架的辅助测试之外的额外测试支持。</p>
</li>
</ol>
<h3> Spring Data</h3>
<p>将应用程序的数据存储库抽象为简单的 Java 接口，同时当定义方法用于驱动数据进行存储和检索的问题时，对方法使用了命名约定。此外还能处理几种不同类型的数据库，包括包括关系型（JPA）、文档型（Mongo）、图型（Neo4j）等。</p>
<h3> Spring Security</h3>
<p>Spring Security 解决了广泛的应用程序安全性需求，包括身份验证、授权和 API 安全性等一系列工作。</p>
<h3> Spring Integration 和 Spring Batch</h3>
<p>Spring Integration 解决了实时集成，即数据在可用时进行处理。相反，Spring Batch 解决了批量集成的问题，允许在一段时间内收集数据，直到某个触发器（可能是一个时间触发器）发出信号，表示该处理一批数据。</p>
<h3> Spring Cloud</h3>
<p>Spring Cloud 是一组用 Spring 开发云本地应用程序的项目。</p>
<p>Spring 是为了减少 EJB 的复杂性而创建的一套解决方案，而 EJB 过于臃肿，使用 Spring 能够让 Java Bean 之间进行有效的解耦。而且 Spring 不仅仅局限于服务端的开发，在测试性和松耦合方面均有较好表现。</p>
<h2> 什么是 Spring</h2>
<h3> Spring 简介</h3>
<p>我们日常所说的 Spring，实际上指的是 Spring Framework，属于 Spring 家族的一个分支。</p>
<p>Spring 的核心是一个 <strong>容器</strong>，常称为 <strong>Spring 应用程序上下文</strong>，用于创建和管理应用程序组件。组件（或 Bean）在 Spring 应用程序上下文中连接在一起互相构成一个完整的应用程序。</p>
<p>那么是如何将各种 Bean 连接在一起呢？这就是 Spring 中最重要的特性之一：<strong>依赖注入（DI）</strong>。</p>
<p><strong>依赖注入（DI）</strong>：通过依赖注入的应用程序 <strong>不是</strong> 由组件自身创建和维护其所依赖的其他 Bean 的生命周期，<strong>而是依赖于单独的实体（容器）来创建和维护所有组件，并将这些组件注入需要他们的 Bean，通常是通过构造函数或属性访问器方法来完成</strong>。</p>
<h3> Spring 的特点</h3>
<ul>
<li>
<p>方便解耦，简化开发过程；</p>
</li>
<li>
<p>支持面向切面编程（Aop），方便我们不用修改源码就能对功能进行增强；</p>
</li>
<li>
<p>整合支持 Junit，方便程序的测试；</p>
</li>
<li>
<p>既可以独立构建程序，也支持各种框架，而且大大降低各种框架使用难度；</p>
</li>
<li>
<p>支持事务管理，方便进行事物操作；</p>
</li>
<li>
<p>降低了各种 API 的开发难度；</p>
</li>
</ul>
<h3> Spring 的组成</h3>
<p></p>
<p>Spring 是一个分层架构，主要由如下 7 大模块所构成。Spring 模块位于核心容器，定义了创建、配置和管理 Bean 的方式。</p>
<ol>
<li>
<p><strong>Spring Core</strong>：提供 Spring 框架基本功能，主要组件是 BeanFactory，是工厂模式的实现，通过 IOC 机制将应用程序的配置和依赖性规范与实际的应用程序代码分开。</p>
</li>
<li>
<p><strong>Spring Context</strong>：一个配置文件，给 Spring 框架提供上下文信息，上下文包括 JNDI、EJB、电子邮件、国际化、校验和调度等企业服务。</p>
</li>
<li>
<p><strong>Spring AOP</strong> ：通过配置管理特性，Spring AOP 直接将 AOP（面向切面）功能集成到 Spring 框架。从而我们能够十分方便的使用 Spring 框架来管理任何支持 AOP 的对象。模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用该组件，可以不依赖其他组件九江声明性事务管理集成到应用程序中。</p>
</li>
<li>
<p><strong>Spring DAO</strong>：JDBC DAO 抽象层提供了有意义的异常层次结构，可以用来管理异常处理和不同数据库供应商抛出的错误信息。异常层次结构简化了错误处理，而且极大降低了需要编写的异常代码数量。Spring DAO 面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</p>
</li>
<li>
<p><strong>Spring ORM</strong>：Spring 框架中插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map，这些都遵从 Spring 的通用事务和 DAO 异常层次结构；</p>
</li>
<li>
<p><strong>Spring Web</strong>：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文，所以 Spring 框架支持与 Jakarta Structs 的集成。同时该模块还简化了处理多部分请求以及请求参数绑定到域对象的工作。</p>
</li>
<li>
<p><strong>Spring Web MVC</strong>：MVC 是一个全功能的构建 Web 应用的 MVC 实现，可以通过策略接口对 MVC 框架实现高度可配置。而且 MVC 还容纳了 JSP、Velocity、Tiles 等视图技术。</p>
</li>
</ol>
<p></p>
<h3> XML 配置 VS Java 配置</h3>
<p>对于之前的版本，Spring 容器将各个组件连接起来的方式是通过 XML 配置，但现在的版本中更多的是使用基于 Java 的配置，如下面基于 XML 的配置等效于基于 Java 的配置。</p>
<ul>
<li>基于 XML 配置</li>
</ul>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>基于 Java 配置</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在基于 Java 的配置中，<code>@Configuration</code> 向 Spring 表明该类是一个配置类，为 Spring 应用程序上下文提供 Bean。而 <code>@Bean</code> 注解则指示类方法返回的对象应作为 Beans 添加到应用程序上下文中。</p>
<p>那你可能想，既然之前有了 XML 配置的方式，那么为什么后来的版本中又加入了基于 Java 的配置方式呢？基于 Java 的配置方式相比于 XML 的配置方式，<strong>包含了更高的类型安全性和更高的可重构性</strong>。而且仅当 Spring 无法自动配置组件时，才需要通过 <strong>XML 的配置方式</strong> 或者 <strong>基于 Java 的配置方式</strong> 来进行显式配置。</p>
<p><strong>自动配置</strong> 即 <strong>自动装配 + 组件扫描</strong>。有赖于 <strong>组件扫描</strong>，Spring 能 <strong>自动从应用程序的类路径中发现组件，同时将其创建为 Spring 应用程序上下文中的 Bean</strong>。而通过 <strong>自动装配，Spring 将自动将组件与其所依赖的其他 Bean 一起注入</strong>。</p>
<p>最近随着 Spring Boot 的推出，自动配置的优势进一步加强，在这种配置中，Spring Boot 将根据 <strong>类路径中的条目、环境变量和其他因素，合理猜测所需配置的组件，将其连接在一起</strong>。Spring Boot 中的自动配置大大减少了构建应用程序所需的显式配置的数量，增强了 Spring 开发的能力。</p>
<h2> 初始化 Spring 应用程序</h2>
<h3> 项目结构</h3>
<p>对于一个 Spring 项目而言，其结构主要包括以下部分：</p>
<ol>
<li><code>src/main/java</code>：该目录主要包含应用程序的源码，主要可分为如下几类：</li>
</ol>
<ul>
<li>
<ul>
<li><code>build</code> ：工程启动类；</li>
<li><code>entity</code> ：实体类；</li>
</ul>
</li>
<li>
<ul>
<li><code>mapper</code> ：数据访问层；</li>
<li><code>service</code> ：数据服务层，业务类代码；</li>
</ul>
</li>
<li>
<ul>
<li><code>controller</code> ：前端访问控制器；</li>
<li><code>config</code> ：配置信息类；</li>
</ul>
</li>
<li>
<ul>
<li><code>dto</code>：数据传输层；</li>
<li><code>utils</code> ：工具类；</li>
</ul>
</li>
<li>
<ul>
<li><code>constant</code> ：常用接口类；</li>
<li><code>vo</code> ：数据传输类；</li>
</ul>
</li>
<li>
<ul>
<li><code>Application.java</code>：项目的启动类；</li>
</ul>
</li>
</ul>
<ol>
<li>
<p><code>src/main/resources</code>：相关资源文件；</p>
</li>
<li>
<p><code>src/test/java</code>：测试相关代码；</p>
</li>
<li>
<p><code>src/test/resources</code>：测试相关资源；</p>
</li>
<li>
<p><code>pom.xml</code>：Maven 构建规范，包含一些项目及依赖方面的配置。</p>
</li>
</ol>
<h3> 项目启动类</h3>
<p>项目启动类，即运行 jar 文件时用来引导应用程序执行的类，也就是项目结构中的 <code>Application.java</code>，下面是一个项目启动类的实例：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>@SpringBootApplication</code> 注解说明该类是一个 Spring 引导应用程序，但实际上它是组合了下列三个注解的复合应用注解：</p>
<ul>
<li>
<p><code>@SpringBootConfiguration</code>：<strong>指定该类为配置类</strong>。</p>
</li>
<li>
<p><code>@EnableAutoConfiguration</code>：<strong>启用 Spring 自动配置</strong>。</p>
</li>
<li>
<p><code>@ComponentScan</code>：<strong>启用组件扫描</strong>。允许声明其他带有 <code>@Component</code>、<code>@Controller</code>、<code>@Service</code> 等注解的类，以便让 Spring 自动发现他们并将他们注册为 Spring 应用程序上下文中的组件。</p>
</li>
</ul>
<h2> 总结</h2>
<p>OK，总结一下今天的内容，主要讲了：</p>
<ol>
<li>
<p>Spring 家族成员的内容；</p>
</li>
<li>
<p>Spring 的概念</p>
</li>
<li>
<p>Spring 的特点</p>
</li>
<li>
<p>Spring 的组成</p>
</li>
<li>
<p>配置 Spring 的两种方式</p>
</li>
<li>
<p>一个 Spring 项目常见的项目结构</p>
</li>
</ol>
<p>好了，以上就是今天的所有内容了。原创不易，如果你觉得我的内容对你有所帮助，那就帮忙点赞关注吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>IoC 简介及入门实例</title>
      <link>https://ez4jam1n.site/studio/md/java/spring/20220202-ioc.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/spring/20220202-ioc.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">IoC 简介及入门实例</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 IoC IoC（Inversion of Control），中文名又叫做控制反转。 针对当前书写代码时耦合度偏高的现状，大牛们提出了对应的解决方案。那就是在使用对象时，不要再通过主动使用 new 来创建对象，而是转变为由外部来提供对象。而这种将对象的创建控制权从程序转移到外部的思想就叫做控制反转。</description>
      <category>Spring 教程</category>
      <pubDate>Wed, 02 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> IoC</h2>
<p>IoC（<code>Inversion of Control</code>），中文名又叫做控制反转。</p>
<p>针对当前书写代码时耦合度偏高的现状，大牛们提出了对应的解决方案。那就是在使用对象时，不要再通过主动使用 <code>new</code> 来创建对象，而是转变为由外部来提供对象。而这种将对象的创建控制权从程序转移到<strong>外部</strong>的思想就叫做<strong>控制反转</strong>。</p>
<p>总结来说，IoC 就是指在使用对象时由主动 <code>new</code> 创建对象的方式转换为由外部提供，这个过程中对象的创建控制权由程序转移到了外部，这个思想就叫做控制反转。而 Spring 实现了 IoC 思想，它提供了一个容器用来充当 IoC 思想中的外部，而我们将这个容器称为 IoC 容器。</p>
<p>IoC 容器专门负责对象创建、初始化等一系列工作，而这些由 IoC 容器所管理的对象我们统称为 <code>Bean</code>。</p>
<h2> DI</h2>
<p>DI（<code>Dependency Injection</code>），中文名又叫做依赖注入。</p>
<p>IoC 容器虽然负责了创建和初始化对象等一系列工作，但实际上不同的对象之间或多或少存在着依赖关系，这个问题 IoC 是解决不了的，因此才有了 DI 的提出。依赖注入实现了容器中 Bean 与 Bean 之间依赖关系的建立。</p>
<h2> 入门案例</h2>
<p>接下来我们来看看 IoC 的一个入门实例。</p>
<p>首先，我们创建一个 Maven 项目，如果不太熟悉如何创建，可以参考我之前的一篇教程 -&gt; <a href="https://benjam1n.eu.org/md/java/maven/20220104-maven-project-with-idea" target="_blank" rel="noopener noreferrer">使用 IDEA 创建 Maven 项目</a></p>
<p>接着我们分别创建 DAO 层和 Service 层接口，并实现其接口，最后则是在主程序入口中调用，创建后的项目结构如下：</p>
<p></p>
<ul>
<li><strong>DAO 层</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>Service 层</strong></li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 传统方式</h3>
<p>我们先以传统的方式，通过手动创建对象的方式。通过创建一个 <code>BookService</code> 对象，调用接口后打印结果如下。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> IoC 方式</h3>
<p>以上还是通过我们手动创建对象的方式，接下来看看利用 IoC 的方式。</p>
<p>首先，要使用 IoC 的特性，我们需要在项目的 <code>pom.xml</code> 中引入 Spring 的依赖。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们创建配置文件，告知 IoC 容器需要管理的对象。</p>
<p>在 <code>resource</code> 目录下创建 Spring 配置文件 <code>applicationContext.xml</code>，然后配置需要管理的 <code>BookService</code> 和 <code>BookDao</code> 对象。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们创建一个主程序入口，通过从配置文件中获取对象，然后调用对应方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> DI 方式</h3>
<p>之前的方式有一点不知道有没有注意，那就是在 Service 层中，无论是使用传统方式还是 IoC 的方式，我们都是通过手动创建的 <code>BookDao</code> 的对象，那有没有什么方式让我们不用通过手动创建 <code>BookDao</code> 对象的呢？答案是：有的，那就是 DI。接下来我们就来看看基于依赖注入的方式，来解决 <code>BookDao</code> 和 <code>BookService</code> 之间的依赖关系。</p>
<p>DAO 层中的代码我们依旧保持不变，主要修改 Service 中的代码，去掉通过 <code>new</code> 方式来创建对象，修改后 Service 层 的代码如下。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在 Spring 配置文件 <code>applicationContext</code> 中配置 <code>BookDao</code> 和 <code>BookService</code> 的关系。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，用 IoC 方式中同样的方式，在主程序入口获取配置文件，然后获取对象调用接口即可。</p>
<p></p>
<h2> 总结</h2>
<p>本文主要讲了 IoC 和 DI 的定义，然后对比了传统方式、IoC 方式和 DI 方式用来管理对象，而且最终三者的结果都是一样的，但其中还是有一点的区别。通过引入 Spring 中的 IoC 和 DI 特性，我们只需要配置相关配置即可，而不用再去通过 <code>new</code> 手动创建对象以及管理 Bean 之间的依赖关系。</p>
<p>最后，关于本文的示例代码，我已经上传到远程仓库，有需要的小伙伴可以自取。</p>
<blockquote>
<p><a href="https://github.com/ez4jam1n/java-learning-demos/tree/main/spring-ioc-demo" target="_blank" rel="noopener noreferrer">Spring-IoC-Demo</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title></title>
      <link>https://ez4jam1n.site/studio/md/java/spring/20220203-di.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/spring/20220203-di.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml"></source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 依赖注入的方式 如果要想一个类中传递数据，我们常用的可以通过构造方法来传递，而另一种就是常用的 getter\setter 方法。 之前说过依赖注入描述了容器中 Bean 和 Bean 之间的依赖关系，但如果 Bean 在运行中书需要的不是对象，而是其他类型的数据比如数字或者字符串呢？</description>
      <pubDate>Fri, 10 Mar 2023 06:19:45 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 依赖注入的方式</h2>
<p>如果要想一个类中传递数据，我们常用的可以通过构造方法来传递，而另一种就是常用的 <code>getter\setter</code> 方法。</p>
<p>之前说过依赖注入描述了容器中 Bean 和 Bean 之间的依赖关系，但如果 Bean 在运行中书需要的不是对象，而是其他类型的数据比如数字或者字符串呢？</p>
<p>因此，依赖注入也提供了其他类型数据的注入方式，这里同样可以分为 <code>setter</code> 注入和构造器注入的方式。</p>
<h2> setter 注入</h2>
<p>首先是引用类型的注入。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着在 Spring 配置文件 <code>applicationContext.xml</code> 中，使用 <code>property</code> 标签的 <code>ref</code> 属性注意引用类型的对象即可。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>3 种创建项目的方式</title>
      <link>https://ez4jam1n.site/studio/md/java/spring/20220204-the-methods-to-create-spring-project.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/spring/20220204-the-methods-to-create-spring-project.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">3 种创建项目的方式</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 上一篇文章中我们讲了 Spring 的相关简介，那么这一节我们就来看看，如何使用 Spring 来创建一个最简单的 HelloWorld 入门实例。等到我们上手之后，再去研究一下 Spring 的一些核心原理及配置。</description>
      <category>Spring 教程</category>
      <pubDate>Fri, 04 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>上一篇文章中我们讲了 Spring 的相关简介，那么这一节我们就来看看，如何使用 Spring 来创建一个最简单的 <code>HelloWorld</code> 入门实例。等到我们上手之后，再去研究一下 Spring 的一些核心原理及配置。</p>
<h2> 创建 Spring 实例的各种方式</h2>
<p>创建 Spring 项目的方式有很多种，最原始可以通过导包来创建，但在这里我们就直接用 Maven 来进行依赖管理，省去各种导包过程。如果你对 Maven 还不够熟悉，那么推荐你先去看看 Maven 的相关内容，我这里之前也写了 Maven 的相关文章。</p>
<h3> Maven 创建</h3>
<ol>
<li>新建 Maven 项目；</li>
</ol>
<p></p>
<ol start="2">
<li>填写项目名及 Maven 坐标相关配置；</li>
</ol>
<p></p>
<ol start="3">
<li>点击 <code>Finish</code> 后完成项目构建，构建后的项目目录结构如下；</li>
</ol>
<p></p>
<ol start="4">
<li>接下来我们就是在 <code>pom.xml</code> 中添加 Spring 的相关依赖，这里主要导入 Spring 的四个核心依赖包 <code>Beans</code>、<code>Context</code>、<code>Core</code>、<code>Expression</code>。</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li>创建一个普通类，然后类中创建一个普通方法；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6">
<li>创建 Spring 配置文件，用于配置创建的对象；</li>
</ol>
<p>Spring 配置文件一般是一个 <code>xml</code> 文件，其名字可以有我们自定义。但是要注意它的存放位置，一般是位于 <code>resources</code> 目录下，如果放在其他位置，有可能出现报错。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7">
<li>建立测试类进行测试；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> Spring Initializer 创建</h3>
<ol>
<li>新建项目时选择 <code>Spring Initializer</code> ，并填下 Maven 坐标相关信息；</li>
</ol>
<p></p>
<ol start="2">
<li>这里其实严格上说是一个 SpringBoot 项目，而不是 Spring 项目，但用于 Spring 项目也可以，直接 <code>Finish</code>；</li>
</ol>
<p></p>
<ol start="3">
<li>同样的，我们创建实体类 <code>Hero</code></li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>然后同样在 <code>resources</code> 目录下新建 Spring 配置文件 <code>ApplicationContent.xml</code>；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li>编写测试类进行测试；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<ol start="6">
<li><strong>注意</strong></li>
</ol>
<p>通过这种方式创建的 <code>pom.xml</code> 文件如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比通过 Maven 创建的方式，这里所添加的依赖有所不同。这是因为这种方式实际上创建的是 SpringBoot 项目，而 SpringBoot 的依赖和 Spring 有所不同，但 SpringBoot 能够实现 Spring 所具有的功能，所以这里不用再去重复添加 Spring 的相关依赖。</p>
<h3> 在线创建</h3>
<p>这种方式其实和 Spring Initializer 创建的方式一样，只不过它是以网页在线的方式，然后再导入导出 IDEA 中进行后续操作。</p>
<ol>
<li>打开 <a href="https://start.spring.io/" target="_blank" rel="noopener noreferrer">https://start.spring.io/</a> 来生成项目；</li>
</ol>
<p></p>
<ol start="2">
<li>然后点击左下角生成按钮或使用快捷键 <code>Ctrl + Enter</code> 生成；</li>
<li>将压缩包下载后，解压缩后用自己喜欢的 IDE 开发即可；</li>
</ol>
<p></p>
<p>假如我们导入到 IDEA，那么接下来的步骤就是同上一种方式相同，接着就是创建实体类、配置 Spring 相关配置，最后测试类测试即可。</p>
<h2> 总结</h2>
<p>好了，以上就是今天的所有内容了，主要介绍了 3 种创建 Spring 实例的方式。当然，你也可以去把 Spring 相关的依赖包进行下载后，然后导入包的方式进行项目创建，但这里更加推荐使用 Maven 的方式，方便快捷。</p>
<p>最后，原创不易，如果你觉得文章的内容对你有所帮助，那就点赞关注吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>Bean 详解</title>
      <link>https://ez4jam1n.site/studio/md/java/spring/20220205-bean.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/spring/20220205-bean.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">Bean 详解</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 Bean 的别名配置 接着上一篇文章中的 &amp;lt;bean&amp;gt; 配置，其中配置了 id 属性，通过 id 属性我们就可以获取到对象。其实 &amp;lt;bean&amp;gt; 配置也提供了 name 属性，它是用于定义 Bean 的别名，一个 Bean 的别名是可以有多个的，各个别名之间可以通过逗号（,）、分号（;）、空格（``）分隔。</description>
      <category>Spring 教程</category>
      <pubDate>Sat, 05 Feb 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> Bean 的别名配置</h2>
<p>接着上一篇文章中的 <code>&lt;bean&gt;</code> 配置，其中配置了 <code>id</code> 属性，通过 <code>id</code> 属性我们就可以获取到对象。其实 <code>&lt;bean&gt;</code> 配置也提供了 <code>name</code> 属性，它是用于定义 Bean 的别名，一个 Bean 的别名是可以有多个的，各个别名之间可以通过逗号（<code>,</code>）、分号（<code>;</code>）、空格（``）分隔。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们要获取 Bean 时，既可以通过 <code>id</code>，也可以通过 <code>name</code> 获取。两者的区别在于 <code>id</code> 属性是惟一的，而 <code>name</code> 不是，因此在配置时，更加推荐使用 <code>id</code> 而非 <code>name</code> 防止因为重名而导致在获取 Bean 时混淆。</p>
<p>通过 <code>id</code> 或者 <code>name</code> 获取 Bean 时，如果获取不到，此时程序将抛出异常 <code>NoSuchBeanDefinitionException</code>。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一旦遇到以上错误，那么第一反应应该是是去 Spring 配置文件 <code>applicationContext.xml</code> 中查看对应 Bean 是否配置，或者在代码和配置中的 Bean 名是否匹配一致。</p>
<h2> Bean 的作用范围</h2>
<p>Bean 既然是一个对象，那么它也是有作用范围的。在 <code>&lt;bean&gt;</code> 配置时我们可以利用 <code>scope</code> 属性。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>singleton</code></td>
<td>单例，也是 Bean 磨人的作用范围</td>
</tr>
<tr>
<td><code>prototype</code></td>
<td>非单例</td>
</tr>
</tbody>
</table>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上两种配置的效果是一致的，因为 Bean 默认的作用范围是 <code>singleton</code>。接着我们创建两个 <code>BookService</code> 对象，然后打印出来，可以看到它们指向的是同一块内存。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>而如果我们将 Bean 的 <code>scope</code> 配置为 <code>prototype</code>，那么此时再创建两个 <code>BookService</code> 对象，然后对比它们的内存地址，会发现两者指向的并非指向同一块内存。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> Bean 实例化</h2>
<h3> 构造方法</h3>
<p>Bean 的本质是对象，所以可以使用构造方法完成。</p>
<p>同样基于上一篇文章中的实例，配置好 <code>&lt;bean&gt;</code> 之后，然后在 <code>BookDao</code> 接口的实现中用构造方法来创建 Bean，最后在主程序入口中获取 Bean 之后调用方法，可以发现调用了构造方法。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 静态工厂方法</h3>
<p>利用静态工厂方法对 Bean 进行实例化时，首先需要创建一个工厂类，并在工厂类中创建一个静态方法用于创建对象。然后在 Spring 的配置文件 <code>applicationContext.xml</code> 中配置静态工厂类并指定其中的方法，最后在主程序入口中获取 Bean 并调用方法即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 实例工厂对象方法</h3>
<p>假设有一个接口和它的实现如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们创建一个实例工厂方法，注意此时我们是继承了 <code>FactoryBean</code> 接口，然后实现了其中的 <code>getObject()</code> 和 <code>getObjectType()</code> 两个方法。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着在 Spring 的配置文件中进行配置，需要注意此时的类应该是我们的工厂类 <code>PersonDaoFactoryBean</code>，而不是 <code>PersonDaoImpl</code>。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>最后在程序主入口中获取 Bean，然后调用方法即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h2> Bean 的生命周期</h2>
<p>先来看看生命周期的定义，所谓生命周期就是指从创建到消亡的完整过程，类比到我们人身上，生命周期就是从我们出生到死亡的这个过程。而 Bean 的生命周期就指的是 Bean 从创建到销毁的整体过程。</p>
<p>Bean 的生命周期主要分为三个阶段：</p>
<ul>
<li><strong>初始化容器</strong></li>
<li><strong>使用 Bean</strong></li>
<li><strong>销毁容器</strong></li>
</ul>
<p>初始化容器阶段，主要执行的操作有：创建对象（内存分配）、执行构造方法、执行属性注入（<code>set</code> 操作）、执行 Bean 初始化方法。</p>
<p>使用 Bean 阶段，主要是去执行业务操作。</p>
<p>销毁容器阶段，主要是执行 Bean 的销毁方法。</p>
<h2> 总结</h2>
<p>以上就是今天关于 Bean 的内容了，主要从 Bean 的别名配置、作用范围、如何进行实例化以及声明周期 4 个方面着手，学习了 Bean 的相关操作。</p>
]]></content:encoded>
    </item>
    <item>
      <title>入门简介</title>
      <link>https://ez4jam1n.site/studio/md/java/springboot/20220101-introduction.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/springboot/20220101-introduction.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">入门简介</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 Spring 是重量级企业开发框架 EJB（Enterprise JavaBean） 的替代品，是为了解决企业级应用开发的复杂性而创建的，简化开发。通过 依赖注入（DI） 和 面向切面编程，用简单的 Java 对象（POJO，Plain Old Java Object） 实现 EJB 的功能，其组件代码轻量，但是配置很繁琐（需要大量 XML 配置）。Spring 2.5 引入基于注解的组件扫描，Spring 3.0 引入基于 Java 的配置，可以代替 XML，虽然引入的特性大大提高了配置的效率，但是也无法避免，针对这一问题，Spring Boot 应运而生。</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Sat, 01 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p><code>Spring</code> 是重量级企业开发框架 <code>EJB（Enterprise JavaBean）</code> 的替代品，是为了解决企业级应用开发的复杂性而创建的，简化开发。通过 <strong>依赖注入（DI）</strong> 和 <strong>面向切面编程</strong>，用简单的 <strong><code>Java</code> 对象（<code>POJO</code>，<code>Plain Old Java Object</code>）</strong> 实现 <code>EJB</code> 的功能，<strong>其组件代码轻量，但是配置很繁琐（需要大量 <code>XML</code> 配置）</strong>。<code>Spring 2.5</code> 引入基于注解的组件扫描，<code>Spring 3.0</code> 引入基于 <code>Java</code> 的配置，可以代替 <code>XML</code>，虽然引入的特性大大提高了配置的效率，但是也无法避免，针对这一问题，<code>Spring Boot</code> 应运而生。</p>
<p>Spring Boot 是为简化 Spring 应用初始搭建和开发过程，我们只要基于特定方式来进行配置即可。</p>
<p>今天我们就来看看，关于 Spring Boot 的相关介绍吧！</p>
<h2> Spring Boot</h2>
<h3> 定义</h3>
<blockquote>
<p>Spring Boot makes it easy to create stand-alone, production-grade Spring based Applications that you can “just run”...Most Spring Boot applications need very little Spring configuration.</p>
</blockquote>
<p>上面的一段话来自 <code>Spring</code> 官方，即“<code>Spring Boot</code> 能够轻松创建基于 <code>Spring</code> 的独立的生产级别的应用程序，而只需要通过 “<code>just run</code> （可能是 <code>java -jar、tomcat、maven、shell、'Application'</code> 等）”就可以让项目跑起来，大多 <code>Spring Boot</code> 项目仅需少量配置即可运行”。</p>
<p>Spring Boot 基于 Spring 开发，Spirng Boot 本身并不提供 Spring 框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于 Spring 框架的应用程序。也就是说，它并不是用来替代 Spring 的解决方案，而是和 Spring 框架紧密结合用于提升 Spring 开发者体验的工具。Spring Boot 以<strong>约定大于配置的核心思想</strong>，默认帮我们进行了很多设置，多数 Spring Boot 应用只需要很少的 Spring 配置。同时它集成了大量常用的第三方库配置（例如 Redis、MongoDB、Jpa、RabbitMQ、Quartz 等等）。</p>
<h3> 为什么需要 Spring Boot</h3>
<p><code>Spring</code> 框架能够让 <code>J2EE</code>企业应用程序开发更加简化，但是还是需要配置大量文件，针对这一问题，<code>Spring Boot</code> 能够进一步简化 <code>Spring</code> 框架，使得开发更为高效；</p>
<h3> 特点</h3>
<ul>
<li>可以创建独立 <code>Spring</code> 应用程序，并且基于 <code>Maven</code> 或 <code>Gradle</code> 插件，可以创建可执行的 <code>JARs</code> 和 <code>WARs</code>；</li>
<li>内嵌 <code>Tomcat</code> 或 <code>Jetty</code> 等 <code>Servlet</code> 容器；</li>
<li>提供自动配置的 <code>started</code> 项目对象模型（<code>POMS</code>）以简化 <code>Maven</code> 配置；</li>
<li>尽可能自动配置 <code>Spring</code> 容器；</li>
<li>提供准备好的特性，如指标、健康检查和外部化配置；</li>
<li>没有冗余代码生成，不需要 <code>XML</code> 配置；</li>
</ul>
<h3> 重要策略</h3>
<ul>
<li><strong>开箱即用</strong>：<code>Outofbox</code>，指在开发过程中，通过在 <code>Maven</code> 项目的 <code>pom</code> 文件中添加相关依赖包，然后使用对应注解来代替繁琐的 <code>XML</code> 配置文件以管理对象的生命周期。这一特点使得开发人员摆脱了复杂的配置工作以及相关依赖的管理工作，更加专注于业务逻辑；</li>
<li><strong>约定优于配置</strong>：<code>Convention over configuration</code>，一种由 <code>SpringBoot</code> 本身来配置目标结构，由开发者在结构中添加信息的软件设计范式。这一特点虽然降低了部分灵活性，增加了 <code>BUG</code> 定位的复杂性，但减少了开发人员需要做出决定的数量，同时减少了大量 <code>XML</code> 配置，而且可以将代码编译、测试和打包等工作自动化；</li>
</ul>
<h3> Spring Boot 项目约定</h3>
<ul>
<li>约定项目中有且只有一个入口类，其类名推荐使用：<code>xxxApplication.java</code>。而且该入口类必须位于所有的子包之外，其中必须存在一个用于启动项目的 <code>main</code> 函数。</li>
</ul>
<p></p>
<ul>
<li>此外， Spring Boot 项目约定必须在项目根目录中存在一个名为 <code>application.yml</code> 或者 <code>yml.prpperties</code> 的配置文件，一般是位于 <code>resources</code> 目录下。</li>
</ul>
<p></p>
<h3> Spring Boot 的优缺点</h3>
<h4> 优点</h4>
<ol>
<li>使得开发基于 <code>Spring</code> 的应用程序变得简单；</li>
<li><code>Spring Boot</code> 项目开发所需时间明显减少，提高整体生产力；</li>
<li>无需编写大量样板代码、<code>XML</code> 配置和注释；</li>
<li>与 <code>Spring</code> 生态系统更加容易集成，如 <code>Spring JDBC、Spring ORM、Spring Data、Spring Security</code>；</li>
<li>遵循默认配置，我们通过修改默认配置能够减少开发工作；</li>
<li>提供嵌入式 <code>http</code> 服务器，方便开发测试 <code>web</code> 应用程序；</li>
<li>提供命令行接口（<code>CLI</code>）工具，用于开发测试 <code>Spring Boot</code> 应用程序；</li>
<li>提供多种插件，能使用内置工具（<code>Maven &amp; Gradle</code>）开发测试 <code>Spring Boot</code> 应用程序；</li>
</ol>
<h4> 缺点</h4>
<ol>
<li>相关文档资料较少；</li>
<li>版本迭代快，导致各版本间的模块改动可能很大；</li>
</ol>
<p>总体来讲，采用 Spring Boot 的优点是绝对的，而且其缺点看似是缺点，但如果保持学习，还是很容易就能掌握的。而之所以迭代，不就是为了像 SSM -&gt; Spring Boot 这样简化我们的开发，提高开发效率么？有了更高的效率，那是不是就意味着我们能有更多的时间摸鱼或者早点下班跑路？🤪</p>
<h2> 总结</h2>
<p>以上就是今天的所有内容了，主要讲了 Spring Boot 的定义、特点、项目约定以及其优缺点。而关于 Spring Boot 项目的具体事例的搭建，我们就下期文章再见吧！</p>
<blockquote>
<p>传送门：<a href="https://blog.csdn.net/github_39655029/article/details/119618308" target="_blank" rel="noopener noreferrer">创建 SpringBoot 项目的 3 种方式</a></p>
</blockquote>
<p>最后，如果本文对你有所帮助，那就点个赞再走吧 ~</p>
<p><strong>关注公众号，获取最新文章更新</strong></p>
<div style="text-align:center">
<p><img src="https://cdn.jsdelivr.net/gh/ez4jam1n/ez4jam1n@main/imgs/wepublic.gif" alt="" width="200"></p>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>创建项目的 3 种方式</title>
      <link>https://ez4jam1n.site/studio/md/java/springboot/20220102-the-methods-to-create-springboot-project.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/springboot/20220102-the-methods-to-create-springboot-project.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">创建项目的 3 种方式</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 如果你是一个浸淫 SpringBoot 已久的老手，那么可能下面的内容可能不那么适合你，写得很简单。但如果是 对于一个刚学习 SpringBoot 的新手而言，我想多少还是有些用的。本文就来手把手教你如何创建一个 SpringBoot 项目，并对其中的一些关键信息进行简单分析，让你更加快速的掌握如何创建一个 SpringBoot 项目。</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Sun, 02 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>如果你是一个浸淫 SpringBoot 已久的老手，那么可能下面的内容可能不那么适合你，写得很简单。但如果是
对于一个刚学习 SpringBoot 的新手而言，我想多少还是有些用的。本文就来手把手教你如何创建一个 SpringBoot 项目，并对其中的一些关键信息进行简单分析，让你更加快速的掌握如何创建一个 SpringBoot 项目。</p>
<h2> Spring Boot 简介</h2>
<p>使用 <code>Servlet/JSP</code> 开发 <code>JavaWeb</code> 时，一个接口对应一个 <code>Servlet</code>，配置很繁琐。未尽量减少这种麻烦，<code>Spring Boot</code> 应用而生。它是由 <code>Pivotal</code> 团队提供的全新框架，目的适用于简化 Spring 应用的初始搭建即开发过程。该框架使用特定方式进行配置，从而使开发人员无需定义样板化的配置。</p>
<h2> 如何创建 Spring Boot 项目</h2>
<p><code>Sping Boot</code> 项目的本质其实还是一个 <code>Maven</code> 项目，主要有如下几种创建 <code>Spring Boot</code> 项目的方式；</p>
<h3> 在线创建</h3>
<ol>
<li>打开 <a href="https://start.spring.io/" target="_blank" rel="noopener noreferrer">https://start.spring.io/</a> 来生成 <code>Spring Boot</code> 项目；</li>
</ol>

<ol start="2">
<li>然后选择和填写相关配置；</li>
</ol>
<ul>
<li><strong>Project</strong>：表示使用什么构建工具，<code>Maven or Gradle</code>；</li>
<li><strong>Language</strong>：表示使用什么编程语言， <code>Java</code> 、<code>Kotlin</code> 还是 <code>Groovy</code>；</li>
<li><strong>Spring Boot</strong>：<code>Spring Boot</code> 的版本；</li>
<li><strong>Project Metadata</strong>：项目元数据，即 <code>Maven</code> 项目基本元素，根据自己的实际情况填写；</li>
<li><strong>Dependencies</strong>：要加入的 <code>Spring Boot</code> 组件；</li>
</ul>

<ol start="3">
<li>然后点击生成或 <code>Ctrl + Enter</code> 即可；</li>
</ol>

<ol start="4">
<li>将压缩包下载后，解压缩后用自己喜欢的 <code>IDE</code> 开发即可；</li>
</ol>
<h3> IntelliJ IDEA 创建</h3>
<ol>
<li>新建项目时选择 <code>Spring Initializr</code> ；</li>
</ol>
<p></p>
<ol start="2">
<li>点击下一步，填写相关配置；</li>
</ol>
<ul>
<li><code>Group</code>：组织 <code>ID</code>，一般分为多个段，一般第一段为<strong>域</strong>，而第二段则是 <strong>公司名称</strong>；</li>
<li><code>Artifact</code>：唯一标识符，一般是项目名；</li>
</ul>
<p></p>
<ol start="3">
<li>选择包，添加相关依赖；</li>
</ol>
<p></p>
<ol start="4">
<li>配置项目名，点击完成即可；</li>
</ol>
<p></p>
<h3> Maven 创建</h3>
<ol>
<li>新建 Maven 项目；</li>
</ol>
<p></p>
<ol start="2">
<li>填写项目名和相关配置；</li>
</ol>

<ol start="3">
<li>点击完成即可；</li>
</ol>

<ol start="4">
<li>配置 <code>pom.xml</code> 添加依赖；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li>在 <code>main/java</code> 目录下创建一个包，然后新建一个类，比如我的如下；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6">
<li>运行上一步中的 <code>main</code> 方法即可；</li>
</ol>

<h2> 常见项目结构</h2>
<h3> 代码层</h3>
<p>根目录：<code>com.springboot</code>：</p>
<ul>
<li><code>build</code> ：工程启动类；</li>
<li><code>entity</code> ：实体类；</li>
<li><code>dao</code> ：数据访问层；</li>
<li><code>service</code> ：数据服务层，业务类代码；</li>
<li><code>controller</code> ：前端访问控制器；</li>
<li><code>config</code> ：配置信息类；</li>
<li><code>util</code> ：工具类；</li>
<li><code>constant</code> ：常用接口类；</li>
<li><code>vo</code> ：数据传输类；</li>
<li><code>Application.java</code>：项目的启动类；</li>
</ul>
<h3> 资源文件结构</h3>
<p>根目录 <code>src/main/resources</code>：</p>
<ul>
<li><code>config</code> ：<code>.properties、.json</code> 等配置文件；</li>
<li><code>i18n</code> ：国际化相关；</li>
<li><code>META-INF/spring</code> ：<code>spring.xml</code> ；</li>
<li><code>static</code> ：页面以及 <code>js、css、image</code> 等分别放在各自文件夹下；</li>
</ul>
<h2> @SpringBootApplication 注解分析</h2>
<h3> 相关代码</h3>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 说明</h3>
<p><code>@SpringBootApplication</code> 标注该类是一个启动类，可以看做是 <code>@Configuration、@EnableAutoConfiguration、@ComponentScan</code> 的集合；</p>
<ul>
<li><code>@Configuration</code> ：允许在上下文中注册额外的 <code>Bean</code> 或导入其他配置；</li>
<li><code>@EnableAutoConfiguration</code>：启动 <code>Spring Boot</code> 的自动配置机制；</li>
<li><code>@ComponentScan</code>：扫描被 <code>@ComponentScan（@Service、@Controller、@Repository）</code> 注解的 <code>Bean</code>，默认扫描该类所在包下所有类，将这些 <code>Bean</code> 定义加载到 <code>IOC</code> 容器中；</li>
</ul>
<h2> pom.xml 分析</h2>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建好项目后，如果没有选其他组件，会生成如上的 <code>Spring Boot</code> 项目依赖，主要有四个部分：</p>
<ul>
<li><strong>项目元数据</strong></li>
</ul>
<p>创建时输入的 <code>Project Metadata</code> 部分，即 <code>Maven</code> 项目的基本元素，包括 <code>groupId、artifactId、version、name、description</code> 等；</p>
<ul>
<li><strong>parent</strong></li>
</ul>
<p>继承 <code>spring-boot-starter-parent</code> 的依赖管理，控制版本与打包等等内容；</p>
<ul>
<li><strong>dependencies</strong></li>
</ul>
<p>项目具体依赖，默认包含 <code>spring-boot-starter-web</code>，用于实现 HTTP 接口（该依赖中包含了 <code>Spring MVC</code>）；<code>spring-boot-starter-test</code>用于编写单元测试的依赖包。后续开发中，主要就是在这里添加各种依赖。</p>
<ul>
<li><strong>build</strong></li>
</ul>
<p>构建配置部分，默认使用 <code>spring-boot-maven-plugin</code>，配合 <code>spring-boot-starter-parent</code> 可以把 <code>Spring Boot</code> 应用打包成 <code>jar</code> 来直接运行。</p>
<h2> 总结</h2>
<p>以上就是今天的全部内容了，文章主要介绍了两种创建 <code>Spring Boot</code> 的方式，一种是通过 <code>Spring</code> 官网在线创建的方式，另一种则是通过 <code>IDEA</code> 创建的方式，两个方式其实效果都是一样的，只不过形式不同而已。</p>
<p>最后，创作不易，如果觉得我的文章对你有所帮助，那就帮忙点赞关注吧，感谢支持！</p>
]]></content:encoded>
    </item>
    <item>
      <title>配置详解</title>
      <link>https://ez4jam1n.site/studio/md/java/springboot/20220103-configuration.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/springboot/20220103-configuration.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">配置详解</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 为了 Spring Boot 能够更好地生成配置元数据文件，我们可以在创建项目时添加 Spring Configuartion Processor 依赖，或者在创建好项目后的 pom.xml 文件中手动添加。添加该依赖后，我们在编写配置时就会有属性提示，大大降低编写错误。</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Mon, 03 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>为了 <code>Spring Boot</code> 能够更好地生成配置元数据文件，我们可以在创建项目时添加 <code>Spring Configuartion Processor</code> 依赖，或者在创建好项目后的 <code>pom.xml</code> 文件中手动添加。添加该依赖后，我们在编写配置时就会有属性提示，大大降低编写错误。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> application.properties</h2>
<h3> 自定义属性</h3>
<p><code>application.properties</code> 配置文件是创建项目后就自带的，如果我们要自定义属性，可以在其中直接配置，配置过程如下：</p>
<ol>
<li>在 <code>application.properties</code> 中添加我们要自定义的配置；</li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>创建实体类来映射我们配置的属性；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>定义 <code>Controller</code> 来注入测试；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>打开网页测试，打开 <a href="http://localhost:8080/cunyu/profile%EF%BC%8C%E5%90%8C%E6%97%B6%E8%A7%82%E5%AF%9F%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%8C%E6%98%BE%E7%A4%BA%E5%A6%82%E4%B8%8B%E5%86%85%E5%AE%B9%E5%88%99%E8%AF%B4%E6%98%8E%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5%E6%88%90%E5%8A%9F%EF%BC%9B" target="_blank" rel="noopener noreferrer">http://localhost:8080/cunyu/profile，同时观察控制台，显示如下内容则说明属性注入成功；</a></li>
</ol>
<p></p>
<p></p>
<h3> 多环境配置</h3>
<p>实际开发过程中，常常需要多个环境（如 <strong>开发、测试、生产</strong>等），而不同环境的配置都不一样，此时配置方法如下；</p>
<ol>
<li>创建不同环境对应的配置文件，配置文件名为 <code>application-{profile}.properties</code>，<code>{profile}</code> 为我们自定义环境，如下：</li>
</ol>
<blockquote>
<p>开发环境：application-dev.properties</p>
</blockquote>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>测试环境：application-test.properties</p>
</blockquote>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote>
<p>生产环境：application-prod.properties</p>
</blockquote>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>然后在 <code>application.properties</code> 中加入激活的环境，此时就会激活对应环境的配置；</li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>之所以要分为多个环境的配置，主要是方便在不同环境中开发的需求，比如我们要开发新功能，那此时就可以激活开发配置文件的相关设置，等待我们开发完成之后，然后再切换到测试环境进行测试。而经过严格的测试之后，我们就可以将新推出的功能上线到生产环境中。纵观整个开发流程，我们既完成了新功能的开发，也没有影响到用户对现有系统的使用，所以现在大家基本都是基于这种模式来进行业务开发。</p>
<h2> 自定义配置文件</h2>
<p>假如我们不想用项目自带的 <code>application.properties</code> 配置环境，那我们也可以自定义我们需要的配置。但该如何配置呢？接下来我们就来看看 ~</p>
<ol>
<li>首先创建一个自定义配置文件 <code>my.properties</code>，文件名可以自定义，但是后缀要保持一致，然后在其中加入我们自定义配置的属性；</li>
</ol>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>定义实体类，用于映射自定义配置文件中的内容；</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3">
<li>定义 <code>Controller</code> 来注入测试</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4">
<li>打开网页测试，打开 <code>http://localhost:8080/my/profile</code>，同时观察控制台，显示如下内容则说明属性注入成功；</li>
</ol>
<p></p>
<p></p>
<h2> 注意</h2>
<p><code>application.properties</code> 和 <code>my.properties</code> 会优先加载 <code>application.properties</code>。</p>
<h2> .yml 和 .properties</h2>
<p>一般来说，使用 <code>IDEA</code> 创建一个 <code>Spring Boot</code> 项目时，默认都会生成一个 <code>application.properties</code> 的配置文件。该配置文件是用来 <strong>修改 <code>Spring Boot</code> 自动配置的默认值</strong>。 但有的朋友会更倾向于使用 <code>application.yml</code>，那么问题来了，这两种格式到底有啥区别呢？</p>
<p>开始比较之前，我们先来看看各自的实例：</p>
<ul>
<li><strong>.properties 格式</strong></li>
</ul>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li><strong>.yml 格式</strong></li>
</ul>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的实例我们可以发现，两者的区别主要有以下几点：</p>
<ol>
<li><strong>语法结构</strong></li>
</ol>
<ul>
<li>
<p><code>.properties</code> 格式使用的是 <strong>键值对形式（key=value）</strong>，而 <code>.yml</code> 格式则使用的是 <strong>树状结构（key: value）</strong>；</p>
</li>
<li>
<p><code>.properties</code> 格式通过 <code>.</code> 来连接，<code>=</code> 来赋值，结构上比较直接，而 <code>.yml</code> 格式则使用 <code>:</code> 来分层，结构上呈现树状结构，层次感明显，而且赋值时 <code>:</code> 的后边必须 <strong>接着一个空格再赋值</strong></p>
</li>
</ul>
<ol start="2">
<li><strong>执行先后顺序</strong></li>
</ol>
<p>如果一个工程中同时存在两种格式的文件，那么会 <strong>优先加载 <code>.yml</code> 文件，然后再加载 <code>.properties</code>，而且后加载的 <code>.properties</code> 会覆盖之前加载的 <code>.yml</code> 文件</strong>。</p>
<p>此外，<code>.yml</code> 配置时需要注意以下几点：</p>
<ol>
<li><strong>缩进必须用空格，不能用 <code>Tab</code></strong></li>
<li><code>@PropertySource</code> 注解不能加载 <code>yml</code> 文件</li>
</ol>
<h2> 总结</h2>
<p>以上就是关于 <code>Spring Boot</code> 中的配置相关内容了。本文主要介绍了 <code>Spring Boot</code> 项目自带的配置文件的相关信息，同时也介绍了如果我们想要满足自己需求如何进行自定义配置。最后，则是对 <code>.yml</code> 和 <code>.properties</code> 不同格式的配置文件的区别进行解释。</p>
]]></content:encoded>
    </item>
    <item>
      <title>集成 Swagger2</title>
      <link>https://ez4jam1n.site/studio/md/java/springboot/20220104-integrated-swagger2.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/springboot/20220104-integrated-swagger2.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">集成 Swagger2</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 不管你是从事前端还是后端开发，相信都难免被接口文档折磨过。如果你是一个前端开发者，可能你会经常发现后端给的接口文档跟实际代码有所出入。而假设你是一个后端开发者，你可能又会觉得自己开发后端接口已经够烦的了，还要花费大量精力去编写和维护接口文档，所以难免有时候会更新不及时。这就可能造成了前后端相互不理解，最后甚至吵起来，哈哈哈 🤪。</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Tue, 04 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>不管你是从事前端还是后端开发，相信都难免被接口文档折磨过。如果你是一个前端开发者，可能你会经常发现后端给的接口文档跟实际代码有所出入。而假设你是一个后端开发者，你可能又会觉得自己开发后端接口已经够烦的了，还要花费大量精力去编写和维护接口文档，所以难免有时候会更新不及时。这就可能造成了前后端相互不理解，最后甚至吵起来，哈哈哈 🤪。</p>
<p>这时候我们就会想，有没有一款工具，能让我们快速实现编写接口文档。这个工具既能保证我们的接口文档实时更新，也能保证我们不用花过多时间去维护，就像写注释那么简单。</p>
<p>既然这是大多数前后端程序员的一大痛点，那必须得有一个解决方案吧。而这个方案使用的人多了，慢慢就成了一种规范，大家都默认使用这个方案，从而解决前后端接口文档不同步的问题，而这就是我们今天的主角 - Swagger 的由来。</p>
<p>通过使用 Swagger，我们只需要按照它所给定的一系列规范去定义接口以及接口的相关信息，然后它就能帮我们自动生成各种格式的接口文档，方便前后端开发者进行前后端联调。同时，如果我们的代码接口有所变动，只需要更新 Swagger 的描述，它就能进行实时更新，做到实际代码和接口文档的一致性。</p>
<h2> Swagger 简介</h2>
<h3> Swagger 是什么</h3>
<p>Swagger 是一种接口描述语言，主要用于生成、描述、调用以及可视化 RESTful 风格的 Web 服务接口文档。以前的项目可能更多的是前后端未分开同时进行开发，所以接口文档可能不是那么重要。但现在主流的项目基本都是前后端分离，如果前后端没有沟通好，就有可能导致接口文档更新不及时，造成一些不必要的麻烦。而通俗地讲，Swagger 就是帮我们写接口文档的。它不仅能自动生成实时接口文档，还能生成测试用例，方便我们进行测试。</p>
<p>Swagger 主要提供了如下几种开源工具：</p>
<p></p>
<ol>
<li><strong>Swagger Editor</strong></li>
</ol>
<p>Swagger 所提供的的编辑器，主要用于编辑 Swagger 描述文件，支持实时预览描述文件更新后的效果，类似于我们的 Markdown 编辑器，左边编写源码，右边就可以进行实时预览。该编辑器不仅提供在线使用，还支持本地部署。</p>
<ol start="2">
<li><strong>Swagger UI</strong></li>
</ol>
<p>提供可视化的 UI 页面，用于展示 Swagger 的描述文件。接口的调用方、测试等都可以通过该页面查阅接口的相关信息，并且进行简单的接口请求测试。</p>
<ol start="3">
<li><strong>Swagger Codegen</strong></li>
</ol>
<p>通过使用该工具，可以将 Swagger 的描述文件生成 HTML 和 CWIKI 形式的接口文档，而且还能生成针对多种不同语言的服务端和客户端的代码。</p>
<h3> Swagger UI</h3>
<p>平时和我们打交道最多的，可能就是 Swagger UI 这个工具了，它主要用于显示接口文档。根据我们代码中按照 Swagger 规范所设置的描述，自动生成接口说明文档。一个简单的示例如下：</p>
<p></p>
<h2> Spring Boot 集成 Swagger</h2>
<h3> 创建 Spring Boot 项目</h3>
<p>通过以上对 Swagger 简单的介绍之后，我们来看看如何在 Spring Boot 项目中使用 Swagger。</p>
<p>首先需要创建一个简单的 Spring Boot 项目，如果你还不知道如何创建，可以参考我之前的一篇文章 <a href="https://ez4jam1n.blog.csdn.net/article/details/119618308" target="_blank" rel="noopener noreferrer">创建 Spring Boot 项目的 3 种方式</a>。</p>
<p>创建好之后的项目接口如下：</p>
<p></p>
<h3> 引入依赖</h3>
<p>创建好 Spring Boot 项目之后，需要配置项目 <code>pom.xml</code> 文件，在其中引入 Swagger 的相关依赖。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 构建 Swagger 配置类</h3>
<p>引入依赖后，接下来就是构建 Swagger 的配置类了。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 编写接口</h3>
<p>配置好 Swagger 后，在我们的项目中添加一个简单的接口，这里以一个简单的有参和无参接口为例。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 查看并测试接口</h3>
<p>完成上述步骤后，我们启动项目，然后在浏览器中访问如下地址，就可以访问我们项目的接口文档了。</p>
<blockquote>
<p><a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener noreferrer">http://localhost:8080/swagger-ui.html</a></p>
</blockquote>
<p>访问如上地址后，如果出现下面的界面，说明我们 Spring Boot 集成 Swagger2 就到此成功了。</p>
<p></p>
<p>点开具体的接口，就会有这个接口的一些详细信息，如下图所示，一般包括：</p>
<ol>
<li><strong>接口请求方式</strong></li>
<li><strong>接口请求路径及描述</strong></li>
<li><strong>接口请求参数</strong></li>
<li><strong>接口响应</strong></li>
</ol>
<p></p>
<p>如果我们要进行简单的测试，则点击上图中右上方的 <code>Try it out</code>，然后我们就可以编辑请求参数的值，编辑完成之后点击下方的 <code>Execute</code> 即可查看接口返回值。</p>
<p></p>
<p>以我给的接口为例，我传入了一个参数 <code>name</code>，然后执行 <code>demo</code> 接口，最后会给我返回 <code>hello,name</code> 的结果，其中 <code>name</code> 是我传入的参数值，这里我传入了benjamin，所以结果应该会得到 <code>hello,benjamin</code>，可以看到 Swagger 测试中也给我返回了对应的结果，说明我们的接口测试成功！</p>
<p></p>
<h3> 注意</h3>
<p>如果在整合过程中出现如下错误：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里可能是由于 Spring Boot 版本过高导致，我写作本文时，一开始使用的 <code>SpringBoot 2.6.2</code> 版本，所以出现了该错误，而当我将 <code>SpringBoot</code> 降级为 <code>2.5.6</code> 时，该错误就不再出现。所以如果你也出现了这个问题，也可以尝试降低 <code>SpringBoot</code> 版本来解决。</p>
<h2> 总结</h2>
<p>以上就是本文的所有内容了，主要对 Swagger 进行了简单介绍，并用 Spring Boot 集成 Swagger，同时还进行简单的测试。而关于文章中的示例代码，我已经上传到了 GitCode，如果有需要的朋友，可以自取。</p>
<blockquote>
<p><a href="https://gitcode.net/github_39655029/java-learning-demos" target="_blank" rel="noopener noreferrer">🎉🎉🎉 传送门</a></p>
</blockquote>
]]></content:encoded>
    </item>
    <item>
      <title>集成 Swagger3</title>
      <link>https://ez4jam1n.site/studio/md/java/springboot/20220105-integrated-swagger3.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/springboot/20220105-integrated-swagger3.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">集成 Swagger3</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 在之前的文章中，我们已经讲了如何利用 Spring Boot 来集成 Swagger2，详情可戳：Spring Boot 集成 Swagger2，构建强大的 API 文档。但其实 Swagger2 中主流的 2.9.2 自 2018 年发布后就已经好久没更新了，而在时隔两年之后的 2020 年，Swagger3 终于发布了。</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Wed, 05 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>在之前的文章中，我们已经讲了如何利用 Spring Boot 来集成 Swagger2，详情可戳：<a href="https://blog.csdn.net/github_39655029/article/details/122336225" title="Spring Boot 集成 Swagger2，构建强大的 API 文档" target="_blank" rel="noopener noreferrer">Spring Boot 集成 Swagger2，构建强大的 API 文档</a>。但其实 Swagger2 中主流的 <code>2.9.2</code> 自 2018 年发布后就已经好久没更新了，而在时隔两年之后的 2020 年，Swagger3 终于发布了。</p>
<p>相比于之前的 Swagger2，Swagger3 无疑新添了更多的特点，而相对集中地，主要集中在如下几点。</p>
<ul>
<li>支持 OpenApi 3.0.3</li>
<li>兼容 Swagger2 的注释，而且进一步丰富了 open API 3.0 的规范</li>
<li>支持 Webflux</li>
</ul>
<p>既然 Swagger3 有了这么多的改变，那用法是不是还和 Swagger2 一样呢？答案是：不一样。</p>
<p>不过虽然两者的使用方式不一样，但是总体流程还是差不多了，只不过有些步骤有所小变动而已，只要你掌握了 Swagger2 的使用方法，那使用 Swagger3 起来就是需要注意小改动就行了。那接下来，我们就来看看，如何利用 Spring Boot 来集成 Swagger3，对我们的 Swagger2 进行一次升级！</p>
<h2> Spring Boot 集成 Swagger</h2>
<h3> 创建 Spring Boot 项目</h3>
<p>同样的，开始之前，我们需要创建一个简单的 Spring Boot 项目，这里不展开讲了，如果你对此还有所疑惑，可以先去熟悉下，这里建议参考我之前写过的一篇文章：<a href="https://ez4jam1n.blog.csdn.net/article/details/119618308" title="创建 Spring Boot 项目的 3 种方式" target="_blank" rel="noopener noreferrer">创建 Spring Boot 项目的 3 种方式</a>。</p>
<p>项目创建成功之后，总体结构如下：</p>
<p></p>
<p>这里的 <code>config</code>、<code>controller</code>、<code>entity</code> 模块是我后续加入的，所以不用理会，也就是说你创建好之后的项目是不包含这三个部分的，关于他们的用途，文章后续内容我会讲到。</p>
<h3> 引入依赖</h3>
<p>创建项目后，在 <code>pom.xml</code> 文件中引入 Swagger3 的相关依赖。回忆一下，我们集成 Swagger2 时，引入的依赖如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在 Swagger3 中，我们不需要再引入两个不同的依赖了，我们只需要引入一个依赖就足够，具体引入的依赖如下：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而这部分，Swagger2 和 Swagger3 就有所不同了，Swagger2 需要添加两项不同依赖，而 Swagger3 只用添加一项依赖就可以了。</p>
<h3> 构建 Swagger 配置类</h3>
<p>为了统一管理 Swagger，这里还是推荐给 Swagger3 添加一个配置类。当然这里也可以根据自己的需求，可要可不要，但总体来说还是建议配置。</p>
<p>另外，在之前集成 Swagger2 的文章中，忘记了给大家说一点。平常在工作中，Swagger 的使用仅限于在开发环境，而在生产环境中，我们是要将其移除的。这里为了灵活管理，推荐大家在项目配置文件 <code>application.yml</code> 中添加关于 Swagger 开关的配置，比如这里我添加的配置如下，<code>true</code> 则代表开启 Swagger，<code>false</code> 则表示关闭 Swagger。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>配置完成之后，我们就需要在 Swagger 配置类中获取 Swagger 开关的值了，关于具体用法就可以看下边配置代码。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的配置和 Swagger2 大同小异，这里最大的区别在于加入了从配置文件中获取 Swagger 开关的属性。这里也可以选择添加到 Swagger2 的配置类中，同样通过配置文件来控制是否开启 Swagger2。此外，还有就是 <code>DocumentationType</code> 属性的不同了，Swagger2 中我们使用的是 <code>SWAGGER_2</code>，而在 Swagger3 中，我们使用的则是 <code>OAS_30</code>。其实点进去 <code>DocumentationType</code> 的源码我们就可以发现，Swagger 已经是给我们定义好的，你用的是哪一个版本的 Swagger，那我们使用的属性值应该选择对应版本。三个版本的属性值对应如下：</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 编写实体类</h3>
<p>完成上面的步骤之后，我们的 Swagger 就配置好了，接下来我们就添加一个接口来看看 Swagger3 和 Swagger2 的不同。</p>
<ol>
<li><strong>新建实体类</strong></li>
</ol>
<p>这里我以一个用户类为实例，带有 <code>name</code>、<code>age</code> 两个属性，也就是本文一开始项目结构截图中 <code>entity</code> 包下的内容。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li><strong>新建接口</strong></li>
</ol>
<p>这里写了两个接口，一个是直接传参，另一种是通过利用创建的 <code>User</code> 实体类来传输，也就是项目结构中 <code>controller</code> 包中的内容。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 查看并测试接口</h3>
<p>启动我们的项目，然后在浏览器中访问如下地址，就可以访问项目的接口文档了。</p>
<blockquote>
<p><a href="http://localhost:8080/swagger-ui/index.html" target="_blank" rel="noopener noreferrer">http://localhost:8080/swagger-ui/index.html</a></p>
</blockquote>
<p>访问上面的地址后，如果出现下面的界面，则说明集成 Swagger3 就成功了。</p>
<p>这里也要注意一点，Swagger2 中的接口访问地址是：</p>
<blockquote>
<p><a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener noreferrer">http://localhost:8080/swagger-ui.html</a></p>
</blockquote>
<p>这里 Swagger2 和 Swagger3 是不同的，这里大家一定要注意，否则可能你继续拿着 Swagger2 接口访问地址来放到 Swagger3 项目中不适用。</p>
<p></p>
<p>点开具体接口，我们以直接传参的接口来对比 Swagger3 和 Swagger2 的区别。第一张图是在 Swagger3 中，第二张图是在 Swagger2 中。这里可以发现，我们都是传的一个 <code>name</code> 属性，Swagger2 中会把我们接口中参数部分 <code>Parameters</code> 直接标识出来，而 Swagger3 中则不会，这里需要注意。</p>
<ul>
<li>Swagger2 中接口代码</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul>
<li>Swagger3 中接口代码</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>

<p>此外，我们来看 Swagger3 中的另一个接口，这里我们传递的是一个用户对象，接口中它将我们设置的默认值给传了过来。下图中第一张图为 Swagger3 中的截图，第二张图为 Swagger2 中的截图。同样的，Swagger2 中的参数会在 <code>Parameters</code> 模块标识出来，而 Swagger3 则不会标识。</p>
<p>还有一点值得注意的是，Swagger 中如果传递的部分是对象，那么 Swagger2 会在 <code>Models</code> 部分进行标识，而 Swagger3 中则是变成了 <code>Schemas</code> 部分，这也算是一个小变动吧。</p>


<p>最后，我们同样来进行测试，测试方法同 Swagger2，点击接口右上方的 <code>Try it out</code>，然后编辑参数的值，编辑完成后点击下方的 <code>Execute</code> 即可查看接口调用结果。</p>

<h2> Swagger2 VS Swagger3</h2>
<p>经过上面的步骤，我们就完成了 Spring Boot 集成 Swagger3 的实例测试了，而经过对比，也总结出了 Swagger2 和 Swagger3 的区别主要体现在如下几个方面：</p>
<ol>
<li><strong>所需依赖不同</strong>，Swagger2 需要添加两个依赖，而 Swagger3 则只需要添加一个依赖；</li>
<li><strong>启用 Swagger 的注解不同</strong>，不知道大家有没有发现，无论是 Swagger2 还是 Swagger3 中的配置类，其实都是有一个注解用来启用 Swagger 的，不同之处在于 Swagger2 中用的是 <code>@EnableSwagger2</code>，而 Swagger3 中则用的是 <code>@EnableOpenApi</code>；</li>
<li><strong>文档摘要信息（Docket）文件类型不同</strong>，可以发现在 Swagger 的配置类中，Swagger2 用的是 <code>SWAGGER_2</code>，而 Swagger3 中则用的是 <code>OAS_3</code>；</li>
<li><strong>Swagger UI 访问地址不同</strong>，在 Swagger2 中，如果我们要访问文档地址，需要访问 <code>http://localhost:8080/swagger-ui.html</code>，而在 Swagger3 中，则是访问 <code>http://localhost:8080/swagger-ui/index.html</code>；</li>
</ol>
<h2> 总结</h2>
<p>以上就是本文的所有内容了，主要介绍了如何使用 Spring Boot 集成 Swagger3，并在此过程中对比了 Swagger2 和 Swagger3 的一些区别。总体来讲，Swagger2 向 Swagger3 的升级还是比较平滑的。如果你已经掌握熟练使用 Swagger2，那么向 Swagger3 过度也很简单，只需要注意上一部分中的一些主要区别就可以了。其他的用于描述接口的注解，还是可以按照 Swagger2 的方式使用，毕竟 Swagger3 向下兼容了 Swagger2。</p>
<h2> 代码示例</h2>
<p>最后，关于本文示例的代码，我已经上传至 GitCode，需要的小伙伴可以自取：</p>
<blockquote>
<p>🎉 传送门：<a href="https://gitcode.net/github_39655029/java-learning-demos" target="_blank" rel="noopener noreferrer">https://gitcode.net/github_39655029/java-learning-demos</a></p>
</blockquote>
<p><strong>如果您觉得本文不错，欢迎 <code>Star</code> 支持，您的关注就是我坚持不断更新的动力！</strong></p>
]]></content:encoded>
    </item>
    <item>
      <title>集成 Knife4j</title>
      <link>https://ez4jam1n.site/studio/md/java/springboot/20220106-integrated-knife4j.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/springboot/20220106-integrated-knife4j.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">集成 Knife4j</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 之前介绍了如何在 Spring Boot 中集成 Swagger2 和 Swagger3，对于我们日常的接口管理已经够用了。但是作为一个颜值党，无论是 Swagger2 还是 Swagger3，都难以满足我们的审美。而且 Swagger2 和 Swagger3 都已经好久没更新了，更新还是比较慢的。</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Thu, 06 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>之前介绍了如何在 Spring Boot 中集成 Swagger2 和 Swagger3，对于我们日常的接口管理已经够用了。但是作为一个颜值党，无论是 Swagger2 还是 Swagger3，都难以满足我们的审美。而且 Swagger2 和 Swagger3 都已经好久没更新了，更新还是比较慢的。</p>
<p>偶然之间发现了一个国产的接口文档管理工具 <a href="https://doc.xiaominfo.com/knife4j/" target="_blank" rel="noopener noreferrer">Knife4j</a>，它基于 Swagger 而来，但是又对 Swagger 进行了增强，增加两个越来越多的个性化需求，可以说兼具颜值与实力了。今天我们就来看看，如何在 Spring Boot 中集成 Knife4j 这个接口文档管理工具。</p>
<h2> 集成过程</h2>
<h3> 创建 Spring Boot 项目</h3>
<p>既然要在 Spring Boot 中使用 Knife4j，那首先就得创建一个 Spring Boot 项目。当然，我在之前已经写过文章介绍如何创建 Spring Boot 项目了，所以这里不再赘述。如果你还对 Spring Boot 创建方式不太熟悉，可以参考我之前的文章：<a href="https://benjam1n.eu.org/java/spring-boot/the-methods-to-create-springboot-project.html" target="_blank" rel="noopener noreferrer">Spring Boot 基础教程：创建项目的 3 种方式 | studio</a></p>
<h3> 添加依赖</h3>
<p>既然是用 Maven 来管理项目依赖，那我们在项目 <code>pom.xml</code> 中引入 <code>Knife4j</code> 的相关依赖包，引入代码如下。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 配置添加</h3>
<p>接着在项目中创建一个配置包 <code>config</code>，用于配置 Swagger 的配置依赖。在这里可以配置扫描的 <code>controller</code> 所在的包，设置接口文档的标题、描述、作者信息等。</p>
<p>这里其实和 Swagger2 和 Swagger3 很相似，Swagger 也是可以通过配置类来指定这些信息。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 编写 Controller 层</h3>
<p>接着我们编写一个测试的 <code>controller</code>，用于在 Knife4j 中展示用，代码如下。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 启动测试</h3>
<p>然后将项目启动起来，接着到浏览器中去打开 <code>http://localhost:8080/doc.html</code>，就会出现以下的主界面。这里有我们之前在配置类中所设置的一些接口信息，此外，还对接口进行了统计。因为我们代码中只写了一个 <code>POST</code> 的请求，所以这里统计出只有一个 <code>POST</code> 请求。</p>
<p></p>
<p>打开具体接口，这里就有我们接口的请求和响应的一些情况说明。</p>
<p></p>
<p>点击左侧 <code>调试</code> 按钮，我们就可以在 <code>Knife4j</code> 中测试我们的接口。</p>
<p></p>
<p></p>
<h2> 踩过的坑</h2>
<p>当然，如果你按照以上步骤顺利打开了 Knife4j 的文档管理页面，那接下来的内容你大可不必了解。但如果你按照上边步骤搭建过程中也出现了问题，那不妨看看以下是否有你遇到的 <code>Bug</code>。</p>
<h3> 空指针异常</h3>
<p>首先是报空指针异常，报错信息如下。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>经过查询资料可知，这是因为 <code>Springfox</code> 使用的路径匹配是基于 <code>AntPathMatcher</code> 的，但是由于我使用的是 <code>Spring Boot 2.6.x</code> 版本，正好这个版本使用的是 <code>PathPatternMatcher</code>，所以才会出现这个问题。所以这里主要可以通过两种方式来解决。</p>
<p>第一种，无可厚非，就是将我们的 <code>Spring Boot</code> 的版本降低，从 <code>2.6.x</code> 降到 <code>2.5.x</code>，此时就应该是可以了，这里可以自己去试一下。</p>
<p>第二种，既然我们都已经用上 <code>2.6.x</code> 版本了，那我们就是不想降低版本咋整。此时，我们只需要在主程序启动类中加上 <code>@EnableWebMvc</code> 这个注解。然后再次启动程序，你就会发现启动成功了！</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 请求路径未找到</h3>
<p>一山放过一山拦，以为翻过了上面的山，就能成功了。没想到出师不利，这不又遇到了报错请求路径未找到。</p>
<p>当我们成功启动项目后，在浏览器中打开 <code>http://localhost:8080/doc.html</code>，却没想到迎接我们的不是成功界面，而是下面的 <code>Whitelabel Error Page</code>。</p>
<p></p>
<p>然后到 <code>IDEA</code> 中一看日志，程序照常运行，也没报错，但是给我们抛出了一个 <code>WARN</code>，警告信息如下：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是因为我们为了解决上面的 <code>Bug</code> 而使用到了 <code>@EnableWebMvc</code>，由于它实现了 <code>WebMvcConfigurer</code> 接口，所以会导致我们访问识别。</p>
<p>这时候问题就来了，上面又需要这个注解，但是下面这个问题又不需要，那该怎么办呢？</p>
<p>其实很简单，既然我们要保留 <code>@EnableWebMvc</code>，那我们去配置个规则不就好了。</p>
<p>在项目的 <code>config</code> 包下，我们新建一个配置类 <code>WebMvcConfigurer</code> 记成 <code>WebMvcConfigurationSupport</code> 类，接着将 <code>dom.html</code> 过滤掉即可。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完成上述配置后，再去运行项目，再到浏览器中去访问 <code>http://localhost:8080/doc.html</code> 应该就能正常访问 Knife4j 文档管理页面了。</p>
<h2> 总结</h2>
<p>以上就是 Spring Boot 中集成 Knife4j 文档管理工具的内容了，这里主要讲了下如何集成并且进行一个最简单的接口调试，关于更多 Knife4j 的个性化功能，可以去它的官网了解下。</p>
<p>此外，对于文中集成是所遇到的 <code>Bug</code>，如果你没有遇到，那么你应该顺利集成了，如果你也有遇到，那么不妨跟着我去试一下解决的办法。</p>
]]></content:encoded>
    </item>
    <item>
      <title>整合 FreeMarker 实例</title>
      <link>https://ez4jam1n.site/studio/md/java/springboot/20220107-integrated-freemarker.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/springboot/20220107-integrated-freemarker.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">整合 FreeMarker 实例</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 在之前的文章Spring Boot 整合 Thymeleaf中，我们学习了如何将模板 Thymeleaf 整合到 Spring Boot 中，那今天我们就来看看，另一个老牌的开源免费模板引擎 - FreeMarker！</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Fri, 07 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>在之前的文章<a href="https://ez4jam1n.blog.csdn.net/article/details/107671467" target="_blank" rel="noopener noreferrer">Spring Boot 整合 Thymeleaf</a>中，我们学习了如何将模板 Thymeleaf 整合到 Spring Boot 中，那今天我们就来看看，另一个老牌的开源免费模板引擎 - FreeMarker！</p>
<h2> FreeMarker 简介</h2>
<blockquote>
<p>FreeMarker 是一款模板引擎：即一种基于模板和要改变的数据，并用来生成输出文本(HTML 网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个 Java 类库，是一款程序员可以嵌入他们所开发产品的组件。</p>
</blockquote>
<p>以上就是出自 FreeMarker 的官方定义，我们通过使用 FreeMarker，可以将我们所需的模板何数据渲染成 HTML，从而实现我们想要的效果。通过将模板与数据分开，让分工更加明确，模板方面则专注于如何将数据进行展现，而在数据方面，我们就可以专注于展示何种数据，下图就是我们以上所描述的 FreeMarker 的功能。</p>
<p></p>
<p>那接下来，我们就来看看，如何将 FreeMarker 像 Thymeleaf 一样整合到我们的 Spring Boot 中，让我们的开发更加简单。</p>
<h2> 准备工作</h2>
<h3> 环境准备</h3>
<p>正式开始之前，依然给出本文所基于的环境，避免环境问题可能给大家带来的影响。</p>
<ul>
<li>JDK 17（理论上推荐不低于 1.8 版本）</li>
<li>IDEA</li>
<li>SpringBoot 2.x</li>
</ul>
<h3> 添加 FreeMarker 依赖</h3>
<p>开始之前，我们需要添加 FreeMarker 的相关依赖，同样这里我们可以选择两种方式。一种是在创建项目时就添加上，另一种则是创建项目后在项目 <code>pom.xml</code> 文件中手动添加，接下来我们分别来看看两种不同的方式应该如何添加。如果还不清楚如何创建 Spring Boot 项目，可以参照我之前的一篇文章：<a href="https://ez4jam1n.blog.csdn.net/article/details/119618308" target="_blank" rel="noopener noreferrer">创建 Spring Boot 项目的 3 种方式</a>。</p>
<ol>
<li><strong>第一种</strong></li>
</ol>
<p>在使用 IDEA 创建 Spring Boot 新项目时，添加依赖时将模板引擎中的 <code>Apache FreeMarker</code> 勾选上。</p>
<p></p>
<p>2.<strong>第二种</strong></p>
<p>如果在创建时未添加 FreeMarker 模板引擎依赖，或者在项目开始创建之初并未有此需求，但后续过程中又增加了该需求，则此时可以直接在项目 <code>pom.xml</code> 中手动添加 FreeMarker 依赖即可。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 添加 FreeMarker 相关配置</h3>
<p>添加依赖后，我们需要在项目配置文件 <code>application.yml</code> 中添加 FreeMarker 的相关配置。</p>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 编写实体类和 Controller</h2>
<h3> 编写实体类</h3>
<p>创建一个 <code>User</code> 类，并将其各种 <code>setter</code>、<code>getter</code>、构造方法等完成，这里我依然使用了 Lombok 插件，以便简化我们的代码。关于该插件的更多用法，可以参照我之前的文章：<a href="https://blog.csdn.net/github_39655029/article/details/119992626" target="_blank" rel="noopener noreferrer">Lombok 的安装及使用指南</a>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 编写 Controller</h3>
<p>这里我们创建一个 <code>User</code> 对象，然后设置其年龄、Email、姓名等相关信息，然后将其加到属性中，方便传输到前端进行展示。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 数据渲染</h3>
<p>当完成实体类和 Controller 编写后，我们就可以利用模板来进行展示了。我们在项目的 <code>resources/templates</code> 路进行新建一个 <code>index.ftl</code> 文件，注意这里文件名要保持和 Controller 中 <code>index</code> 方法所返回的字符串一致。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 测试</h3>
<p>将我们的项目启动起来，然后在浏览器中访问如下路径：</p>
<blockquote>
<p><a href="http://localhost:8080/index" target="_blank" rel="noopener noreferrer">http://localhost:8080/index</a></p>
</blockquote>
<p>如果显示如下图中的信息，那么就说明我们此次的整合工作顺利完成！</p>
<p></p>
<h2> 总结</h2>
<p>以上就是 Spring Boot 整合 FreeMarker 的具体过程了，可以结合之前的文章：<a href="https://ez4jam1n.blog.csdn.net/article/details/107671467" target="_blank" rel="noopener noreferrer">Spring Boot 整合 Thymeleaf 实例</a>共同阅读，对比 Thymeleaf 和 FreeMarker 在整合过程中的一些共同点和不同点，相信你会有更多的收获。</p>
]]></content:encoded>
    </item>
    <item>
      <title>整合 Thymeleaf 实例</title>
      <link>https://ez4jam1n.site/studio/md/java/springboot/20220108-integrated-thymeleaf.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/springboot/20220108-integrated-thymeleaf.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">整合 Thymeleaf 实例</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 什么是 Thymeleaf Thymeleaf 是新一代的 Java 模板引擎，类似于 Velocity、FreeMarker 等传统引擎，其语言和 HTML 很接近，而且扩展性更高； Thymeleaf 的主要目的是将优雅的模板引入开发工作流程中，并将 HTML 在浏览器中正确显示。同时能够作为静态引擎，让开发成员之间更方便协作开发； Spring Boot 官方推荐使用模板，而且 Spring Boot 也为 Thymeleaf 提供了完整的自动化 配置解决方案； Thymeleaf 使用教程请戳 Tutorial: Using Thymeleaf，配合 Spring 使用的教程请戳 Tutorial: Thymeleaf + Spring。</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Sat, 08 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 什么是 Thymeleaf</h2>
<ul>
<li>
<p>Thymeleaf 是新一代的 Java 模板引擎，类似于 Velocity、FreeMarker 等传统引擎，其语言和 HTML 很接近，而且扩展性更高；</p>
</li>
<li>
<p>Thymeleaf 的主要目的是将优雅的模板引入开发工作流程中，并将 HTML 在浏览器中正确显示。同时能够作为静态引擎，让开发成员之间更方便协作开发；</p>
</li>
<li>
<p>Spring Boot 官方推荐使用模板，而且 Spring Boot 也为 Thymeleaf 提供了完整的自动化 配置解决方案；</p>
</li>
<li>
<p>Thymeleaf 使用教程请戳 <a href="https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html" target="_blank" rel="noopener noreferrer">Tutorial: Using Thymeleaf</a>，配合 Spring 使用的教程请戳 <a href="https://www.thymeleaf.org/doc/tutorials/3.0/thymeleafspring.html" target="_blank" rel="noopener noreferrer">Tutorial: Thymeleaf + Spring</a>。</p>
</li>
</ul>
<h2> 整合过程</h2>
<h3> 准备过程</h3>
<p>正式开始整合过程之前，这里先给出本文的搭建环境，方便大家进行后续内容的学习。</p>
<ul>
<li>JDK 11（理论上其他版本的 JDK 也是可以的，但是更为推荐 JDK 1.8 及以后的版本）</li>
<li>IDEA（这里没有啥要求，但我个人的话是出新的版本我就会更新，虽然臃肿，但是更新了确实好用 😂）</li>
<li>SpringBoot 2.x（现在主流应该都是 2.x 版本，1.x 的都是老一点的版本了）</li>
</ul>
<h3> 添加 Thymeleaf 依赖</h3>
<p>添加 Thymeleaf 依赖有两种方式：</p>
<ol>
<li><strong>第一种</strong></li>
</ol>
<p>在新建项目时添加，在 <code>Templeate Engines</code> 中勾选 Thymeleaf；</p>

<ol start="2">
<li><strong>第二种</strong></li>
</ol>
<p>对于忘记在新建项目时未添加 Thymeleaf 依赖的项目，可以直接在项目的 <code>pom.xml</code> 中手动添加依赖即可；</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 编写实体类和 Controller</h3>
<ol>
<li>新建实体类 <code>User</code></li>
</ol>
<p>这里因为使用 Lombok，所以省去了各种 <code>setter</code>、<code>getter</code>，同时还省去了各种构造方法和重写 <code>toString()</code> 等方法，大大简化了代码。而我们所要做的，仅仅是在 <code>pom.xml</code> 中添加 Lombok 的依赖，然后在我们的实体类中加入对应的注解即可。</p>
<p>以下是在 <code>pom.xml</code> 中插入 Lombok 依赖的对应代码。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们就可以编写我们的实体类，这里主要用到了 <code>@Data</code>、<code>@Component</code>、<code>@AllArgsConstructor</code> 、<code>NoArgsConstructor</code> 四个注解，其中各个注解的含义如下：</p>
<ul>
<li>
<p><code>@Component</code>：把类实例化到 Spring 容器，相当于在配置文件中配置；</p>
</li>
<li>
<p><code>@Data</code> ：给类的所有属性提供 <code>get</code> 和 <code>set</code> 方法，此外还有 <code>equals、canEqual、hashCode、toString</code> 方法以及 <strong>默认参数为空的构造方法</strong>；</p>
</li>
<li>
<p><code>@AllArgsConstructor</code>：为类提供一个 <strong>全参构造方法</strong>，但此时不再提供默认构造方法；</p>
</li>
<li>
<p><code>@NoArgsConstructor</code>：因为使用了 <code>AllArgsConstructor</code> 会导致类没有默认空参构造方法，所以此时需要它为类提供一个 <strong>无参构造方法</strong>；</p>
</li>
</ul>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2">
<li>编写 Controller</li>
</ol>
<p>此时主要需要注意的是 <code>setViewName()</code> 和 <code>addObject()</code>，前者表示方法对应的前端页面，也就是我们模板中对应文件名的 <code>.html</code> 文件，而后者则主要给属性注入值，然后将属性传递到前端模板。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 创建 Thymeleaf 模板</h3>
<p>第上面的代码中，我们设置了跳转的视图为 <code>index</code>，所以我们需要在 <code>src/main/resources/templates</code> 中创建 <code>index.html</code>。</p>
<p></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 测试</h3>
<p>启动项目，然后在浏览器中访问 <code>http://localhost:8080/index</code>，如果出现下图中的信息，说明整合成功。</p>
<p></p>
<h2> 注意事项</h2>
<p>为了方便使用，我们在使用 Thymeleaf 模板时，可以添加一些自己的配置。而添加的位置则是项目的配置文件 <code>application.yml</code>，项目默认配置文件应该是 <code>application.properties</code>，但 SpringBoot 更加推荐使用 yml 来配置，所以我们这里需要手动将其改为 yml 的格式。</p>
<div class="language-properties line-numbers-mode" data-ext="properties"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>好了，以上就是我们今天的所有内容了。今天主要介绍了 Themeleaf 的相关简介，然后对利用 SpringBoot 整合 Thymeleaf 的过程进行了描述，最后则是使用 Thymeleaf 中常用的一些相关配置的注意事项。</p>
]]></content:encoded>
    </item>
    <item>
      <title>集成 Spring Security</title>
      <link>https://ez4jam1n.site/studio/md/java/springboot/20220109-integrated-security.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/springboot/20220109-integrated-security.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">集成 Spring Security</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 Spring Security 是 Spring 家族中一个强大可定制的身份验证和访问控制框架，和 Shiro 一样，它们都具有认证、授权、加密等用于权限管理的功能。但相比于 Shiro，Spring Security 的功能无疑更加强大。而且作为 Spring 家族中的一份子，配合家族中的其它兄弟 - Spring Boot、Spring Cloud 使用起来更加丝滑。</description>
      <category>Spring Boot 基础教程</category>
      <pubDate>Sun, 09 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 前言</h2>
<p>Spring Security 是 Spring 家族中一个强大可定制的身份验证和访问控制框架，和 Shiro 一样，它们都具有认证、授权、加密等用于权限管理的功能。但相比于 Shiro，Spring Security 的功能无疑更加强大。而且作为 Spring 家族中的一份子，配合家族中的其它兄弟 - Spring Boot、Spring Cloud 使用起来更加丝滑。</p>
<p>今天就来看看，如何在 Spring Boot 集成 Spring Security，实现最简单的认证授权功能。</p>
<h2> 集成过程</h2>
<p>要在 Spring Boot 集成 Security，其实很简单，可以总结为如下几个步骤：</p>
<ol>
<li>首先是创建一个 Spring Boot 项目。</li>
<li>添加 Spring Security 相关依赖。</li>
</ol>
<h3> 创建 Spring Boot 项目</h3>
<p>这个过程只要你学习过 Spring Boot，那么你肯定是已经很熟悉了，所以在这里我也就不再赘述了。当然，如果你对这个过程还是不太熟悉，那么可以参考我之前的一篇文章：</p>
<blockquote>
<p><a href="/studio/md/java/springboot/20220102-the-methods-to-create-springboot-project.html" target="blank">Spring Boot 基础教程：创建项目的 3 种方式</a></p>
</blockquote>
<h3> 添加相关依赖</h3>
<p>项目创建好之后，一般默认是已经添加了 <code>Web</code> 依赖，这个时候，我们只需要在项目的 <code>pom.xml</code> 文件中添加 Spring Security 的相关依赖即可。</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 启动项目</h3>
<p>完成上面步骤的操作后，接下来我们直接启动项目，然后在浏览器中访问以下地址：</p>
<blockquote>
<p><code>http://localhost:8080</code></p>
</blockquote>
<p>不出意外应该会跳出以下的界面，让我们登录。此时你可能会很纳闷，为什么我们只加了个 Spring Security 的依赖，怎么就需要登陆了呢？而且，登录的话，用户名和密码又是多少呢？</p>
<p>再仔细观察浏览器的地址栏，此时我们访问的地址也变了，变成了：</p>
<blockquote>
<p><code>http://localhost:8080/login</code></p>
</blockquote>
<p>这又是怎么一回事呢？</p>
<p>原来这就是 Spring Security 为我们的项目所提供的保护机制。在添加 Spring Security 之后，此时再去访问项目，它就会自动重定向到 Security 所提供的登录页面，也就是下面的界面。</p>
<p></p>
<p>同样的 Spring Security 也为我们所提供了一个默认的用户名，也就是 <code>user</code>，至于密码，这就谁都说不准了。因为它会随着我们项目的每次启动而自动生成，所以每次的登录密码都是不一样的。至于要如何获取，那就得去我们的 IDEA 查看控制台查看日志了。</p>
<p>查看日志我们可以发现如下的一行，其实这就是 Spring Security 所提供的登录密码了。这是一个 <code>UUID</code> 字符串，是 Spring Security 为默认的 <code>user</code> 用户所生成的临时密码。</p>
<div class="language-text line-numbers-mode" data-ext="text"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h3> 修改默认登录用户密码</h3>
<p>虽然 Security 提供了默认的 <code>user</code> 用户，但是大家都知道这是默认的，而且需要每次去日志中找登录密码，那有没有方法可以自定义我们的用户和密码呢？答案是，有的。</p>
<p>Security 为我们提供了配置，我们可以在项目的配置文件 <code>application.yml</code> 中去定义自己的用户名和密码，然后它就会覆盖掉 Security 为我们提供的默认用户和密码。</p>
<p>在项目的配置文件中配置用户和密码，当然，项目生成的默认配置文件是位于 <code>resources</code> 目录下的 <code>application.properties</code>，所以需要将其后缀改成 <code>.yml</code>。关于 Spring Boot 中的这两种配置文件的区别，可以参考我之前的一篇文章：</p>
<blockquote>
<p><a href="/studio/md/java/springboot/20220103-configuration.html" target="blank">Spring Boot 基础教程：配置详解</a></p>
</blockquote>
<div class="language-yaml line-numbers-mode" data-ext="yml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后重启我们的项目，就可以用我们配置的用户和密码来进行登陆了。</p>
<h3> 创建页面</h3>
<p>新建一个 <code>Controller</code> 页面，用于打印最经典的 <code>Hello World!</code>。</p>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重新启动项目后，在浏览器中访问以下地址：</p>
<blockquote>
<p><code>http://localhost:8080/hello</code></p>
</blockquote>
<p>然后 Spring Security 就会重定向到 <code>http://localhost:8080/login</code> 页面，此时我们用上面配置的用户名和密码进行登录，登录成功后就会跳转到我们的 <code>/hello</code> 页面了，页面中会打印 <code>Hello World!</code></p>
<p></p>
<h2> 总结</h2>
<p>以上就是 <code>Spring Boot</code> 集成 <code>Spring Security</code> 的实例了，主要演示了最经典的 <code>Hello World</code> 程序。关于更多 <code>Spring Security</code> 的知识，我们后续的文章再见吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>Spring Boot 简介</title>
      <link>https://ez4jam1n.site/studio/md/java/springboot3/20230114-first-app.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/springboot3/20230114-first-app.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">Spring Boot 简介</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 简介 Spring Boot 能够帮助开发者创建独立的、可运行的、生产级的基于 Spring 的应用程序。通过基础的 Spring 平台和第三方库的组合，我们就能十分轻松地使用 Spring Boot 进行开发，而这些 Spring Boot 应用只需要简单的配置即可。</description>
      <category>Spring Boot 3 基础教程</category>
      <pubDate>Sun, 09 Jan 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<h2> 简介</h2>
<p><code>Spring Boot</code> 能够帮助开发者创建独立的、可运行的、生产级的基于 <code>Spring</code> 的应用程序。通过基础的 <code>Spring</code> 平台和第三方库的组合，我们就能十分轻松地使用 <code>Spring Boot</code> 进行开发，而这些 <code>Spring Boot</code> 应用只需要简单的配置即可。</p>
<p>而通过 <code>Spring Boot</code> 创建后的 <code>Java</code> 程序我们既能够通过 <code>java -jar</code> 的方式对进行部署，也可以采取更为传统的部署 <code>war</code> 的方式。</p>
<p><code>Spring Boot</code> 的愿景是做到以下几点：</p>
<ol>
<li>为广大 <code>Spring</code> 开发者提供一个更快、更广泛的入门体验。</li>
<li>开箱即用，能够快速上手。</li>
<li>提供一系列大型项目中常见的非功能性特性，如嵌入式服安全性、健康监测等。</li>
<li>无需 <code>XML</code>&nbsp; 配置</li>
</ol>
<h2> 前言</h2>
<p>Spring Boot 3 已经发布好久了，在网上也看到了不少相关的教程，于是也想着取学习一下，顺便写写相关的内容。</p>
<p>一如既往的，我们从最学习编程最经典的入门程序 <code>Hello World</code> 开始，学习如何用 Spring Boot 3 来创建一个 <code>Hello World</code> 程序。</p>
<p>正式开始之前，既然我们要用 Spring Boot 3，那得先知道使用它的相关前提。要使用 Spring Boot 3，那么我们的 <code>JDK</code> 版本最低必须要 <code>Java 17</code>，同时 <code>Maven</code> 版本最低版本也必须是 <code>3.5+</code>。</p>
]]></content:encoded>
    </item>
    <item>
      <title>简介及入门实例</title>
      <link>https://ez4jam1n.site/studio/md/java/springmvc/20220201-intro-and-quick-start.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/springmvc/20220201-intro-and-quick-start.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">简介及入门实例</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 MVC 简介 所谓 MVC（Model、View、Controller），其实是一种软件设计范式，通过将 业务逻辑、数据、显示分离的方法来组织代码，最主要的目的是降低视图和业务逻辑代码之间的双向耦合。其中的各部分如下：</description>
      <category>Spring MVC 指南</category>
      <pubDate>Sun, 16 Jan 2022 20:11:39 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> MVC 简介</h2>
<p>所谓 MVC（Model、View、Controller），其实是一种软件设计范式，通过将 <strong>业务逻辑、数据、显示分离的方法来组织代码，最主要的目的是降低视图和业务逻辑代码之间的双向耦合</strong>。其中的各部分如下：</p>
<ol>
<li>
<p><strong>Model（模型）</strong>：数据模型，用于提供要展示的数据，因此包含数据和行为，现在一般分离为数据访问层（<code>Dao</code>）和服务层（<code>Service</code>）。模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p>
</li>
<li>
<p><strong>View（视图）</strong>：负责模型的展示，一般就是呈现给我们用户看的东西。</p>
</li>
<li>
<p><strong>Controller（控制器）</strong>：接收用户请求，然后委托给模型进行处理（状态改变），处理后再将返回的模型数据反馈给视图，然后由视图负责展示，即 <code>Controller</code> 充当 <code>Model</code> 和 <code>View</code> 之间的信鸽。</p>
</li>
</ol>
<h2> Spring MVC 简介</h2>
<p>Spring MVC 是一个用于构建 Web 应用程序的 Java 框架，遵循 <strong>模型 - 视图 - 控制器</strong> 设计模式。它实现了一个 Spring 核心框架的所有基本功能，如 IoC（控制反转）、DI（依赖注入）等。</p>
<p>Spring MVC 通过使用 <code>DispatcherServlet</code>，使得我们能够方便地在 Spring 框架中使用 MVC ，其中 <code>DispatcherServlet</code> 是一个接收传入请求并将其映射到正确的资源类。</p>
<h2> Spring MVC 结构</h2>
<p></p>
<ul>
<li>
<p><strong>Model</strong>：包含应用程序的数据，数据可以是单一对象，也可以是对象的集合；</p>
</li>
<li>
<p><strong>Controller</strong>：包含应用程序的业务逻辑，通常使用 <code>@Controller</code> 注解将类标记为 Controller.</p>
</li>
<li>
<p><strong>View</strong>：一特定格式提供的信息，通常使用 JSP + JSTL 来创建视图页面，此外，Spring 也支持 Themeleaf 和 FreeMaker 等视图技术；</p>
</li>
<li>
<p><strong>Front Controller</strong>：Spring MVC 中，由 <code>DispatcherServlet</code> 类充当前端控制器，负责管理 Spring MVC 应用程序的流程。</p>
</li>
</ul>
<h2> Spring MVC 工作流程</h2>
<p></p>
<ol>
<li>
<p>如上图所示，首先，传入的请求（<code>request</code>）被工作在 <strong>前端控制器</strong>（<code>front Controller</code>）的 <code>DispatcherServlet</code> 接收并拦截；</p>
</li>
<li>
<p>然后 <code>DispatcherServlet</code> 从 XML 配置文件中获取 <strong>处理器映射器</strong>（<code>Handler Mapping</code>）的条目，处理器根据请求找到对应 <code>Handler</code>， 同时将请求转发给控制器（<code>Controller</code>）；</p>
</li>
<li>
<p>接着 <strong>控制器</strong>（<code>Controller</code>）解析返回一个 <code>ModelAndeView</code> 对象给 <code>DispatcherServlet</code> ；</p>
</li>
<li>
<p>最后 <code>DispatcherServlet</code> 根据控制器（<code>Controller</code>）返回的对象去检查 XML 配置文件中对应的 <strong>视图解析器</strong>（<code>ViewResolver</code>）条目，同时调用指定的视图组件，在前端呈现出视图（<code>View</code>）。</p>
</li>
</ol>
<h2> Spring MVC 的优势</h2>
<ol>
<li>
<p>简化 Web 层的开发，易于维护；</p>
</li>
<li>
<p>天生与 Spring 框架集成；</p>
</li>
<li>
<p>提供强大的约定大于配置的契约式编程支持；</p>
</li>
<li>
<p>易于对 Web 单元测试；</p>
</li>
<li>
<p>支持灵活的 URL 到页面控制器的映射；</p>
</li>
<li>
<p>支持静态资源；</p>
</li>
<li>
<p>支持 RESTful 风格；</p>
</li>
<li>
<p>灵活的数据验证、格式化和数据绑定机制，能使用任何对象进行数据绑定，不必实现特定框架 API；</p>
</li>
<li>
<p>提供强大的 JSP 标签库，简化 JSP 开发；</p>
</li>
<li>
<p>支持灵活的本地化、主题等解析；</p>
</li>
<li>
<p>更加简单的异常处理；</p>
</li>
</ol>
<h2> 如何创建一个 Spring MVC 实例</h2>
<p>上面我们讲了 Spring MVC 的结构、工作流程以及其优缺点，下面我们就来看看，如何创建一个 Spring MVC 实例。</p>
<ol>
<li>首先创建一个普通的 Maven 项目；</li>
</ol>
<p></p>
<p></p>
<p>好了，完成上面两步之后，我们的普通 Maven 项目就创建 OK 了。</p>
<ol start="2">
<li>既然是 Web 项目，那肯定得加入 Web 框架的支持，选中项目后右键，选择 <code>Add Framework Support</code>，然后选中 <code>Web Application</code> 添加即可；</li>
</ol>
<p></p>
<ol start="3">
<li>创建 Maven 项目，并添加 Web 框架之后之后，我们的项目结构如下图：</li>
</ol>
<p></p>
<ol start="4">
<li>接下来，在 <code>pom.xml</code> 中添加相关依赖，一般需要 Junit、Servlet、Spring MVC 等框架的依赖；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外，为了避免后面有可能出现的静态资源导出问题，我们也可以在 <code>pom.xml</code> 添加如下配置：</p>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5">
<li>接下来，在 <code>web.xml</code> 中注册 <code>DispatcherServlet</code>；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时在 <code>/src/main/resources</code> 目录下新建一个 Spring MVC 配置文件 <code>springmvc-servlet.xml</code> （文件名可以自定义，可以根据自己喜好自定义）；</p>
<p></p>
<ol start="6">
<li>配置 Spring MVC 的配置文件，即上一步中所创建的 <code>springmvc-servlet.xml</code>；</li>
</ol>
<div class="language-xml line-numbers-mode" data-ext="xml"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7">
<li>创建控制类 Controller</li>
</ol>
<div class="language-java line-numbers-mode" data-ext="java"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8">
<li>创建视图层，在 <code>WEB-INF/jsp</code> 目录下新建 <code>hello.jsp</code>（没有的目录和文件需要自己创建），然后就可以取出 <code>Controller</code> 中 <code>Model</code> 所存放的值或者对象；</li>
</ol>
<div class="language-jsp line-numbers-mode" data-ext="jsp"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="9">
<li>以上步骤都配置好之后，接下来就去配置 Tomcat；</li>
</ol>
<p></p>
<p></p>
<p>填写相关配置，同时点击 <code>Fix</code></p>
<p></p>
<p></p>
<ol start="10">
<li>点击启动 Tomcat，然后在浏览器中访问 <code>localhost:8080/hello</code></li>
</ol>
<p></p>
<h2> 注意事项</h2>
<p>按照上述步骤操作后如果出现访问不了的情况，可以按照如下步骤进行设置：</p>
<ol>
<li>依次进入 <code>Project Structure -&gt; Artifacts</code></li>
</ol>
<p></p>
<ol start="2">
<li>在 <code>WEB-INF</code> 目录新建 <code>lib</code> 目录，然后将所有 <code>Library Files</code> 添加到 <code>lib</code> 目录，然后重启 Tomcat 即可；</li>
</ol>
<p></p>
<h2> 总结</h2>
<p>以上就是 Spring MVC 的相关简介以及如何利用 IDEA 来创建一个 Spring MVC 实例的所有内容了。原创不易，如果你觉得我的文章对你有所帮助，那就帮忙点赞关注一波吧！</p>
]]></content:encoded>
    </item>
    <item>
      <title>简介及入门实例</title>
      <link>https://ez4jam1n.site/studio/md/java/vue3/20221001-introduction.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/vue3/20221001-introduction.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">简介及入门实例</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 之前已经学习过来 HTML、 CSS 以及 JavaScript 的相关知识，也算是基本了解了关于这前端三件套的一些基本用法。今天就来了解下，当前前端开发中最炙手可热的当红辣子鸡 - Vue。本文主要介绍 Vue 的一些入门知识和最经典的 Vue 入门 Hello World 程序，如果你想了解的是更高级的使用技巧，那么完全可以忽略。</description>
      <category>Vue3 笔记</category>
      <pubDate>Sat, 01 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>之前已经学习过来 <code>HTML</code>、 <code>CSS</code> 以及 <code>JavaScript</code> 的相关知识，也算是基本了解了关于这前端三件套的一些基本用法。今天就来了解下，当前前端开发中最炙手可热的当红辣子鸡 - <code>Vue</code>。本文主要介绍 <code>Vue</code> 的一些入门知识和最经典的 <code>Vue</code> 入门 <code>Hello World</code> 程序，如果你想了解的是更高级的使用技巧，那么完全可以忽略。</p>
<h2> Vue 简介</h2>
<h3> Vue 是什么</h3>
<p><code>Vue</code> 是一套用于构建用户界面的 <strong>渐进式框架</strong>，不同于其他框架， <code>Vue</code> 被设计为可以自底向上逐层应用，核心库只关注视图层，具有易上手，与第三方库整合方便等优点。此外， <code>Vue</code> 还支持多种现代化的工具链以及类库，使得它能够为复杂的单页应用提供驱动。</p>
<h3> Vue 的特点</h3>
<ol>
<li>采用组件化模式，从而提高了代码复用率，更容易维护。</li>
<li>声明式编码，程序员无需直接操作 <code>DOM</code> ，从而提高开发效率。</li>
<li>利用虚拟 <code>DOM</code> + 优秀 <code>Diff</code> 算法，最大化复用 <code>DOM</code> 节点。</li>
</ol>
<h3> Vue 的安装</h3>
<p>Vue 的安装主要有两种方式，一种是通过在文件中直接用 <code>&lt;script&gt;</code> 标签引入的方式，另一种则是则是使用 <code>npm</code> 的方式，接下来我们就来看看两种方式是如何进行安装的。</p>
<p><strong>标签引入的方式</strong></p>
<p>假设我们创建了一个 HTML 文件，那么我们此时只需要引入其中以下两个版本中其中一个就可以了。而两者的区别顾名思义，所谓开发环境版本，就是我们日常开发学习所使用的版本，它包含了完整的警告和提示模式，方便我们定位错误，提高我们的开发效率。而生产环境版本，则是对开发环境进行了精简，剔除了其中的警告，尽可能优化了尺寸和速度，针对上线生产所用，有助于生产环境效率的提升。针对生产环境版本，更加推荐大家链接到一个明确的版本号和构建文件，从而避免新版本对老版本中特性造成破坏，影响用户体验。</p>
<ul>
<li>开发环境版本</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>生产环境版本</li>
</ul>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li><strong>npm 安装</strong></li>
</ol>
<p>以上的两种方式更适合于我们日常学习和小型应用开发，而如果我们要使用 Vue 构建大型应用时，官方更加推荐我们使用 NPM 进行安装，它能够更好的配合类似 <code>webpack</code> 、 <code>Rollup</code> 等打包器的使用，而且 Vue 也提供了配套的工具来进行单文件组件的开发，而安装的方式也很简单，只要我们的电脑上安装了 Node.js，那我们就可以通过命令行来进行最新稳定版 Vue 的安装了，安装的命令如下。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p></p>
<h2> Vue 入门实例</h2>
<p>首先，我们创建一个 <code>.html</code> 文件，用于交互。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们引入 <code>Vue3</code> 的相关包，这里引入的方式和之前 <code>JavaScript</code> 中介绍的引入的方式一样，直接在 <code>head</code> 部分进行引入即可。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就是在 <code>body</code> 标签中添加模板用于将数据渲染到 <code>DOM</code> 的系统。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后得到我们的完整文件如下。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将文件用浏览器打开，在页面中应该就会显示如下信息了。</p>
<p></p>
<p>以上就是一个最简单的 <code>Vue</code> 入门小案例，如何在网页中打印 <code>Hello World！</code> 。虽然看起来十分简单，和我们用 <code>HTML</code> 中的字符串模板来实现相同的效果也十分类似，但实际上 <code>Vue</code> 在背后做了许多我们看不见的工作。</p>
<h2> 总结</h2>
<p>以上就是今天的所有内容了，主要从两个方面着手，一方面从 <code>Vue</code> 的定义、特点、安装来对 <code>Vue</code> 进行了介绍，另一方面则用一个最简单经典的 <code>Hello World！</code> 入门小案例来向大家简单介绍下 <code>Vue</code> 的使用方式。</p>
]]></content:encoded>
    </item>
    <item>
      <title>常用指令</title>
      <link>https://ez4jam1n.site/studio/md/java/vue3/20221002-common-commands.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/vue3/20221002-common-commands.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">常用指令</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 插值 文本 要进行文本部分替换，可以用 {{}} 将变量元素括起来； &amp;lt;div id = &amp;quot;app&amp;quot;&amp;gt; {{message}} &amp;lt;/div&amp;gt;</description>
      <category>Vue3 笔记</category>
      <pubDate>Sun, 02 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 插值</h2>
<h3> 文本</h3>
<p>要进行文本部分替换，可以用 <code>{{}}</code> 将变量元素括起来；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要进行文本全部替换，则可以用 <code>v-text</code> 来进行，比如下面的“测试”将会被 <code>message</code>的内容所替代；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> 原始 HTML</h3>
<p>双大括号会将数据解释为普通文本，但如果我们要插入原始的 HTMl 内容，此时就需要使用 <code>v-html</code> 指令；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 绑定元素属性</h2>
<p>要实现给元素绑定属性，可以使用 <code>v-bind</code> 指令，其完整写法是 <code>v-bind:属性名="表达式"</code>，简写则可以直接省略掉 <code>v-bind</code>，只保留 <code>:属性名="表达式"</code>，但它属于单向绑定；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 条件与循环</h2>
<p>条件指令，也就是我们日常开发中所使用的 <code>if</code>，用 <code>v-if</code> 指令来进行绑定；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，还可以使用 <code>v-else</code> 指令来表示 <code>v-if</code> 的 <code>else</code> 块，它必须紧跟在 <code>v-if</code> 或 <code>v-else-if</code> 元素的后面，否则它将不会被识别；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>循环指令，也就是我们经常用到的 <code>for</code> 循环，用 <code>v-for</code> 指令来进行绑定，根据数据生成列表结构，其语法是 <code>(item, index) in 数据</code>；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 处理用户输入</h2>
<p>要进行用户与应用之间的交互，可以使用 <code>v-on</code> 指令来添加事件监听器，通过它来调用 Vue 实例中定义的方法，此外为了减少开发过程中的代码量，我们还可以使用 <code>@</code> 来替换 <code>v-on</code> ，它俩可以达到同样的效果；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了处理不去处理 DOM 事件细节，而只用纯粹的数据逻辑来进行操作，Vue 中为 <code>v-on</code> 又提供了 <strong>事件修饰符</strong>，常见时间修饰符如下：</p>
<table>
<thead>
<tr>
<th>事件修饰符</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.stop</code></td>
<td>表示阻止事件继续传播</td>
</tr>
<tr>
<td><code>.prevent</code></td>
<td>表示时间不再重载</td>
</tr>
<tr>
<td><code>.capture</code></td>
<td>表示使用事件捕获模式</td>
</tr>
<tr>
<td><code>.self</code></td>
<td>表示是当前元素自身时触发处理函数</td>
</tr>
<tr>
<td><code>.once</code></td>
<td>表示事件只触发一次</td>
</tr>
<tr>
<td><code>.passive</code></td>
<td>表示事件立即触发</td>
</tr>
</tbody>
</table>
<p>同时，为了实现表单输入和应用状态之间的双向绑定，我们可以使用 <code>v-model</code> 指令；</p>
<p>通过 <code>v-model</code> 指令，能够便捷的设置和获取表单元素的值，而且绑定的数据会和表单元素值相关联；</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 元素的显示与隐藏</h2>
<p>要实现元素的显示与隐藏，我们可以通过 <code>v-show</code> 这个指令，它会根据表达式的真假，来切换元素的显示和隐藏状态。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>]]></content:encoded>
    </item>
    <item>
      <title>Axios 简单使用指南</title>
      <link>https://ez4jam1n.site/studio/md/java/vue3/20221003-axios-quickstart.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/vue3/20221003-axios-quickstart.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">Axios 简单使用指南</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 概述 什么是 Axios ？ Axios 是一个开源的基于 promise 的 HTTP 请求库，一般常用于浏览器和 node.js 中。它能够在具有相同代码库的浏览器和 nodejs 中同时运行，在服务器侧，它利用服务器端原生的 node.js http 模块，而在客户端侧（一般是浏览器），则使用的是 XMLHttpRequest。</description>
      <category>Vue3 笔记</category>
      <pubDate>Mon, 03 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 概述</h2>
<h3> 什么是 Axios ？</h3>
<p><code>Axios</code> 是一个开源的基于 <code>promise</code> 的 <code>HTTP</code> 请求库，一般常用于浏览器和 <code>node.js</code> 中。它能够在具有相同代码库的浏览器和 <code>nodejs</code> 中同时运行，在服务器侧，它利用服务器端原生的 <code>node.js</code> <code>http</code> 模块，而在客户端侧（一般是浏览器），则使用的是 <code>XMLHttpRequest</code>。</p>
<p>从 <code>Vue 2.0</code> 版本开始，就极力推荐使用 <code>Axios</code> 来进行 <code>ajax</code> 请求，其源码仓库为：</p>
<blockquote>
<p><code>https://github.com/axios/axios</code></p>
</blockquote>
<h3> 特性</h3>
<ul>
<li>从浏览器中创建 <code>XMLHttpRequests</code></li>
<li>从 <code>node.js</code> 创建 <code>http</code> 请求</li>
<li>支持 <code>Promise API</code></li>
<li>拦截请求和响应</li>
<li>转换请求数据和响应数据</li>
<li>取消请求</li>
<li>支持自动转换 <code>JSON</code> 数据</li>
<li>客户端侧支持防御 <code>XSRF</code></li>
</ul>
<h3> Axios 的安装</h3>
<p><code>Axios</code> 安装主要有两种方式，一种是通过引入 <code>CDN</code>，另一种则是通过 <code>npm</code> 进行安装，两中安装的方式介绍如下。</p>
<ol>
<li>使用 CDN</li>
</ol>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2">
<li>使用 npm</li>
</ol>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3> 支持的浏览器</h3>
<table>
<thead>
<tr>
<th><img src="https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png" alt="Chrome"></th>
<th><img src="https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png" alt="Firefox"></th>
<th><img src="https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png" alt="Safari"></th>
<th><img src="https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png" alt="Opera"></th>
<th><img src="https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png" alt="Edge"></th>
<th><img src="https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png" alt="IE"></th>
</tr>
</thead>
<tbody>
<tr>
<td>Latest ✔</td>
<td>Latest ✔</td>
<td>Latest ✔</td>
<td>Latest ✔</td>
<td>Latest ✔</td>
<td>8+ ✔</td>
</tr>
</tbody>
</table>
<h2> Axios 的使用</h2>
<p><code>Axios</code> 提供了两种不同的方式来发送 <code>HTTP</code> 请求，其中一种是直接通过 <code>axios()</code> 方法，而另一种则是通过 <code>axios</code> 对象提供的跟 <code>HTTP</code> 方法对应起来的方法来发起请求，例如：</p>
<ul>
<li><code>axios.get()</code></li>
<li><code>axios.post()</code></li>
<li><code>axios.update()</code></li>
<li><code>axios.put()</code></li>
<li>……</li>
</ul>
<h3> get 请求</h3>
<ul>
<li>语法</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>实例</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> post 请求</h3>
<ul>
<li>语法：</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>实例</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> put 请求</h3>
<ul>
<li>语法</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>实例</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> delete 请求</h3>
<ul>
<li>语法</li>
</ul>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul>
<li>实例</li>
</ul>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2> 总结</h2>
<p>以上就是本文的所有内容了，主要介绍了 <code>Axios</code> 的定义、特性、如何安装以及所支持的浏览器，然后介绍了如何使用 <code>Axios</code> 来模拟发起最常用的 <code>GET</code>、<code>POST</code>、<code>PUT</code> 以及 <code>DELETE</code> 请求。</p>
]]></content:encoded>
      <enclosure url="https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png" type="image/png"/>
    </item>
    <item>
      <title>搭建 Vue + Vite 入门项目</title>
      <link>https://ez4jam1n.site/studio/md/java/vue3/20221004-vite-quickstart.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/vue3/20221004-vite-quickstart.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">搭建 Vue + Vite 入门项目</source>
      <description>作者：benjamin 博客：studio 吾生也有涯，而知也无涯。 前言 虽然市面上有很多的打包工具，例如 webpack、Rollup 以及 Parcel 等。毫无疑问，通过使用这些工具，在很大程度上改善了前端开发者的游戏体验。 但随着业务变得越来越复杂，我们不得构建比之前更大型的应用。此时，所需要处理的代码量也越来越大。这时候，上面提到的打包工具就开始遇到性能瓶颈，我们可能需要很长的时间才能启动开发服务器，这样一来，开发效率就变得越来越低。 针对这一现状，大佬们又构建了一个打包工具 ，也就是今天文章的主角 - Vite。Vite 旨在利用生态系统中的新进展来解决上面的问题，通过将应用中的 依赖 和 源码 相分开，从而缩减开发服务器的启动时间。</description>
      <category>Vue3 笔记</category>
      <pubDate>Tue, 04 Oct 2022 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>作者：benjamin</p>
<p>博客：<a href="https://benjam1n.eu.org" target="_blank" rel="noopener noreferrer">studio</a></p>
<blockquote>
<p>吾生也有涯，而知也无涯。</p>
</blockquote>
<hr>
<h2> 前言</h2>
<p>虽然市面上有很多的打包工具，例如 <code>webpack</code>、<code>Rollup</code> 以及 <code>Parcel</code> 等。毫无疑问，通过使用这些工具，在很大程度上改善了前端开发者的游戏体验。
但随着业务变得越来越复杂，我们不得构建比之前更大型的应用。此时，所需要处理的代码量也越来越大。这时候，上面提到的打包工具就开始遇到性能瓶颈，我们可能需要很长的时间才能启动开发服务器，这样一来，开发效率就变得越来越低。
针对这一现状，大佬们又构建了一个打包工具 ，也就是今天文章的主角 - <code>Vite</code>。<code>Vite</code> 旨在利用生态系统中的新进展来解决上面的问题，通过将应用中的 <strong>依赖</strong> 和 <strong>源码</strong> 相分开，从而缩减开发服务器的启动时间。</p>
<h2> webpack、Rollup、Vite 的区别</h2>
<p>由于自己更多的是和后端打交道，所以这里对三者的区别介绍仅限于表面，至于更深一层的代码层面的区别，还请各位自行去了解。经过查阅资料，这里简单给出下 <code>webpack</code>、<code>Rollup</code> 以及 <code>Vite</code> 的区别，先说一个总结论：</p>
<blockquote>
<p><strong>webpack</strong> 更适合打包项目，<code>Rollup</code> 更适合打包库，而 <code>Vite</code> 基于 <code>Rollup</code>，实现了热更新的同时也十分适合打包项目。</p>
</blockquote>
<table>
<thead>
<tr>
<th>工具</th>
<th>webpack</th>
<th>Rollup</th>
<th>Vite</th>
</tr>
</thead>
<tbody>
<tr>
<td>区别</td>
<td>1. 支持代码切割，从而实现分包<br>2. 支持 <code>HMR</code>，实现热更新</td>
<td>1. 基于 <code>esm</code> 打包，生成的文件体积更小<br>2. 原生支持 <code>tree-shaking</code></td>
<td>1. 生产环境通过 <code>Rollup</code> 打包生成 <code>esm</code> 模块包，因此打包的体积小<br>2. 生产环境基于浏览器支持 <code>esm</code>，让浏览器解析模块，然后服务器按需编译返回<br>3. 热更新，实现按需编译，不像 <code>webpack</code> 需全部重新编译并更新</td>
</tr>
</tbody>
</table>
<h2> 搭建 Vite 项目</h2>
<p>说完上边的内容之后，接下来就来看看，如何大家我们的第一个 <code>Vite</code> 项目。</p>
<p>需要注意的是，要使用 <code>Vite</code> 的前提是电脑中有 <code>Node.js</code>，而且版本需要 <code>&gt;=12.0.0</code>，至于个别模块可能需要更高版本的 <code>Node.js</code> 才能正常运行，此时就需要注意升级 <code>Node.js</code> 的版本。</p>
<p>如果你不清楚你的电脑中是否安装了 <code>Node.js</code>，那么可以在控制台中使用如下命令进行查询。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>如何还是不太清楚，那么可以参考我之前的一篇文章：</p>
<blockquote>
<p><a href="https://benjam1n.eu.org/md/tools/windows/20220414-nodejs-install" target="_blank" rel="noopener noreferrer">Windows 教程：Node.js 安装教程</a></p>
</blockquote>
<p>初始工作做好之后，我们就可以开始搭建我们的第一个 <code>Vite</code> 项目了。</p>
<p>如果我们只是要构建一个 <code>Vite</code> 项目，那么简单地使用以下命令即可。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后根据提示进行相关设置即可，这里需要注意的是它会让我们选择框架，这就需要根据我们的需求来进行选择了。</p>
<p>比如我们要创建一个基于 <code>Vue</code> 的项目，那么可以选择 <code>Vue</code> 模板，然后再进行下一步。</p>
<p></p>
<p>选择变体，是基于 <code>Vue</code> 还是 <code>Vue-ts</code>。</p>
<p></p>
<p>最后，等待项目创建完毕即可。</p>
<p></p>
<p>然后根据它的提示，依次执行以下三个命令即可。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>接着在浏览器中访问以下地址：</p>
<blockquote>
<p><code>http://localhost:3000</code></p>
</blockquote>
<p>如果一切正常，那么应该就会出现以下的界面了，至此我们的第一个 <code>Vite</code> + <code>Vue</code> 项目就搭建成功了！</p>
<p></p>
<p>当然，除开使用上面的命令来创建之外，我们还可以通过附加的命令选项来执行项目的名称和想要使用的模板。不过这里需要注意，根据你电脑上 <code>npm</code> 版本的不同，需要使用不同的命令。</p>
<p>如果你的 <code>npm</code> 是 <code>6.x</code> 版本，那么要使用以下命令：</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果 <code>npm</code> 版本 <code>7.x</code> 及以上版本，那么则需要使用如下命令，一定不要忘记多出来的 <code>–</code>。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>同样的，我们依次执行提示的三条命令。</p>
<div class="language-bash line-numbers-mode" data-ext="sh"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>最后，同样在浏览器中访问 <code>http://localhost:3000</code>，不出意外同样可以看到以下的界面。</p>
<p></p>
<h2> 总结</h2>
<p>以上就是本文的所有内容了，主要介绍了 <code>Vite</code> 由来的背景，并简单对比了下 <code>webpack</code>、<code>Rollup</code> 和 <code>Vite</code> 三个打包工具的区别，最后则是利用两种方式来创建了 <code>Vite</code> + <code>Vue</code> 的实例。</p>
]]></content:encoded>
    </item>
    <item>
      <title>HTML 基础标签</title>
      <link>https://ez4jam1n.site/studio/md/java/web/20220501-basic-lable.html</link>
      <guid>https://ez4jam1n.site/studio/md/java/web/20220501-basic-lable.html</guid>
      <source url="https://ez4jam1n.site/studio/rss.xml">HTML 基础标签</source>
      <description>什么是 HTML HTML（Hypertext Markup Language），中文名超文本标记语言，是一种用于结构化 Web 网页及其内容的标记语言。 严格意义上讲，HTML 并不是一门编程语言，而是一种用于定义内容结构的标记语言。它由一系列的元素所构成，通过标签与内容组合得到我们所需效果，使其以某种形式呈现。 HTML 中的基础标签 既然说了 HTML 是由一系列的元素组成，那我们就来看看元素相关的内容。 元素又是由一对标签加上内容所共同构成，以下是一个简单的文本标签示例。 该元素中，主要组成部分如下：</description>
      <category>HTML 教程</category>
      <pubDate>Mon, 25 Apr 2022 16:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2> 什么是 HTML</h2>
<p>HTML（Hypertext Markup Language），中文名超文本标记语言，是一种用于结构化 Web 网页及其内容的标记语言。</p>
<p>严格意义上讲，HTML 并不是一门编程语言，而是一种用于定义内容结构的标记语言。它由一系列的元素所构成，通过标签与内容组合得到我们所需效果，使其以某种形式呈现。</p>
<h2> HTML 中的基础标签</h2>
<p>既然说了 HTML 是由一系列的元素组成，那我们就来看看元素相关的内容。</p>
<p>元素又是由一对标签加上内容所共同构成，以下是一个简单的文本标签示例。</p>
<p></p>
<p>该元素中，主要组成部分如下：</p>
<ul>
<li><strong>开始标签</strong>：由标签名称，大于号、小于号所组成，表示元素从此处开始生效。</li>
<li><strong>结束标签</strong>：类似于开始标签，只是在标签名之前多了一个斜杠 <code>/</code>，表示元素的结尾。</li>
<li><strong>内容</strong>：元素的内容。</li>
</ul>
<p>以下就来看看，HTML 中的各种常用标签。</p>
<h3> <code>&lt;!DOCTYPE html&gt;</code></h3>
<p>放在 HTML 文件中的首行，主要用于标识文档类型。</p>
<h3> <code>&lt;html&gt;</code></h3>
<p>HTML 文档中的根标签，包含了整个页面的所有内容，其他所有标签都包含在 <code>html</code> 标签中。</p>
<h3> <code>&lt;head&gt;</code></h3>
<p>这个元素中的内容对用户是不可兼得，主要用于设置网页字符编码、CSS 样式、页面描述、搜索关键字等信息。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3> <code>&lt;body&gt;</code></h3>
<p>网站主体内容，如果想让我们的内容显示在网页中让其他用户在访问该界面时看见，则内容需要写在该标签中，主要包括文本、图形、视频或其他内容。</p>
<p>以下是一个在网页中显示内容的实例。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;title&gt;</code></h3>
<p>网页标题，在 <code>head</code> 标签中设置后，打开网页时将显示为网页标题。</p>
<p>以下是一个实例。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;p&gt;</code></h3>
<p>文本标签，用于定义段落。该标签会自动在其前后创建一些空白，浏览器将自动添加这些空间。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 标题</h3>
<p>此处的标题不同与上边的 <code>title</code> 标签，<code>title</code> 设置的主要是网页标题，二次数的标题主要是是针对 <code>body</code> 标签中的标题。</p>
<p>这里的标题又可以分为 6 级，其对应标签分别是：<code>&lt;h1&gt;</code>、<code>&lt;h2&gt;</code>、<code>&lt;h3&gt;</code>、<code>&lt;h4&gt;</code>、<code>&lt;h5&gt;</code>、<code>&lt;h6&gt;</code>。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;/br&gt;</code></h3>
<p>表示换行，不同于 <code>title</code> 等标签，它是一个单标签，即开始标签和结束标签都是同一个，单词放在标签名之前。</p>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;img&gt;</code></h3>
<p>表示图片标签，通过该属性我们可以在网页中添加一张图片。</p>
<p>此外，<code>img</code> 标签提供 <code>src</code> 属性用于设置图片路径，<code>height</code> 属性设置图片高度，<code>width</code> 属性设置图宽度。为了防止图片失效造成误解，我们还可以给图片添加一个提示，此时使用 <code>alt</code> 属性即可。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;a&gt;</code></h3>
<p>在某一个网页中，我们要通过超链接来跳转到另一个页面，则此时需要用到 <code>&lt;a&gt;</code> 标签，当然该标签中最重要的 <code>href</code> 属性也不能少，它用于指示跳转的目标网页。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 列表</h3>
<p>列表可以分为有序列表和无序列表，其中有序列表是由 <code>ol</code> 标签标识。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>有序列表中，可以在 <code>ol</code> 标签中添加 <code>start</code> 属性，用于表示从第几位开始，<code>type</code> 属性用于标识所要显示的类型。</p>
<table>
<thead>
<tr>
<th>type</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>1</code></td>
<td>显示类型为数字类型</td>
</tr>
<tr>
<td><code>A</code></td>
<td>显示类型为大写字母类型</td>
</tr>
<tr>
<td><code>a</code></td>
<td>显示类型为小写字母类型</td>
</tr>
<tr>
<td><code>I</code></td>
<td>显示类型为大写罗马数字类型</td>
</tr>
<tr>
<td><code>i</code></td>
<td>显示类型为小写罗马数字类型</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>除开有序列表之外，还有无序列表，无序列表以 <code>ul</code> 标识。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>无序列表虽然没有顺序之分，但是同样提供了 <code>type</code> 属性。</p>
<table>
<thead>
<tr>
<th>type</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>disc</code></td>
<td>小圆黑点，默认显示方式</td>
</tr>
<tr>
<td><code>circle</code></td>
<td>空心圆圈</td>
</tr>
<tr>
<td><code>square</code></td>
<td>小黑方形</td>
</tr>
</tbody>
</table>
<div class="language-javascript line-numbers-mode" data-ext="js"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;b&gt;</code></h3>
<p>要实现对内容加粗，可以使用 <code>&lt;b&gt;</code> 标签。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;u&gt;</code></h3>
<p>有时需要对内容做下划线处理，则可以使用 <code>&lt;u&gt;</code> 标签。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;i&gt;</code></h3>
<p>为了将文本以斜体的方式显示给浏览器，可以使用 <code>&lt;i&gt;</code> 标签。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> 上下标</h3>
<p>有时候我们需要在网页中显示数学或者化学公式，那么此时需要用到上下标，其中上标用标签 <code>&lt;sup&gt;</code> 表示，下标用标签 <code>&lt;sub&gt;</code> 表示。</p>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;table&gt;</code></h3>
<p>表格标签 <code>&lt;table&gt;</code> 中又含有多个子标签，常用的子标签有如下。</p>
<ul>
<li><code>th</code>：表头列</li>
<li><code>tr</code>：行</li>
<li><code>td</code>：列</li>
</ul>
<p>同样的，表格标签还提供了以下这些常用的属性，用于给表格增加样式。但现在大多都是用 CSS 来对表格进行修饰，所以这些属性简单了解即可，不用太过深入。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>border</code></td>
<td>表格边框的粗细</td>
</tr>
<tr>
<td><code>width</code></td>
<td>表格的宽度</td>
</tr>
<tr>
<td><code>cellspacing</code></td>
<td>单元格间距</td>
</tr>
<tr>
<td><code>cellpadding</code></td>
<td>单元格填充</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<h3> <code>&lt;form&gt;</code></h3>
<p><code>&lt;form&gt;</code> 表示文档中的一个区域，主要包含交互空间，用来向服务器提交信息。<code>&lt;form&gt;</code> 标签通常包含一个或者多个表单标签，常用的表单标签如下：</p>
<table>
<thead>
<tr>
<th>表单标签</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code></td>
<td>输入框</td>
</tr>
<tr>
<td><code>&lt;textarea&gt;</code></td>
<td>文本域</td>
</tr>
<tr>
<td><code>&lt;button&gt;</code></td>
<td>按钮</td>
</tr>
<tr>
<td><code>&lt;select&gt;</code></td>
<td>单选框</td>
</tr>
</tbody>
</table>
<div class="language-html line-numbers-mode" data-ext="html"><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>
<p>其中 <code>action</code> 属性用来处理表单提交的 URL，<code>method</code> 属性表示使用何种 HTTP 方式来提交表单，常用的值有 <code>post</code> 和 <code>get</code>。</p>
<h2> 总结</h2>
<p>本文介绍了 HTML 的定义，然后对 HTML 中常用的标签进行了举例学习。</p>
]]></content:encoded>
    </item>
  </channel>
</rss>