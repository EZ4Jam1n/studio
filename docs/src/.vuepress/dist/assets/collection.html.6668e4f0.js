import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o,c,a as n,b as a,d as l,w as d,f as s,r as p}from"./app.7c696d34.js";const i={},r=s(`<h2 id="java-集合类简介" tabindex="-1"><a class="header-anchor" href="#java-集合类简介" aria-hidden="true">#</a> Java 集合类简介</h2><h3 id="集合概览" tabindex="-1"><a class="header-anchor" href="#集合概览" aria-hidden="true">#</a> 集合概览</h3><p>Java 集合类主要都是从 <code>Collection</code> 和 <code>Map</code> 两个接口派生而成，其中 <code>Collection</code> 又包含 <code>List、Set 和 Queue</code>，如下图。Java 集合就像容器，能够将多个同类型的对象装进该容器中，所以又叫容器。其中各集合含义如下：</p><ul><li><strong>Map</strong>：代表具有映射关系的集合，通过 <code>key-value</code> 存储，其中 <code>key</code> 是不可重复的，用于标识集合中的每项数据，每个 <code>key</code> 最多只能映射一个 <code>value</code>；</li><li><strong>List</strong>：代表有序、可重复的集合；</li><li><strong>Set</strong>：代表无序、不可重复的集合；</li><li><strong>Queue</strong>：队列集合实现；</li></ul><p><img src="https://s1.ax1x.com/2020/10/07/0am8hV.png" alt="集合框架" loading="lazy"></p><h3 id="集合选用技巧" tabindex="-1"><a class="header-anchor" href="#集合选用技巧" aria-hidden="true">#</a> 集合选用技巧</h3><p>主要根据集合的特点来进行选择：</p><ol><li><p><strong>如果需要存放元素值</strong>：</p><ul><li>要保证元素唯一，选用实现 <code>Set</code> 接口的集合 <code>HashSet</code> 或 <code>TreeSet</code>；</li><li>不用保证元素唯一，选择实现 <code>List</code> 接口的集合 <code>ArrayList</code> 或 <code>LinkedList</code>；</li></ul></li><li><p><strong>如果需要存放键值对</strong>：</p><ul><li>需要排序：选用 <code>Map</code> 接口下的 <code>TreeMap</code>；</li><li>无需排序：选用 <code>Map</code> 接口下的 <code>HashMap</code>；</li><li>保证线程安全：选用 <code>Map</code> 接口下的 <code>ConcurrentHashMap</code>；</li></ul></li></ol><h3 id="集合特点" tabindex="-1"><a class="header-anchor" href="#集合特点" aria-hidden="true">#</a> 集合特点</h3><ul><li>对象封装数据，对象多了也需要存储，集合用于存储对象；</li><li>对象个数确定能够使用数组，但是个数不确定时可以用集合，因为集合是可变长度的；</li></ul><h3 id="list、set、map-之间的区别" tabindex="-1"><a class="header-anchor" href="#list、set、map-之间的区别" aria-hidden="true">#</a> List、Set、Map 之间的区别</h3><table><thead><tr><th></th><th></th><th>元素有序</th><th>允许元素重复</th></tr></thead><tbody><tr><td><code>List</code></td><td></td><td>是</td><td>是</td></tr><tr><td></td><td><code>AbstractSet</code></td><td>否</td><td>否</td></tr><tr><td><code>Set</code></td><td><code>HashSet</code></td><td>否</td><td>否</td></tr><tr><td></td><td><code>TreeSet</code></td><td>是（二叉树排序）</td><td>否</td></tr><tr><td></td><td><code>AbstractMap</code></td><td>否</td><td><code>key</code> 唯一，<code>value</code> 可重复</td></tr><tr><td><code>Map</code></td><td><code>HashMap</code></td><td>否</td><td><code>key</code> 唯一，<code>value</code> 可重复</td></tr><tr><td></td><td><code>TreeMap</code></td><td>是（二叉树排序）</td><td><code>key</code> 唯一，<code>value</code> 可重复</td></tr></tbody></table><h2 id="集合-vs-数组" tabindex="-1"><a class="header-anchor" href="#集合-vs-数组" aria-hidden="true">#</a> 集合 vs 数组</h2><p>集合和数组都是 Java 中重要的数据结构，两者之间的区别主要有如下两点：</p><table><thead><tr><th>不同点</th><th>数组</th><th>集合</th></tr></thead><tbody><tr><td><strong>容量</strong></td><td>初始化时指定，只能存储定长数据</td><td>保存不定长的数据</td></tr><tr><td><strong>存储的数据类型</strong></td><td>基本数据类型，对象均可</td><td>只能是对象（基本数据类型要转换为封装类），而且可以保存 <code>key-value</code> 数据</td></tr><tr><td><strong>存储元素类型</strong></td><td>元素必须是同一数据类型</td><td>存储的对象可以是不同数据类型</td></tr></tbody></table><h2 id="collection" tabindex="-1"><a class="header-anchor" href="#collection" aria-hidden="true">#</a> Collection</h2><h3 id="collection-声明" tabindex="-1"><a class="header-anchor" href="#collection-声明" aria-hidden="true">#</a> Collection 声明</h3><p><img src="https://s1.ax1x.com/2020/08/01/a3HxQP.png" alt="Collection" loading="lazy"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>																									<span class="token comment">// // jdk 1.8 中 Collection 的源码</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toArray</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">containsAll</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">//省略了其他方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="collection-常用方法" tabindex="-1"><a class="header-anchor" href="#collection-常用方法" aria-hidden="true">#</a> Collection 常用方法</h3><p><code>Collection</code> 是 <code>Set、List、Queue</code> 的父接口，主要提供了如下方法供子类实现，从而实现数据操作。</p><p><img src="https://s1.ax1x.com/2020/08/01/a3vPoT.png" alt="Collection 常用方法" loading="lazy"></p><p>其中 <code>iterator()</code> 方法的返回值 <code>Iterator </code> 接口类叫做 <strong>迭代器</strong>，主要用于遍历集合元素，定义了如下两个方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>boolean hasNext()</code></td><td>若仍有元素可以迭代，则返回 <code>true</code></td></tr><tr><td><code>E next()</code></td><td>返回迭代的下一元素</td></tr><tr><td><code>void remove()</code></td><td>删除指定元素</td></tr></tbody></table><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 获取迭代器</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 遍历集合</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">Integer</span> value <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\t&quot;</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="collection-和-collections" tabindex="-1"><a class="header-anchor" href="#collection-和-collections" aria-hidden="true">#</a> Collection 和 Collections</h3><ul><li><code>Collection</code>：是一个集合接口，提供了对集合对象进行基本操作的通用接口方法，是所有集合的父类；</li><li><code>Collections</code>：是一个包装好的工具类，包含许多静态方法，无法被实例化，比如我们最常用的排序方法 <code>Collections.sort(list)</code>；</li></ul><h2 id="collection-之-set" tabindex="-1"><a class="header-anchor" href="#collection-之-set" aria-hidden="true">#</a> Collection 之 Set</h2><p><code>Set</code> 集合继承于 <code>Collection</code>，拥有 <code>Collection</code> 有的所有方法，未提供额外方法。<code>Set</code> 不允许包含重复元素，如果试图将两个相同元素加入同一 <code>Set</code> 中，将导致失败。对象的相等性本质是通过对象的 HashCode 来进行判断，<strong>若想要让两个不同的对象视为相等的，就必须覆盖 <code>Object</code> 的 <code>hashCode()</code> 和 <code>equals()</code> 方法</strong>。主要可分为如下几类以及他们的底层数据结构为：</p><ul><li><strong>HashSet：无序唯一，基于 HashMap，底层采用 HashMap 保存元素</strong></li><li><strong>LinkedHashSet：继承于 HashSet，内部通过 LinkedHashMap 实现</strong></li><li><strong>TreeSet：有序唯一，基于红黑树实现</strong></li></ul><h3 id="hashset-类" tabindex="-1"><a class="header-anchor" href="#hashset-类" aria-hidden="true">#</a> HashSet 类</h3><ol><li><strong>HashSet 的特点</strong></li></ol><ul><li>无法保证元素的排列顺序；</li><li><code>HashSet</code> 不是同步的（非线程安全），若多个线程同时访问一个 <code>HashSet</code>，则必须通过代码来保证其同步；</li><li>集合元素值可以是 <code>null</code>；</li></ul><ol start="2"><li><strong>LinkedHashSet</strong></li></ol><p><code>LinkedHashSet</code> 是 <code>HashSet</code> 的子类，同样是根据元素的 <code>hashCode</code> 来决定元素的存储位置，同时用链表维护元素顺序，从而保证元素以插入的顺序来保存。</p><ol start="3"><li><strong>HashSet 中判断集合元素相等</strong></li></ol><p>不同的对象进行比较，可以有如下四种情况：</p><ul><li>若两元素通过 <code>equal()</code> 方法比较返回 <code>false</code>，但两者的 <code>hashCode()</code> 返回不相等，则将其存储在不同位置；</li><li>若两元素通过 <code>equal()</code> 方法比较返回 <code>true</code>，但两者的 <code>hashCode()</code> 返回不相等，则将其存储在不同位置；</li><li>若两元素通过 <code>equal()</code> 方法比较返回 <code>false</code>，但两者的 <code>hashCode()</code> 返回相等，则将其存储在相同位置，在这个位置以链表式结构来保存多个对象。因为向 <code>HashSet</code> 集合中存入一个元素时，<code>HashSet</code> 将调用对象的 <code>hashCode()</code> 获取其 <code>hash</code> 值，然后根据 <code>hash</code> 值来决定对象在 <code>HashSet</code> 中的存储位置；</li><li>若两元素通过 <code>equal()</code> 方法比较返回 <code>true</code>，且两者的 <code>hashCode()</code> 返回相等，则不添加到 <code>HashSet</code>；</li></ul><ol start="4"><li><strong>HashSet 实现原理</strong></li></ol><p>基于 <code>HashMap</code> 实现，<code>HashSet</code> 的值存放在 <code>HashMap</code> 的 <code>key</code> 上，其 <code>value</code> 统一为 <code>PRESENT</code>。因此其实现基本都是直接调用底层 <code>HashMap</code> 的相关方法来实现。</p><ol start="5"><li><strong>HashMap vs HashSet</strong></li></ol><table><thead><tr><th>对比项</th><th>HashMap</th><th>HashSet</th></tr></thead><tbody><tr><td>实现的接口</td><td><code>Map</code></td><td><code>Set</code></td></tr><tr><td>存储的元素</td><td>键值对</td><td>对象</td></tr><tr><td>添加元素的方法</td><td><code>put(key, value)</code></td><td><code>add()</code></td></tr><tr><td>HashCode 计算方式</td><td>利用键 <code>key</code> 计算</td><td>用成员对象进行计算 <code>HashCode</code> 值</td></tr><tr><td>效率</td><td>相对较快</td><td>相对较慢</td></tr></tbody></table><h3 id="treeset-类" tabindex="-1"><a class="header-anchor" href="#treeset-类" aria-hidden="true">#</a> TreeSet 类</h3><ul><li>使用二叉树的原理对新 <code>add()</code> 的对象按指定顺序排序，每增加一个对象就会进行排序，将对象插入二叉树指定位置。一组有序的集合，若未指定排序规则 <code>Comparator</code>，则按照自然排序；</li><li><code>Integer</code> 和 <code>String</code> 对象会按照默认的顺序进行排序，但是自定义的对象是不可以的，<strong>自定义的类必须实现 <code>Comparable</code> 接口，且覆写相应的 <code>ComparaTo()</code> 方法，才能正常使用</strong>；</li><li>比较一个对象与指定对象的顺序时，若该对象 <strong>小于、等于或大于</strong> 指定对象，则分别返回 <strong>负整数、零或正整数</strong>；</li></ul><h3 id="hashset-vs-linkedhashset-vs-treeset" tabindex="-1"><a class="header-anchor" href="#hashset-vs-linkedhashset-vs-treeset" aria-hidden="true">#</a> HashSet vs LinkedHashSet vs TreeSet</h3><table><thead><tr><th>Set 类型</th><th>使用场景</th><th>底层数据结构</th></tr></thead><tbody><tr><td><code>HashSet</code></td><td>无序无重合，快速查找，元素必须定义 <code>hashCode()</code>，线程不安全，能够存储 <code>null</code> 值</td><td>链表</td></tr><tr><td><code>LinkedHashSet</code></td><td>维护次序的 <code>HashSet</code>，元素必须定义 <code>hashCode()</code>，能按照添加的顺序遍历</td><td>链表</td></tr><tr><td><code>TreeSet</code></td><td>保持元素大小次序，元素必须实现 <code>Comparable</code> 接口，有自然排序和定制排序</td><td>红黑树</td></tr></tbody></table><h2 id="collection-之-list" tabindex="-1"><a class="header-anchor" href="#collection-之-list" aria-hidden="true">#</a> Collection 之 List</h2><p><code>List</code> 下主要可以分为如下三种，以及他们的底层数据结构分别是：</p><ul><li><strong>ArrayList：Object 数组</strong></li><li><strong>LinkedList：双向循环链表</strong></li><li><strong>Vector：Object 数组</strong></li></ul><h3 id="list-常用方法" tabindex="-1"><a class="header-anchor" href="#list-常用方法" aria-hidden="true">#</a> List 常用方法</h3><p><code>List</code> 是一个元素有序、可重复的集合，其中的每个元素均有对应的顺序索引，允许使用重复元素，通过索引来访问指定位置的集合元素，继承自 <code>Collection</code>，拥有其所有方法，此外还有其他一些根据索引来操作元素的方法，如下：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>void add(int index, Object element)</code></td><td>在列表的指定位置插入指定元素</td></tr><tr><td><code>boolean addAll(int index, Collection&lt;? extends E&gt; c)</code></td><td>将集合 <code>c </code> 中的所有元素都插入到列表中的指定位置 <code>index </code>处</td></tr><tr><td><code>Object get(index)</code></td><td>返回列表中指定位置的元素</td></tr><tr><td><code>int indexOf(Object o)</code></td><td>返回此列表中第一次出现的指定元素的索引；如果此列表不包含该元素，则返回 <code>-1</code></td></tr><tr><td><code>int lastIndexOf(Object o)</code></td><td>返回此列表中最后出现的指定元素的索引；如果列表不包含此元素，则返回 <code>-1</code></td></tr><tr><td><code>Object remove(int index)</code></td><td>移除列表中指定位置的元素</td></tr><tr><td><code>Object set(int index, Object element)</code></td><td>用指定元素替换列表中指定位置的元素</td></tr><tr><td><code>List subList(int fromIndex, int toIndex)</code></td><td>返回列表中指定的 <code>fromIndex</code>（包括 ）和 <code>toIndex</code>（不包括）之间的所有集合元素组成的子集</td></tr><tr><td><code>Object[] toArray()</code></td><td>返回按适当顺序包含列表中的所有元素的数组（从第一个元素到最后一个元素）</td></tr><tr><td><code>void replaceAll(UnaryOperator operator)</code></td><td>根据 <code>operator </code>指定的计算规则重新设置 <code>List </code>集合的所有元素</td></tr><tr><td><code>void sort(Comparator c)</code></td><td>根据 <code>Comparator </code>参数对 <code>List </code>集合的元素排序</td></tr></tbody></table><h3 id="arraylist-数组" tabindex="-1"><a class="header-anchor" href="#arraylist-数组" aria-hidden="true">#</a> ArrayList（数组）</h3>`,53),u=n("ol",null,[n("li",null,[n("strong",null,"ArrayList 特点"),n("ul",null,[n("li",null,[a("实现了 "),n("code",null,"List"),a(" 接口的可变数组；")]),n("li",null,[a("可以插入 "),n("code",null,"null"),a("；")]),n("li",null,[a("非 "),n("code",null,"synchronized"),a("；")]),n("li",null,[a("其 "),n("code",null,"size(),isEmpty(),get(),set(),iterator(),add()"),a(" 等方法的时间复杂度均为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(1)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])]),a("；")])])]),n("li",null,[n("strong",null,"ArrayList"),a(" 优点 "),n("ul",null,[n("li",null,[a("底层以数组实现，是一种随机访问模式，实现了 "),n("code",null,"RandomAccess"),a(" 接口，查找时非常快；")]),n("li",null,[n("code",null,"ArrayList"),a(" 在顺序添加一个元素时非常方便；")])])]),n("li",null,[n("strong",null,"ArrayList 的缺点"),n("ul",null,[n("li",null,"删除元素时，需要做一次元素复制操作，若复制的元素较多，则性能较慢；"),n("li",null,"插入元素时，也需要做一次元素复制操作，一旦复制元素较多，则会导致性能低下；")])]),n("li",null,[n("strong",null,"数组和 List 的相互转换"),n("ul",null,[n("li",null,[n("strong",null,"数组 -> List："),a(),n("code",null,"Arrays.asList(array)"),a(" 进行转换；")]),n("li",null,[n("strong",null,"List -> 数组："),a(" 利用 "),n("code",null,"List"),a(" 的 "),n("code",null,"toArray()"),a(" 进行转换；")])])])],-1),k=s(`<h3 id="vector-数组-线程同步" tabindex="-1"><a class="header-anchor" href="#vector-数组-线程同步" aria-hidden="true">#</a> Vector（数组 + 线程同步）</h3><p>同 <code>ArrayList</code> 一样，底层是通过数组来实现，但是它 <strong>支持线程同步，即某一时刻只有一个线程能够读写 <code>Vector</code></strong>，从而避免了多线程同时写而引起的不一致性，但实现同步所消耗的代价较高，所以其访问效率比 <code>ArrayList</code> 低；</p><h3 id="linkedlist-链表" tabindex="-1"><a class="header-anchor" href="#linkedlist-链表" aria-hidden="true">#</a> LinkedList（链表）</h3><p><code>LinkedList</code> 是一个链表维护的序列容器，和 <code>ArrayList</code> 最大的区别在于其底层实现，前者使用链表，后者使用数组，所以选用时可以根据数组和链表的特性来进行选择，主要不同有如下几点：</p><ul><li>数组查找效率高，能够通过索引直接查找出对应元素，但链表却需要每次都从头开始；</li><li>链表插入和删除元素比较高效，只需要在插入或删除位置断链后重组链即可，但数组需要重新复制一份将所有数据后移或前移；</li><li>动态申请内存时，链表只需要动态创建，但数组达到初始申请长度后，需要重新申请一个更大的数组，并将原来数组的数据迁移过去；</li></ul><h3 id="arraylist-vs-linkedlist" tabindex="-1"><a class="header-anchor" href="#arraylist-vs-linkedlist" aria-hidden="true">#</a> ArrayList vs LinkedList</h3><table><thead><tr><th>对比项目</th><th>ArrayList</th><th>LinkedList</th></tr></thead><tbody><tr><td><strong>数据结构实现</strong></td><td>数组</td><td>双向链表</td></tr><tr><td><strong>随机访问效率</strong></td><td>高</td><td>移动指针从前往后依次查找，效率低</td></tr><tr><td><strong>增删效率</strong></td><td>低</td><td>高</td></tr><tr><td><strong>内存空间占用</strong></td><td>低，但是需要连续空间</td><td>高，除开数据，还有两个引用</td></tr><tr><td><strong>线程安全</strong></td><td>不安全</td><td>不安全</td></tr></tbody></table><h3 id="arraylist-和-vector" tabindex="-1"><a class="header-anchor" href="#arraylist-和-vector" aria-hidden="true">#</a> ArrayList 和 Vector</h3><ul><li><strong>相同点</strong><ol><li>均基于索引，内部由一个数组支持；</li><li>两者维护插入的顺序，可以根据插入顺序来获取元素；</li><li><code>ArrayList</code> 和 <code>Vector</code> 的迭代器实现都是 <code>fail-fast</code>；</li><li><code>ArrayList</code> 和 <code>Vector</code> 均允许 <code>null</code> 值，也可以使用索引值对元素进行随机访问；</li></ol></li><li><strong>不同点</strong><ol><li><code>Vector</code> 是同步的，而 <code>ArrayList</code> 不是；</li><li><code>ArrayList</code> 比 <code>Vector</code> 快，因为有同步，不会过载；</li><li><code>ArrayList</code> 更加通用，能使用 <code>Collections</code> 工具类实现轻松操作列表；</li></ol></li></ul><h3 id="list-vs-set" tabindex="-1"><a class="header-anchor" href="#list-vs-set" aria-hidden="true">#</a> List vs Set</h3><ol><li><strong>各自特点</strong><ul><li><strong>Set 特点</strong>：一个无序容器，不能存储重复元素，只允许存入一个 <code>null</code>，必须保证元素唯一性，该接口的常用实现类为 <code>HashSet、TreeSet、LinkedHashSet</code>；</li><li><strong>List 特点：</strong> 一个有序容器，元素可以重复，允许存入多个 <code>null</code>，元素均有索引，常用实现类为 <code>ArrayList、LinkedList、Vector</code>；</li></ul></li><li><strong>两者对比</strong><ul><li><strong>Set：</strong> 检索元素效率低下，删除和插入效率高，插入和删除不会引起元素位置变化；</li><li><strong>List：</strong> 类似于数组，能够动态扩展，查找元素效率高，插入和删除元素效率低，因为会导致其他元素位置改变；</li></ul></li></ol><h2 id="collection-之-queue" tabindex="-1"><a class="header-anchor" href="#collection-之-queue" aria-hidden="true">#</a> Collection 之 Queue</h2><h3 id="queue-常用方法" tabindex="-1"><a class="header-anchor" href="#queue-常用方法" aria-hidden="true">#</a> Queue 常用方法</h3><p><code>Queue</code> 用于模拟队列这种数据结构，是一种 <strong>先进先出（FIFO，<code>first-in-first-out</code>）</strong> 的容器。队列头部是队列中存放时间最长的元素，尾部元素是队列中存放时间最短的元素。新的元素插入（<code>offer()</code>）到队列尾部，访问元素（<code>poll</code>）操作将返回队列头部元素，通常接口中提供了如下方法 ：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>boolean add(E e)</code></td><td>将指定元素插入队尾，成功返回 <code>true</code>，空间不足时抛出 <code>IllegalStateException</code></td></tr><tr><td><code>E element()</code></td><td>获取队首元素但不移除</td></tr><tr><td><code>boolean offer(E e)</code></td><td>将指定元素插入队尾，适用于有容量限制的队列（优于 <code>add(E e)</code>）</td></tr><tr><td><code>E peek()</code></td><td>获取队首元素但不移除，队列为空返回 <code>null</code></td></tr><tr><td><code>E poll()</code></td><td>获取并移除队首元素，队列为空返回 <code>null</code></td></tr><tr><td><code>E remove()</code></td><td>获取并移除队首元素</td></tr></tbody></table><h3 id="blockingqueue" tabindex="-1"><a class="header-anchor" href="#blockingqueue" aria-hidden="true">#</a> BlockingQueue</h3><p><code>java.util.concurrent.BlcokingQueue</code> 是一个队列，在进行检索或移除一个元素时，都会等待队列变为非空。挡在添加一个元素时，会等待队列中的可用空间。属于 Java 集合框架中的一部分，主要用于实现 <strong>生产者-消费者模式</strong>。无需担心等待生产者有可用空间或消费者有可用对象。因为在 <code>BlockingQueue</code> 的实现类中都已经进行了处理。主要提供了 <code>ArrayBlockingQueue、LinkedBlockingQueue、PriorityBlockingQueue、SynchronousQueue</code> 等几种实现方式。</p><h3 id="poll-vs-remove" tabindex="-1"><a class="header-anchor" href="#poll-vs-remove" aria-hidden="true">#</a> poll() vs remove()</h3><ul><li><strong>相同点</strong>：均返回队列第一个元素，并在队列中删除返回的对象；</li><li><strong>不同的</strong>：<code>Queue</code> 中没有元素时 <code>poll()</code> 将返回 <code>null</code>，而 <code>remove()</code> 将直接抛出 <code>NoSuchElementException</code> 异常；</li></ul><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h2><p><img src="https://s1.ax1x.com/2020/08/01/a3Hjzt.png" alt="Map" loading="lazy"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// jdk 1.8 中 Map 源码，其中内部接口 Entry&lt;K, V&gt; 对应 Map 的键值对</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">V</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">putAll</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">interface</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token class-name">K</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">V</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">V</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">V</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Map</code> 可分为如下如下几种，以及他们的底层实现分别是：</p><ul><li><strong>HashMap：JDK 1.8 前由 数组 + 链表组成，其中数组是主体，链表则是为了解决哈希冲突而存在；JDK 1.8 后，当链表长度大于阈值（默认为 8）后，链表将转换为红黑树，从而减少搜索时间；</strong></li><li><strong>LinkedHashMap：继承于 HashMap，底层同 HashMap，在它的基础上增加了一条双向链表；</strong></li><li><strong>HashTable：数组 + 链表，数组是 HashMap 的主体，链表则是为了解决哈希冲突而存在；</strong></li><li><strong>TreeMap：红黑树</strong>；</li></ul><h3 id="map-常用方法" tabindex="-1"><a class="header-anchor" href="#map-常用方法" aria-hidden="true">#</a> Map 常用方法</h3><p><code>Map</code> 用于保存具有映射关系的数据，所以通常保存着两组数，一组保存 <code>key</code>，一组保存 <code>value</code> 。两者都可以是任意引用类型的数据，但是 <code>key</code> 不允许重复。接口中通常提供了如下方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><code>void clear()</code></td><td>从映射中移除所有映射关系</td></tr><tr><td><code>boolean containsKey(Object key)</code></td><td>若映射中包含指定 <code>key</code> 的映射关系，返回 <code>true</code></td></tr><tr><td><code>boolean containsValue(Object value)</code></td><td>若映射将一个或多个 <code>key</code> 映射到指定值，返回 <code>true</code></td></tr><tr><td><code>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code></td><td>返回映射中包含的映射关系的 <code>Set</code> 视图</td></tr><tr><td><code>boolean equals(Object o)</code></td><td>比较指定的对象与此映射是否相等</td></tr><tr><td><code>V get(Objcet key)</code></td><td>返回指定建所映射的值；若该映射不含该键的映射关系，则返回 <code>null</code></td></tr><tr><td><code>int hashCode()</code></td><td>返回映射的 <code>hash</code> 值</td></tr><tr><td><code>boolean isEmpty()</code></td><td>若映射为包含 <code>key-value</code> 映射关系，则返回 <code>true</code></td></tr><tr><td><code>Set&lt;K&gt; keySet()</code></td><td>返回映射中包含的键的 <code>Set</code> 视图</td></tr><tr><td><code>V put(K key, V value)</code></td><td>将指定的值与此映射中的指定键关联</td></tr><tr><td><code>void putAll(Map&lt;? extends K, ? extends V&gt; m)</code></td><td>从指定映射中将所有映射关系复制到此映射中</td></tr><tr><td><code>V remove(Object key)</code></td><td>若存在一个键的映射关系，则将其从映射中移除</td></tr><tr><td><code>int size()</code></td><td>返回映射中的 <code>key-value</code> 关系数</td></tr><tr><td><code>Collection&lt;V&gt; values()</code></td><td>返回映射中包含的值的 <code>Collection</code> 视图</td></tr></tbody></table><h3 id="hashmap" tabindex="-1"><a class="header-anchor" href="#hashmap" aria-hidden="true">#</a> HashMap</h3>`,28),h=n("code",null,"Map",-1),m=n("code",null,"HashSet",-1),v=n("code",null,"HashMap",-1),b=n("code",null,"key",-1),g=n("code",null,"HashMap",-1),y=s('<h3 id="linkedhashmap" tabindex="-1"><a class="header-anchor" href="#linkedhashmap" aria-hidden="true">#</a> LinkedHashMap</h3><p><code>HashMap</code> 的一个子类，和 <code>HashMap</code> 最大的区别在于 <code>LinkedHashMap</code> 遍历时是有序的，可以保存插入时的顺序，使用 <code>Iterator</code> 遍历时，先得到的记录肯定是先插入的，也可以在构造时带参数，按照访问次序排序，同时还可以设置根据最近访问的元素放在最前面（即 <code>LRU</code>）；</p><h3 id="treemap-可排序" tabindex="-1"><a class="header-anchor" href="#treemap-可排序" aria-hidden="true">#</a> TreeMap（可排序）</h3>',3),f=n("p",null,[n("code",null,"TreeMap"),a("基于"),n("strong",null,"红黑树（Red-Black tree）实现"),a("。该映射根据"),n("strong",null,"其键的自然顺序进行排序"),a("，或者根据"),n("strong",null,[a("创建映射时提供的 "),n("code",null,"Comparator "),a("进行排序")]),a("，具体取决于使用的构造方法。 "),n("code",null,"TreeMap"),a(" 的基本操作 "),n("code",null,"containsKey"),a("、"),n("code",null,"get"),a("、"),n("code",null,"put "),a("和 "),n("code",null,"remove"),a(" 的时间复杂度是 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"l"),n("mi",null,"o"),n("mi",null,"g"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"log(n)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),a(" 。 另外，"),n("code",null,"TreeMap"),a("是"),n("strong",null,"非同步"),a("的。 它的 "),n("code",null,"iterator "),a("方法返回的"),n("strong",null,"迭代器是 fail-fast"),a(" 的。")],-1),x=s(`<h3 id="weakhashmap" tabindex="-1"><a class="header-anchor" href="#weakhashmap" aria-hidden="true">#</a> WeakHashMap</h3><p>除了自身有对 <code>key</code> 的引用之外，若 <code>key</code> 没有其他引用指向它，此时就会自动丢弃该值。</p><h3 id="hashmap-和-hashtable-的区别" tabindex="-1"><a class="header-anchor" href="#hashmap-和-hashtable-的区别" aria-hidden="true">#</a> HashMap 和 HashTable 的区别</h3><ol><li><code>HashMap</code> 允许 <code>key</code> 和 <code>value</code> 为 <code>null</code>，但 <code>HashTable</code> 不可以；</li><li><code>HashTable</code> 是同步的，但 <code>HashMap</code> 不是，所以 <code>HashMap</code> 适合单线程，<code>HashTable</code> 适合多线程；</li><li>JDK 1.4 中引入 <code>LinkedHashMap</code>，是 <code>HashMap</code> 的子类，要顺序遍历时能轻易从 <code>HashMap</code> 转向 <code>LinkedHashMap</code>，但 <code>HashTable</code> 中的顺序是不可知的；</li><li><code>HashMap</code> 提供对 <code>key</code> 的 <code>Set</code> 进行遍历，因此它是 <code>fail-fast</code> 的，但 <code>HashTable</code> 提供对 <code>key</code> 的 <code>Enumeration</code> 进行遍历，不支持 <code>fail-fast</code>；</li></ol><h3 id="各-map-类型对比" tabindex="-1"><a class="header-anchor" href="#各-map-类型对比" aria-hidden="true">#</a> 各 Map 类型对比</h3><table><thead><tr><th style="text-align:center;">Map类型</th><th style="text-align:center;">使用场景</th><th style="text-align:center;">底层实现</th></tr></thead><tbody><tr><td style="text-align:center;"><code>HashMap</code></td><td style="text-align:center;">快速查询</td><td style="text-align:center;">散列表</td></tr><tr><td style="text-align:center;"><code>LinkedHashMap</code></td><td style="text-align:center;">迭代遍历具有顺序(插入顺序 <code>or </code>最近最少使用)</td><td style="text-align:center;">链表</td></tr><tr><td style="text-align:center;"><code>TreeMap</code></td><td style="text-align:center;">具有排序，唯一可以返回子树的 <code>Map(subMap())</code></td><td style="text-align:center;">红-黑树</td></tr><tr><td style="text-align:center;"><code>WeakHashMap</code></td><td style="text-align:center;">弱键映射，映射之外无引用的键，可以被垃圾回收</td><td style="text-align:center;">散列表</td></tr><tr><td style="text-align:center;"><code>ConcurrentHashMap</code></td><td style="text-align:center;">线程安全的 <code>Map</code></td><td style="text-align:center;">链表</td></tr><tr><td style="text-align:center;"><code>IdentityHashMap</code></td><td style="text-align:center;">用 <code>==</code> 代替 <code>equals()</code> 对键进行排序，专位解决特殊问题</td><td style="text-align:center;">链表</td></tr></tbody></table><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><h3 id="线程安全的集合类" tabindex="-1"><a class="header-anchor" href="#线程安全的集合类" aria-hidden="true">#</a> 线程安全的集合类</h3><ol><li>**Vector：**比 ArrayList 多了个同步化机制，但是效率较低，现在不太建议使用；</li><li><strong>Stack：</strong> 堆栈类，先进后出；</li><li><strong>HashTable：</strong> 相当于 HashMap 多了个线程安全；</li><li><strong>Enumeration:</strong> 枚举，相当于迭代器；</li></ol><h3 id="迭代器-iterator" tabindex="-1"><a class="header-anchor" href="#迭代器-iterator" aria-hidden="true">#</a> 迭代器 Iterator</h3><p><code>Iterator</code> 接口提供了遍历任何 <code>Collection</code> 的接口，我们能够从一个 <code>Collection</code> 中使用迭代器方法来获取迭代器实例，它取代了 Java 集合框架中的 <code>Enumeration</code>，允许我们在迭代过程中移除元素；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> iter <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hashNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 打印遍历元素</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 移除元素</span>
    iter<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function H(M,L){const t=p("RouterLink");return o(),c("div",null,[r,u,k,n("p",null,[a("最基础常用的一种 "),h,a("，无序且以散列表的方式进行存储。"),m,a(" 其实就是基于 "),v,a("，将其 "),b,a(" 作为单个元素进行存储。关于 "),g,a(" 的更多知识，可以参看 "),l(t,{to:"/interview/1.HashMap.html"},{default:d(()=>[a("HashMap 知多少")]),_:1}),a("。")]),y,f,x])}const w=e(i,[["render",H],["__file","collection.html.vue"]]);export{w as default};
