import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as l,f as n,a,b as s}from"./app.7c696d34.js";const c={},i=n(`<h1 id="java" tabindex="-1"><a class="header-anchor" href="#java" aria-hidden="true">#</a> Java</h1><h2 id="基础" tabindex="-1"><a class="header-anchor" href="#基础" aria-hidden="true">#</a> 基础</h2><h3 id="_1-为什么说-java-是跨平台语言" tabindex="-1"><a class="header-anchor" href="#_1-为什么说-java-是跨平台语言" aria-hidden="true">#</a> 1. 为什么说 Java 是跨平台语言？</h3><p><code>JVM</code> 是 <code>Java</code> 跨平台的关键所在。在程序运行时，<code>Java</code> 源代码（后缀为 <code>.java</code>）经过编译器编译成字节码（后缀为 <code>.class</code>）。然后 <code>JVM</code> 负责将字节码翻译成特定平台下的机器码，这样一来计算机就能够识别并运行了。因此 <code>JVM</code> 才是核心，不同系统如 <code>Windows</code>、<code>macOS</code>、<code>Linux</code> 下的 <code>JVM</code> 其实是不同的，但是它们都能够翻译 <code>Java</code> 字节码。因此，<code>Java</code> 才能够实现一次编写（编译），随处运行。</p><h3 id="_2-一个-java-文件中是否可以含有多个类-内部类除外" tabindex="-1"><a class="header-anchor" href="#_2-一个-java-文件中是否可以含有多个类-内部类除外" aria-hidden="true">#</a> 2. 一个 Java 文件中是否可以含有多个类（内部类除外）？</h3><p>一个 <code>Java</code> 文件中是可以包含多个类的，但是有且仅能有一个被 <code>public</code> 所修饰的类，而且 <code>Java</code> 文件名的名称必须和 <code>public</code> 所修饰的类所保持一致。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Sub</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> website<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设有一个 <code>Java</code> 文件内容如上，那么这个 <code>Java</code> 源代码文件的名称应该为 <code>Main</code>，而且它里边可以包含多个类。</p><h3 id="_3-java-的特点" tabindex="-1"><a class="header-anchor" href="#_3-java-的特点" aria-hidden="true">#</a> 3. Java 的特点？</h3><ul><li>面向对象，具有封装、继承、多态三大特性。</li><li>平台独立，<code>Java</code> 通过 <code>Java</code> 虚拟机翻译字节码，所以无论在哪个平台中，一旦进行编译后，都可以在其他平台运行。</li><li>安全可靠。</li><li>支持多线程。</li><li>解释和编译共存。</li><li>健壮性（<code>Java</code> 语言的强类型机制、异常处理、垃圾的自动收集等）。</li></ul><h3 id="_4-java-和-c-的区别" tabindex="-1"><a class="header-anchor" href="#_4-java-和-c-的区别" aria-hidden="true">#</a> 4. Java 和 C++ 的区别？</h3><ul><li><strong>相同点</strong>：两者均为 <code>OOP</code>（面向对象） 语言，均支持 <code>OOP</code> 的三大特性（封装、继承、多态）。</li><li><strong>不同点</strong>： <ul><li><code>Java</code> 不存在指针的概念，所以内存更加安全。</li><li><code>Java</code> 的类只支持单继承（接口可以多继承），<code>C++</code> 的类支持多继承。</li><li><code>Java</code> 中有自动内存管理机制，但是 <code>C++</code> 中需要开发者手动释放内存。</li><li><code>Java</code> 是编译+解释型语言（源代码经编译器编译为字节码后，由 <code>JVM</code> 解释运行），<code>C++</code> 是编译型语言（源代码经编译和链接后生成可执行的二进制代码）。</li><li><code>C++</code> 支持预处理，<code>Java</code> 没有预处理器。</li><li><code>C++</code> 支持运算符重载，<code>Java</code> 不支持运算符重载。</li><li><code>C++</code> 支持默认函数参数，<code>Java</code> 不支持。</li><li><code>C++</code> 支持自动强制类型转换，但会导致程序的不安全；<code>Java</code> 不支持自动强转，必须由开发人员显式强转。</li><li><code>C/C++</code> 中，字符串和字符数组最后均有一个额外的 <code>\\0</code> 标志来表示结束，但 <code>Java</code> 中不存在这一概念。</li></ul></li></ul><h3 id="_5-jdk-和-jre-的区别" tabindex="-1"><a class="header-anchor" href="#_5-jdk-和-jre-的区别" aria-hidden="true">#</a> 5. JDK 和 JRE 的区别？</h3><ul><li><code>JRE</code>：<code>Java Runtime Environment</code>，即 <code>Java</code> 运行时环境，是用来运行已经编译过的 <code>Java</code> 程序所需内容的集合（<code>JVM</code>、<code>Java</code> 类库、<code>Java</code> 命令等），但是不能用来开发新程序。</li><li><code>JDK</code>：<code>Java Development Kit</code>，即 <code>Java</code> 开发工具包，是功能齐全的 <code>Java SDK</code>，包含 <code>JRE</code> 拥有的一切，还有编译器 <code>javac</code> 和其它用于调试和分析的工具：<code>jconsole</code>、<code>jvisualvm</code> 等工具。如果我们想要创建和编译新程序，就必须使用到它。</li></ul><p><img src="https://img-blog.csdnimg.cn/0d97c982162f46ffaade62245d0808d2.png" alt="JRE 和 JDK 关系图" loading="lazy"></p><h3 id="_6-java-程序的编译过程" tabindex="-1"><a class="header-anchor" href="#_6-java-程序的编译过程" aria-hidden="true">#</a> 6. Java 程序的编译过程？</h3><p><img src="https://img-blog.csdnimg.cn/37c4d67b725e4bfabe1964c4011cc408.png" alt="Java 编译过程" loading="lazy"></p><p><code>Java</code> 源代码（<code>xxx.java</code>）经 <code>JDK</code> 中的 <code>javac</code> 命令编译后，成为 <code>JVM</code> 能够理解的 <code>Java</code> 字节码（<code>xxx.class</code>），然后经由 <code>JVM</code> 加载，通过解释 <strong>逐行解释执行</strong>，这就是为什么能经常听见说<strong>Java 是一门编译和解释共存的语言</strong>。</p><p>其中 <code>JVM</code> 是解释 <code>Java</code> 字节码（<code>xxx.class</code>） 的虚拟机，针对不同系统有特定实现，方便一次编译，随处运行，即 <code>Java</code> 语言的平台独立性。</p><h3 id="_7-java-中的数据类型" tabindex="-1"><a class="header-anchor" href="#_7-java-中的数据类型" aria-hidden="true">#</a> 7. Java 中的数据类型？</h3><p><code>Java</code> 中，数据类型主要包括<strong>基本数据类型</strong>和<strong>引用数据类型</strong>两大类。</p><ul><li><strong>基本数据类型</strong></li></ul><p>基本数据类型共有 <code>8</code> 个，共分为 <code>4</code> 个小类，分别是：整数类型（<code>byte/short/int/long</code>）、浮点类型（<code>float/double</code>）、字符类型（<code>char</code>）、布尔类型（<code>boolean</code>）。</p>`,23),o=a("table",null,[a("thead",null,[a("tr",null,[a("th",null,"数据类型"),a("th",null,"bit"),a("th",null,"字节"),a("th",null,"封装类"),a("th",null,"数据范围"),a("th",null,"默认值")])]),a("tbody",null,[a("tr",null,[a("td",null,[a("code",null,"byte")]),a("td",null,"8"),a("td",null,"1"),a("td",null,[a("code",null,"Byte")]),a("td",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"−"),a("msup",null,[a("mn",null,"2"),a("mn",null,"7")])]),a("annotation",{encoding:"application/x-tex"},"-2^7")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"−"),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"7")])])])])])])])])])]),s(" ~ "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mn",null,"2"),a("mn",null,"7")]),a("mo",null,"−"),a("mn",null,"1")]),a("annotation",{encoding:"application/x-tex"},"2^7-1")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"7")])])])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"1")])])])]),a("td",null,[a("code",null,"0")])]),a("tr",null,[a("td",null,[a("code",null,"short")]),a("td",null,"16"),a("td",null,"2"),a("td",null,[a("code",null,"Short")]),a("td",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"−"),a("msup",null,[a("mn",null,"2"),a("mn",null,"15")])]),a("annotation",{encoding:"application/x-tex"},"-2^{15}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"−"),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"15")])])])])])])])])])])]),s(" ~ "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mn",null,"2"),a("mn",null,"15")]),a("mo",null,"−"),a("mn",null,"1")]),a("annotation",{encoding:"application/x-tex"},"2^{15}-1")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"15")])])])])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"1")])])])]),a("td",null,[a("code",null,"0")])]),a("tr",null,[a("td",null,[a("code",null,"char")]),a("td",null,"16"),a("td",null,"2"),a("td",null,[a("code",null,"Character")]),a("td",null,[a("code",null,"\\u0000"),s(" ~ "),a("code",null,"\\uffff"),s("（"),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mn",null,"0")]),a("annotation",{encoding:"application/x-tex"},"0")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"0")])])]),s(" ~ "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mn",null,"65535")]),a("annotation",{encoding:"application/x-tex"},"65535")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"65535")])])]),s("）")]),a("td",null,[a("code",null,"u0000")])]),a("tr",null,[a("td",null,[a("code",null,"int")]),a("td",null,"32"),a("td",null,"4"),a("td",null,[a("code",null,"Integer")]),a("td",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"−"),a("msup",null,[a("mn",null,"2"),a("mn",null,"31")])]),a("annotation",{encoding:"application/x-tex"},"-2^{31}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"−"),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"31")])])])])])])])])])])]),s(" ~ "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mn",null,"2"),a("mn",null,"31")]),a("mo",null,"−"),a("mn",null,"1")]),a("annotation",{encoding:"application/x-tex"},"2^{31}-1")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"31")])])])])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"1")])])])]),a("td",null,[a("code",null,"0")])]),a("tr",null,[a("td",null,[a("code",null,"long")]),a("td",null,"64"),a("td",null,"8"),a("td",null,[a("code",null,"Long")]),a("td",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"−"),a("msup",null,[a("mn",null,"2"),a("mn",null,"63")])]),a("annotation",{encoding:"application/x-tex"},"-2^{63}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"−"),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"63")])])])])])])])])])])]),s(" ~ "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mn",null,"2"),a("mn",null,"63")]),a("mo",null,"−"),a("mn",null,"1")]),a("annotation",{encoding:"application/x-tex"},"2^{63}-1")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"63")])])])])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"1")])])])]),a("td",null,[a("code",null,"0L")])]),a("tr",null,[a("td",null,[a("code",null,"float")]),a("td",null,"32"),a("td",null,"4"),a("td",null,[a("code",null,"Float")]),a("td",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mn",null,"3.4"),a("msup",null,[a("mi",null,"e"),a("mrow",null,[a("mo",null,"−"),a("mn",null,"45")])])]),a("annotation",{encoding:"application/x-tex"},"3.4e^{-45}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8141em"}}),a("span",{class:"mord"},"3.4"),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"e"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"−"),a("span",{class:"mord mtight"},"45")])])])])])])])])])])]),s(" ~ "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mn",null,"1.4"),a("msup",null,[a("mi",null,"e"),a("mn",null,"38")])]),a("annotation",{encoding:"application/x-tex"},"1.4e^{38}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8141em"}}),a("span",{class:"mord"},"1.4"),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"e"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"38")])])])])])])])])])])])]),a("td",null,[a("code",null,"0.0f")])]),a("tr",null,[a("td",null,[a("code",null,"double")]),a("td",null,"64"),a("td",null,"8"),a("td",null,[a("code",null,"Double")]),a("td",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mn",null,"4.9"),a("msup",null,[a("mi",null,"e"),a("mrow",null,[a("mo",null,"−"),a("mn",null,"324")])])]),a("annotation",{encoding:"application/x-tex"},"4.9e^{-324}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8141em"}}),a("span",{class:"mord"},"4.9"),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"e"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"−"),a("span",{class:"mord mtight"},"324")])])])])])])])])])])]),s(" ~ "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mn",null,"1.8"),a("msup",null,[a("mi",null,"e"),a("mn",null,"308")])]),a("annotation",{encoding:"application/x-tex"},"1.8e^{308}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8141em"}}),a("span",{class:"mord"},"1.8"),a("span",{class:"mord"},[a("span",{class:"mord mathnormal"},"e"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"308")])])])])])])])])])])])]),a("td",null,[a("code",null,"0.0D")])]),a("tr",null,[a("td",null,[a("code",null,"boolean")]),a("td",null,"不确定"),a("td",null,"不确定"),a("td",null,[a("code",null,"Boolean")]),a("td",null,[a("code",null,"true"),s(" 或 "),a("code",null,"false")]),a("td",null,[a("code",null,"false")])])])],-1),p=n(`<p><strong>注意：</strong></p><ol><li><code>boolean</code> 一般用 1 <code>bit</code> 来存储，但是具体大小并未规定，JVM 在编译期将 <code>boolean</code> 类型转换为 <code>int</code>，此时 1 代表 <code>true</code>，<code>0</code> 代表 <code>false</code>。此外，JVM 还指出 <code>boolean</code> 数组，但底层是通过 <code>byte</code> 数组来实现;</li><li>使用 <code>long</code> 类型时，需要在后边加上 <code>L</code>，否则将其作为整型解析，可能会导致越界；</li><li>浮点数如果没有明确指定 <code>float</code> 还是 <code>double</code>，统一按 <code>double</code> 处理；</li><li><code>char</code> 是用 <strong>单引号 <code>‘’</code></strong> 将内容括起来，相当于一个整型值（ASCII 值），能够参加表达式运算；而 <code>String</code> 是用 <strong>双引号 <code>“”</code></strong> 将内容括起来，代表的是一个地址值；</li></ol><ul><li><strong>引用类型</strong></li></ul><p>引用类型是对一个对象的引用，根据引用对象的不同，可以将引用类型分为下表中的 <code>3</code> 类。</p><table><thead><tr><th>数据类型</th><th>默认值</th></tr></thead><tbody><tr><td>数组</td><td><code>null</code></td></tr><tr><td>类</td><td><code>null</code></td></tr><tr><td>接口</td><td><code>null</code></td></tr></tbody></table><p><code>Java</code> 中虽然没有指针一说，但引用类型本质上就是通过指针，指向堆中对象所占有的内容空间。</p><h3 id="_8-为什么要有封装类" tabindex="-1"><a class="header-anchor" href="#_8-为什么要有封装类" aria-hidden="true">#</a> 8. 为什么要有封装类？</h3><p><code>Java</code> 是面向对象的语言，其设计理念就是“一切接对象”。但基本数据类型不具备对象的性质，所以<code>Java</code> 中为它们提供了对应的封装类，两者之间的赋值通过<strong>自动装箱</strong>和<strong>自动拆箱</strong>来完成。</p><ul><li><strong>自动装箱</strong>：将基本数据类型装箱为封装类。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 实际调用 Integer.valueOf(12)</span>
<span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>自动拆箱</strong>：将封装类拆箱为基本数据类型。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token comment">// 实际调用 x.intValue()</span>
<span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><strong>基本类型与对应封装类的不同</strong></p><ol><li><p>基本类型只能按值传递，封装类按引用传递。</p></li><li><p><strong>基本类型</strong>会在<strong>栈</strong>中创建，效率较高，但可能存在内存泄露问题。<strong>封装类对象会在堆中创建</strong>，其<strong>引用在栈中创建</strong>。</p></li></ol></li></ul><h3 id="_9-说一下-java-中的访问权限" tabindex="-1"><a class="header-anchor" href="#_9-说一下-java-中的访问权限" aria-hidden="true">#</a> 9. 说一下 Java 中的访问权限？</h3><p><code>Java</code> 主要提供了 <code>3</code> 种访问修饰符 <code>public</code>、<code>protected</code>、<code>private</code>，但实际使用过程中，一共可以形成 <code>4</code> 种访问权限，分别是 <code>public</code>、<code>protected</code>、<code>private</code>、<code>default</code>，其中 <code>default</code> 是不加任何修饰符时的访问权限。关于 <code>4</code> 种修饰符的访问权限的对比如下表，✅ 表示可以访问，❌ 表示不可访问。</p><table><thead><tr><th>修饰符</th><th>当前类</th><th>同一 <code>package</code> 的类</th><th>子类</th><th>其他 <code>package</code> 的类</th></tr></thead><tbody><tr><td><code>public</code></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td><code>protected</code></td><td>✅</td><td>✅</td><td>✅</td><td>❌</td></tr><tr><td><code>default</code></td><td>✅</td><td>✅</td><td>❌</td><td>❌</td></tr><tr><td><code>private</code></td><td>✅</td><td>❌</td><td>❌</td><td>❌</td></tr></tbody></table><h3 id="_10-成员变量和局部变量的区别" tabindex="-1"><a class="header-anchor" href="#_10-成员变量和局部变量的区别" aria-hidden="true">#</a> 10. 成员变量和局部变量的区别？</h3><p><code>Java</code> 中变量主要分为成员变量和局部变量，两者的区别如下。</p><ul><li><strong>成员变量</strong></li></ul><ol><li>成员变量有默认初始值。</li><li>成员变量定义在类的范围中。</li><li><code>static</code> 修饰的成员变量叫类变量，位于方法区，生命周期与当前类相同。</li><li>未被 <code>static</code> 修饰的成员变量叫做实例变量，位于对象所在的堆内存，生命周期与对象相同。</li></ol><ul><li><strong>局部变量</strong></li></ul><ol><li>局部变量无默认初始值。</li><li>局部变量定义在方法的范围中。</li><li>局部变量位于栈内存，作用范围结束，变量空间自动释放。</li></ol><h3 id="_11-x-new-integer-123-和-x-integer-valueof-123-有什么区别" tabindex="-1"><a class="header-anchor" href="#_11-x-new-integer-123-和-x-integer-valueof-123-有什么区别" aria-hidden="true">#</a> 11. x = new Integer(123) 和 x = Integer.valueOf(123) 有什么区别？</h3><ul><li>通过 <code>new</code> 的方式每次都会创建一个新的对象；</li><li>通过 <code>valueOf()</code> 的方式则会优先判断该值是否位于缓存池，如果在的话就直接返回缓存池中的内容，多次调用指向同一个对象的引用。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// false，通过 new 的方式，每次都会创建一个新对象，指向不同对象</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    
<span class="token class-name">Integer</span> m <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// true，通过 valueOf（） 的方式，先到缓存池中查找，存在时则多次调用也是指向同一对象</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,25),d=a("table",null,[a("thead",null,[a("tr",null,[a("th",null,"数据类型"),a("th",null,"默认缓存池")])]),a("tbody",null,[a("tr",null,[a("td",null,[a("code",null,"Byte")]),a("td",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"−"),a("msup",null,[a("mn",null,"2"),a("mn",null,"7")])]),a("annotation",{encoding:"application/x-tex"},"-2^7")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"−"),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"7")])])])])])])])])])]),s(" ~ "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mn",null,"2"),a("mn",null,"7")]),a("mo",null,"−"),a("mn",null,"1")]),a("annotation",{encoding:"application/x-tex"},"2^7-1")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"7")])])])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"1")])])])])]),a("tr",null,[a("td",null,[a("code",null,"Character")]),a("td",null,[a("code",null,"\\u0000"),s(" ~ "),a("code",null,"\\u007F")])]),a("tr",null,[a("td",null,[a("code",null,"Short")]),a("td",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"−"),a("msup",null,[a("mn",null,"2"),a("mn",null,"7")])]),a("annotation",{encoding:"application/x-tex"},"-2^7")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"−"),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"7")])])])])])])])])])]),s(" ~ "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mn",null,"2"),a("mn",null,"7")]),a("mo",null,"−"),a("mn",null,"1")]),a("annotation",{encoding:"application/x-tex"},"2^7-1")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"7")])])])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"1")])])])])]),a("tr",null,[a("td",null,[a("code",null,"Integer")]),a("td",null,[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mo",null,"−"),a("msup",null,[a("mn",null,"2"),a("mn",null,"7")])]),a("annotation",{encoding:"application/x-tex"},"-2^7")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},"−"),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"7")])])])])])])])])])]),s(" ~ "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mn",null,"2"),a("mn",null,"7")]),a("mo",null,"−"),a("mn",null,"1")]),a("annotation",{encoding:"application/x-tex"},"2^7-1")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},"7")])])])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"1")])])])])]),a("tr",null,[a("td",null,[a("code",null,"Boolean")]),a("td",null,[a("code",null,"true"),s(" & "),a("code",null,"false")])])])],-1),r=n(`<h3 id="_12-string、stringbuffer、stringbuilder-的区别" tabindex="-1"><a class="header-anchor" href="#_12-string、stringbuffer、stringbuilder-的区别" aria-hidden="true">#</a> 12. String、StringBuffer、StringBuilder 的区别？</h3><p>主要从三个方面对三者进行对比：</p><table><thead><tr><th></th><th>可变性</th><th>线程安全</th><th>适用场景</th></tr></thead><tbody><tr><td><code>String</code></td><td>不可变</td><td>安全</td><td>操作少量的数据</td></tr><tr><td><code>StringBuffer</code></td><td>可变</td><td>安全，内部使用 <code>synchronized</code> 进行同步</td><td>多线程操作字符串缓冲区下操作大量数据</td></tr><tr><td><code>StringBuilder</code></td><td>可变</td><td>不安全</td><td>单线程操作字符串缓冲区下操作大量数据，性能高于 <code>StringBuffer</code></td></tr></tbody></table><h3 id="_13-为什么说-string-不可变-有什么优点" tabindex="-1"><a class="header-anchor" href="#_13-为什么说-string-不可变-有什么优点" aria-hidden="true">#</a> 13. 为什么说 String 不可变，有什么优点？</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span class="token punctuation">,</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/** The value is used for character storage. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码为 <code>Java 8</code> 中 <code>String</code> 的定义，其底层实际上使用的是字符（<code>char</code>）数组，而且被声明为 <code>final</code>，代表着它<strong>不能被继承</strong>。而且一旦初始化之后就不能再去引用其他数组，这样就保证了 <code>String</code> 的不可变性，也因此 <code>String</code> 是线程安全的。</p><p><code>String</code> 的不可变性主要有以下好处：</p><ol><li><strong>用于缓存 <code>hash</code> 值</strong></li></ol><p>由于 <code>String</code> 的 <code>hash</code> 值被频繁使用，它的不可变性使得 <code>hash</code> 值也不可变，此时只需要进行一次计算。</p><ol start="2"><li><strong>字符串常量池（String Pool）的需要</strong></li></ol><p>如果一个 <code>String</code> 对象已经被创建过，那么就会优先从字符串常量池中获取其引用，其不可变性确保了不同引用指向同一 <code>String</code> 对象。</p><ol start="3"><li><strong>安全性</strong></li></ol><p>我们经常用 <code>String</code> 作为我们方法的参数，其不变性能够保证参数不可变。</p><ol start="4"><li><strong>线程安全</strong></li></ol><p><code>String</code> 的不可变性让它天生 <strong>具备线程安全</strong>，能够在多个线程中方便使用而不用考虑线程安全问题。</p><h3 id="_14-面向对象的三大特征是什么" tabindex="-1"><a class="header-anchor" href="#_14-面向对象的三大特征是什么" aria-hidden="true">#</a> 14. 面向对象的三大特征是什么？</h3><p>面向对象的程序设计方法具有三个基本特征：<strong>封装</strong>、<strong>继承</strong>、<strong>多态</strong>。其中，封装指的是将对象的实现细节隐藏起来，然后通过一些公用方法来暴露该对象的功能；继承是面向对象实现软件复用的重要手段，当子类继承父类后，子类作为一种特殊的父类，将直接获得父类的属性和方法；多态指的是子类对象可以直接赋给父类变量，但运行时依然表现出子类的行为特征，这意味着同一个类型的对象在执行同一个方法时，可能表现出多种行为特征。</p><h3 id="_15-封装有什么意义" tabindex="-1"><a class="header-anchor" href="#_15-封装有什么意义" aria-hidden="true">#</a> 15. 封装有什么意义？</h3><p>封装是为了将对象的状态信息都隐藏到对象内部，让外接无法直接操作和修改。通过封装，可以达到以下目的：</p><ol><li>隐藏类的实现细节</li><li>可进行数据检查，有利于保证对象信息完整性</li><li>便于修改，提高代码可维护性</li></ol><h3 id="_16-谈一谈对多态的理解" tabindex="-1"><a class="header-anchor" href="#_16-谈一谈对多态的理解" aria-hidden="true">#</a> 16. 谈一谈对多态的理解？</h3><p>所谓多态，就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行时才确定。即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变。即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。</p><p>通过使用多态，提高了程序的扩展性，提高了代码复用率。<code>Java</code> 中，实现多态必须具备以下三个必要条件：</p><ol><li><strong>继承</strong></li><li><strong>重写</strong></li><li><strong>向上转型</strong></li></ol><p>也就是说，<code>Java</code> 实现多态要遵循以下原则：当父类对象引用变量引用子类对象时，被引用对象的类型而不是引用变量的类型决定了调用谁的成员方法，但这个被调用的方法必须是在父类中已经定义过的，也就是说必须被子类重写。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fruit</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">float</span> price<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">float</span> price<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;水果的价格是：&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Banana</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;香蕉的价格是：&quot;</span> <span class="token operator">+</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Fruit</span> banana <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Banana</span><span class="token punctuation">;</span>
        <span class="token comment">// 香蕉的价格是：</span>
        banana<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上就是基于继承来实现多态机制的一个实例。</p><h3 id="_17-和-equals-的区别" tabindex="-1"><a class="header-anchor" href="#_17-和-equals-的区别" aria-hidden="true">#</a> 17. == 和 equals 的区别？</h3><p><code>==</code> 对基本类型和引用类型而言，其效果是不一样的。</p><p>如果用 <code>==</code> 来比较基本类型的数据，则比较的是值是否相同。而如果是用来比较引用类型，则比较的是引用是否相同。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;cunyu1943&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;cunyu1943&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;cunyu1943&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">1943</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">1943</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1 <span class="token operator">==</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>equals()</code> 本质上其实就是 <code>==</code>，但是一般我们自己新建的类中的 <code>equals()</code> 方法都是继承自 <code>Object</code> 类，其实现如下。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实就是用 <code>==</code> 来比较两个引用类型是否相同。因此，才会出现以下例子中的情况，这是因为比较的两个引用类型变量所指向的引用是不同的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">Cat</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&quot;年糕&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Cat</span> cat2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&quot;年糕&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cat1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cat2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再来看看另一个例子：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;村雨遥&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str2<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;村雨遥&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开 <code>String</code> 中的 <code>equals()</code> 方法的源码就知道了，原来是 <code>String</code> 对 <code>Object</code> 中的 <code>equals()</code> 方法进行了重写，所以此时两个 <code>String</code> 对象相比较时实质上是比较的它们的内容。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> anotherString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_18-hashcode-和-equals-的关系" tabindex="-1"><a class="header-anchor" href="#_18-hashcode-和-equals-的关系" aria-hidden="true">#</a> 18. hashCode 和 equals 的关系？</h3><p><code>hashCode()</code> 的作用是获取哈希码（也称为散列码），它实际上返回的是一个 <code>Int</code> 类型的整数，而哈希码的作用就是用来确定该对象在哈希表中的索引位置。</p><p><code>hashCode()</code> 位于 <code>Object</code> 类中，也就是说，无论是已有的类还是我们所创建的新类，它们都包含有 <code>hashCode()</code> 方法。</p><p>虽然每个类中都含有 <code>hashCode()</code> 方法，但仅当创建某一个类的散列表（如 <code>HashMap</code>、<code>HashTable</code>、<code>HashSet</code>）时，此时这个类的 <code>hashCode()</code> 方法才生效（作用是确定该类的每个对象在散列表中的位置），其他情况下这个类的 <code>hashCode()</code> 是无效的。</p><p>也就是说，<code>hashCode()</code> 在散列表中才有用，其他情况下没用。而它在散列表中的作用是获取对象的散列码，进而确定该对象处于散列表中的位置。</p><p>在 <code>Java</code> 中，每个对象都可以调用 <code>hashCode()</code> 来获取自己的哈希值，这个哈希值可以类比于我们每个人的指纹信息。通常来说，不存在两个完全相同的指纹，但在 <code>Java</code> 中，有可能两个对象的 <code>hashCode</code> 一致。因此，我们可以利用 <code>hashCode</code> 来做一些简单的判断。</p><ol><li>如果两个对象的 <code>hashCode</code> 不同，那么这两个对象肯定是不同的对象。</li><li>如果两个对象的 <code>hashCode</code> 相同，也不代表这两个一定是同一个对象，它俩有可能是不同的对象。</li><li>如果两个对象相等，那么它俩的 <code>hashCode</code> 一定相同。</li><li>如果两个对象不相等，但他们的 <code>hashCode</code> 有可能相等。</li></ol><p>因此，如果我们重写了 <code>equals(Object obj)</code> 方法，那么一定要重写 <code>hashCode()</code> 方法，确保通过 <code>equals(Object obj) </code> 方法结果为 <code>true</code> 的两个对象具有相同的 <code>hashCode</code>。</p><h3 id="_19-final-关键字有什么作用" tabindex="-1"><a class="header-anchor" href="#_19-final-关键字有什么作用" aria-hidden="true">#</a> 19. final 关键字有什么作用？</h3><p><code>Java</code> 中，<code>final</code> 可以用来修饰类、方法和变量，以下就分别从三个方面来说一下 <code>final</code> 的基础用法。</p><ol><li><strong>修饰类</strong></li></ol><p>当 <code>final</code> 修饰类时，表示该类不能被继承，而且在这个类中的所有成员方法都会被默认指定为 <code>final</code> 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 错误，Dog 类不能再被继承</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Akita</span> <span class="token keyword">extends</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>修饰方法</strong></li></ol><p>当使用 <code>final</code> 修饰方法时，表示该方法不能再被修改，可以防止继承拥有 <code>final</code> 方法的类的子类来覆盖该方法。这里要注意，如果一个类的方法被 <code>private</code> 修饰，那么说明这个方法被默认指定为 <code>final</code> 方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    
    
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;private 方法&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    
    
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;final 方法&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>修饰变量</strong></li></ol><p>如果 <code>final</code> 修饰的是一个基本数据类型的变量，那么该数值一旦经过初始化之后就不能再被更改。而如果 <code>final</code> 修饰的是一个引用类型的变量，则在对其初始化之后就不能再让它指向另一个对象。</p><h3 id="_20-重写和重载的区别" tabindex="-1"><a class="header-anchor" href="#_20-重写和重载的区别" aria-hidden="true">#</a> 20. 重写和重载的区别？</h3><ul><li><strong>重载</strong></li></ul><p>重载是让类以一种统一的方式来处理不同类型数据的一种方式。多个同名函数同时存在，但他们具有不同的参数个数/类型。在 <code>Java</code> 中，重载表现为类中可以创个多个同名方法，但他们的参数和定义有所不同。而且方法的返回值类型可以相同，也可以不相同，不能以返回值类型作为重载函数的区分标准。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;攻击&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;攻击!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>重写</strong></li></ul><p>重写又叫做覆盖，体现了父类和子类之间的多态性，通过对父类的方法重新定义，从而实现不同的功能。但是，子类继承自父类的方法必须具有相同的方法名和参数。而子类如果要用父类中原有的方法，此时可以使用关键字 <code>super</code>，表示引用当前类的父类。最重要的一点，子类中重写的方法的访问修饰权限不得低于父类。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;工作&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Programmer</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;编程&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>区别</strong></li></ul><p>重写体现了多态性，对调用被重载过的方法能提高代码复用率，同一个方法名，只要传递的参数不一样，这个方法就能有不同的功能或返回值。</p><h3 id="_21-接口和抽象类的的区别" tabindex="-1"><a class="header-anchor" href="#_21-接口和抽象类的的区别" aria-hidden="true">#</a> 21. 接口和抽象类的的区别？</h3><h3 id="什么是泛型-泛型擦除又是什么" tabindex="-1"><a class="header-anchor" href="#什么是泛型-泛型擦除又是什么" aria-hidden="true">#</a> 什么是泛型？泛型擦除又是什么？</h3><h3 id="泛型中-extends-和-super-的区别" tabindex="-1"><a class="header-anchor" href="#泛型中-extends-和-super-的区别" aria-hidden="true">#</a> 泛型中 extends 和 super 的区别？</h3><h3 id="反射机制是什么" tabindex="-1"><a class="header-anchor" href="#反射机制是什么" aria-hidden="true">#</a> 反射机制是什么？</h3><h3 id="什么是序列化" tabindex="-1"><a class="header-anchor" href="#什么是序列化" aria-hidden="true">#</a> 什么是序列化？</h3><img src="https://cdn.nlark.com/yuque/0/2022/png/722639/1662990154962-68b8b51b-933b-47c3-8bca-e7b2055dd826.png" style="zoom:25%;"><p>微信搜索『<strong>村雨遥</strong>』或者扫描下面的二维码，即可订阅我的<strong>微信公众号</strong>。</p><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h2><h3 id="java-中有哪些容器" tabindex="-1"><a class="header-anchor" href="#java-中有哪些容器" aria-hidden="true">#</a> Java 中有哪些容器？</h3><h3 id="java-容器中线程安全和线程不安全分别有哪些" tabindex="-1"><a class="header-anchor" href="#java-容器中线程安全和线程不安全分别有哪些" aria-hidden="true">#</a> Java 容器中线程安全和线程不安全分别有哪些？</h3><h3 id="list-和-set-的区别" tabindex="-1"><a class="header-anchor" href="#list-和-set-的区别" aria-hidden="true">#</a> List 和 Set 的区别？</h3><h3 id="map-和-set-的区别" tabindex="-1"><a class="header-anchor" href="#map-和-set-的区别" aria-hidden="true">#</a> Map 和 Set 的区别？</h3><h3 id="arraylist-和-linkedlist-之间的区别" tabindex="-1"><a class="header-anchor" href="#arraylist-和-linkedlist-之间的区别" aria-hidden="true">#</a> ArrayList 和 LinkedList 之间的区别？</h3><h3 id="list-有哪些是线程安全的" tabindex="-1"><a class="header-anchor" href="#list-有哪些是线程安全的" aria-hidden="true">#</a> List 有哪些是线程安全的？</h3><h3 id="copyonwritearraylist-的底层原理" tabindex="-1"><a class="header-anchor" href="#copyonwritearraylist-的底层原理" aria-hidden="true">#</a> CopyOnWriteArrayList 的底层原理？</h3><h3 id="如何得到一个线程安全的-map" tabindex="-1"><a class="header-anchor" href="#如何得到一个线程安全的-map" aria-hidden="true">#</a> 如何得到一个线程安全的 Map?</h3><h3 id="hashmap-的底层实现原理" tabindex="-1"><a class="header-anchor" href="#hashmap-的底层实现原理" aria-hidden="true">#</a> HashMap 的底层实现原理?</h3><h3 id="jdk-1-7-和-jdk-1-8-中-hashmap-有什么变化" tabindex="-1"><a class="header-anchor" href="#jdk-1-7-和-jdk-1-8-中-hashmap-有什么变化" aria-hidden="true">#</a> JDK 1.7 和 JDK 1.8 中 HashMap 有什么变化？</h3><h3 id="hashmap-扩容机制的原理" tabindex="-1"><a class="header-anchor" href="#hashmap-扩容机制的原理" aria-hidden="true">#</a> HashMap 扩容机制的原理？</h3><h3 id="hashmap-中-put-方法的原理" tabindex="-1"><a class="header-anchor" href="#hashmap-中-put-方法的原理" aria-hidden="true">#</a> HashMap 中 Put 方法的原理？</h3><h3 id="hashmap-中的循环链表是如何产生的" tabindex="-1"><a class="header-anchor" href="#hashmap-中的循环链表是如何产生的" aria-hidden="true">#</a> HashMap 中的循环链表是如何产生的？</h3><h3 id="hashmap-和-hashtable-的区别-底层实现是什么" tabindex="-1"><a class="header-anchor" href="#hashmap-和-hashtable-的区别-底层实现是什么" aria-hidden="true">#</a> HashMap 和 HashTable 的区别？底层实现是什么？</h3><h3 id="链表改为红黑树后-阈值为什么设置为-8" tabindex="-1"><a class="header-anchor" href="#链表改为红黑树后-阈值为什么设置为-8" aria-hidden="true">#</a> 链表改为红黑树后，阈值为什么设置为 8？</h3><h3 id="如何解决-hash-冲突-hashmap-中用的哪一种" tabindex="-1"><a class="header-anchor" href="#如何解决-hash-冲突-hashmap-中用的哪一种" aria-hidden="true">#</a> 如何解决 Hash 冲突？HashMap 中用的哪一种？</h3><h3 id="解决-hash-冲突时-为什么不直接使用红黑树-而是需要先用链表-在转换为红黑树" tabindex="-1"><a class="header-anchor" href="#解决-hash-冲突时-为什么不直接使用红黑树-而是需要先用链表-在转换为红黑树" aria-hidden="true">#</a> 解决 Hash 冲突时，为什么不直接使用红黑树，而是需要先用链表，在转换为红黑树？</h3><h3 id="hashmap-中的默认加载因子是多少-为什么是-0-75-而不是其他值" tabindex="-1"><a class="header-anchor" href="#hashmap-中的默认加载因子是多少-为什么是-0-75-而不是其他值" aria-hidden="true">#</a> HashMap 中的默认加载因子是多少？为什么是 0.75，而不是其他值？</h3><h3 id="copyonwritearraylist-的底层原理-1" tabindex="-1"><a class="header-anchor" href="#copyonwritearraylist-的底层原理-1" aria-hidden="true">#</a> CopyOnWriteArrayList 的底层原理？</h3><h3 id="concurrenthashmap-原理-jdk-1-7-和-jdk-1-8-中的区别" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap-原理-jdk-1-7-和-jdk-1-8-中的区别" aria-hidden="true">#</a> ConcurrentHashMap 原理？JDK 1.7 和 JDK 1.8 中的区别？</h3><h3 id="concurrenthashmap-的扩容机制" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap-的扩容机制" aria-hidden="true">#</a> ConcurrentHashMap 的扩容机制？</h3><h3 id="concurrenthashmap-是如何分段分组的" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap-是如何分段分组的" aria-hidden="true">#</a> ConcurrentHashMap 是如何分段分组的？</h3><h3 id="hashmap-和-concurrenthashmap-的区别" tabindex="-1"><a class="header-anchor" href="#hashmap-和-concurrenthashmap-的区别" aria-hidden="true">#</a> HashMap 和 ConcurrentHashMap 的区别？</h3><h3 id="hashset-的底层结构" tabindex="-1"><a class="header-anchor" href="#hashset-的底层结构" aria-hidden="true">#</a> HashSet 的底层结构？</h3><img src="https://cdn.nlark.com/yuque/0/2022/png/722639/1662990154962-68b8b51b-933b-47c3-8bca-e7b2055dd826.png" style="zoom:25%;"><p>微信搜索『<strong>村雨遥</strong>』或者扫描下面的二维码，即可订阅我的<strong>微信公众号</strong>。</p><h2 id="io" tabindex="-1"><a class="header-anchor" href="#io" aria-hidden="true">#</a> IO</h2><h3 id="介绍一下-java-中常见的-io-流" tabindex="-1"><a class="header-anchor" href="#介绍一下-java-中常见的-io-流" aria-hidden="true">#</a> 介绍一下 Java 中常见的 IO 流？</h3><h3 id="给你一个大文件-如何用流打开" tabindex="-1"><a class="header-anchor" href="#给你一个大文件-如何用流打开" aria-hidden="true">#</a> 给你一个大文件，如何用流打开？</h3><h3 id="说一下-nio-的底层原理" tabindex="-1"><a class="header-anchor" href="#说一下-nio-的底层原理" aria-hidden="true">#</a> 说一下 NIO 的底层原理？</h3><h3 id="什么是-java-中的序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#什么是-java-中的序列化和反序列化" aria-hidden="true">#</a> 什么是 Java 中的序列化和反序列化？</h3><h3 id="serializable-接口为什么需要定义-serialversionuid-变量" tabindex="-1"><a class="header-anchor" href="#serializable-接口为什么需要定义-serialversionuid-变量" aria-hidden="true">#</a> Serializable 接口为什么需要定义 serialVersionUID 变量？</h3><img src="https://cdn.nlark.com/yuque/0/2022/png/722639/1662990154962-68b8b51b-933b-47c3-8bca-e7b2055dd826.png" style="zoom:25%;"><p>微信搜索『<strong>村雨遥</strong>』或者扫描下面的二维码，即可订阅我的<strong>微信公众号</strong>。</p><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常" aria-hidden="true">#</a> 异常</h2><h3 id="java-中的异常体系" tabindex="-1"><a class="header-anchor" href="#java-中的异常体系" aria-hidden="true">#</a> Java 中的异常体系？</h3><h3 id="如何解决异常" tabindex="-1"><a class="header-anchor" href="#如何解决异常" aria-hidden="true">#</a> 如何解决异常？</h3><img src="https://cdn.nlark.com/yuque/0/2022/png/722639/1662990154962-68b8b51b-933b-47c3-8bca-e7b2055dd826.png" style="zoom:25%;"><p>微信搜索『<strong>村雨遥</strong>』或者扫描下面的二维码，即可订阅我的<strong>微信公众号</strong>。</p><h2 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm" aria-hidden="true">#</a> JVM</h2><h3 id="什么是字节码-它有什么用" tabindex="-1"><a class="header-anchor" href="#什么是字节码-它有什么用" aria-hidden="true">#</a> 什么是字节码？它有什么用？</h3><h3 id="深拷贝和浅拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝和浅拷贝" aria-hidden="true">#</a> 深拷贝和浅拷贝？</h3><h3 id="jvm-内存结构" tabindex="-1"><a class="header-anchor" href="#jvm-内存结构" aria-hidden="true">#</a> JVM 内存结构？</h3><h3 id="jvm-是怎么运行的" tabindex="-1"><a class="header-anchor" href="#jvm-是怎么运行的" aria-hidden="true">#</a> JVM 是怎么运行的？</h3><h3 id="jvm-中的类加载器有哪些" tabindex="-1"><a class="header-anchor" href="#jvm-中的类加载器有哪些" aria-hidden="true">#</a> JVM 中的类加载器有哪些？</h3><h3 id="jvm-参数有哪些" tabindex="-1"><a class="header-anchor" href="#jvm-参数有哪些" aria-hidden="true">#</a> JVM 参数有哪些？</h3><h3 id="jvm-中的垃圾回收器" tabindex="-1"><a class="header-anchor" href="#jvm-中的垃圾回收器" aria-hidden="true">#</a> JVM 中的垃圾回收器？</h3><h3 id="什么是-stw" tabindex="-1"><a class="header-anchor" href="#什么是-stw" aria-hidden="true">#</a> 什么是 STW？</h3><h3 id="java-程序是如何运行起来的" tabindex="-1"><a class="header-anchor" href="#java-程序是如何运行起来的" aria-hidden="true">#</a> Java 程序是如何运行起来的？</h3><h3 id="说一下对象的实例化过程" tabindex="-1"><a class="header-anchor" href="#说一下对象的实例化过程" aria-hidden="true">#</a> 说一下对象的实例化过程？</h3><h3 id="说一下-java-中的双亲委派模型" tabindex="-1"><a class="header-anchor" href="#说一下-java-中的双亲委派模型" aria-hidden="true">#</a> 说一下 Java 中的双亲委派模型？</h3><h3 id="说一下-java-的垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#说一下-java-的垃圾回收机制" aria-hidden="true">#</a> 说一下 Java 的垃圾回收机制？</h3><h3 id="如何判断对象可以被回收" tabindex="-1"><a class="header-anchor" href="#如何判断对象可以被回收" aria-hidden="true">#</a> 如何判断对象可以被回收？</h3><h3 id="一次完整的-gc-流程是怎样的" tabindex="-1"><a class="header-anchor" href="#一次完整的-gc-流程是怎样的" aria-hidden="true">#</a> 一次完整的 GC 流程是怎样的？</h3><h3 id="jvm-什么时候会触发-gc-如何减少-fullgc" tabindex="-1"><a class="header-anchor" href="#jvm-什么时候会触发-gc-如何减少-fullgc" aria-hidden="true">#</a> JVM 什么时候会触发 GC？如何减少 FullGC？</h3><h3 id="说一下对-gc-算法的了解" tabindex="-1"><a class="header-anchor" href="#说一下对-gc-算法的了解" aria-hidden="true">#</a> 说一下对 GC 算法的了解？</h3><h3 id="内存泄漏和内存溢出的区别" tabindex="-1"><a class="header-anchor" href="#内存泄漏和内存溢出的区别" aria-hidden="true">#</a> 内存泄漏和内存溢出的区别？</h3><h3 id="介绍下四种引用类型" tabindex="-1"><a class="header-anchor" href="#介绍下四种引用类型" aria-hidden="true">#</a> 介绍下四种引用类型？</h3><h3 id="jvm-中有哪些是线程共享区" tabindex="-1"><a class="header-anchor" href="#jvm-中有哪些是线程共享区" aria-hidden="true">#</a> JVM 中有哪些是线程共享区？</h3><h3 id="如何排查-jvm-问题" tabindex="-1"><a class="header-anchor" href="#如何排查-jvm-问题" aria-hidden="true">#</a> 如何排查 JVM 问题？</h3><img src="https://cdn.nlark.com/yuque/0/2022/png/722639/1662990154962-68b8b51b-933b-47c3-8bca-e7b2055dd826.png" style="zoom:25%;"><p>微信搜索『<strong>村雨遥</strong>』或者扫描下面的二维码，即可订阅我的<strong>微信公众号</strong>。</p><h2 id="spring" tabindex="-1"><a class="header-anchor" href="#spring" aria-hidden="true">#</a> Spring</h2><h3 id="什么是-aop" tabindex="-1"><a class="header-anchor" href="#什么是-aop" aria-hidden="true">#</a> 什么是 AOP？</h3><h3 id="什么是-ioc" tabindex="-1"><a class="header-anchor" href="#什么是-ioc" aria-hidden="true">#</a> 什么是 IOC？</h3><h3 id="spring-支持的-bean-作用域" tabindex="-1"><a class="header-anchor" href="#spring-支持的-bean-作用域" aria-hidden="true">#</a> Spring 支持的 Bean 作用域？</h3><h3 id="spring-bean-的生命周期" tabindex="-1"><a class="header-anchor" href="#spring-bean-的生命周期" aria-hidden="true">#</a> Spring Bean 的生命周期？</h3><h3 id="spring-是如何解决循环依赖的" tabindex="-1"><a class="header-anchor" href="#spring-是如何解决循环依赖的" aria-hidden="true">#</a> Spring 是如何解决循环依赖的？</h3><h3 id="autowired-和-resource-的区别" tabindex="-1"><a class="header-anchor" href="#autowired-和-resource-的区别" aria-hidden="true">#</a> @Autowired 和 @Resource 的区别？</h3><h3 id="spring-中-bean-是否是线程安全的" tabindex="-1"><a class="header-anchor" href="#spring-中-bean-是否是线程安全的" aria-hidden="true">#</a> Spring 中 Bean 是否是线程安全的？</h3><h3 id="spring-中的事务传播机制" tabindex="-1"><a class="header-anchor" href="#spring-中的事务传播机制" aria-hidden="true">#</a> Spring 中的事务传播机制？</h3><h3 id="spring-事务在什么时候会失效" tabindex="-1"><a class="header-anchor" href="#spring-事务在什么时候会失效" aria-hidden="true">#</a> Spring 事务在什么时候会失效？</h3><h3 id="spring-事务的实现方式和原理以及隔离级别" tabindex="-1"><a class="header-anchor" href="#spring-事务的实现方式和原理以及隔离级别" aria-hidden="true">#</a> Spring 事务的实现方式和原理以及隔离级别？</h3><h3 id="beanfactory-和-applicationcontext-的区别" tabindex="-1"><a class="header-anchor" href="#beanfactory-和-applicationcontext-的区别" aria-hidden="true">#</a> BeanFactory 和 ApplicationContext 的区别？</h3><h3 id="spring-中-transactional-什么时候会失效" tabindex="-1"><a class="header-anchor" href="#spring-中-transactional-什么时候会失效" aria-hidden="true">#</a> Spring 中 @Transactional 什么时候会失效？</h3><h3 id="spring-容器的启动流程" tabindex="-1"><a class="header-anchor" href="#spring-容器的启动流程" aria-hidden="true">#</a> Spring 容器的启动流程？</h3><h3 id="spring-中的设计模式" tabindex="-1"><a class="header-anchor" href="#spring-中的设计模式" aria-hidden="true">#</a> Spring 中的设计模式？</h3><h3 id="spring-mvc-的工作流程" tabindex="-1"><a class="header-anchor" href="#spring-mvc-的工作流程" aria-hidden="true">#</a> Spring MVC 的工作流程？</h3><h3 id="spring-mvc-中的九大组件" tabindex="-1"><a class="header-anchor" href="#spring-mvc-中的九大组件" aria-hidden="true">#</a> Spring MVC 中的九大组件？</h3><h3 id="spring-mvc-的拦截器" tabindex="-1"><a class="header-anchor" href="#spring-mvc-的拦截器" aria-hidden="true">#</a> Spring MVC 的拦截器？</h3><h3 id="spring-mvc-常用注解" tabindex="-1"><a class="header-anchor" href="#spring-mvc-常用注解" aria-hidden="true">#</a> Spring MVC 常用注解？</h3><h3 id="spring-boot-中的-starter-是什么" tabindex="-1"><a class="header-anchor" href="#spring-boot-中的-starter-是什么" aria-hidden="true">#</a> Spring Boot 中的 Starter 是什么？</h3><h3 id="spring-boot-的启动流程" tabindex="-1"><a class="header-anchor" href="#spring-boot-的启动流程" aria-hidden="true">#</a> Spring Boot 的启动流程？</h3><h3 id="spring-boot-自动装配的过程" tabindex="-1"><a class="header-anchor" href="#spring-boot-自动装配的过程" aria-hidden="true">#</a> Spring Boot 自动装配的过程？</h3><h3 id="spring-boot-中的常用注解及其底层原理" tabindex="-1"><a class="header-anchor" href="#spring-boot-中的常用注解及其底层原理" aria-hidden="true">#</a> Spring Boot 中的常用注解及其底层原理？</h3><h3 id="spring-boot-是如何启动-tomcat-的" tabindex="-1"><a class="header-anchor" href="#spring-boot-是如何启动-tomcat-的" aria-hidden="true">#</a> Spring Boot 是如何启动 Tomcat 的？</h3><h3 id="spring-boot-中配置文件的加载顺序" tabindex="-1"><a class="header-anchor" href="#spring-boot-中配置文件的加载顺序" aria-hidden="true">#</a> Spring Boot 中配置文件的加载顺序？</h3><p>微信搜索『<strong>村雨遥</strong>』或者扫描下面的二维码，即可订阅我的<strong>微信公众号</strong>。</p><img src="https://cdn.nlark.com/yuque/0/2022/png/722639/1662990154962-68b8b51b-933b-47c3-8bca-e7b2055dd826.png" style="zoom:25%;"><h2 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis" aria-hidden="true">#</a> MyBatis</h2><h3 id="mybatis-的优缺点" tabindex="-1"><a class="header-anchor" href="#mybatis-的优缺点" aria-hidden="true">#</a> MyBatis 的优缺点？</h3><h3 id="mybatis-和-hibernate-的区别" tabindex="-1"><a class="header-anchor" href="#mybatis-和-hibernate-的区别" aria-hidden="true">#</a> MyBatis 和 Hibernate 的区别？</h3><h3 id="mybatis-和-jpa-的区别" tabindex="-1"><a class="header-anchor" href="#mybatis-和-jpa-的区别" aria-hidden="true">#</a> MyBatis 和 JPA 的区别？</h3><h3 id="mybatis-输入输出支持的类型有哪些" tabindex="-1"><a class="header-anchor" href="#mybatis-输入输出支持的类型有哪些" aria-hidden="true">#</a> MyBatis 输入输出支持的类型有哪些？</h3><h3 id="mybatis-如何实现一对多关联查询" tabindex="-1"><a class="header-anchor" href="#mybatis-如何实现一对多关联查询" aria-hidden="true">#</a> MyBatis 如何实现一对多关联查询？</h3><h3 id="说一下-mybatis-的缓存机制" tabindex="-1"><a class="header-anchor" href="#说一下-mybatis-的缓存机制" aria-hidden="true">#</a> 说一下 MyBatis 的缓存机制？</h3><h3 id="和-的区别" tabindex="-1"><a class="header-anchor" href="#和-的区别" aria-hidden="true">#</a> #{} 和 \${} 的区别？</h3><p>微信搜索『<strong>村雨遥</strong>』或者扫描下面的二维码，即可订阅我的<strong>微信公众号</strong>。</p><img src="https://cdn.nlark.com/yuque/0/2022/png/722639/1662990154962-68b8b51b-933b-47c3-8bca-e7b2055dd826.png" style="zoom:25%;"><h2 id="多线程并发" tabindex="-1"><a class="header-anchor" href="#多线程并发" aria-hidden="true">#</a> 多线程并发</h2><h3 id="_1-进程和线程的区别" tabindex="-1"><a class="header-anchor" href="#_1-进程和线程的区别" aria-hidden="true">#</a> 1. 进程和线程的区别？</h3><ul><li><strong>进程</strong></li></ul><p>进程指的是运行中的应用程序，每个进程都有着自己的内存空间。比如我们打开微信，那么此时就开启了一个进程，操作系统就会为这个进程分配独立的内存空间。当我们再打开 QQ 时，相当于又启动了一个进程，此时操作系统会给新的进程分配新的内存空间。</p><ul><li><strong>线程</strong></li></ul><p>进程是资源分配的基本单位，而线程则是进程中执行运算的最小单位，即执行处理机调度的基本单位。也就是说，一个程序对应一个进程，而一个进程可以有多个线程。</p><ul><li><strong>区别</strong></li></ul><p>线程是进程的子集，一个进程可以有多个线程，每条线程可以并行执行多个不同的任务。不同进程使用不同的内存空间，但所有的线程共享一片相同的内存空间。</p><h3 id="_2-多线程的实现方式" tabindex="-1"><a class="header-anchor" href="#_2-多线程的实现方式" aria-hidden="true">#</a> 2. 多线程的实现方式？</h3><p>要实现多线程，常用的有以下 <code>4</code> 种方式：</p><ol><li><strong>继承 <code>Thread</code> 类创建线程</strong></li></ol><p><code>Thread</code> 类的本质是实现了 <code>Runnable</code> 接口的一个实例，代表了一个线程的实例。启动线程的唯一方法就是通过 <code>Thread</code> 类中的 <code>start()</code> 方法，<code>start()</code> 方法是一个 <code>native</code> 方法。通过执行 <code>start()</code> 方法，可以启动一个新线程，同时执行 <code>run()</code> 方法。这种实现多线程的方式较为简单，只需要继承 <code>Thread</code> 类，然后重写 <code>run()</code> 方法即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;My new thread run.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>实现 <code>Runnable</code> 接口创建线程</strong></li></ol><p>如果我们的类已经有了父类，那么此时就不能再通过继承 <code>Thread</code> 的方式来创建线程了，那么此时就可以通过实现 <code>Runnable</code> 接口来创建新线程。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">SuperThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;My new thread run.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>基于线程池的方式</strong></li></ol><p>类似于数据库连接，当我们需要线程资源时就就需要每次创建，如果不需要就将其销毁，这样一来就会造成资源的浪费。为了缓解这种情况，就可以使用缓存的策略（即线程池）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建线程池，容量为 taskSize</span>
<span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>taskSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;……&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span><span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>使用 <code>ExecutrorService、Callable&lt;Class&gt;、Future</code> 来实现有返回结果的线程</strong></li></ol><p>如果一个任务有返回值，那么它必须实现 <code>Callable</code> 接口，而类似的，无返回值的任务则必须实现 <code>Runnable</code> 接口。当执行 <code>Callable</code> 任务后，就可以获取一个 <code>Future</code> 对象，然后该对象通过调用 <code>get</code> 来获取 <code>Callable</code> 任务所返回的 <code>Object</code>。最后，结合线程池中接口 <code>ExecutorService</code> 就可以实现返回带结果的多线程任务。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建线程池，容量为 taskSize</span>
<span class="token class-name">ExecutorService</span> pool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>taskSize<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 创建多个带返回值的任务</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Future</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> taskSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Callable</span> callable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCallable</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行任务并获取 Future 对象</span>
    <span class="token class-name">Future</span> future <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>future<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 关闭线程池</span>
pool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取所有并发任务的运行结果，并输出到控制台</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Future</span> future<span class="token operator">:</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="volatile-的作用-其实现原理是啥" tabindex="-1"><a class="header-anchor" href="#volatile-的作用-其实现原理是啥" aria-hidden="true">#</a> volatile 的作用？其实现原理是啥？</h3><h3 id="run-和-start-的区别" tabindex="-1"><a class="header-anchor" href="#run-和-start-的区别" aria-hidden="true">#</a> run() 和 start() 的区别？</h3><h3 id="线程的生命周期及状态" tabindex="-1"><a class="header-anchor" href="#线程的生命周期及状态" aria-hidden="true">#</a> 线程的生命周期及状态？</h3><h3 id="如何实现线程同步" tabindex="-1"><a class="header-anchor" href="#如何实现线程同步" aria-hidden="true">#</a> 如何实现线程同步？</h3><h3 id="java-多线程间的通信方式有哪些" tabindex="-1"><a class="header-anchor" href="#java-多线程间的通信方式有哪些" aria-hidden="true">#</a> Java 多线程间的通信方式有哪些？</h3><h3 id="wait-和-sleep-的区别" tabindex="-1"><a class="header-anchor" href="#wait-和-sleep-的区别" aria-hidden="true">#</a> wait() 和 sleep() 的区别？</h3><h3 id="sleep-、wait-、join-、yield-的区别" tabindex="-1"><a class="header-anchor" href="#sleep-、wait-、join-、yield-的区别" aria-hidden="true">#</a> sleep()、wait()、join()、yield() 的区别？</h3><h3 id="线程什么时候会发生阻塞" tabindex="-1"><a class="header-anchor" href="#线程什么时候会发生阻塞" aria-hidden="true">#</a> 线程什么时候会发生阻塞？</h3><h3 id="synchronized-的底层原理" tabindex="-1"><a class="header-anchor" href="#synchronized-的底层原理" aria-hidden="true">#</a> synchronized 的底层原理？</h3><h3 id="synchronized-和-lock-的区别" tabindex="-1"><a class="header-anchor" href="#synchronized-和-lock-的区别" aria-hidden="true">#</a> synchronized 和 Lock 的区别？</h3><h3 id="说一下你对线程安全的理解" tabindex="-1"><a class="header-anchor" href="#说一下你对线程安全的理解" aria-hidden="true">#</a> 说一下你对线程安全的理解？</h3><h3 id="thread-和-runnable-的区别" tabindex="-1"><a class="header-anchor" href="#thread-和-runnable-的区别" aria-hidden="true">#</a> Thread 和 Runnable 的区别？</h3><h3 id="并发、并行、串行的区别" tabindex="-1"><a class="header-anchor" href="#并发、并行、串行的区别" aria-hidden="true">#</a> 并发、并行、串行的区别？</h3><h3 id="并发的三大特性" tabindex="-1"><a class="header-anchor" href="#并发的三大特性" aria-hidden="true">#</a> 并发的三大特性？</h3><ul><li><strong>原子性</strong></li></ul><p>原子性指一个操作中 <code>CPU</code> 不能中途暂停后再进行调度，即操作不被中断，要么执行完成，要么不执行。最常见的就是银行中的转账操作，账户 <code>A</code> 向账户 <code>B</code> 转账时，<code>A</code> 账户中的钱应该减少，而 <code>B</code> 账户中的钱应该增加 <code>A</code> 账户中所减少的钱，二者两个操作必须同时成功或失败。</p><ul><li><strong>可见性</strong></li></ul><p>当多个线程访问同一个变量时，一个线程如果修改了该变量的值，那么其他线程也应该立马获取到修改后的值。</p><ul><li><strong>有序性</strong></li></ul><p>虚拟机编译代码时，对于改变顺序后不会对程序最终结果造成影响的代码，虚拟机有可能不是按照我们的代码顺序来执行的，而是经过重排序。但实际上，这些代码经过重排序后，虽然对程序的结果没有造成影响，但是有可能会出现线程安全问题。</p><h3 id="说一下乐观锁和悲观锁" tabindex="-1"><a class="header-anchor" href="#说一下乐观锁和悲观锁" aria-hidden="true">#</a> 说一下乐观锁和悲观锁？</h3><ul><li><strong>乐观锁</strong></li></ul><p>对并发间操作所产生的线程安全问题持乐观态度，乐观锁认为线程之间的资源竞争不总是会发生，因此不需要持有锁。将 <strong>比较-替换</strong> 两个动作作为一个原子操作来尝试修改内存中的变量，如果失败就表示发生冲突，此时就会去执行重试逻辑。</p><ul><li><strong>悲观锁</strong></li></ul><p>对于并发间操作所昌盛的线程安全问题持悲观态度，悲观锁认为线程间的资源竞争总是会发生，因此每次在对资源进行操作时都会持有一个独占的锁，类似于 <code>synchronized</code>，知道线程对于资源的操作结束为止。</p><h3 id="公平锁和非公平锁是怎么实现的" tabindex="-1"><a class="header-anchor" href="#公平锁和非公平锁是怎么实现的" aria-hidden="true">#</a> 公平锁和非公平锁是怎么实现的？</h3><h3 id="java-如何避免死锁" tabindex="-1"><a class="header-anchor" href="#java-如何避免死锁" aria-hidden="true">#</a> Java 如何避免死锁？</h3><p>既然想避免死锁，那就先看看死锁是怎么形成的：</p><ol><li>一个资源每次仅能被一个线程所占用</li><li>一个线程在阻塞等待某一资源时，未释放已占有的资源</li><li>一个资源已获得的资源，在未使用完之前，不能被强行剥夺</li><li>如果线程形成首尾相接的循环等待资源关系</li></ol><p>以上就是形成死锁必须要达成的 4 个条件，如果要避免死锁，只需要破坏其中一个条件即可。但前 3 条是作为锁必须要符合的条件，所以只能打破第 4 个条件。</p><p>所以在开发时，可以通过以下的方式来避免死锁：</p><ol><li><strong>注意加锁顺序</strong>，确保每个线程是按相同的顺序进行加锁的</li><li><strong>注意加锁时间</strong>，可以针对设置一个超时时间</li><li><strong>注意死锁检查</strong>，这是一种预防机制，确保能在第一时间发现并进行解决</li></ol><h3 id="说一下-java-中的锁升级" tabindex="-1"><a class="header-anchor" href="#说一下-java-中的锁升级" aria-hidden="true">#</a> 说一下 Java 中的锁升级？</h3><h3 id="如何实现互斥锁" tabindex="-1"><a class="header-anchor" href="#如何实现互斥锁" aria-hidden="true">#</a> 如何实现互斥锁？</h3><h3 id="为什么要使用线程池-说一下常用的参数配置" tabindex="-1"><a class="header-anchor" href="#为什么要使用线程池-说一下常用的参数配置" aria-hidden="true">#</a> 为什么要使用线程池？说一下常用的参数配置？</h3><p>线程池提供了一种限制和管理资源，除此之外每个线程池中还维护了一些基本的统计信息，比如已完成任务的数量等。常用的参数主要有以下 6 个：</p><ol><li><code>corePoolSize</code>：<strong>核心工作线程数</strong>，当先线程池中提交一个任务时，如果线程池中已有的线程数小于 <code>corePoolSize</code>，即便此时存在空闲线程，也将通过创建一个新线程来执行该任务，直至已创建的线程数不小于 <code>corePoolSize</code>。</li><li><code>maximumPoolSize</code>：<strong>最大线程数</strong>，线程池中所允许容纳的最大线程个数。当队列满状态且已创建的线程数小于 <code>maximumPoolSize</code>，那么线程池就会创建新线程来执行任务。但是，对于无界队列，可以忽略该参数。</li><li><code>keepAliveTime</code>：<strong>多余线程存活时间</strong>，当线程池中线程数大于核心线程数时，线程的空闲时间若超过线程存活时间，则该线程被销毁，直至线程池中的线程数不大于核心线程数。</li><li><code>workQueue</code>：<strong>队列</strong>，用于传输和保存等待执行任务的阻塞队列。</li><li><code>threadFactory</code>：<strong>线程创建工厂</strong>，</li><li><code>handler</code>：<strong>拒绝策略</strong>，当线程池和队列都满状态时，此时再加入线程就会执行该策略。</li></ol><h3 id="线程池的底层工作原理" tabindex="-1"><a class="header-anchor" href="#线程池的底层工作原理" aria-hidden="true">#</a> 线程池的底层工作原理？</h3><h3 id="线程池中阻塞队列的作用-为什么要先添加队列而非创建最大线程" tabindex="-1"><a class="header-anchor" href="#线程池中阻塞队列的作用-为什么要先添加队列而非创建最大线程" aria-hidden="true">#</a> 线程池中阻塞队列的作用？为什么要先添加队列而非创建最大线程？</h3><h3 id="线程池线程复用的原理" tabindex="-1"><a class="header-anchor" href="#线程池线程复用的原理" aria-hidden="true">#</a> 线程池线程复用的原理？</h3><h3 id="线程池的拒绝策略" tabindex="-1"><a class="header-anchor" href="#线程池的拒绝策略" aria-hidden="true">#</a> 线程池的拒绝策略？</h3><h3 id="线程池的状态有哪些" tabindex="-1"><a class="header-anchor" href="#线程池的状态有哪些" aria-hidden="true">#</a> 线程池的状态有哪些？</h3><h3 id="reentrantlock-中的公平锁和非公平锁的底层原理" tabindex="-1"><a class="header-anchor" href="#reentrantlock-中的公平锁和非公平锁的底层原理" aria-hidden="true">#</a> ReentrantLock 中的公平锁和非公平锁的底层原理？</h3><h3 id="reentrantlock-中-trylock-和-lock-的区别" tabindex="-1"><a class="header-anchor" href="#reentrantlock-中-trylock-和-lock-的区别" aria-hidden="true">#</a> ReentrantLock 中 tryLock() 和 lock() 的区别？</h3><h3 id="countdownlatch-和-semaphore-的区别以及它们的底层原理" tabindex="-1"><a class="header-anchor" href="#countdownlatch-和-semaphore-的区别以及它们的底层原理" aria-hidden="true">#</a> CountDownLatch 和 Semaphore 的区别以及它们的底层原理？</h3><h3 id="sychronized-中的偏向锁、轻量级锁和重量级锁" tabindex="-1"><a class="header-anchor" href="#sychronized-中的偏向锁、轻量级锁和重量级锁" aria-hidden="true">#</a> Sychronized 中的偏向锁、轻量级锁和重量级锁？</h3><h3 id="sychronized-和-reentrantlock-的区别" tabindex="-1"><a class="header-anchor" href="#sychronized-和-reentrantlock-的区别" aria-hidden="true">#</a> Sychronized 和 ReentrantLock 的区别？</h3><h3 id="说一下-threadlocal" tabindex="-1"><a class="header-anchor" href="#说一下-threadlocal" aria-hidden="true">#</a> 说一下 ThreadLocal ？</h3><img src="https://cdn.nlark.com/yuque/0/2022/png/722639/1662990154962-68b8b51b-933b-47c3-8bca-e7b2055dd826.png" style="zoom:25%;"><p>微信搜索『<strong>村雨遥</strong>』或者扫描下面的二维码，即可订阅我的<strong>微信公众号</strong>。</p><h2 id="分布式" tabindex="-1"><a class="header-anchor" href="#分布式" aria-hidden="true">#</a> 分布式</h2><h3 id="说一下对分布式事务的理解" tabindex="-1"><a class="header-anchor" href="#说一下对分布式事务的理解" aria-hidden="true">#</a> 说一下对分布式事务的理解？</h3><h3 id="分布式系统是如何实现服务治理的" tabindex="-1"><a class="header-anchor" href="#分布式系统是如何实现服务治理的" aria-hidden="true">#</a> 分布式系统是如何实现服务治理的？</h3><h3 id="实现负载均衡的常用算法" tabindex="-1"><a class="header-anchor" href="#实现负载均衡的常用算法" aria-hidden="true">#</a> 实现负载均衡的常用算法？</h3><p>主要有以下四种：</p><ol><li><strong>随机（<code>Random</code>）</strong></li><li><strong>轮训（<code>Round-Robin</code>）</strong></li><li><strong>一致哈希（<code>Consistent-Hash</code>）</strong></li><li><strong>主备（<code>master-slave</code>）</strong></li></ol><h3 id="分布式集群下是如何做到序列号唯一的" tabindex="-1"><a class="header-anchor" href="#分布式集群下是如何做到序列号唯一的" aria-hidden="true">#</a> 分布式集群下是如何做到序列号唯一的？</h3><p>分布式集群下，主要是用 <code>Redis</code> 来生成 <code>ID</code>，而有赖于 <code>Redis</code> 的单线程，所以生成的 <code>ID</code> 也是全局唯一的。可以通过 <code>Redis</code> 中的原子操作 <code>INCR</code> 和 <code>INCRBY</code> 来实现。</p><h3 id="简述-cap-理论" tabindex="-1"><a class="header-anchor" href="#简述-cap-理论" aria-hidden="true">#</a> 简述 CAP 理论？</h3><h3 id="什么是-base-理论" tabindex="-1"><a class="header-anchor" href="#什么是-base-理论" aria-hidden="true">#</a> 什么是 BASE 理论？</h3><h3 id="如何理解-rpc" tabindex="-1"><a class="header-anchor" href="#如何理解-rpc" aria-hidden="true">#</a> 如何理解 RPC？</h3><h3 id="数据一致性模型有哪些" tabindex="-1"><a class="header-anchor" href="#数据一致性模型有哪些" aria-hidden="true">#</a> 数据一致性模型有哪些？</h3><img src="https://cdn.nlark.com/yuque/0/2022/png/722639/1662990154962-68b8b51b-933b-47c3-8bca-e7b2055dd826.png" style="zoom:25%;"><p>微信搜索『<strong>村雨遥</strong>』或者扫描下面的二维码，即可订阅我的<strong>微信公众号</strong>。</p><h2 id="消息队列" tabindex="-1"><a class="header-anchor" href="#消息队列" aria-hidden="true">#</a> 消息队列</h2><h3 id="如何进行产品选型" tabindex="-1"><a class="header-anchor" href="#如何进行产品选型" aria-hidden="true">#</a> 如何进行产品选型？</h3><h3 id="简述-rabbitmq-的架构设计" tabindex="-1"><a class="header-anchor" href="#简述-rabbitmq-的架构设计" aria-hidden="true">#</a> 简述 RabbitMQ 的架构设计？</h3><h3 id="rabbitmq-如何区别消息发送-消息接收" tabindex="-1"><a class="header-anchor" href="#rabbitmq-如何区别消息发送-消息接收" aria-hidden="true">#</a> RabbitMQ 如何区别消息发送？消息接收？</h3><h3 id="rabbitmq-事务消息" tabindex="-1"><a class="header-anchor" href="#rabbitmq-事务消息" aria-hidden="true">#</a> RabbitMQ 事务消息？</h3><h3 id="rabbitmq-死信队列-延时队列" tabindex="-1"><a class="header-anchor" href="#rabbitmq-死信队列-延时队列" aria-hidden="true">#</a> RabbitMQ 死信队列？延时队列？</h3><h3 id="rabbitmq-镜像队列机制" tabindex="-1"><a class="header-anchor" href="#rabbitmq-镜像队列机制" aria-hidden="true">#</a> RabbitMQ 镜像队列机制？</h3><h3 id="kafka-是什么" tabindex="-1"><a class="header-anchor" href="#kafka-是什么" aria-hidden="true">#</a> Kafka 是什么？</h3><h3 id="kafka-为什么吞吐量高" tabindex="-1"><a class="header-anchor" href="#kafka-为什么吞吐量高" aria-hidden="true">#</a> Kafka 为什么吞吐量高？</h3><h3 id="kafka-的-pull-和-push-分别有什么优缺点" tabindex="-1"><a class="header-anchor" href="#kafka-的-pull-和-push-分别有什么优缺点" aria-hidden="true">#</a> Kafka 的 Pull 和 Push 分别有什么优缺点？</h3><h3 id="kafka-中的-isr、ar-分别代表什么-isr-的伸缩指什么" tabindex="-1"><a class="header-anchor" href="#kafka-中的-isr、ar-分别代表什么-isr-的伸缩指什么" aria-hidden="true">#</a> Kafka 中的 ISR、AR 分别代表什么？ISR 的伸缩指什么？</h3><img src="https://cdn.nlark.com/yuque/0/2022/png/722639/1662990154962-68b8b51b-933b-47c3-8bca-e7b2055dd826.png" style="zoom:25%;"><p>微信搜索『<strong>村雨遥</strong>』或者扫描下面的二维码，即可订阅我的<strong>微信公众号</strong>。</p><h1 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h1><h2 id="mysql" tabindex="-1"><a class="header-anchor" href="#mysql" aria-hidden="true">#</a> MySQL</h2><h3 id="关系型数据库和非关系型数据库的区别" tabindex="-1"><a class="header-anchor" href="#关系型数据库和非关系型数据库的区别" aria-hidden="true">#</a> 关系型数据库和非关系型数据库的区别？</h3><h3 id="mysql-语句的执行步骤" tabindex="-1"><a class="header-anchor" href="#mysql-语句的执行步骤" aria-hidden="true">#</a> MySQL 语句的执行步骤？</h3><h3 id="为什么要使用索引" tabindex="-1"><a class="header-anchor" href="#为什么要使用索引" aria-hidden="true">#</a> 为什么要使用索引？</h3><h3 id="索引的基本原理" tabindex="-1"><a class="header-anchor" href="#索引的基本原理" aria-hidden="true">#</a> 索引的基本原理？</h3><h3 id="索引的设计原则" tabindex="-1"><a class="header-anchor" href="#索引的设计原则" aria-hidden="true">#</a> 索引的设计原则？</h3><h3 id="什么是索引覆盖" tabindex="-1"><a class="header-anchor" href="#什么是索引覆盖" aria-hidden="true">#</a> 什么是索引覆盖？</h3><h3 id="什么是最左前缀原则" tabindex="-1"><a class="header-anchor" href="#什么是最左前缀原则" aria-hidden="true">#</a> 什么是最左前缀原则？</h3><h3 id="mysql-中聚簇和非聚簇索引的区别" tabindex="-1"><a class="header-anchor" href="#mysql-中聚簇和非聚簇索引的区别" aria-hidden="true">#</a> MySQL 中聚簇和非聚簇索引的区别？</h3><h3 id="mysql-中的索引结构-各自的优缺点在哪儿" tabindex="-1"><a class="header-anchor" href="#mysql-中的索引结构-各自的优缺点在哪儿" aria-hidden="true">#</a> MySQL 中的索引结构，各自的优缺点在哪儿？</h3><h3 id="事务的基本特性和隔离级别" tabindex="-1"><a class="header-anchor" href="#事务的基本特性和隔离级别" aria-hidden="true">#</a> 事务的基本特性和隔离级别</h3><h3 id="如何对-mysql-进行分库分表" tabindex="-1"><a class="header-anchor" href="#如何对-mysql-进行分库分表" aria-hidden="true">#</a> 如何对 MySQL 进行分库分表？</h3><h3 id="mysql-主从同步原理" tabindex="-1"><a class="header-anchor" href="#mysql-主从同步原理" aria-hidden="true">#</a> MySQL 主从同步原理？</h3><h3 id="myisam-和-innodb-的区别" tabindex="-1"><a class="header-anchor" href="#myisam-和-innodb-的区别" aria-hidden="true">#</a> MyIsam 和 Innodb 的区别？</h3><h3 id="mysql-中的索引类型-它们对数据库的性能有什么影响" tabindex="-1"><a class="header-anchor" href="#mysql-中的索引类型-它们对数据库的性能有什么影响" aria-hidden="true">#</a> MySQL 中的索引类型？它们对数据库的性能有什么影响？</h3><h3 id="explain-语句结构中各个字段分表表示什么" tabindex="-1"><a class="header-anchor" href="#explain-语句结构中各个字段分表表示什么" aria-hidden="true">#</a> Explain 语句结构中各个字段分表表示什么？</h3><h3 id="innodb-是如何实现事务的" tabindex="-1"><a class="header-anchor" href="#innodb-是如何实现事务的" aria-hidden="true">#</a> Innodb 是如何实现事务的？</h3><h3 id="b-树和-b-树的区别-为什么-mysql-使用的是-b-树" tabindex="-1"><a class="header-anchor" href="#b-树和-b-树的区别-为什么-mysql-使用的是-b-树" aria-hidden="true">#</a> B 树和 B+ 树的区别？为什么 MySQL 使用的是 B+ 树？</h3><h3 id="mysql-中锁有哪些类型" tabindex="-1"><a class="header-anchor" href="#mysql-中锁有哪些类型" aria-hidden="true">#</a> MySQL 中锁有哪些类型？</h3><h3 id="如何优化-mysql-慢查询" tabindex="-1"><a class="header-anchor" href="#如何优化-mysql-慢查询" aria-hidden="true">#</a> 如何优化 MySQL 慢查询？</h3><h3 id="mysql-中的-redo-log-和-binlog-的区别" tabindex="-1"><a class="header-anchor" href="#mysql-中的-redo-log-和-binlog-的区别" aria-hidden="true">#</a> MySQL 中的 redo log 和 binlog 的区别？</h3><h3 id="什么是两阶段提交" tabindex="-1"><a class="header-anchor" href="#什么是两阶段提交" aria-hidden="true">#</a> 什么是两阶段提交？</h3><h3 id="mysql-如何保证数据不丢失" tabindex="-1"><a class="header-anchor" href="#mysql-如何保证数据不丢失" aria-hidden="true">#</a> MySQL 如何保证数据不丢失？</h3><h3 id="如何" tabindex="-1"><a class="header-anchor" href="#如何" aria-hidden="true">#</a> 如何</h3><img src="https://cdn.nlark.com/yuque/0/2022/png/722639/1662990154962-68b8b51b-933b-47c3-8bca-e7b2055dd826.png" style="zoom:25%;"><p>微信搜索『<strong>村雨遥</strong>』或者扫描下面的二维码，即可订阅我的<strong>微信公众号</strong>。</p><h2 id="redis" tabindex="-1"><a class="header-anchor" href="#redis" aria-hidden="true">#</a> Redis</h2><h3 id="redis-怎么保证数据不丢失" tabindex="-1"><a class="header-anchor" href="#redis-怎么保证数据不丢失" aria-hidden="true">#</a> Redis 怎么保证数据不丢失？</h3><h3 id="简述-rdb-和-aof-机制的实现原理" tabindex="-1"><a class="header-anchor" href="#简述-rdb-和-aof-机制的实现原理" aria-hidden="true">#</a> 简述 RDB 和 AOF 机制的实现原理？</h3><h3 id="redis-中针对过期键的删除策略" tabindex="-1"><a class="header-anchor" href="#redis-中针对过期键的删除策略" aria-hidden="true">#</a> Redis 中针对过期键的删除策略？</h3><h3 id="redis-的线程模型-单线程为什么这么快" tabindex="-1"><a class="header-anchor" href="#redis-的线程模型-单线程为什么这么快" aria-hidden="true">#</a> Redis 的线程模型?单线程为什么这么快？</h3><h3 id="说一下-redis-的事务实现" tabindex="-1"><a class="header-anchor" href="#说一下-redis-的事务实现" aria-hidden="true">#</a> 说一下 Redis 的事务实现？</h3><h3 id="redis-主从复制的核心原理" tabindex="-1"><a class="header-anchor" href="#redis-主从复制的核心原理" aria-hidden="true">#</a> Redis 主从复制的核心原理？</h3><h3 id="redis-中常用的数据结构-有哪些典型应用场景" tabindex="-1"><a class="header-anchor" href="#redis-中常用的数据结构-有哪些典型应用场景" aria-hidden="true">#</a> Redis 中常用的数据结构，有哪些典型应用场景？</h3><h3 id="redis-中分布式锁是如何实现的" tabindex="-1"><a class="header-anchor" href="#redis-中分布式锁是如何实现的" aria-hidden="true">#</a> Redis 中分布式锁是如何实现的？</h3><h3 id="redis-中的主从同步机制" tabindex="-1"><a class="header-anchor" href="#redis-中的主从同步机制" aria-hidden="true">#</a> Redis 中的主从同步机制？</h3><h3 id="redis-集群方案" tabindex="-1"><a class="header-anchor" href="#redis-集群方案" aria-hidden="true">#</a> Redis 集群方案？</h3><h3 id="redis-中的缓存雪崩、缓存穿透、缓存击穿是什么" tabindex="-1"><a class="header-anchor" href="#redis-中的缓存雪崩、缓存穿透、缓存击穿是什么" aria-hidden="true">#</a> Redis 中的缓存雪崩、缓存穿透、缓存击穿是什么？</h3><h3 id="reids-和-mysql-如何保证数据一致" tabindex="-1"><a class="header-anchor" href="#reids-和-mysql-如何保证数据一致" aria-hidden="true">#</a> Reids 和 MySQL 如何保证数据一致？</h3><h3 id="redis-的持久化机制" tabindex="-1"><a class="header-anchor" href="#redis-的持久化机制" aria-hidden="true">#</a> Redis 的持久化机制？</h3><h3 id="redis-如何设置-key-的过期时间" tabindex="-1"><a class="header-anchor" href="#redis-如何设置-key-的过期时间" aria-hidden="true">#</a> Redis 如何设置 key 的过期时间？</h3><h3 id="redis-如何实现高可用" tabindex="-1"><a class="header-anchor" href="#redis-如何实现高可用" aria-hidden="true">#</a> Redis 如何实现高可用？</h3><img src="https://cdn.nlark.com/yuque/0/2022/png/722639/1662990154962-68b8b51b-933b-47c3-8bca-e7b2055dd826.png" style="zoom:25%;"><p>微信搜索『<strong>村雨遥</strong>』或者扫描下面的二维码，即可订阅我的<strong>微信公众号</strong>。</p><h1 id="计算机知识" tabindex="-1"><a class="header-anchor" href="#计算机知识" aria-hidden="true">#</a> 计算机知识</h1><h2 id="计算机网络" tabindex="-1"><a class="header-anchor" href="#计算机网络" aria-hidden="true">#</a> 计算机网络</h2><h3 id="_1-cookie-和-session-的区别" tabindex="-1"><a class="header-anchor" href="#_1-cookie-和-session-的区别" aria-hidden="true">#</a> 1. cookie 和 session 的区别？</h3><h3 id="什么是认证和授权-如何设计一个权限认证框架" tabindex="-1"><a class="header-anchor" href="#什么是认证和授权-如何设计一个权限认证框架" aria-hidden="true">#</a> 什么是认证和授权？如何设计一个权限认证框架？</h3><h3 id="如果没有-cookie-和-session-是否可以进行身份验证" tabindex="-1"><a class="header-anchor" href="#如果没有-cookie-和-session-是否可以进行身份验证" aria-hidden="true">#</a> 如果没有 cookie 和 session，是否可以进行身份验证？</h3><h3 id="csfr-攻击是什么-如何防止" tabindex="-1"><a class="header-anchor" href="#csfr-攻击是什么-如何防止" aria-hidden="true">#</a> CSFR 攻击是什么？如何防止？</h3><h3 id="什么是-oauth2-0-协议-有哪几种认证方式" tabindex="-1"><a class="header-anchor" href="#什么是-oauth2-0-协议-有哪几种认证方式" aria-hidden="true">#</a> 什么是 OAuth2.0 协议？有哪几种认证方式？</h3><h3 id="session-的工作原理" tabindex="-1"><a class="header-anchor" href="#session-的工作原理" aria-hidden="true">#</a> session 的工作原理？</h3><h3 id="epoll-和-poll-的区别" tabindex="-1"><a class="header-anchor" href="#epoll-和-poll-的区别" aria-hidden="true">#</a> epoll 和 poll 的区别？</h3><h3 id="get-和-post-请求的区别" tabindex="-1"><a class="header-anchor" href="#get-和-post-请求的区别" aria-hidden="true">#</a> get 和 post 请求的区别？</h3><h3 id="常见的网络状态码" tabindex="-1"><a class="header-anchor" href="#常见的网络状态码" aria-hidden="true">#</a> 常见的网络状态码？</h3><h3 id="浏览器发出一个请求和收到相应都经历了哪些步骤" tabindex="-1"><a class="header-anchor" href="#浏览器发出一个请求和收到相应都经历了哪些步骤" aria-hidden="true">#</a> 浏览器发出一个请求和收到相应都经历了哪些步骤？</h3><h3 id="跨域请求是什么-会遇到什么问题-如何解决" tabindex="-1"><a class="header-anchor" href="#跨域请求是什么-会遇到什么问题-如何解决" aria-hidden="true">#</a> 跨域请求是什么？会遇到什么问题？如何解决？</h3><h3 id="tcp-的三次握手和四次挥手" tabindex="-1"><a class="header-anchor" href="#tcp-的三次握手和四次挥手" aria-hidden="true">#</a> TCP 的三次握手和四次挥手？</h3><h2 id="数据结构与算法" tabindex="-1"><a class="header-anchor" href="#数据结构与算法" aria-hidden="true">#</a> 数据结构与算法</h2>`,337),u=[i,o,p,d,r];function h(m,k){return t(),l("div",null,u)}const g=e(c,[["render",h],["__file","javapark.html.vue"]]);export{g as default};
